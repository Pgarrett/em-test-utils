/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-03-04T21:29:44.688-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 4 tests
 * <br>
*  Covered targets: 18
 * <br>
*  Used time: 0h 2m 4s
 * <br>
*  Needed budget for current results: 36%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static String baseUrlOfSut = "http://localhost:5000";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    /**
    * Calls:
    * (200) GET:/dtoSpec.yaml
    */
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/dtoSpec.yaml")
                .then()
                .statusCode(200);
    }
    
    
    /**
    * Calls:
    * (200) POST:/string
    */
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("application/json")
                .contentType("text/plain")
                .body("I8")
                .post(baseUrlOfSut + "/string")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'", containsString("\"I8\""))
                .body("'message'", containsString("Received string"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/array
    */
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"name\": \"PG\", " + 
                    " \"age\": 233, " + 
                    " \"address\": { " + 
                    " \"street\": \"mxGD6bXuk7IrkHP\", " + 
                    " \"country\": \"D8NyCFwuGld\" " + 
                    " } " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"DcMt5Sgwe3\", " + 
                    " \"age\": 371, " + 
                    " \"address\": { " + 
                    " \"street\": \"5NaEl0YcBYf\", " + 
                    " \"country\": \"XFxGcD_RX\", " + 
                    " \"voted\": true " + 
                    " } " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"TS89\", " + 
                    " \"age\": 987, " + 
                    " \"address\": { " + 
                    " \"street\": \"tM0U1C\", " + 
                    " \"country\": \"IDqtX9BWk3QHJ\", " + 
                    " \"voted\": true " + 
                    " } " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"8qZ\", " + 
                    " \"age\": 876, " + 
                    " \"address\": { " + 
                    " \"street\": \"SDWQ53HRjfY2n\", " + 
                    " \"country\": \"yIby0A\", " + 
                    " \"voted\": true " + 
                    " } " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/array")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.size()", equalTo(4))
                .body("'data'[0].'address'.'country'", containsString("D8NyCFwuGld"))
                .body("'data'[0].'address'.'street'", containsString("mxGD6bXuk7IrkHP"))
                .body("'data'[0].'age'", numberMatches(233.0))
                .body("'data'[0].'name'", containsString("PG"))
                .body("'data'[1].'address'.'country'", containsString("XFxGcD_RX"))
                .body("'data'[1].'address'.'street'", containsString("5NaEl0YcBYf"))
                .body("'data'[1].'address'.'voted'", equalTo(true))
                .body("'data'[1].'age'", numberMatches(371.0))
                .body("'data'[1].'name'", containsString("DcMt5Sgwe3"))
                .body("'data'[2].'address'.'country'", containsString("IDqtX9BWk3QHJ"))
                .body("'data'[2].'address'.'street'", containsString("tM0U1C"))
                .body("'data'[2].'address'.'voted'", equalTo(true))
                .body("'data'[2].'age'", numberMatches(987.0))
                .body("'data'[2].'name'", containsString("TS89"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("Received array"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/object
    */
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"M\", " + 
                    " \"age\": 910, " + 
                    " \"address\": { " + 
                    " \"street\": \"rrwyaQ6T1HRC\", " + 
                    " \"country\": \"va2cRAB5jF_2kU_\", " + 
                    " \"voted\": true " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/object")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'address'.'country'", containsString("va2cRAB5jF_2kU_"))
                .body("'data'.'address'.'street'", containsString("rrwyaQ6T1HRC"))
                .body("'data'.'address'.'voted'", equalTo(true))
                .body("'data'.'age'", numberMatches(910.0))
                .body("'data'.'name'", containsString("M"))
                .body("'message'", containsString("Received object"));
    }


}
