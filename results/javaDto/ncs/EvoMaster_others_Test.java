/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  dto.*;
import  java.util.ArrayList;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-10-05T17:49:14.466-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 17 tests
 * <br>
*  Covered targets: 199
 * <br>
*  Used time: 0h 10m 0s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  This file contains test cases that represent failed calls, but not indicative of faults.
*/
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.external.org.restncs.ExternalEvoMasterController("/Users/pgarrett/evoMaster/EMB/jdk_8_maven/cs/rest/artificial/ncs/target/rest-ncs-sut.jar");
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (400) GET:/api/bessj/{n}/{x}
    */
    @Test(timeout = 60000)
    public void test_0_getOnWithQueryParamReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/bessj/-67108273/0.06271037924869849?EMextraParam123=_EM_90_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/bessj/{n}/{x}
    */
    @Test(timeout = 60000)
    public void test_1_getOnBessjReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_50_XYZ_")
                .get(baseUrlOfSut + "/api/bessj/382898060/0.8556398177812201")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/expint/{n}/{x}
    */
    @Test(timeout = 60000)
    public void test_2_getOnExpintReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/expint/1/0.0")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/expint/{n}/{x}
    */
    @Test(timeout = 60000)
    public void test_3_getOnWithQueryParamReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_141_XYZ_")
                .get(baseUrlOfSut + "/api/expint/-1092182479/0.13979212565440924?EMextraParam123=_EM_140_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/expint/{n}/{x}
    */
    @Test(timeout = 60000)
    public void test_4_getOnExpintReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_211_XYZ_")
                .get(baseUrlOfSut + "/api/expint/438/-0.5650087828523559")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/gammq/{a}/{x}
    */
    @Test(timeout = 60000)
    public void test_5_getOnGammqReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/gammq/-1205.9984062842786/2.405816339142485E7")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/gammq/{a}/{x}
    */
    @Test(timeout = 60000)
    public void test_6_getOnGammqReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/gammq/8.988465674311579E307/8.988465674311579E307")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/gammq/{a}/{x}
    */
    @Test(timeout = 60000)
    public void test_7_getOnGammqReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/gammq/1999.8356114639628/-0.44619052241950363")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/gammq/{a}/{x}
    */
    @Test(timeout = 60000)
    public void test_8_getOnWithQueryParamReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/gammq/0.0/0.35482212595457374?EMextraParam123=_EM_1423_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/gammq/{a}/{x}
    */
    @Test(timeout = 60000)
    public void test_9_getOnGammqReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/gammq/3841.4591278253747/3619.757934811853")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/remainder/{a}/{b}
    */
    @Test(timeout = 60000)
    public void test_10_getOnRemaindReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/remainder/150/-108104865")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/remainder/{a}/{b}
    */
    @Test(timeout = 60000)
    public void test_11_getOnRemaindReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/remainder/259741598/864")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/remainder/{a}/{b}
    */
    @Test(timeout = 60000)
    public void test_12_getOnWithQueryParamReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_400_XYZ_")
                .get(baseUrlOfSut + "/api/remainder/-895502384/448?EMextraParam123=_EM_399_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/remainder/{a}/{b}
    */
    @Test(timeout = 60000)
    public void test_13_getOnRemaindReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/remainder/863/655109918")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/expint/{n}/{x}
    */
    @Test(timeout = 60000)
    public void test_14_getOnExpintReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/expint/0/0.0")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/fisher/{m}/{n}/{x}
    */
    @Test(timeout = 60000)
    public void test_15_getOnFisherReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/fisher/129/268435896/146.90213518528373")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/fisher/{m}/{n}/{x}
    */
    @Test(timeout = 60000)
    public void test_16_getOnWithQueryParamReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_9_XYZ_")
                .get(baseUrlOfSut + "/api/fisher/268435890/791/0.21148646288971307?EMextraParam123=_EM_8_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }


}
