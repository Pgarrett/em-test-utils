/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  dto.*;
import  java.util.ArrayList;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-10-05T18:30:26.980-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 1860 tests
 * <br>
*  Covered targets: 4496
 * <br>
*  Used time: 0h 10m 57s
 * <br>
*  Needed budget for current results: 82%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.external.eu.fayder.ExternalEvoMasterController("/Users/pgarrett/evoMaster/EMB/jdk_8_maven/cs/rest/original/restcountries/target/restcountries-sut.jar");
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (500) GET:/rest/v2/alpha
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_0_getOnAlphaShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. eu/fayder/restcountries/v2/rest/CountryRestV2_268_getCountriesJson.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "fields=26MuWfn2&" + 
                    "codes=l5wvD39NZ1WBX%3BKs")
                .then()
                .statusCode(500)// eu/fayder/restcountries/v2/rest/CountryRestV2_268_getCountriesJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'message'", containsString("Internal Server Error"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/alpha
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/alpha?codes=mZ_%3Bpp%5C%3CXUe7ywI5")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0]", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_2_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "fields=_EM_762_XYZ_&" + 
                    "codes=UG")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/all
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_3_getOnV1AllReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("[0].'name'", containsString("Afghanistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".af"))
                .body("[0].'alpha2Code'", containsString("AF"))
                .body("[0].'alpha3Code'", containsString("AFG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("93"))
                .body("[0].'capital'", containsString("Kabul"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("AF", "Afġānistān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(2.60231E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(33.0))
                .body("[0].'latlng'[1]", numberMatches(65.0))
                .body("[0].'demonym'", containsString("Afghan"))
                .body("[0].'area'", numberMatches(652230.0))
                .body("[0].'gini'", numberMatches(27.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:30"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("IRN", "PAK", "TKM", "UZB", "TJK", "CHN"))
                .body("[0].'nativeName'", containsString("افغانستان"))
                .body("[0].'numericCode'", containsString("004"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AFN"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("ps", "uz", "tk"))
                .body("[0].'translations'.'de'", containsString("Afghanistan"))
                .body("[0].'translations'.'es'", containsString("Afganistán"))
                .body("[0].'translations'.'fr'", containsString("Afghanistan"))
                .body("[0].'translations'.'ja'", containsString("アフガニスタン"))
                .body("[0].'translations'.'it'", containsString("Afghanistan"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Åland Islands"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ax"))
                .body("[1].'alpha2Code'", containsString("AX"))
                .body("[1].'alpha3Code'", containsString("ALA"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("358"))
                .body("[1].'capital'", containsString("Mariehamn"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("AX", "Aaland", "Aland", "Ahvenanmaa"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Northern Europe"))
                .body("[1].'population'", numberMatches(28875.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(60.116667))
                .body("[1].'latlng'[1]", numberMatches(19.9))
                .body("[1].'demonym'", containsString("Ålandish"))
                .body("[1].'area'", numberMatches(1580.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+02:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Åland"))
                .body("[1].'numericCode'", containsString("248"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("EUR"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("sv"))
                .body("[1].'translations'.'de'", containsString("Åland"))
                .body("[1].'translations'.'es'", containsString("Alandia"))
                .body("[1].'translations'.'fr'", containsString("Åland"))
                .body("[1].'translations'.'ja'", containsString("オーランド諸島"))
                .body("[1].'translations'.'it'", containsString("Isole Aland"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Albania"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".al"))
                .body("[2].'alpha2Code'", containsString("AL"))
                .body("[2].'alpha3Code'", containsString("ALB"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("355"))
                .body("[2].'capital'", containsString("Tirana"))
                .body("[2].'altSpellings'.size()", equalTo(4))
                .body("[2].'altSpellings'", hasItems("AL", "Shqipëri", "Shqipëria", "Shqipnia"))
                .body("[2].'region'", containsString("Europe"))
                .body("[2].'subregion'", containsString("Southern Europe"))
                .body("[2].'population'", numberMatches(2893005.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(41.0))
                .body("[2].'latlng'[1]", numberMatches(20.0))
                .body("[2].'demonym'", containsString("Albanian"))
                .body("[2].'area'", numberMatches(28748.0))
                .body("[2].'gini'", numberMatches(34.5))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(4))
                .body("[2].'borders'", hasItems("MNE", "GRC", "MKD", "KOS"))
                .body("[2].'nativeName'", containsString("Shqipëria"))
                .body("[2].'numericCode'", containsString("008"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("ALL"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("sq"))
                .body("[2].'translations'.'de'", containsString("Albanien"))
                .body("[2].'translations'.'es'", containsString("Albania"))
                .body("[2].'translations'.'fr'", containsString("Albanie"))
                .body("[2].'translations'.'ja'", containsString("アルバニア"))
                .body("[2].'translations'.'it'", containsString("Albania"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/alpha
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_4_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/alpha?codes=RSD")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0]", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_5_getOnAllReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Puerto Rico")
                .get(baseUrlOfSut + "/rest/v2/all?EMextraParam123=_EM_18_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("[0].'name'", containsString("Afghanistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".af"))
                .body("[0].'alpha2Code'", containsString("AF"))
                .body("[0].'alpha3Code'", containsString("AFG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("93"))
                .body("[0].'capital'", containsString("Kabul"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("AF", "Afġānistān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(2.7657145E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(33.0))
                .body("[0].'latlng'[1]", numberMatches(65.0))
                .body("[0].'demonym'", containsString("Afghan"))
                .body("[0].'area'", numberMatches(652230.0))
                .body("[0].'gini'", numberMatches(27.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:30"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("IRN", "PAK", "TKM", "UZB", "TJK", "CHN"))
                .body("[0].'nativeName'", containsString("افغانستان"))
                .body("[0].'numericCode'", containsString("004"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("AFN"))
                .body("[0].'currencies'[0].'name'", containsString("Afghan afghani"))
                .body("[0].'currencies'[0].'symbol'", containsString("؋"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'[0].'iso639_1'", containsString("ps"))
                .body("[0].'languages'[0].'iso639_2'", containsString("pus"))
                .body("[0].'languages'[0].'name'", containsString("Pashto"))
                .body("[0].'languages'[0].'nativeName'", containsString("پښتو"))
                .body("[0].'languages'[1].'iso639_1'", containsString("uz"))
                .body("[0].'languages'[1].'iso639_2'", containsString("uzb"))
                .body("[0].'languages'[1].'name'", containsString("Uzbek"))
                .body("[0].'languages'[1].'nativeName'", containsString("Oʻzbek"))
                .body("[0].'languages'[2].'iso639_1'", containsString("tk"))
                .body("[0].'languages'[2].'iso639_2'", containsString("tuk"))
                .body("[0].'languages'[2].'name'", containsString("Turkmen"))
                .body("[0].'languages'[2].'nativeName'", containsString("Türkmen"))
                .body("[0].'translations'.'de'", containsString("Afghanistan"))
                .body("[0].'translations'.'es'", containsString("Afganistán"))
                .body("[0].'translations'.'fr'", containsString("Afghanistan"))
                .body("[0].'translations'.'ja'", containsString("アフガニスタン"))
                .body("[0].'translations'.'it'", containsString("Afghanistan"))
                .body("[0].'translations'.'br'", containsString("Afeganistão"))
                .body("[0].'translations'.'pt'", containsString("Afeganistão"))
                .body("[0].'translations'.'nl'", containsString("Afghanistan"))
                .body("[0].'translations'.'hr'", containsString("Afganistan"))
                .body("[0].'translations'.'fa'", containsString("افغانستان"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/afg.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("SAARC"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("South Asian Association for Regional Cooperation"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("AFG"))
                .body("[1].'name'", containsString("Åland Islands"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ax"))
                .body("[1].'alpha2Code'", containsString("AX"))
                .body("[1].'alpha3Code'", containsString("ALA"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("358"))
                .body("[1].'capital'", containsString("Mariehamn"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("AX", "Aaland", "Aland", "Ahvenanmaa"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Northern Europe"))
                .body("[1].'population'", numberMatches(28875.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(60.116667))
                .body("[1].'latlng'[1]", numberMatches(19.9))
                .body("[1].'demonym'", containsString("Ålandish"))
                .body("[1].'area'", numberMatches(1580.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+02:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Åland"))
                .body("[1].'numericCode'", containsString("248"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("EUR"))
                .body("[1].'currencies'[0].'name'", containsString("Euro"))
                .body("[1].'currencies'[0].'symbol'", containsString("€"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'[0].'iso639_1'", containsString("sv"))
                .body("[1].'languages'[0].'iso639_2'", containsString("swe"))
                .body("[1].'languages'[0].'name'", containsString("Swedish"))
                .body("[1].'languages'[0].'nativeName'", containsString("svenska"))
                .body("[1].'translations'.'de'", containsString("Åland"))
                .body("[1].'translations'.'es'", containsString("Alandia"))
                .body("[1].'translations'.'fr'", containsString("Åland"))
                .body("[1].'translations'.'ja'", containsString("オーランド諸島"))
                .body("[1].'translations'.'it'", containsString("Isole Aland"))
                .body("[1].'translations'.'br'", containsString("Ilhas de Aland"))
                .body("[1].'translations'.'pt'", containsString("Ilhas de Aland"))
                .body("[1].'translations'.'nl'", containsString("Ålandeilanden"))
                .body("[1].'translations'.'hr'", containsString("Ålandski otoci"))
                .body("[1].'translations'.'fa'", containsString("جزایر الند"))
                .body("[1].'flag'", containsString("https://restcountries.eu/data/ala.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[0].'acronym'", containsString("EU"))
                .body("[1].'regionalBlocs'[0].'name'", containsString("European Union"))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[1].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[1].'cioc'", containsString(""))
                .body("[2].'name'", containsString("Albania"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".al"))
                .body("[2].'alpha2Code'", containsString("AL"))
                .body("[2].'alpha3Code'", containsString("ALB"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("355"))
                .body("[2].'capital'", containsString("Tirana"))
                .body("[2].'altSpellings'.size()", equalTo(4))
                .body("[2].'altSpellings'", hasItems("AL", "Shqipëri", "Shqipëria", "Shqipnia"))
                .body("[2].'region'", containsString("Europe"))
                .body("[2].'subregion'", containsString("Southern Europe"))
                .body("[2].'population'", numberMatches(2886026.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(41.0))
                .body("[2].'latlng'[1]", numberMatches(20.0))
                .body("[2].'demonym'", containsString("Albanian"))
                .body("[2].'area'", numberMatches(28748.0))
                .body("[2].'gini'", numberMatches(34.5))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(4))
                .body("[2].'borders'", hasItems("MNE", "GRC", "MKD", "KOS"))
                .body("[2].'nativeName'", containsString("Shqipëria"))
                .body("[2].'numericCode'", containsString("008"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'[0].'code'", containsString("ALL"))
                .body("[2].'currencies'[0].'name'", containsString("Albanian lek"))
                .body("[2].'currencies'[0].'symbol'", containsString("L"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'[0].'iso639_1'", containsString("sq"))
                .body("[2].'languages'[0].'iso639_2'", containsString("sqi"))
                .body("[2].'languages'[0].'name'", containsString("Albanian"))
                .body("[2].'languages'[0].'nativeName'", containsString("Shqip"))
                .body("[2].'translations'.'de'", containsString("Albanien"))
                .body("[2].'translations'.'es'", containsString("Albania"))
                .body("[2].'translations'.'fr'", containsString("Albanie"))
                .body("[2].'translations'.'ja'", containsString("アルバニア"))
                .body("[2].'translations'.'it'", containsString("Albania"))
                .body("[2].'translations'.'br'", containsString("Albânia"))
                .body("[2].'translations'.'pt'", containsString("Albânia"))
                .body("[2].'translations'.'nl'", containsString("Albanië"))
                .body("[2].'translations'.'hr'", containsString("Albanija"))
                .body("[2].'translations'.'fa'", containsString("آلبانی"))
                .body("[2].'flag'", containsString("https://restcountries.eu/data/alb.svg"))
                .body("[2].'regionalBlocs'.size()", equalTo(1))
                .body("[2].'regionalBlocs'[0].'acronym'", containsString("CEFTA"))
                .body("[2].'regionalBlocs'[0].'name'", containsString("Central European Free Trade Agreement"))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[2].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[2].'cioc'", containsString("ALB"))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_6_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/alpha?codes=4G")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0]", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_7_getOnAllReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/all?" + 
                    "fields=_EM_97_XYZ_&" + 
                    "EMextraParam123=_EM_98_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_8_getOnAllReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/all?fields=_EM_323_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_9_getOnAllReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_685_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/all?fields=_EM_683_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_10_getOnAllReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Litauen")
                .get(baseUrlOfSut + "/rest/v2/all?" + 
                    "fields=_EM_1074_XYZ_&" + 
                    "EMextraParam123=_EM_1075_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_11_getOnAllReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/all?fields=_EM_1094_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_12_getOnAllReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1174_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/all?" + 
                    "fields=_EM_1172_XYZ_&" + 
                    "EMextraParam123=_EM_1173_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_13_getOnAllReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/all?" + 
                    "fields=_EM_1193_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_14_getOnAllReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/all?fields=_EM_1816_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_15_getOnAllReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Sierra Leone")
                .get(baseUrlOfSut + "/rest/v2/all?fields=_EM_2302_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_16_getOnAllReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/all?" + 
                    "fields=_EM_4034_XYZ_&" + 
                    "EMextraParam123=_EM_4035_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_17_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "fields=_EM_4025_XYZ_&" + 
                    "codes=PR")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_18_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "fields=_EM_8844_XYZ_&" + 
                    "codes=NP")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_19_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "fields=_EM_9717_XYZ_&" + 
                    "codes=sg")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_20_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "fields=_EM_11259_XYZ_&" + 
                    "codes=NO")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_21_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "fields=_EM_12730_XYZ_&" + 
                    "codes=NP")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_22_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "fields=_EM_12814_XYZ_&" + 
                    "codes=Ng")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_23_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "fields=_EM_13491_XYZ_&" + 
                    "codes=NP")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_24_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "fields=_EM_13539_XYZ_&" + 
                    "codes=NP")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_25_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "fields=_EM_15814_XYZ_&" + 
                    "codes=NP")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/alpha
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_26_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_5_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/alpha?codes=CAE10FOWgeA4")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/alpha
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_27_getOnV1AlphaWithQueryParamsEmptyCodesReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/alpha?" + 
                    "codes=&" + 
                    "EMextraParam123=_EM_1317_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/alpha
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_28_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Saint Lucia")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "fields=_EM_19_XYZ_&" + 
                    "codes=OE_ytjs")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/alpha
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_29_getOnV2AlphaWithQueryParamsEmptyCodesReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Tonga")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "fields=QuD&" + 
                    "codes=&" + 
                    "EMextraParam123=_EM_2211_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/alpha
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_30_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/alpha?codes=%7B")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/alpha
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_31_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha?codes=4")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_32_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/alpha/SZ?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("Swaziland"))
                .body("'topLevelDomain'.size()", equalTo(1))
                .body("'topLevelDomain'", hasItems(".sz"))
                .body("'alpha2Code'", containsString("SZ"))
                .body("'alpha3Code'", containsString("SWZ"))
                .body("'callingCodes'.size()", equalTo(1))
                .body("'callingCodes'", hasItems("268"))
                .body("'capital'", containsString("Lobamba"))
                .body("'altSpellings'.size()", equalTo(6))
                .body("'altSpellings'", hasItems("SZ", "weSwatini", "Swatini", "Ngwane", "Kingdom of Swaziland", "Umbuso waseSwatini"))
                .body("'region'", containsString("Africa"))
                .body("'subregion'", containsString("Southern Africa"))
                .body("'population'", numberMatches(1119375.0))
                .body("'latlng'.size()", equalTo(2))
                .body("'latlng'[0]", numberMatches(-26.5))
                .body("'latlng'[1]", numberMatches(31.5))
                .body("'demonym'", containsString("Swazi"))
                .body("'area'", numberMatches(17364.0))
                .body("'gini'", numberMatches(51.5))
                .body("'timezones'.size()", equalTo(1))
                .body("'timezones'", hasItems("UTC+02:00"))
                .body("'borders'.size()", equalTo(2))
                .body("'borders'", hasItems("MOZ", "ZAF"))
                .body("'nativeName'", containsString("Swaziland"))
                .body("'numericCode'", containsString("748"))
                .body("'currencies'.size()", equalTo(1))
                .body("'currencies'", hasItems("SZL"))
                .body("'languages'.size()", equalTo(2))
                .body("'languages'", hasItems("en", "ss"))
                .body("'translations'.'de'", containsString("Swasiland"))
                .body("'translations'.'es'", containsString("Suazilandia"))
                .body("'translations'.'fr'", containsString("Swaziland"))
                .body("'translations'.'ja'", containsString("スワジランド"))
                .body("'translations'.'it'", containsString("Swaziland"))
                .body("'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_33_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/ee?" + 
                    "fields=_EM_3794_XYZ_&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(7))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 4 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_34_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/kh?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("Kazakhstan"))
                .body("[0].'topLevelDomain'.size()", equalTo(2))
                .body("[0].'topLevelDomain'", hasItems(".kz", ".қаз"))
                .body("[0].'alpha2Code'", containsString("KZ"))
                .body("[0].'alpha3Code'", containsString("KAZ"))
                .body("[0].'callingCodes'.size()", equalTo(2))
                .body("[0].'callingCodes'", hasItems("76", "77"))
                .body("[0].'capital'", containsString("Astana"))
                .body("[0].'altSpellings'.size()", equalTo(8))
                .body("[0].'altSpellings'", hasItems("KZ", "Qazaqstan", "Казахстан", "Republic of Kazakhstan", "Қазақстан Республикасы", "Qazaqstan Respublïkası", "Республика Казахстан", "Respublika Kazakhstan"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Central Asia"))
                .body("[0].'population'", numberMatches(1.75412E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(48.0))
                .body("[0].'latlng'[1]", numberMatches(68.0))
                .body("[0].'demonym'", containsString("Kazakhstani"))
                .body("[0].'area'", numberMatches(2724900.0))
                .body("[0].'gini'", numberMatches(29.0))
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC+05:00", "UTC+06:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("CHN", "KGZ", "RUS", "TKM", "UZB"))
                .body("[0].'nativeName'", containsString("Қазақстан"))
                .body("[0].'numericCode'", containsString("398"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("KZT"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("kk", "ru"))
                .body("[0].'translations'.'de'", containsString("Kasachstan"))
                .body("[0].'translations'.'es'", containsString("Kazajistán"))
                .body("[0].'translations'.'fr'", containsString("Kazakhstan"))
                .body("[0].'translations'.'ja'", containsString("カザフスタン"))
                .body("[0].'translations'.'it'", containsString("Kazakistan"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Cambodia"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".kh"))
                .body("[1].'alpha2Code'", containsString("KH"))
                .body("[1].'alpha3Code'", containsString("KHM"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("855"))
                .body("[1].'capital'", containsString("Phnom Penh"))
                .body("[1].'altSpellings'.size()", equalTo(2))
                .body("[1].'altSpellings'", hasItems("KH", "Kingdom of Cambodia"))
                .body("[1].'region'", containsString("Asia"))
                .body("[1].'subregion'", containsString("South-Eastern Asia"))
                .body("[1].'population'", numberMatches(1.5405157E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(13.0))
                .body("[1].'latlng'[1]", numberMatches(105.0))
                .body("[1].'demonym'", containsString("Cambodian"))
                .body("[1].'area'", numberMatches(181035.0))
                .body("[1].'gini'", numberMatches(37.9))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+07:00"))
                .body("[1].'borders'.size()", equalTo(3))
                .body("[1].'borders'", hasItems("LAO", "THA", "VNM"))
                .body("[1].'nativeName'", containsString("Kâmpŭchéa"))
                .body("[1].'numericCode'", containsString("116"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("KHR"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("km"))
                .body("[1].'translations'.'de'", containsString("Kambodscha"))
                .body("[1].'translations'.'es'", containsString("Camboya"))
                .body("[1].'translations'.'fr'", containsString("Cambodge"))
                .body("[1].'translations'.'ja'", containsString("カンボジア"))
                .body("[1].'translations'.'it'", containsString("Cambogia"))
                .body("[1].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_35_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/lu?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'name'", containsString("Bolivia (Plurinational State of)"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bo"))
                .body("[0].'alpha2Code'", containsString("BO"))
                .body("[0].'alpha3Code'", containsString("BOL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("591"))
                .body("[0].'capital'", containsString("Sucre"))
                .body("[0].'altSpellings'.size()", equalTo(8))
                .body("[0].'altSpellings'", hasItems("BO", "Buliwya", "Wuliwya", "Plurinational State of Bolivia", "Estado Plurinacional de Bolivia", "Buliwya Mamallaqta", "Wuliwya Suyu", "Tetã Volívia"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(1.0985059E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-17.0))
                .body("[0].'latlng'[1]", numberMatches(-65.0))
                .body("[0].'demonym'", containsString("Bolivian"))
                .body("[0].'area'", numberMatches(1098581.0))
                .body("[0].'gini'", numberMatches(56.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("ARG", "BRA", "CHL", "PRY", "PER"))
                .body("[0].'nativeName'", containsString("Bolivia"))
                .body("[0].'numericCode'", containsString("068"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("BOB"))
                .body("[0].'currencies'[0].'name'", containsString("Bolivian boliviano"))
                .body("[0].'currencies'[0].'symbol'", containsString("Bs."))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'[0].'iso639_1'", containsString("es"))
                .body("[0].'languages'[0].'iso639_2'", containsString("spa"))
                .body("[0].'languages'[0].'name'", containsString("Spanish"))
                .body("[0].'languages'[0].'nativeName'", containsString("Español"))
                .body("[0].'languages'[1].'iso639_1'", containsString("ay"))
                .body("[0].'languages'[1].'iso639_2'", containsString("aym"))
                .body("[0].'languages'[1].'name'", containsString("Aymara"))
                .body("[0].'languages'[1].'nativeName'", containsString("aymar aru"))
                .body("[0].'languages'[2].'iso639_1'", containsString("qu"))
                .body("[0].'languages'[2].'iso639_2'", containsString("que"))
                .body("[0].'languages'[2].'name'", containsString("Quechua"))
                .body("[0].'languages'[2].'nativeName'", containsString("Runa Simi"))
                .body("[0].'translations'.'de'", containsString("Bolivien"))
                .body("[0].'translations'.'es'", containsString("Bolivia"))
                .body("[0].'translations'.'fr'", containsString("Bolivie"))
                .body("[0].'translations'.'ja'", containsString("ボリビア多民族国"))
                .body("[0].'translations'.'it'", containsString("Bolivia"))
                .body("[0].'translations'.'br'", containsString("Bolívia"))
                .body("[0].'translations'.'pt'", containsString("Bolívia"))
                .body("[0].'translations'.'nl'", containsString("Bolivia"))
                .body("[0].'translations'.'hr'", containsString("Bolivija"))
                .body("[0].'translations'.'fa'", containsString("بولیوی"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/bol.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("USAN"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Union of South American Nations"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(3))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'", hasItems("UNASUR", "UNASUL", "UZAN"))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(4))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("Unión de Naciones Suramericanas", "União de Nações Sul-Americanas", "Unie van Zuid-Amerikaanse Naties", "South American Union"))
                .body("[0].'cioc'", containsString("BOL"))
                .body("[1].'name'", containsString("Luxembourg"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".lu"))
                .body("[1].'alpha2Code'", containsString("LU"))
                .body("[1].'alpha3Code'", containsString("LUX"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("352"))
                .body("[1].'capital'", containsString("Luxembourg"))
                .body("[1].'altSpellings'.size()", equalTo(5))
                .body("[1].'altSpellings'", hasItems("LU", "Grand Duchy of Luxembourg", "Grand-Duché de Luxembourg", "Großherzogtum Luxemburg", "Groussherzogtum Lëtzebuerg"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Western Europe"))
                .body("[1].'population'", numberMatches(576200.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(49.75))
                .body("[1].'latlng'[1]", numberMatches(6.16666666))
                .body("[1].'demonym'", containsString("Luxembourger"))
                .body("[1].'area'", numberMatches(2586.0))
                .body("[1].'gini'", numberMatches(30.8))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+01:00"))
                .body("[1].'borders'.size()", equalTo(3))
                .body("[1].'borders'", hasItems("BEL", "FRA", "DEU"))
                .body("[1].'nativeName'", containsString("Luxembourg"))
                .body("[1].'numericCode'", containsString("442"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("EUR"))
                .body("[1].'currencies'[0].'name'", containsString("Euro"))
                .body("[1].'currencies'[0].'symbol'", containsString("€"))
                .body("[1].'languages'.size()", equalTo(3))
                .body("[1].'languages'[0].'iso639_1'", containsString("fr"))
                .body("[1].'languages'[0].'iso639_2'", containsString("fra"))
                .body("[1].'languages'[0].'name'", containsString("French"))
                .body("[1].'languages'[0].'nativeName'", containsString("français"))
                .body("[1].'languages'[1].'iso639_1'", containsString("de"))
                .body("[1].'languages'[1].'iso639_2'", containsString("deu"))
                .body("[1].'languages'[1].'name'", containsString("German"))
                .body("[1].'languages'[1].'nativeName'", containsString("Deutsch"))
                .body("[1].'languages'[2].'iso639_1'", containsString("lb"))
                .body("[1].'languages'[2].'iso639_2'", containsString("ltz"))
                .body("[1].'languages'[2].'name'", containsString("Luxembourgish"))
                .body("[1].'languages'[2].'nativeName'", containsString("Lëtzebuergesch"))
                .body("[1].'translations'.'de'", containsString("Luxemburg"))
                .body("[1].'translations'.'es'", containsString("Luxemburgo"))
                .body("[1].'translations'.'fr'", containsString("Luxembourg"))
                .body("[1].'translations'.'ja'", containsString("ルクセンブルク"))
                .body("[1].'translations'.'it'", containsString("Lussemburgo"))
                .body("[1].'translations'.'br'", containsString("Luxemburgo"))
                .body("[1].'translations'.'pt'", containsString("Luxemburgo"))
                .body("[1].'translations'.'nl'", containsString("Luxemburg"))
                .body("[1].'translations'.'hr'", containsString("Luksemburg"))
                .body("[1].'translations'.'fa'", containsString("لوکزامبورگ"))
                .body("[1].'flag'", containsString("https://restcountries.eu/data/lux.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[0].'acronym'", containsString("EU"))
                .body("[1].'regionalBlocs'[0].'name'", containsString("European Union"))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[1].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[1].'cioc'", containsString("LUX"))
                .body("[2].'name'", containsString("Saint Lucia"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".lc"))
                .body("[2].'alpha2Code'", containsString("LC"))
                .body("[2].'alpha3Code'", containsString("LCA"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("1"))
                .body("[2].'capital'", containsString("Castries"))
                .body("[2].'altSpellings'.size()", equalTo(1))
                .body("[2].'altSpellings'", hasItems("LC"))
                .body("[2].'region'", containsString("Americas"))
                .body("[2].'subregion'", containsString("Caribbean"))
                .body("[2].'population'", numberMatches(186000.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(13.88333333))
                .body("[2].'latlng'[1]", numberMatches(-60.96666666))
                .body("[2].'demonym'", containsString("Saint Lucian"))
                .body("[2].'area'", numberMatches(616.0))
                .body("[2].'gini'", numberMatches(42.6))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC-04:00"))
                .body("[2].'borders'.size()", equalTo(0))
                .body("[2].'nativeName'", containsString("Saint Lucia"))
                .body("[2].'numericCode'", containsString("662"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'[0].'code'", containsString("XCD"))
                .body("[2].'currencies'[0].'name'", containsString("East Caribbean dollar"))
                .body("[2].'currencies'[0].'symbol'", containsString("$"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'[0].'iso639_1'", containsString("en"))
                .body("[2].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[2].'languages'[0].'name'", containsString("English"))
                .body("[2].'languages'[0].'nativeName'", containsString("English"))
                .body("[2].'translations'.'de'", containsString("Saint Lucia"))
                .body("[2].'translations'.'es'", containsString("Santa Lucía"))
                .body("[2].'translations'.'fr'", containsString("Saint-Lucie"))
                .body("[2].'translations'.'ja'", containsString("セントルシア"))
                .body("[2].'translations'.'it'", containsString("Santa Lucia"))
                .body("[2].'translations'.'br'", containsString("Santa Lúcia"))
                .body("[2].'translations'.'pt'", containsString("Santa Lúcia"))
                .body("[2].'translations'.'nl'", containsString("Saint Lucia"))
                .body("[2].'translations'.'hr'", containsString("Sveta Lucija"))
                .body("[2].'translations'.'fa'", containsString("سنت لوسیا"))
                .body("[2].'flag'", containsString("https://restcountries.eu/data/lca.svg"))
                .body("[2].'regionalBlocs'.size()", equalTo(1))
                .body("[2].'regionalBlocs'[0].'acronym'", containsString("CARICOM"))
                .body("[2].'regionalBlocs'[0].'name'", containsString("Caribbean Community"))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[2].'regionalBlocs'[0].'otherNames'.size()", equalTo(3))
                .body("[2].'regionalBlocs'[0].'otherNames'", hasItems("Comunidad del Caribe", "Communauté Caribéenne", "Caribische Gemeenschap"))
                .body("[2].'cioc'", containsString("LCA"))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_36_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/alpha/PL")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("Poland"))
                .body("'topLevelDomain'.size()", equalTo(1))
                .body("'topLevelDomain'", hasItems(".pl"))
                .body("'alpha2Code'", containsString("PL"))
                .body("'alpha3Code'", containsString("POL"))
                .body("'callingCodes'.size()", equalTo(1))
                .body("'callingCodes'", hasItems("48"))
                .body("'capital'", containsString("Warsaw"))
                .body("'altSpellings'.size()", equalTo(3))
                .body("'altSpellings'", hasItems("PL", "Republic of Poland", "Rzeczpospolita Polska"))
                .body("'region'", containsString("Europe"))
                .body("'subregion'", containsString("Eastern Europe"))
                .body("'population'", numberMatches(3.8437239E7))
                .body("'latlng'.size()", equalTo(2))
                .body("'latlng'[0]", numberMatches(52.0))
                .body("'latlng'[1]", numberMatches(20.0))
                .body("'demonym'", containsString("Polish"))
                .body("'area'", numberMatches(312679.0))
                .body("'gini'", numberMatches(34.1))
                .body("'timezones'.size()", equalTo(1))
                .body("'timezones'", hasItems("UTC+01:00"))
                .body("'borders'.size()", equalTo(7))
                .body("'borders'", hasItems("BLR", "CZE", "DEU", "LTU", "RUS", "SVK", "UKR"))
                .body("'nativeName'", containsString("Polska"))
                .body("'numericCode'", containsString("616"))
                .body("'currencies'.size()", equalTo(1))
                .body("'currencies'[0].'code'", containsString("PLN"))
                .body("'currencies'[0].'name'", containsString("Polish złoty"))
                .body("'currencies'[0].'symbol'", containsString("zł"))
                .body("'languages'.size()", equalTo(1))
                .body("'languages'[0].'iso639_1'", containsString("pl"))
                .body("'languages'[0].'iso639_2'", containsString("pol"))
                .body("'languages'[0].'name'", containsString("Polish"))
                .body("'languages'[0].'nativeName'", containsString("język polski"))
                .body("'translations'.'de'", containsString("Polen"))
                .body("'translations'.'es'", containsString("Polonia"))
                .body("'translations'.'fr'", containsString("Pologne"))
                .body("'translations'.'ja'", containsString("ポーランド"))
                .body("'translations'.'it'", containsString("Polonia"))
                .body("'translations'.'br'", containsString("Polônia"))
                .body("'translations'.'pt'", containsString("Polónia"))
                .body("'translations'.'nl'", containsString("Polen"))
                .body("'translations'.'hr'", containsString("Poljska"))
                .body("'translations'.'fa'", containsString("لهستان"))
                .body("'flag'", containsString("https://restcountries.eu/data/pol.svg"))
                .body("'regionalBlocs'.size()", equalTo(1))
                .body("'regionalBlocs'[0].'acronym'", containsString("EU"))
                .body("'regionalBlocs'[0].'name'", containsString("European Union"))
                .body("'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("'cioc'", containsString("POL"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_37_getOnV2AlphaWithQueryParamEmptyFieldsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha/PG?fields=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("Papua New Guinea"))
                .body("'topLevelDomain'.size()", equalTo(1))
                .body("'topLevelDomain'", hasItems(".pg"))
                .body("'alpha2Code'", containsString("PG"))
                .body("'alpha3Code'", containsString("PNG"))
                .body("'callingCodes'.size()", equalTo(1))
                .body("'callingCodes'", hasItems("675"))
                .body("'capital'", containsString("Port Moresby"))
                .body("'altSpellings'.size()", equalTo(3))
                .body("'altSpellings'", hasItems("PG", "Independent State of Papua New Guinea", "Independen Stet bilong Papua Niugini"))
                .body("'region'", containsString("Oceania"))
                .body("'subregion'", containsString("Melanesia"))
                .body("'population'", numberMatches(8083700.0))
                .body("'latlng'.size()", equalTo(2))
                .body("'latlng'[0]", numberMatches(-6.0))
                .body("'latlng'[1]", numberMatches(147.0))
                .body("'demonym'", containsString("Papua New Guinean"))
                .body("'area'", numberMatches(462840.0))
                .body("'gini'", numberMatches(50.9))
                .body("'timezones'.size()", equalTo(1))
                .body("'timezones'", hasItems("UTC+10:00"))
                .body("'borders'.size()", equalTo(1))
                .body("'borders'", hasItems("IDN"))
                .body("'nativeName'", containsString("Papua Niugini"))
                .body("'numericCode'", containsString("598"))
                .body("'currencies'.size()", equalTo(1))
                .body("'currencies'[0].'code'", containsString("PGK"))
                .body("'currencies'[0].'name'", containsString("Papua New Guinean kina"))
                .body("'currencies'[0].'symbol'", containsString("K"))
                .body("'languages'.size()", equalTo(1))
                .body("'languages'[0].'iso639_1'", containsString("en"))
                .body("'languages'[0].'iso639_2'", containsString("eng"))
                .body("'languages'[0].'name'", containsString("English"))
                .body("'languages'[0].'nativeName'", containsString("English"))
                .body("'translations'.'de'", containsString("Papua-Neuguinea"))
                .body("'translations'.'es'", containsString("Papúa Nueva Guinea"))
                .body("'translations'.'fr'", containsString("Papouasie-Nouvelle-Guinée"))
                .body("'translations'.'ja'", containsString("パプアニューギニア"))
                .body("'translations'.'it'", containsString("Papua Nuova Guinea"))
                .body("'translations'.'br'", containsString("Papua Nova Guiné"))
                .body("'translations'.'pt'", containsString("Papua Nova Guiné"))
                .body("'translations'.'nl'", containsString("Papoea-Nieuw-Guinea"))
                .body("'translations'.'hr'", containsString("Papua Nova Gvineja"))
                .body("'translations'.'fa'", containsString("پاپوآ گینه نو"))
                .body("'flag'", containsString("https://restcountries.eu/data/png.svg"))
                .body("'regionalBlocs'.size()", equalTo(0))
                .body("'cioc'", containsString("PNG"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_38_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/alpha/SGs?" + 
                    "fields=sw&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_39_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_7_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/currency/SLL")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Sierra Leone"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sl"))
                .body("[0].'alpha2Code'", containsString("SL"))
                .body("[0].'alpha3Code'", containsString("SLE"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("232"))
                .body("[0].'capital'", containsString("Freetown"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("SL", "Republic of Sierra Leone"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(6453000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(8.5))
                .body("[0].'latlng'[1]", numberMatches(-11.5))
                .body("[0].'demonym'", containsString("Sierra Leonean"))
                .body("[0].'area'", numberMatches(71740.0))
                .body("[0].'gini'", numberMatches(42.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("GIN", "LBR"))
                .body("[0].'nativeName'", containsString("Sierra Leone"))
                .body("[0].'numericCode'", containsString("694"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("SLL"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Sierra Leone"))
                .body("[0].'translations'.'es'", containsString("Sierra Leone"))
                .body("[0].'translations'.'fr'", containsString("Sierra Leone"))
                .body("[0].'translations'.'ja'", containsString("シエラレオネ"))
                .body("[0].'translations'.'it'", containsString("Sierra Leone"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_40_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/bo?" + 
                    "fields=_EM_3794_XYZ_&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_41_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/zhongguo?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("China"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cn"))
                .body("[0].'alpha2Code'", containsString("CN"))
                .body("[0].'alpha3Code'", containsString("CHN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("86"))
                .body("[0].'capital'", containsString("Beijing"))
                .body("[0].'altSpellings'.size()", equalTo(7))
                .body("[0].'altSpellings'", hasItems("CN", "Zhōngguó", "Zhongguo", "Zhonghua", "People's Republic of China", "中华人民共和国", "Zhōnghuá Rénmín Gònghéguó"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Eastern Asia"))
                .body("[0].'population'", numberMatches(1.37159E9))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(35.0))
                .body("[0].'latlng'[1]", numberMatches(105.0))
                .body("[0].'demonym'", containsString("Chinese"))
                .body("[0].'area'", numberMatches(9640011.0))
                .body("[0].'gini'", numberMatches(47.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(15))
                .body("[0].'borders'", hasItems("AFG", "BTN", "MMR", "HKG", "IND", "KAZ", "PRK", "KGZ", "LAO", "MAC", "MNG", "PAK", "RUS", "TJK", "VNM"))
                .body("[0].'nativeName'", containsString("中国"))
                .body("[0].'numericCode'", containsString("156"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("CNY"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("zh"))
                .body("[0].'translations'.'de'", containsString("China"))
                .body("[0].'translations'.'es'", containsString("China"))
                .body("[0].'translations'.'fr'", containsString("Chine"))
                .body("[0].'translations'.'ja'", containsString("中国"))
                .body("[0].'translations'.'it'", containsString("Cina"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_42_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/curacao?" + 
                    "fields=HZ&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_43_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/lt")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(9))
                .body("[0].'name'", containsString("Gibraltar"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gi"))
                .body("[0].'alpha2Code'", containsString("GI"))
                .body("[0].'alpha3Code'", containsString("GIB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("350"))
                .body("[0].'capital'", containsString("Gibraltar"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("GI"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(32734.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(36.13333333))
                .body("[0].'latlng'[1]", numberMatches(-5.35))
                .body("[0].'demonym'", containsString("Gibraltar"))
                .body("[0].'area'", numberMatches(6.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("ESP"))
                .body("[0].'nativeName'", containsString("Gibraltar"))
                .body("[0].'numericCode'", containsString("292"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("GIP"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Gibraltar"))
                .body("[0].'translations'.'es'", containsString("Gibraltar"))
                .body("[0].'translations'.'fr'", containsString("Gibraltar"))
                .body("[0].'translations'.'ja'", containsString("ジブラルタル"))
                .body("[0].'translations'.'it'", containsString("Gibilterra"))
                .body("[0].'relevance'", containsString("0.5"))
                .body("[1].'name'", containsString("Malta"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".mt"))
                .body("[1].'alpha2Code'", containsString("MT"))
                .body("[1].'alpha3Code'", containsString("MLT"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("356"))
                .body("[1].'capital'", containsString("Valletta"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("MT", "Republic of Malta", "Repubblika ta' Malta"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Southern Europe"))
                .body("[1].'population'", numberMatches(445426.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(35.83333333))
                .body("[1].'latlng'[1]", numberMatches(14.58333333))
                .body("[1].'demonym'", containsString("Maltese"))
                .body("[1].'area'", numberMatches(316.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+01:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Malta"))
                .body("[1].'numericCode'", containsString("470"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("EUR"))
                .body("[1].'languages'.size()", equalTo(2))
                .body("[1].'languages'", hasItems("mt", "en"))
                .body("[1].'translations'.'de'", containsString("Malta"))
                .body("[1].'translations'.'es'", containsString("Malta"))
                .body("[1].'translations'.'fr'", containsString("Malte"))
                .body("[1].'translations'.'ja'", containsString("マルタ"))
                .body("[1].'translations'.'it'", containsString("Malta"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("The Bahamas"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".bs"))
                .body("[2].'alpha2Code'", containsString("BS"))
                .body("[2].'alpha3Code'", containsString("BHS"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("1"))
                .body("[2].'capital'", containsString("Nassau"))
                .body("[2].'altSpellings'.size()", equalTo(2))
                .body("[2].'altSpellings'", hasItems("BS", "Commonwealth of the Bahamas"))
                .body("[2].'region'", containsString("Americas"))
                .body("[2].'subregion'", containsString("Caribbean"))
                .body("[2].'population'", numberMatches(368390.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(24.25))
                .body("[2].'latlng'[1]", numberMatches(-76.0))
                .body("[2].'demonym'", containsString("Bahamian"))
                .body("[2].'area'", numberMatches(13943.0))
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC-05:00"))
                .body("[2].'borders'.size()", equalTo(0))
                .body("[2].'nativeName'", containsString("Bahamas"))
                .body("[2].'numericCode'", containsString("044"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("BSD"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("en"))
                .body("[2].'translations'.'de'", containsString("Bahamas"))
                .body("[2].'translations'.'es'", containsString("Bahamas"))
                .body("[2].'translations'.'fr'", containsString("Bahamas"))
                .body("[2].'translations'.'ja'", containsString("バハマ"))
                .body("[2].'translations'.'it'", containsString("Bahamas"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 6 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_44_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/420")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Czech Republic"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cz"))
                .body("[0].'alpha2Code'", containsString("CZ"))
                .body("[0].'alpha3Code'", containsString("CZE"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("420"))
                .body("[0].'capital'", containsString("Prague"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("CZ", "Česká republika", "Česko"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(1.0537818E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(49.75))
                .body("[0].'latlng'[1]", numberMatches(15.5))
                .body("[0].'demonym'", containsString("Czech"))
                .body("[0].'area'", numberMatches(78865.0))
                .body("[0].'gini'", numberMatches(26.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("AUT", "DEU", "POL", "SVK"))
                .body("[0].'nativeName'", containsString("Česká republika"))
                .body("[0].'numericCode'", containsString("203"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("CZK"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("cs", "sk"))
                .body("[0].'translations'.'de'", containsString("Tschechische Republik"))
                .body("[0].'translations'.'es'", containsString("República Checa"))
                .body("[0].'translations'.'fr'", containsString("République tchèque"))
                .body("[0].'translations'.'ja'", containsString("チェコ"))
                .body("[0].'translations'.'it'", containsString("Repubblica Ceca"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_45_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/372?fields=_EM_14611_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_46_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/n'djamena?EMextraParam123=_EM_819_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Chad"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".td"))
                .body("[0].'alpha2Code'", containsString("TD"))
                .body("[0].'alpha3Code'", containsString("TCD"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("235"))
                .body("[0].'capital'", containsString("N'Djamena"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("TD", "Tchad", "Republic of Chad", "République du Tchad"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Middle Africa"))
                .body("[0].'population'", numberMatches(1.4037E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(15.0))
                .body("[0].'latlng'[1]", numberMatches(19.0))
                .body("[0].'demonym'", containsString("Chadian"))
                .body("[0].'area'", numberMatches(1284000.0))
                .body("[0].'gini'", numberMatches(39.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("CMR", "CAF", "LBY", "NER", "NGA", "SSD"))
                .body("[0].'nativeName'", containsString("Tchad"))
                .body("[0].'numericCode'", containsString("148"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XAF"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fr", "ar"))
                .body("[0].'translations'.'de'", containsString("Tschad"))
                .body("[0].'translations'.'es'", containsString("Chad"))
                .body("[0].'translations'.'fr'", containsString("Tchad"))
                .body("[0].'translations'.'ja'", containsString("チャド"))
                .body("[0].'translations'.'it'", containsString("Ciad"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_47_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/kigali?fields=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Rwanda"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".rw"))
                .body("[0].'alpha2Code'", containsString("RW"))
                .body("[0].'alpha3Code'", containsString("RWA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("250"))
                .body("[0].'capital'", containsString("Kigali"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("RW", "Republic of Rwanda", "Repubulika y'u Rwanda", "République du Rwanda"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(1.1553188E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-2.0))
                .body("[0].'latlng'[1]", numberMatches(30.0))
                .body("[0].'demonym'", containsString("Rwandan"))
                .body("[0].'area'", numberMatches(26338.0))
                .body("[0].'gini'", numberMatches(50.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("BDI", "COD", "TZA", "UGA"))
                .body("[0].'nativeName'", containsString("Rwanda"))
                .body("[0].'numericCode'", containsString("646"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("RWF"))
                .body("[0].'currencies'[0].'name'", containsString("Rwandan franc"))
                .body("[0].'currencies'[0].'symbol'", containsString("Fr"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'[0].'iso639_1'", containsString("rw"))
                .body("[0].'languages'[0].'iso639_2'", containsString("kin"))
                .body("[0].'languages'[0].'name'", containsString("Kinyarwanda"))
                .body("[0].'languages'[0].'nativeName'", containsString("Ikinyarwanda"))
                .body("[0].'languages'[1].'iso639_1'", containsString("en"))
                .body("[0].'languages'[1].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[1].'name'", containsString("English"))
                .body("[0].'languages'[1].'nativeName'", containsString("English"))
                .body("[0].'languages'[2].'iso639_1'", containsString("fr"))
                .body("[0].'languages'[2].'iso639_2'", containsString("fra"))
                .body("[0].'languages'[2].'name'", containsString("French"))
                .body("[0].'languages'[2].'nativeName'", containsString("français"))
                .body("[0].'translations'.'de'", containsString("Ruanda"))
                .body("[0].'translations'.'es'", containsString("Ruanda"))
                .body("[0].'translations'.'fr'", containsString("Rwanda"))
                .body("[0].'translations'.'ja'", containsString("ルワンダ"))
                .body("[0].'translations'.'it'", containsString("Ruanda"))
                .body("[0].'translations'.'br'", containsString("Ruanda"))
                .body("[0].'translations'.'pt'", containsString("Ruanda"))
                .body("[0].'translations'.'nl'", containsString("Rwanda"))
                .body("[0].'translations'.'hr'", containsString("Ruanda"))
                .body("[0].'translations'.'fa'", containsString("رواندا"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/rwa.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[0].'cioc'", containsString("RWA"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_48_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_171_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/region/Americas?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(57))
                .body("[0].'name'", containsString("Anguilla"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ai"))
                .body("[0].'alpha2Code'", containsString("AI"))
                .body("[0].'alpha3Code'", containsString("AIA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("The Valley"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("AI"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(13452.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(18.25))
                .body("[0].'latlng'[1]", numberMatches(-63.16666666))
                .body("[0].'demonym'", containsString("Anguillian"))
                .body("[0].'area'", numberMatches(91.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Anguilla"))
                .body("[0].'numericCode'", containsString("660"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XCD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Anguilla"))
                .body("[0].'translations'.'es'", containsString("Anguilla"))
                .body("[0].'translations'.'fr'", containsString("Anguilla"))
                .body("[0].'translations'.'ja'", containsString("アンギラ"))
                .body("[0].'translations'.'it'", containsString("Anguilla"))
                .body("[0].'relevance'", containsString("0.5"))
                .body("[1].'name'", containsString("Antigua and Barbuda"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ag"))
                .body("[1].'alpha2Code'", containsString("AG"))
                .body("[1].'alpha3Code'", containsString("ATG"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("1"))
                .body("[1].'capital'", containsString("Saint John's"))
                .body("[1].'altSpellings'.size()", equalTo(1))
                .body("[1].'altSpellings'", hasItems("AG"))
                .body("[1].'region'", containsString("Americas"))
                .body("[1].'subregion'", containsString("Caribbean"))
                .body("[1].'population'", numberMatches(86295.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(17.05))
                .body("[1].'latlng'[1]", numberMatches(-61.8))
                .body("[1].'demonym'", containsString("Antiguan, Barbudan"))
                .body("[1].'area'", numberMatches(442.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC-04:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Antigua and Barbuda"))
                .body("[1].'numericCode'", containsString("028"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("XCD"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("en"))
                .body("[1].'translations'.'de'", containsString("Antigua und Barbuda"))
                .body("[1].'translations'.'es'", containsString("Antigua y Barbuda"))
                .body("[1].'translations'.'fr'", containsString("Antigua-et-Barbuda"))
                .body("[1].'translations'.'ja'", containsString("アンティグア・バーブーダ"))
                .body("[1].'translations'.'it'", containsString("Antigua e Barbuda"))
                .body("[1].'relevance'", containsString("0.5"))
                .body("[2].'name'", containsString("Argentina"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".ar"))
                .body("[2].'alpha2Code'", containsString("AR"))
                .body("[2].'alpha3Code'", containsString("ARG"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("54"))
                .body("[2].'capital'", containsString("Buenos Aires"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("AR", "Argentine Republic", "República Argentina"))
                .body("[2].'region'", containsString("Americas"))
                .body("[2].'subregion'", containsString("South America"))
                .body("[2].'population'", numberMatches(4.3131966E7))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(-34.0))
                .body("[2].'latlng'[1]", numberMatches(-64.0))
                .body("[2].'demonym'", containsString("Argentinean"))
                .body("[2].'area'", numberMatches(2780400.0))
                .body("[2].'gini'", numberMatches(44.5))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC-03:00"))
                .body("[2].'borders'.size()", equalTo(5))
                .body("[2].'borders'", hasItems("BOL", "BRA", "CHL", "PRY", "URY"))
                .body("[2].'nativeName'", containsString("Argentina"))
                .body("[2].'numericCode'", containsString("032"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("ARS"))
                .body("[2].'languages'.size()", equalTo(2))
                .body("[2].'languages'", hasItems("es", "gn"))
                .body("[2].'translations'.'de'", containsString("Argentinien"))
                .body("[2].'translations'.'es'", containsString("Argentina"))
                .body("[2].'translations'.'fr'", containsString("Argentine"))
                .body("[2].'translations'.'ja'", containsString("アルゼンチン"))
                .body("[2].'translations'.'it'", containsString("Argentina"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 54 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_49_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_144_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/region/Americas?EMextraParam123=_EM_143_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(57))
                .body("[0].'name'", containsString("Anguilla"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ai"))
                .body("[0].'alpha2Code'", containsString("AI"))
                .body("[0].'alpha3Code'", containsString("AIA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("The Valley"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("AI"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(13452.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(18.25))
                .body("[0].'latlng'[1]", numberMatches(-63.16666666))
                .body("[0].'demonym'", containsString("Anguillian"))
                .body("[0].'area'", numberMatches(91.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Anguilla"))
                .body("[0].'numericCode'", containsString("660"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("XCD"))
                .body("[0].'currencies'[0].'name'", containsString("East Caribbean dollar"))
                .body("[0].'currencies'[0].'symbol'", containsString("$"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("en"))
                .body("[0].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[0].'name'", containsString("English"))
                .body("[0].'languages'[0].'nativeName'", containsString("English"))
                .body("[0].'translations'.'de'", containsString("Anguilla"))
                .body("[0].'translations'.'es'", containsString("Anguilla"))
                .body("[0].'translations'.'fr'", containsString("Anguilla"))
                .body("[0].'translations'.'ja'", containsString("アンギラ"))
                .body("[0].'translations'.'it'", containsString("Anguilla"))
                .body("[0].'translations'.'br'", containsString("Anguila"))
                .body("[0].'translations'.'pt'", containsString("Anguila"))
                .body("[0].'translations'.'nl'", containsString("Anguilla"))
                .body("[0].'translations'.'hr'", containsString("Angvila"))
                .body("[0].'translations'.'fa'", containsString("آنگویلا"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/aia.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString(""))
                .body("[1].'name'", containsString("Antigua and Barbuda"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ag"))
                .body("[1].'alpha2Code'", containsString("AG"))
                .body("[1].'alpha3Code'", containsString("ATG"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("1"))
                .body("[1].'capital'", containsString("Saint John's"))
                .body("[1].'altSpellings'.size()", equalTo(1))
                .body("[1].'altSpellings'", hasItems("AG"))
                .body("[1].'region'", containsString("Americas"))
                .body("[1].'subregion'", containsString("Caribbean"))
                .body("[1].'population'", numberMatches(86295.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(17.05))
                .body("[1].'latlng'[1]", numberMatches(-61.8))
                .body("[1].'demonym'", containsString("Antiguan, Barbudan"))
                .body("[1].'area'", numberMatches(442.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC-04:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Antigua and Barbuda"))
                .body("[1].'numericCode'", containsString("028"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("XCD"))
                .body("[1].'currencies'[0].'name'", containsString("East Caribbean dollar"))
                .body("[1].'currencies'[0].'symbol'", containsString("$"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'[0].'iso639_1'", containsString("en"))
                .body("[1].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[1].'languages'[0].'name'", containsString("English"))
                .body("[1].'languages'[0].'nativeName'", containsString("English"))
                .body("[1].'translations'.'de'", containsString("Antigua und Barbuda"))
                .body("[1].'translations'.'es'", containsString("Antigua y Barbuda"))
                .body("[1].'translations'.'fr'", containsString("Antigua-et-Barbuda"))
                .body("[1].'translations'.'ja'", containsString("アンティグア・バーブーダ"))
                .body("[1].'translations'.'it'", containsString("Antigua e Barbuda"))
                .body("[1].'translations'.'br'", containsString("Antígua e Barbuda"))
                .body("[1].'translations'.'pt'", containsString("Antígua e Barbuda"))
                .body("[1].'translations'.'nl'", containsString("Antigua en Barbuda"))
                .body("[1].'translations'.'hr'", containsString("Antigva i Barbuda"))
                .body("[1].'translations'.'fa'", containsString("آنتیگوا و باربودا"))
                .body("[1].'flag'", containsString("https://restcountries.eu/data/atg.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[0].'acronym'", containsString("CARICOM"))
                .body("[1].'regionalBlocs'[0].'name'", containsString("Caribbean Community"))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[1].'regionalBlocs'[0].'otherNames'.size()", equalTo(3))
                .body("[1].'regionalBlocs'[0].'otherNames'", hasItems("Comunidad del Caribe", "Communauté Caribéenne", "Caribische Gemeenschap"))
                .body("[1].'cioc'", containsString("ANT"))
                .body("[2].'name'", containsString("Argentina"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".ar"))
                .body("[2].'alpha2Code'", containsString("AR"))
                .body("[2].'alpha3Code'", containsString("ARG"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("54"))
                .body("[2].'capital'", containsString("Buenos Aires"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("AR", "Argentine Republic", "República Argentina"))
                .body("[2].'region'", containsString("Americas"))
                .body("[2].'subregion'", containsString("South America"))
                .body("[2].'population'", numberMatches(4.35904E7))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(-34.0))
                .body("[2].'latlng'[1]", numberMatches(-64.0))
                .body("[2].'demonym'", containsString("Argentinean"))
                .body("[2].'area'", numberMatches(2780400.0))
                .body("[2].'gini'", numberMatches(44.5))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC-03:00"))
                .body("[2].'borders'.size()", equalTo(5))
                .body("[2].'borders'", hasItems("BOL", "BRA", "CHL", "PRY", "URY"))
                .body("[2].'nativeName'", containsString("Argentina"))
                .body("[2].'numericCode'", containsString("032"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'[0].'code'", containsString("ARS"))
                .body("[2].'currencies'[0].'name'", containsString("Argentine peso"))
                .body("[2].'currencies'[0].'symbol'", containsString("$"))
                .body("[2].'languages'.size()", equalTo(2))
                .body("[2].'languages'[0].'iso639_1'", containsString("es"))
                .body("[2].'languages'[0].'iso639_2'", containsString("spa"))
                .body("[2].'languages'[0].'name'", containsString("Spanish"))
                .body("[2].'languages'[0].'nativeName'", containsString("Español"))
                .body("[2].'languages'[1].'iso639_1'", containsString("gn"))
                .body("[2].'languages'[1].'iso639_2'", containsString("grn"))
                .body("[2].'languages'[1].'name'", containsString("Guaraní"))
                .body("[2].'languages'[1].'nativeName'", containsString("Avañe'ẽ"))
                .body("[2].'translations'.'de'", containsString("Argentinien"))
                .body("[2].'translations'.'es'", containsString("Argentina"))
                .body("[2].'translations'.'fr'", containsString("Argentine"))
                .body("[2].'translations'.'ja'", containsString("アルゼンチン"))
                .body("[2].'translations'.'it'", containsString("Argentina"))
                .body("[2].'translations'.'br'", containsString("Argentina"))
                .body("[2].'translations'.'pt'", containsString("Argentina"))
                .body("[2].'translations'.'nl'", containsString("Argentinië"))
                .body("[2].'translations'.'hr'", containsString("Argentina"))
                .body("[2].'translations'.'fa'", containsString("آرژانتین"))
                .body("[2].'flag'", containsString("https://restcountries.eu/data/arg.svg"))
                .body("[2].'regionalBlocs'.size()", equalTo(1))
                .body("[2].'regionalBlocs'[0].'acronym'", containsString("USAN"))
                .body("[2].'regionalBlocs'[0].'name'", containsString("Union of South American Nations"))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(3))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'", hasItems("UNASUR", "UNASUL", "UZAN"))
                .body("[2].'regionalBlocs'[0].'otherNames'.size()", equalTo(4))
                .body("[2].'regionalBlocs'[0].'otherNames'", hasItems("Unión de Naciones Suramericanas", "União de Nações Sul-Americanas", "Unie van Zuid-Amerikaanse Naties", "South American Union"))
                .body("[2].'cioc'", containsString("ARG"))
                ; // Skipping assertions on the remaining 54 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_50_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/Southern%20Asia?EMextraParam123=_EM_71_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(9))
                .body("[0].'name'", containsString("Afghanistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".af"))
                .body("[0].'alpha2Code'", containsString("AF"))
                .body("[0].'alpha3Code'", containsString("AFG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("93"))
                .body("[0].'capital'", containsString("Kabul"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("AF", "Afġānistān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(2.60231E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(33.0))
                .body("[0].'latlng'[1]", numberMatches(65.0))
                .body("[0].'demonym'", containsString("Afghan"))
                .body("[0].'area'", numberMatches(652230.0))
                .body("[0].'gini'", numberMatches(27.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:30"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("IRN", "PAK", "TKM", "UZB", "TJK", "CHN"))
                .body("[0].'nativeName'", containsString("افغانستان"))
                .body("[0].'numericCode'", containsString("004"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AFN"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("ps", "uz", "tk"))
                .body("[0].'translations'.'de'", containsString("Afghanistan"))
                .body("[0].'translations'.'es'", containsString("Afganistán"))
                .body("[0].'translations'.'fr'", containsString("Afghanistan"))
                .body("[0].'translations'.'ja'", containsString("アフガニスタン"))
                .body("[0].'translations'.'it'", containsString("Afghanistan"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Bangladesh"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".bd"))
                .body("[1].'alpha2Code'", containsString("BD"))
                .body("[1].'alpha3Code'", containsString("BGD"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("880"))
                .body("[1].'capital'", containsString("Dhaka"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("BD", "People's Republic of Bangladesh", "Gônôprôjatôntri Bangladesh"))
                .body("[1].'region'", containsString("Asia"))
                .body("[1].'subregion'", containsString("Southern Asia"))
                .body("[1].'population'", numberMatches(1.58875E8))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(24.0))
                .body("[1].'latlng'[1]", numberMatches(90.0))
                .body("[1].'demonym'", containsString("Bangladeshi"))
                .body("[1].'area'", numberMatches(147570.0))
                .body("[1].'gini'", numberMatches(32.1))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+06:00"))
                .body("[1].'borders'.size()", equalTo(2))
                .body("[1].'borders'", hasItems("MMR", "IND"))
                .body("[1].'nativeName'", containsString("Bangladesh"))
                .body("[1].'numericCode'", containsString("050"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("BDT"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("bn"))
                .body("[1].'translations'.'de'", containsString("Bangladesch"))
                .body("[1].'translations'.'es'", containsString("Bangladesh"))
                .body("[1].'translations'.'fr'", containsString("Bangladesh"))
                .body("[1].'translations'.'ja'", containsString("バングラデシュ"))
                .body("[1].'translations'.'it'", containsString("Bangladesh"))
                .body("[1].'relevance'", containsString("2"))
                .body("[2].'name'", containsString("Bhutan"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".bt"))
                .body("[2].'alpha2Code'", containsString("BT"))
                .body("[2].'alpha3Code'", containsString("BTN"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("975"))
                .body("[2].'capital'", containsString("Thimphu"))
                .body("[2].'altSpellings'.size()", equalTo(2))
                .body("[2].'altSpellings'", hasItems("BT", "Kingdom of Bhutan"))
                .body("[2].'region'", containsString("Asia"))
                .body("[2].'subregion'", containsString("Southern Asia"))
                .body("[2].'population'", numberMatches(763920.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(27.5))
                .body("[2].'latlng'[1]", numberMatches(90.5))
                .body("[2].'demonym'", containsString("Bhutanese"))
                .body("[2].'area'", numberMatches(38394.0))
                .body("[2].'gini'", numberMatches(38.1))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+06:00"))
                .body("[2].'borders'.size()", equalTo(2))
                .body("[2].'borders'", hasItems("CHN", "IND"))
                .body("[2].'nativeName'", containsString("ʼbrug-yul"))
                .body("[2].'numericCode'", containsString("064"))
                .body("[2].'currencies'.size()", equalTo(2))
                .body("[2].'currencies'", hasItems("BTN", "INR"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("dz"))
                .body("[2].'translations'.'de'", containsString("Bhutan"))
                .body("[2].'translations'.'es'", containsString("Bután"))
                .body("[2].'translations'.'fr'", containsString("Bhoutan"))
                .body("[2].'translations'.'ja'", containsString("ブータン"))
                .body("[2].'translations'.'it'", containsString("Bhutan"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 6 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_51_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/subregion/Western%20Europe?fields=_EM_147_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(9))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 6 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_52_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/nd")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Zimbabwe"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".zw"))
                .body("[0].'alpha2Code'", containsString("ZW"))
                .body("[0].'alpha3Code'", containsString("ZWE"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("263"))
                .body("[0].'capital'", containsString("Harare"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("ZW", "Republic of Zimbabwe"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(1.3061239E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-20.0))
                .body("[0].'latlng'[1]", numberMatches(30.0))
                .body("[0].'demonym'", containsString("Zimbabwean"))
                .body("[0].'area'", numberMatches(390757.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("BWA", "MOZ", "ZAF", "ZMB"))
                .body("[0].'nativeName'", containsString("Zimbabwe"))
                .body("[0].'numericCode'", containsString("716"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("en", "sn", "nd"))
                .body("[0].'translations'.'de'", containsString("Simbabwe"))
                .body("[0].'translations'.'es'", containsString("Zimbabue"))
                .body("[0].'translations'.'fr'", containsString("Zimbabwe"))
                .body("[0].'translations'.'ja'", containsString("ジンバブエ"))
                .body("[0].'translations'.'it'", containsString("Zimbabwe"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_53_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/PEN?fields=_EM_249_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_54_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/JMD?EMextraParam123=_EM_233_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Jamaica"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".jm"))
                .body("[0].'alpha2Code'", containsString("JM"))
                .body("[0].'alpha3Code'", containsString("JAM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Kingston"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("JM"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(2723246.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(18.25))
                .body("[0].'latlng'[1]", numberMatches(-77.5))
                .body("[0].'demonym'", containsString("Jamaican"))
                .body("[0].'area'", numberMatches(10991.0))
                .body("[0].'gini'", numberMatches(45.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-05:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Jamaica"))
                .body("[0].'numericCode'", containsString("388"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("JMD"))
                .body("[0].'currencies'[0].'name'", containsString("Jamaican dollar"))
                .body("[0].'currencies'[0].'symbol'", containsString("$"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("en"))
                .body("[0].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[0].'name'", containsString("English"))
                .body("[0].'languages'[0].'nativeName'", containsString("English"))
                .body("[0].'translations'.'de'", containsString("Jamaika"))
                .body("[0].'translations'.'es'", containsString("Jamaica"))
                .body("[0].'translations'.'fr'", containsString("Jamaïque"))
                .body("[0].'translations'.'ja'", containsString("ジャマイカ"))
                .body("[0].'translations'.'it'", containsString("Giamaica"))
                .body("[0].'translations'.'br'", containsString("Jamaica"))
                .body("[0].'translations'.'pt'", containsString("Jamaica"))
                .body("[0].'translations'.'nl'", containsString("Jamaica"))
                .body("[0].'translations'.'hr'", containsString("Jamajka"))
                .body("[0].'translations'.'fa'", containsString("جامائیکا"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/jam.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("CARICOM"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Caribbean Community"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(3))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("Comunidad del Caribe", "Communauté Caribéenne", "Caribische Gemeenschap"))
                .body("[0].'cioc'", containsString("JAM"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_55_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/856")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Lao People's Democratic Republic"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".la"))
                .body("[0].'alpha2Code'", containsString("LA"))
                .body("[0].'alpha3Code'", containsString("LAO"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("856"))
                .body("[0].'capital'", containsString("Vientiane"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("LA", "Lao", "Laos", "Lao People's Democratic Republic", "Sathalanalat Paxathipatai Paxaxon Lao"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("South-Eastern Asia"))
                .body("[0].'population'", numberMatches(6492400.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(18.0))
                .body("[0].'latlng'[1]", numberMatches(105.0))
                .body("[0].'demonym'", containsString("Laotian"))
                .body("[0].'area'", numberMatches(236800.0))
                .body("[0].'gini'", numberMatches(36.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+07:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("MMR", "KHM", "CHN", "THA", "VNM"))
                .body("[0].'nativeName'", containsString("ສປປລາວ"))
                .body("[0].'numericCode'", containsString("418"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("LAK"))
                .body("[0].'currencies'[0].'name'", containsString("Lao kip"))
                .body("[0].'currencies'[0].'symbol'", containsString("₭"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("lo"))
                .body("[0].'languages'[0].'iso639_2'", containsString("lao"))
                .body("[0].'languages'[0].'name'", containsString("Lao"))
                .body("[0].'languages'[0].'nativeName'", containsString("ພາສາລາວ"))
                .body("[0].'translations'.'de'", containsString("Laos"))
                .body("[0].'translations'.'es'", containsString("Laos"))
                .body("[0].'translations'.'fr'", containsString("Laos"))
                .body("[0].'translations'.'ja'", containsString("ラオス人民民主共和国"))
                .body("[0].'translations'.'it'", containsString("Laos"))
                .body("[0].'translations'.'br'", containsString("Laos"))
                .body("[0].'translations'.'pt'", containsString("Laos"))
                .body("[0].'translations'.'nl'", containsString("Laos"))
                .body("[0].'translations'.'hr'", containsString("Laos"))
                .body("[0].'translations'.'fa'", containsString("لائوس"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/lao.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("ASEAN"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Association of Southeast Asian Nations"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("LAO"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_56_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/monaco?fields=_EM_4441_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_57_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_781_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/region/Polar?fields=_EM_779_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_58_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/lang/thA?fields=_EM_5813_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_59_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/lang/bn?" + 
                    "fields=_EM_3325_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_60_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/moldovan?fields=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Moldova (Republic of)"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".md"))
                .body("[0].'alpha2Code'", containsString("MD"))
                .body("[0].'alpha3Code'", containsString("MDA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("373"))
                .body("[0].'capital'", containsString("Chișinău"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("MD", "Republic of Moldova", "Republica Moldova"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(3553100.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(47.0))
                .body("[0].'latlng'[1]", numberMatches(29.0))
                .body("[0].'demonym'", containsString("Moldovan"))
                .body("[0].'area'", numberMatches(33846.0))
                .body("[0].'gini'", numberMatches(33.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("ROU", "UKR"))
                .body("[0].'nativeName'", containsString("Moldova"))
                .body("[0].'numericCode'", containsString("498"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("MDL"))
                .body("[0].'currencies'[0].'name'", containsString("Moldovan leu"))
                .body("[0].'currencies'[0].'symbol'", containsString("L"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("ro"))
                .body("[0].'languages'[0].'iso639_2'", containsString("ron"))
                .body("[0].'languages'[0].'name'", containsString("Romanian"))
                .body("[0].'languages'[0].'nativeName'", containsString("Română"))
                .body("[0].'translations'.'de'", containsString("Moldawie"))
                .body("[0].'translations'.'es'", containsString("Moldavia"))
                .body("[0].'translations'.'fr'", containsString("Moldavie"))
                .body("[0].'translations'.'ja'", containsString("モルドバ共和国"))
                .body("[0].'translations'.'it'", containsString("Moldavia"))
                .body("[0].'translations'.'br'", containsString("Moldávia"))
                .body("[0].'translations'.'pt'", containsString("Moldávia"))
                .body("[0].'translations'.'nl'", containsString("Moldavië"))
                .body("[0].'translations'.'hr'", containsString("Moldova"))
                .body("[0].'translations'.'fa'", containsString("مولداوی"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/mda.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("CEFTA"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Central European Free Trade Agreement"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("MDA"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_61_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/bangladeshi?fields=tDS")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_62_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/alpha/MZ?" + 
                    "fields=topLevelDomain&" + 
                    "EMextraParam123=_EM_486_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'topLevelDomain'.size()", equalTo(1))
                .body("'topLevelDomain'", hasItems(".mz"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_63_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/ua?" + 
                    "fields=capital&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(16))
                .body("[0].'capital'", containsString("Saint John's"))
                .body("[1].'capital'", containsString("Quito"))
                .body("[2].'capital'", containsString("Malabo"))
                ; // Skipping assertions on the remaining 13 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_64_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/PA?" + 
                    "fields=_EM_4058_XYZ_&" + 
                    "EMextraParam123=_EM_3393_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_65_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/CEFTA?fields=fk7W4C5CTTjB1WvC")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(7))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 4 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_66_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/UNASUR?fields=_EM_7593_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(15))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_67_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/EAEU?fields=fk7W4C5CTTjB1WvC")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_68_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/ca?fields=_EM_16375_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(50))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 47 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_69_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_3930_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/SICA?EMextraParam123=_EM_3929_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(8))
                .body("[0].'name'", containsString("Belize"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bz"))
                .body("[0].'alpha2Code'", containsString("BZ"))
                .body("[0].'alpha3Code'", containsString("BLZ"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("501"))
                .body("[0].'capital'", containsString("Belmopan"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("BZ"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Central America"))
                .body("[0].'population'", numberMatches(370300.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(17.25))
                .body("[0].'latlng'[1]", numberMatches(-88.75))
                .body("[0].'demonym'", containsString("Belizean"))
                .body("[0].'area'", numberMatches(22966.0))
                .body("[0].'gini'", numberMatches(53.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-06:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("GTM", "MEX"))
                .body("[0].'nativeName'", containsString("Belize"))
                .body("[0].'numericCode'", containsString("084"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("BZD"))
                .body("[0].'currencies'[0].'name'", containsString("Belize dollar"))
                .body("[0].'currencies'[0].'symbol'", containsString("$"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("en"))
                .body("[0].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[0].'name'", containsString("English"))
                .body("[0].'languages'[0].'nativeName'", containsString("English"))
                .body("[0].'languages'[1].'iso639_1'", containsString("es"))
                .body("[0].'languages'[1].'iso639_2'", containsString("spa"))
                .body("[0].'languages'[1].'name'", containsString("Spanish"))
                .body("[0].'languages'[1].'nativeName'", containsString("Español"))
                .body("[0].'translations'.'de'", containsString("Belize"))
                .body("[0].'translations'.'es'", containsString("Belice"))
                .body("[0].'translations'.'fr'", containsString("Belize"))
                .body("[0].'translations'.'ja'", containsString("ベリーズ"))
                .body("[0].'translations'.'it'", containsString("Belize"))
                .body("[0].'translations'.'br'", containsString("Belize"))
                .body("[0].'translations'.'pt'", containsString("Belize"))
                .body("[0].'translations'.'nl'", containsString("Belize"))
                .body("[0].'translations'.'hr'", containsString("Belize"))
                .body("[0].'translations'.'fa'", containsString("بلیز"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/blz.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(2))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("CARICOM"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Caribbean Community"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(3))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("Comunidad del Caribe", "Communauté Caribéenne", "Caribische Gemeenschap"))
                .body("[0].'regionalBlocs'[1].'acronym'", containsString("CAIS"))
                .body("[0].'regionalBlocs'[1].'name'", containsString("Central American Integration System"))
                .body("[0].'regionalBlocs'[1].'otherAcronyms'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[1].'otherAcronyms'", hasItems("SICA"))
                .body("[0].'regionalBlocs'[1].'otherNames'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[1].'otherNames'", hasItems("Sistema de la Integración Centroamericana,"))
                .body("[0].'cioc'", containsString("BIZ"))
                .body("[1].'name'", containsString("Costa Rica"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".cr"))
                .body("[1].'alpha2Code'", containsString("CR"))
                .body("[1].'alpha3Code'", containsString("CRI"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("506"))
                .body("[1].'capital'", containsString("San José"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("CR", "Republic of Costa Rica", "República de Costa Rica"))
                .body("[1].'region'", containsString("Americas"))
                .body("[1].'subregion'", containsString("Central America"))
                .body("[1].'population'", numberMatches(4890379.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(10.0))
                .body("[1].'latlng'[1]", numberMatches(-84.0))
                .body("[1].'demonym'", containsString("Costa Rican"))
                .body("[1].'area'", numberMatches(51100.0))
                .body("[1].'gini'", numberMatches(50.7))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC-06:00"))
                .body("[1].'borders'.size()", equalTo(2))
                .body("[1].'borders'", hasItems("NIC", "PAN"))
                .body("[1].'nativeName'", containsString("Costa Rica"))
                .body("[1].'numericCode'", containsString("188"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("CRC"))
                .body("[1].'currencies'[0].'name'", containsString("Costa Rican colón"))
                .body("[1].'currencies'[0].'symbol'", containsString("₡"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'[0].'iso639_1'", containsString("es"))
                .body("[1].'languages'[0].'iso639_2'", containsString("spa"))
                .body("[1].'languages'[0].'name'", containsString("Spanish"))
                .body("[1].'languages'[0].'nativeName'", containsString("Español"))
                .body("[1].'translations'.'de'", containsString("Costa Rica"))
                .body("[1].'translations'.'es'", containsString("Costa Rica"))
                .body("[1].'translations'.'fr'", containsString("Costa Rica"))
                .body("[1].'translations'.'ja'", containsString("コスタリカ"))
                .body("[1].'translations'.'it'", containsString("Costa Rica"))
                .body("[1].'translations'.'br'", containsString("Costa Rica"))
                .body("[1].'translations'.'pt'", containsString("Costa Rica"))
                .body("[1].'translations'.'nl'", containsString("Costa Rica"))
                .body("[1].'translations'.'hr'", containsString("Kostarika"))
                .body("[1].'translations'.'fa'", containsString("کاستاریکا"))
                .body("[1].'flag'", containsString("https://restcountries.eu/data/cri.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[0].'acronym'", containsString("CAIS"))
                .body("[1].'regionalBlocs'[0].'name'", containsString("Central American Integration System"))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'", hasItems("SICA"))
                .body("[1].'regionalBlocs'[0].'otherNames'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[0].'otherNames'", hasItems("Sistema de la Integración Centroamericana,"))
                .body("[1].'cioc'", containsString("CRC"))
                .body("[2].'name'", containsString("Dominican Republic"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".do"))
                .body("[2].'alpha2Code'", containsString("DO"))
                .body("[2].'alpha3Code'", containsString("DOM"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("1"))
                .body("[2].'capital'", containsString("Santo Domingo"))
                .body("[2].'altSpellings'.size()", equalTo(1))
                .body("[2].'altSpellings'", hasItems("DO"))
                .body("[2].'region'", containsString("Americas"))
                .body("[2].'subregion'", containsString("Caribbean"))
                .body("[2].'population'", numberMatches(1.0075045E7))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(19.0))
                .body("[2].'latlng'[1]", numberMatches(-70.66666666))
                .body("[2].'demonym'", containsString("Dominican"))
                .body("[2].'area'", numberMatches(48671.0))
                .body("[2].'gini'", numberMatches(47.2))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC-04:00"))
                .body("[2].'borders'.size()", equalTo(1))
                .body("[2].'borders'", hasItems("HTI"))
                .body("[2].'nativeName'", containsString("República Dominicana"))
                .body("[2].'numericCode'", containsString("214"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'[0].'code'", containsString("DOP"))
                .body("[2].'currencies'[0].'name'", containsString("Dominican peso"))
                .body("[2].'currencies'[0].'symbol'", containsString("$"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'[0].'iso639_1'", containsString("es"))
                .body("[2].'languages'[0].'iso639_2'", containsString("spa"))
                .body("[2].'languages'[0].'name'", containsString("Spanish"))
                .body("[2].'languages'[0].'nativeName'", containsString("Español"))
                .body("[2].'translations'.'de'", containsString("Dominikanische Republik"))
                .body("[2].'translations'.'es'", containsString("República Dominicana"))
                .body("[2].'translations'.'fr'", containsString("République dominicaine"))
                .body("[2].'translations'.'ja'", containsString("ドミニカ共和国"))
                .body("[2].'translations'.'it'", containsString("Repubblica Dominicana"))
                .body("[2].'translations'.'br'", containsString("República Dominicana"))
                .body("[2].'translations'.'pt'", containsString("República Dominicana"))
                .body("[2].'translations'.'nl'", containsString("Dominicaanse Republiek"))
                .body("[2].'translations'.'hr'", containsString("Dominikanska Republika"))
                .body("[2].'translations'.'fa'", containsString("جمهوری دومینیکن"))
                .body("[2].'flag'", containsString("https://restcountries.eu/data/dom.svg"))
                .body("[2].'regionalBlocs'.size()", equalTo(2))
                .body("[2].'regionalBlocs'[0].'acronym'", containsString("CARICOM"))
                .body("[2].'regionalBlocs'[0].'name'", containsString("Caribbean Community"))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[2].'regionalBlocs'[0].'otherNames'.size()", equalTo(3))
                .body("[2].'regionalBlocs'[0].'otherNames'", hasItems("Comunidad del Caribe", "Communauté Caribéenne", "Caribische Gemeenschap"))
                .body("[2].'regionalBlocs'[1].'acronym'", containsString("CAIS"))
                .body("[2].'regionalBlocs'[1].'name'", containsString("Central American Integration System"))
                .body("[2].'regionalBlocs'[1].'otherAcronyms'.size()", equalTo(1))
                .body("[2].'regionalBlocs'[1].'otherAcronyms'", hasItems("SICA"))
                .body("[2].'regionalBlocs'[1].'otherNames'.size()", equalTo(1))
                .body("[2].'regionalBlocs'[1].'otherNames'", hasItems("Sistema de la Integración Centroamericana,"))
                .body("[2].'cioc'", containsString("DOM"))
                ; // Skipping assertions on the remaining 5 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_70_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/Southern%20Africa?EMextraParam123=_EM_813_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(6))
                .body("[0].'name'", containsString("Botswana"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bw"))
                .body("[0].'alpha2Code'", containsString("BW"))
                .body("[0].'alpha3Code'", containsString("BWA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("267"))
                .body("[0].'capital'", containsString("Gaborone"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("BW", "Republic of Botswana", "Lefatshe la Botswana"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Southern Africa"))
                .body("[0].'population'", numberMatches(2141206.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-22.0))
                .body("[0].'latlng'[1]", numberMatches(24.0))
                .body("[0].'demonym'", containsString("Motswana"))
                .body("[0].'area'", numberMatches(582000.0))
                .body("[0].'gini'", numberMatches(61.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("NAM", "ZAF", "ZMB", "ZWE"))
                .body("[0].'nativeName'", containsString("Botswana"))
                .body("[0].'numericCode'", containsString("072"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("BWP"))
                .body("[0].'currencies'[0].'name'", containsString("Botswana pula"))
                .body("[0].'currencies'[0].'symbol'", containsString("P"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("en"))
                .body("[0].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[0].'name'", containsString("English"))
                .body("[0].'languages'[0].'nativeName'", containsString("English"))
                .body("[0].'languages'[1].'iso639_1'", containsString("tn"))
                .body("[0].'languages'[1].'iso639_2'", containsString("tsn"))
                .body("[0].'languages'[1].'name'", containsString("Tswana"))
                .body("[0].'languages'[1].'nativeName'", containsString("Setswana"))
                .body("[0].'translations'.'de'", containsString("Botswana"))
                .body("[0].'translations'.'es'", containsString("Botswana"))
                .body("[0].'translations'.'fr'", containsString("Botswana"))
                .body("[0].'translations'.'ja'", containsString("ボツワナ"))
                .body("[0].'translations'.'it'", containsString("Botswana"))
                .body("[0].'translations'.'br'", containsString("Botsuana"))
                .body("[0].'translations'.'pt'", containsString("Botsuana"))
                .body("[0].'translations'.'nl'", containsString("Botswana"))
                .body("[0].'translations'.'hr'", containsString("Bocvana"))
                .body("[0].'translations'.'fa'", containsString("بوتسوانا"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/bwa.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[0].'cioc'", containsString("BOT"))
                .body("[1].'name'", containsString("French Southern Territories"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".tf"))
                .body("[1].'alpha2Code'", containsString("TF"))
                .body("[1].'alpha3Code'", containsString("ATF"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("262"))
                .body("[1].'capital'", containsString("Port-aux-Français"))
                .body("[1].'altSpellings'.size()", equalTo(1))
                .body("[1].'altSpellings'", hasItems("TF"))
                .body("[1].'region'", containsString("Africa"))
                .body("[1].'subregion'", containsString("Southern Africa"))
                .body("[1].'population'", numberMatches(140.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-49.25))
                .body("[1].'latlng'[1]", numberMatches(69.167))
                .body("[1].'demonym'", containsString("French"))
                .body("[1].'area'", numberMatches(7747.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+05:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Territoire des Terres australes et antarctiques françaises"))
                .body("[1].'numericCode'", containsString("260"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("EUR"))
                .body("[1].'currencies'[0].'name'", containsString("Euro"))
                .body("[1].'currencies'[0].'symbol'", containsString("€"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'[0].'iso639_1'", containsString("fr"))
                .body("[1].'languages'[0].'iso639_2'", containsString("fra"))
                .body("[1].'languages'[0].'name'", containsString("French"))
                .body("[1].'languages'[0].'nativeName'", containsString("français"))
                .body("[1].'translations'.'de'", containsString("Französische Süd- und Antarktisgebiete"))
                .body("[1].'translations'.'es'", containsString("Tierras Australes y Antárticas Francesas"))
                .body("[1].'translations'.'fr'", containsString("Terres australes et antarctiques françaises"))
                .body("[1].'translations'.'ja'", containsString("フランス領南方・南極地域"))
                .body("[1].'translations'.'it'", containsString("Territori Francesi del Sud"))
                .body("[1].'translations'.'br'", containsString("Terras Austrais e Antárticas Francesas"))
                .body("[1].'translations'.'pt'", containsString("Terras Austrais e Antárticas Francesas"))
                .body("[1].'translations'.'nl'", containsString("Franse Gebieden in de zuidelijke Indische Oceaan"))
                .body("[1].'translations'.'hr'", containsString("Francuski južni i antarktički teritoriji"))
                .body("[1].'translations'.'fa'", containsString("سرزمین‌های جنوبی و جنوبگانی فرانسه"))
                .body("[1].'flag'", containsString("https://restcountries.eu/data/atf.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[1].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[1].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[1].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[1].'cioc'", containsString(""))
                .body("[2].'name'", containsString("Lesotho"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".ls"))
                .body("[2].'alpha2Code'", containsString("LS"))
                .body("[2].'alpha3Code'", containsString("LSO"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("266"))
                .body("[2].'capital'", containsString("Maseru"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("LS", "Kingdom of Lesotho", "Muso oa Lesotho"))
                .body("[2].'region'", containsString("Africa"))
                .body("[2].'subregion'", containsString("Southern Africa"))
                .body("[2].'population'", numberMatches(1894194.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(-29.5))
                .body("[2].'latlng'[1]", numberMatches(28.5))
                .body("[2].'demonym'", containsString("Mosotho"))
                .body("[2].'area'", numberMatches(30355.0))
                .body("[2].'gini'", numberMatches(52.5))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+02:00"))
                .body("[2].'borders'.size()", equalTo(1))
                .body("[2].'borders'", hasItems("ZAF"))
                .body("[2].'nativeName'", containsString("Lesotho"))
                .body("[2].'numericCode'", containsString("426"))
                .body("[2].'currencies'.size()", equalTo(2))
                .body("[2].'currencies'[0].'code'", containsString("LSL"))
                .body("[2].'currencies'[0].'name'", containsString("Lesotho loti"))
                .body("[2].'currencies'[0].'symbol'", containsString("L"))
                .body("[2].'currencies'[1].'code'", containsString("ZAR"))
                .body("[2].'currencies'[1].'name'", containsString("South African rand"))
                .body("[2].'currencies'[1].'symbol'", containsString("R"))
                .body("[2].'languages'.size()", equalTo(2))
                .body("[2].'languages'[0].'iso639_1'", containsString("en"))
                .body("[2].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[2].'languages'[0].'name'", containsString("English"))
                .body("[2].'languages'[0].'nativeName'", containsString("English"))
                .body("[2].'languages'[1].'iso639_1'", containsString("st"))
                .body("[2].'languages'[1].'iso639_2'", containsString("sot"))
                .body("[2].'languages'[1].'name'", containsString("Southern Sotho"))
                .body("[2].'languages'[1].'nativeName'", containsString("Sesotho"))
                .body("[2].'translations'.'de'", containsString("Lesotho"))
                .body("[2].'translations'.'es'", containsString("Lesotho"))
                .body("[2].'translations'.'fr'", containsString("Lesotho"))
                .body("[2].'translations'.'ja'", containsString("レソト"))
                .body("[2].'translations'.'it'", containsString("Lesotho"))
                .body("[2].'translations'.'br'", containsString("Lesoto"))
                .body("[2].'translations'.'pt'", containsString("Lesoto"))
                .body("[2].'translations'.'nl'", containsString("Lesotho"))
                .body("[2].'translations'.'hr'", containsString("Lesoto"))
                .body("[2].'translations'.'fa'", containsString("لسوتو"))
                .body("[2].'flag'", containsString("https://restcountries.eu/data/lso.svg"))
                .body("[2].'regionalBlocs'.size()", equalTo(1))
                .body("[2].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[2].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[2].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[2].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[2].'cioc'", containsString("LES"))
                ; // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_71_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/jamaican")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Jamaica"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".jm"))
                .body("[0].'alpha2Code'", containsString("JM"))
                .body("[0].'alpha3Code'", containsString("JAM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Kingston"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("JM"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(2723246.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(18.25))
                .body("[0].'latlng'[1]", numberMatches(-77.5))
                .body("[0].'demonym'", containsString("Jamaican"))
                .body("[0].'area'", numberMatches(10991.0))
                .body("[0].'gini'", numberMatches(45.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-05:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Jamaica"))
                .body("[0].'numericCode'", containsString("388"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("JMD"))
                .body("[0].'currencies'[0].'name'", containsString("Jamaican dollar"))
                .body("[0].'currencies'[0].'symbol'", containsString("$"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("en"))
                .body("[0].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[0].'name'", containsString("English"))
                .body("[0].'languages'[0].'nativeName'", containsString("English"))
                .body("[0].'translations'.'de'", containsString("Jamaika"))
                .body("[0].'translations'.'es'", containsString("Jamaica"))
                .body("[0].'translations'.'fr'", containsString("Jamaïque"))
                .body("[0].'translations'.'ja'", containsString("ジャマイカ"))
                .body("[0].'translations'.'it'", containsString("Giamaica"))
                .body("[0].'translations'.'br'", containsString("Jamaica"))
                .body("[0].'translations'.'pt'", containsString("Jamaica"))
                .body("[0].'translations'.'nl'", containsString("Jamaica"))
                .body("[0].'translations'.'hr'", containsString("Jamajka"))
                .body("[0].'translations'.'fa'", containsString("جامائیکا"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/jam.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("CARICOM"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Caribbean Community"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(3))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("Comunidad del Caribe", "Communauté Caribéenne", "Caribische Gemeenschap"))
                .body("[0].'cioc'", containsString("JAM"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_72_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/vientiane")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Lao People's Democratic Republic"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".la"))
                .body("[0].'alpha2Code'", containsString("LA"))
                .body("[0].'alpha3Code'", containsString("LAO"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("856"))
                .body("[0].'capital'", containsString("Vientiane"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("LA", "Lao", "Laos", "Lao People's Democratic Republic", "Sathalanalat Paxathipatai Paxaxon Lao"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("South-Eastern Asia"))
                .body("[0].'population'", numberMatches(6492400.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(18.0))
                .body("[0].'latlng'[1]", numberMatches(105.0))
                .body("[0].'demonym'", containsString("Laotian"))
                .body("[0].'area'", numberMatches(236800.0))
                .body("[0].'gini'", numberMatches(36.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+07:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("MMR", "KHM", "CHN", "THA", "VNM"))
                .body("[0].'nativeName'", containsString("ສປປລາວ"))
                .body("[0].'numericCode'", containsString("418"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("LAK"))
                .body("[0].'currencies'[0].'name'", containsString("Lao kip"))
                .body("[0].'currencies'[0].'symbol'", containsString("₭"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("lo"))
                .body("[0].'languages'[0].'iso639_2'", containsString("lao"))
                .body("[0].'languages'[0].'name'", containsString("Lao"))
                .body("[0].'languages'[0].'nativeName'", containsString("ພາສາລາວ"))
                .body("[0].'translations'.'de'", containsString("Laos"))
                .body("[0].'translations'.'es'", containsString("Laos"))
                .body("[0].'translations'.'fr'", containsString("Laos"))
                .body("[0].'translations'.'ja'", containsString("ラオス人民民主共和国"))
                .body("[0].'translations'.'it'", containsString("Laos"))
                .body("[0].'translations'.'br'", containsString("Laos"))
                .body("[0].'translations'.'pt'", containsString("Laos"))
                .body("[0].'translations'.'nl'", containsString("Laos"))
                .body("[0].'translations'.'hr'", containsString("Laos"))
                .body("[0].'translations'.'fa'", containsString("لائوس"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/lao.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("ASEAN"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Association of Southeast Asian Nations"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("LAO"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_73_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/EFTA?" + 
                    "fields=_EM_4057_XYZ_&" + 
                    "EMextraParam123=_EM_3393_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_74_getOnV2LangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/lang/th")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Thailand"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".th"))
                .body("[0].'alpha2Code'", containsString("TH"))
                .body("[0].'alpha3Code'", containsString("THA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("66"))
                .body("[0].'capital'", containsString("Bangkok"))
                .body("[0].'altSpellings'.size()", equalTo(6))
                .body("[0].'altSpellings'", hasItems("TH", "Prathet", "Thai", "Kingdom of Thailand", "ราชอาณาจักรไทย", "Ratcha Anachak Thai"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("South-Eastern Asia"))
                .body("[0].'population'", numberMatches(6.5327652E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(15.0))
                .body("[0].'latlng'[1]", numberMatches(100.0))
                .body("[0].'demonym'", containsString("Thai"))
                .body("[0].'area'", numberMatches(513120.0))
                .body("[0].'gini'", numberMatches(40.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+07:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("MMR", "KHM", "LAO", "MYS"))
                .body("[0].'nativeName'", containsString("ประเทศไทย"))
                .body("[0].'numericCode'", containsString("764"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("THB"))
                .body("[0].'currencies'[0].'name'", containsString("Thai baht"))
                .body("[0].'currencies'[0].'symbol'", containsString("฿"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("th"))
                .body("[0].'languages'[0].'iso639_2'", containsString("tha"))
                .body("[0].'languages'[0].'name'", containsString("Thai"))
                .body("[0].'languages'[0].'nativeName'", containsString("ไทย"))
                .body("[0].'translations'.'de'", containsString("Thailand"))
                .body("[0].'translations'.'es'", containsString("Tailandia"))
                .body("[0].'translations'.'fr'", containsString("Thaïlande"))
                .body("[0].'translations'.'ja'", containsString("タイ"))
                .body("[0].'translations'.'it'", containsString("Tailandia"))
                .body("[0].'translations'.'br'", containsString("Tailândia"))
                .body("[0].'translations'.'pt'", containsString("Tailândia"))
                .body("[0].'translations'.'nl'", containsString("Thailand"))
                .body("[0].'translations'.'hr'", containsString("Tajland"))
                .body("[0].'translations'.'fa'", containsString("تایلند"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/tha.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("ASEAN"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Association of Southeast Asian Nations"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("THA"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_75_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/cx?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Christmas Island"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cx"))
                .body("[0].'alpha2Code'", containsString("CX"))
                .body("[0].'alpha3Code'", containsString("CXR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("61"))
                .body("[0].'capital'", containsString("Flying Fish Cove"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("CX", "Territory of Christmas Island"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Australia and New Zealand"))
                .body("[0].'population'", numberMatches(2072.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-10.5))
                .body("[0].'latlng'[1]", numberMatches(105.66666666))
                .body("[0].'demonym'", containsString("Christmas Island"))
                .body("[0].'area'", numberMatches(135.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+07:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Christmas Island"))
                .body("[0].'numericCode'", containsString("162"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AUD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Weihnachtsinsel"))
                .body("[0].'translations'.'es'", containsString("Isla de Navidad"))
                .body("[0].'translations'.'fr'", containsString("Île Christmas"))
                .body("[0].'translations'.'ja'", containsString("クリスマス島"))
                .body("[0].'translations'.'it'", containsString("Isola di Natale"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_76_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/235")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Chad"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".td"))
                .body("[0].'alpha2Code'", containsString("TD"))
                .body("[0].'alpha3Code'", containsString("TCD"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("235"))
                .body("[0].'capital'", containsString("N'Djamena"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("TD", "Tchad", "Republic of Chad", "République du Tchad"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Middle Africa"))
                .body("[0].'population'", numberMatches(1.4037E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(15.0))
                .body("[0].'latlng'[1]", numberMatches(19.0))
                .body("[0].'demonym'", containsString("Chadian"))
                .body("[0].'area'", numberMatches(1284000.0))
                .body("[0].'gini'", numberMatches(39.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("CMR", "CAF", "LBY", "NER", "NGA", "SSD"))
                .body("[0].'nativeName'", containsString("Tchad"))
                .body("[0].'numericCode'", containsString("148"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XAF"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fr", "ar"))
                .body("[0].'translations'.'de'", containsString("Tschad"))
                .body("[0].'translations'.'es'", containsString("Chad"))
                .body("[0].'translations'.'fr'", containsString("Tchad"))
                .body("[0].'translations'.'ja'", containsString("チャド"))
                .body("[0].'translations'.'it'", containsString("Ciad"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_77_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/budapest?fields=_EM_11246_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_78_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/261?fields=alpha2Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha2Code'", containsString("MG"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_79_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/macao?" + 
                    "fields=_EM_16660_XYZ_&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_80_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/madagascar?" + 
                    "fields=_EM_16660_XYZ_&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_81_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/luxembourg?" + 
                    "fields=Glh&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_82_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/mk")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Republic of Macedonia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mk"))
                .body("[0].'alpha2Code'", containsString("MK"))
                .body("[0].'alpha3Code'", containsString("MKD"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("389"))
                .body("[0].'capital'", containsString("Skopje"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("MK", "Republic of Macedonia", "Република Македонија"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(2058539.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(41.83333333))
                .body("[0].'latlng'[1]", numberMatches(22.0))
                .body("[0].'demonym'", containsString("Macedonian"))
                .body("[0].'area'", numberMatches(25713.0))
                .body("[0].'gini'", numberMatches(43.2))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("ALB", "BGR", "GRC", "KOS", "SRB"))
                .body("[0].'nativeName'", containsString("Македонија"))
                .body("[0].'numericCode'", containsString("807"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MKD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("mk"))
                .body("[0].'translations'.'de'", containsString("Mazedonien"))
                .body("[0].'translations'.'es'", containsString("Macedonia"))
                .body("[0].'translations'.'fr'", containsString("Macédoine"))
                .body("[0].'translations'.'ja'", containsString("マケドニア旧ユーゴスラビア共和国"))
                .body("[0].'translations'.'it'", containsString("Macedonia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_83_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/500")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("Falkland Islands"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".fk"))
                .body("[0].'alpha2Code'", containsString("FK"))
                .body("[0].'alpha3Code'", containsString("FLK"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("500"))
                .body("[0].'capital'", containsString("Stanley"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("FK", "Islas Malvinas"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(3000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-51.75))
                .body("[0].'latlng'[1]", numberMatches(-59.0))
                .body("[0].'demonym'", containsString("Falkland Islander"))
                .body("[0].'area'", numberMatches(12173.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Falkland Islands"))
                .body("[0].'numericCode'", containsString("238"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("FKP"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Falklandinseln"))
                .body("[0].'translations'.'es'", containsString("Islas Malvinas"))
                .body("[0].'translations'.'fr'", containsString("Îles Malouines"))
                .body("[0].'translations'.'ja'", containsString("フォークランド（マルビナス）諸島"))
                .body("[0].'translations'.'it'", containsString("Isole Falkland o Isole Malvine"))
                .body("[0].'relevance'", containsString("0.5"))
                .body("[1].'name'", containsString("South Georgia"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".gs"))
                .body("[1].'alpha2Code'", containsString("GS"))
                .body("[1].'alpha3Code'", containsString("SGS"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("500"))
                .body("[1].'capital'", containsString("King Edward Point"))
                .body("[1].'altSpellings'.size()", equalTo(2))
                .body("[1].'altSpellings'", hasItems("GS", "South Georgia and the South Sandwich Islands"))
                .body("[1].'region'", containsString("Americas"))
                .body("[1].'subregion'", containsString("South America"))
                .body("[1].'population'", numberMatches(30.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-54.5))
                .body("[1].'latlng'[1]", numberMatches(-37.0))
                .body("[1].'demonym'", containsString("South Georgia and the South Sandwich Islander"))
                .body("[1].'area'", nullValue())
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC-02:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("South Georgia"))
                .body("[1].'numericCode'", containsString("239"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("GBP"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("en"))
                .body("[1].'translations'.'de'", containsString("Südgeorgien und die Südlichen Sandwichinseln"))
                .body("[1].'translations'.'es'", containsString("Islas Georgias del Sur y Sandwich del Sur"))
                .body("[1].'translations'.'fr'", containsString("Géorgie du Sud-et-les Îles Sandwich du Sud"))
                .body("[1].'translations'.'ja'", containsString("サウスジョージア・サウスサンドウィッチ諸島"))
                .body("[1].'translations'.'it'", containsString("Georgia del Sud e Isole Sandwich Meridionali"))
                .body("[1].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_84_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/lv")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Latvia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".lv"))
                .body("[0].'alpha2Code'", containsString("LV"))
                .body("[0].'alpha3Code'", containsString("LVA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("371"))
                .body("[0].'capital'", containsString("Riga"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("LV", "Republic of Latvia", "Latvijas Republika"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(1980700.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(57.0))
                .body("[0].'latlng'[1]", numberMatches(25.0))
                .body("[0].'demonym'", containsString("Latvian"))
                .body("[0].'area'", numberMatches(64559.0))
                .body("[0].'gini'", numberMatches(36.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("BLR", "EST", "LTU", "RUS"))
                .body("[0].'nativeName'", containsString("Latvija"))
                .body("[0].'numericCode'", containsString("428"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("lv"))
                .body("[0].'translations'.'de'", containsString("Lettland"))
                .body("[0].'translations'.'es'", containsString("Letonia"))
                .body("[0].'translations'.'fr'", containsString("Lettonie"))
                .body("[0].'translations'.'ja'", containsString("ラトビア"))
                .body("[0].'translations'.'it'", containsString("Lettonia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_85_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/saint%20martin%20islander?fields=_EM_12338_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_86_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/mh")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Marshall Islands"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mh"))
                .body("[0].'alpha2Code'", containsString("MH"))
                .body("[0].'alpha3Code'", containsString("MHL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("692"))
                .body("[0].'capital'", containsString("Majuro"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("MH", "Republic of the Marshall Islands", "Aolepān Aorōkin M̧ajeļ"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Micronesia"))
                .body("[0].'population'", numberMatches(56086.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(9.0))
                .body("[0].'latlng'[1]", numberMatches(168.0))
                .body("[0].'demonym'", containsString("Marshallese"))
                .body("[0].'area'", numberMatches(181.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+12:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("M̧ajeļ"))
                .body("[0].'numericCode'", containsString("584"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "mh"))
                .body("[0].'translations'.'de'", containsString("Marshallinseln"))
                .body("[0].'translations'.'es'", containsString("Islas Marshall"))
                .body("[0].'translations'.'fr'", containsString("Îles Marshall"))
                .body("[0].'translations'.'ja'", containsString("マーシャル諸島"))
                .body("[0].'translations'.'it'", containsString("Isole Marshall"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_87_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/UZAN?fields=_EM_6220_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(15))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_88_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/bruneian?fields=_EM_15839_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_89_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/EEU?fields=_EM_4031_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_90_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/EU?" + 
                    "fields=_EM_4058_XYZ_&" + 
                    "EMextraParam123=_EM_3393_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(33))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 30 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_91_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/350")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Gibraltar"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gi"))
                .body("[0].'alpha2Code'", containsString("GI"))
                .body("[0].'alpha3Code'", containsString("GIB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("350"))
                .body("[0].'capital'", containsString("Gibraltar"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("GI"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(32734.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(36.13333333))
                .body("[0].'latlng'[1]", numberMatches(-5.35))
                .body("[0].'demonym'", containsString("Gibraltar"))
                .body("[0].'area'", numberMatches(6.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("ESP"))
                .body("[0].'nativeName'", containsString("Gibraltar"))
                .body("[0].'numericCode'", containsString("292"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("GIP"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Gibraltar"))
                .body("[0].'translations'.'es'", containsString("Gibraltar"))
                .body("[0].'translations'.'fr'", containsString("Gibraltar"))
                .body("[0].'translations'.'ja'", containsString("ジブラルタル"))
                .body("[0].'translations'.'it'", containsString("Gibilterra"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_92_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/86")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("China"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cn"))
                .body("[0].'alpha2Code'", containsString("CN"))
                .body("[0].'alpha3Code'", containsString("CHN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("86"))
                .body("[0].'capital'", containsString("Beijing"))
                .body("[0].'altSpellings'.size()", equalTo(7))
                .body("[0].'altSpellings'", hasItems("CN", "Zhōngguó", "Zhongguo", "Zhonghua", "People's Republic of China", "中华人民共和国", "Zhōnghuá Rénmín Gònghéguó"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Eastern Asia"))
                .body("[0].'population'", numberMatches(1.377422166E9))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(35.0))
                .body("[0].'latlng'[1]", numberMatches(105.0))
                .body("[0].'demonym'", containsString("Chinese"))
                .body("[0].'area'", numberMatches(9640011.0))
                .body("[0].'gini'", numberMatches(47.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(15))
                .body("[0].'borders'", hasItems("AFG", "BTN", "MMR", "HKG", "IND", "KAZ", "PRK", "KGZ", "LAO", "MAC", "MNG", "PAK", "RUS", "TJK", "VNM"))
                .body("[0].'nativeName'", containsString("中国"))
                .body("[0].'numericCode'", containsString("156"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("CNY"))
                .body("[0].'currencies'[0].'name'", containsString("Chinese yuan"))
                .body("[0].'currencies'[0].'symbol'", containsString("¥"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("zh"))
                .body("[0].'languages'[0].'iso639_2'", containsString("zho"))
                .body("[0].'languages'[0].'name'", containsString("Chinese"))
                .body("[0].'languages'[0].'nativeName'", containsString("中文 (Zhōngwén)"))
                .body("[0].'translations'.'de'", containsString("China"))
                .body("[0].'translations'.'es'", containsString("China"))
                .body("[0].'translations'.'fr'", containsString("Chine"))
                .body("[0].'translations'.'ja'", containsString("中国"))
                .body("[0].'translations'.'it'", containsString("Cina"))
                .body("[0].'translations'.'br'", containsString("China"))
                .body("[0].'translations'.'pt'", containsString("China"))
                .body("[0].'translations'.'nl'", containsString("China"))
                .body("[0].'translations'.'hr'", containsString("Kina"))
                .body("[0].'translations'.'fa'", containsString("چین"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/chn.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("CHN"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_93_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/SAARC?fields=_EM_4058_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(8))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 5 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_94_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/boneiru?" + 
                    "fields=alpha3Code&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha3Code'", containsString("BES"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_95_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/JMD?" + 
                    "fields=_EM_232_XYZ_&" + 
                    "EMextraParam123=_EM_233_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_96_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/filipino?fields=_EM_7060_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_97_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/54?fields=name")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Argentina"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_98_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/Micronesia?fields=_EM_600_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(7))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 4 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_99_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/tz?" + 
                    "fields=capital&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'capital'", containsString("Bern"))
                .body("[1].'capital'", containsString("Luxembourg"))
                .body("[2].'capital'", containsString("Dodoma"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_100_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/VND?" + 
                    "fields=_EM_722_XYZ_&" + 
                    "EMextraParam123=_EM_571_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_101_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha/SI?fields=_EM_608_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_102_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha/UG?" + 
                    "fields=lj&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_103_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_802_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/name/tw?" + 
                    "fullText=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Taiwan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".tw"))
                .body("[0].'alpha2Code'", containsString("TW"))
                .body("[0].'alpha3Code'", containsString("TWN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("886"))
                .body("[0].'capital'", containsString("Taipei"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("TW", "Táiwān", "Republic of China", "中華民國", "Zhōnghuá Mínguó"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Eastern Asia"))
                .body("[0].'population'", numberMatches(2.3461708E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(23.5))
                .body("[0].'latlng'[1]", numberMatches(121.0))
                .body("[0].'demonym'", containsString("Taiwanese"))
                .body("[0].'area'", numberMatches(36193.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("臺灣"))
                .body("[0].'numericCode'", containsString("158"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("TWD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("zh"))
                .body("[0].'translations'.'de'", containsString("Taiwan"))
                .body("[0].'translations'.'es'", containsString("Taiwán"))
                .body("[0].'translations'.'fr'", containsString("Taïwan"))
                .body("[0].'translations'.'ja'", containsString("台湾（台湾省/中華民国）"))
                .body("[0].'translations'.'it'", containsString("Taiwan"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_104_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_804_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/alpha/SC?fields=region")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'region'", containsString("Africa"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_105_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/NAFTA?fields=_EM_4058_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_106_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/bl?" + 
                    "fields=kN4&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(125))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 122 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_107_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/bj?" + 
                    "fields=kN4&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_108_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/montserratian?fields=alpha2Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha2Code'", containsString("MS"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_109_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Irland")
                .get(baseUrlOfSut + "/rest/v1/capital/nairobi?EMextraParam123=_EM_819_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Kenya"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ke"))
                .body("[0].'alpha2Code'", containsString("KE"))
                .body("[0].'alpha3Code'", containsString("KEN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("254"))
                .body("[0].'capital'", containsString("Nairobi"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("KE", "Republic of Kenya", "Jamhuri ya Kenya"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(4.605E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(1.0))
                .body("[0].'latlng'[1]", numberMatches(38.0))
                .body("[0].'demonym'", containsString("Kenyan"))
                .body("[0].'area'", numberMatches(580367.0))
                .body("[0].'gini'", numberMatches(47.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("ETH", "SOM", "SSD", "TZA", "UGA"))
                .body("[0].'nativeName'", containsString("Kenya"))
                .body("[0].'numericCode'", containsString("404"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("KES"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "sw"))
                .body("[0].'translations'.'de'", containsString("Kenia"))
                .body("[0].'translations'.'es'", containsString("Kenia"))
                .body("[0].'translations'.'fr'", containsString("Kenya"))
                .body("[0].'translations'.'ja'", containsString("ケニア"))
                .body("[0].'translations'.'it'", containsString("Kenya"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_110_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/95?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Myanmar"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mm"))
                .body("[0].'alpha2Code'", containsString("MM"))
                .body("[0].'alpha3Code'", containsString("MMR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("95"))
                .body("[0].'capital'", containsString("Naypyidaw"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("MM", "Burma", "Republic of the Union of Myanmar", "Pyidaunzu Thanmăda Myăma Nainngandaw"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("South-Eastern Asia"))
                .body("[0].'population'", numberMatches(5.3897E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(22.0))
                .body("[0].'latlng'[1]", numberMatches(98.0))
                .body("[0].'demonym'", containsString("Burmese"))
                .body("[0].'area'", numberMatches(676578.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+06:30"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("BGD", "CHN", "IND", "LAO", "THA"))
                .body("[0].'nativeName'", containsString("Myanma"))
                .body("[0].'numericCode'", containsString("104"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MMK"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("my"))
                .body("[0].'translations'.'de'", containsString("Myanmar"))
                .body("[0].'translations'.'es'", containsString("Myanmar"))
                .body("[0].'translations'.'fr'", containsString("Myanmar"))
                .body("[0].'translations'.'ja'", containsString("ミャンマー"))
                .body("[0].'translations'.'it'", containsString("Birmania"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_111_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/246")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("British Indian Ocean Territory"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".io"))
                .body("[0].'alpha2Code'", containsString("IO"))
                .body("[0].'alpha3Code'", containsString("IOT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("246"))
                .body("[0].'capital'", containsString("Diego Garcia"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("IO"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(3000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-6.0))
                .body("[0].'latlng'[1]", numberMatches(71.5))
                .body("[0].'demonym'", containsString("Indian"))
                .body("[0].'area'", numberMatches(60.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+06:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("British Indian Ocean Territory"))
                .body("[0].'numericCode'", containsString("086"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Britisches Territorium im Indischen Ozean"))
                .body("[0].'translations'.'es'", containsString("Territorio Británico del Océano Índico"))
                .body("[0].'translations'.'fr'", containsString("Territoire britannique de l'océan Indien"))
                .body("[0].'translations'.'ja'", containsString("イギリス領インド洋地域"))
                .body("[0].'translations'.'it'", containsString("Territorio britannico dell'oceano indiano"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_112_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/965")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Kuwait"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".kw"))
                .body("[0].'alpha2Code'", containsString("KW"))
                .body("[0].'alpha3Code'", containsString("KWT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("965"))
                .body("[0].'capital'", containsString("Kuwait City"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("KW", "State of Kuwait", "Dawlat al-Kuwait"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(3268431.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(29.5))
                .body("[0].'latlng'[1]", numberMatches(45.75))
                .body("[0].'demonym'", containsString("Kuwaiti"))
                .body("[0].'area'", numberMatches(17818.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("IRN", "SAU"))
                .body("[0].'nativeName'", containsString("الكويت"))
                .body("[0].'numericCode'", containsString("414"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("KWD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Kuwait"))
                .body("[0].'translations'.'es'", containsString("Kuwait"))
                .body("[0].'translations'.'fr'", containsString("Koweït"))
                .body("[0].'translations'.'ja'", containsString("クウェート"))
                .body("[0].'translations'.'it'", containsString("Kuwait"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_113_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/Middle%20Africa?fields=_EM_971_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(10))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_114_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/bujumbura?fields=dan2HwP10wukvfb")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_115_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/56")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Chile"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cl"))
                .body("[0].'alpha2Code'", containsString("CL"))
                .body("[0].'alpha3Code'", containsString("CHL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("56"))
                .body("[0].'capital'", containsString("Santiago"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("CL", "Republic of Chile", "República de Chile"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(1.8006407E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-30.0))
                .body("[0].'latlng'[1]", numberMatches(-71.0))
                .body("[0].'demonym'", containsString("Chilean"))
                .body("[0].'area'", numberMatches(756102.0))
                .body("[0].'gini'", numberMatches(52.1))
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC-06:00", "UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("ARG", "BOL", "PER"))
                .body("[0].'nativeName'", containsString("Chile"))
                .body("[0].'numericCode'", containsString("152"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'", hasItems("CLF", "CLP"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("es"))
                .body("[0].'translations'.'de'", containsString("Chile"))
                .body("[0].'translations'.'es'", containsString("Chile"))
                .body("[0].'translations'.'fr'", containsString("Chili"))
                .body("[0].'translations'.'ja'", containsString("チリ"))
                .body("[0].'translations'.'it'", containsString("Cile"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_116_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/UNASUL?EMextraParam123=_EM_3929_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(15))
                .body("[0].'name'", containsString("Argentina"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ar"))
                .body("[0].'alpha2Code'", containsString("AR"))
                .body("[0].'alpha3Code'", containsString("ARG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("54"))
                .body("[0].'capital'", containsString("Buenos Aires"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("AR", "Argentine Republic", "República Argentina"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(4.35904E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-34.0))
                .body("[0].'latlng'[1]", numberMatches(-64.0))
                .body("[0].'demonym'", containsString("Argentinean"))
                .body("[0].'area'", numberMatches(2780400.0))
                .body("[0].'gini'", numberMatches(44.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-03:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("BOL", "BRA", "CHL", "PRY", "URY"))
                .body("[0].'nativeName'", containsString("Argentina"))
                .body("[0].'numericCode'", containsString("032"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("ARS"))
                .body("[0].'currencies'[0].'name'", containsString("Argentine peso"))
                .body("[0].'currencies'[0].'symbol'", containsString("$"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("es"))
                .body("[0].'languages'[0].'iso639_2'", containsString("spa"))
                .body("[0].'languages'[0].'name'", containsString("Spanish"))
                .body("[0].'languages'[0].'nativeName'", containsString("Español"))
                .body("[0].'languages'[1].'iso639_1'", containsString("gn"))
                .body("[0].'languages'[1].'iso639_2'", containsString("grn"))
                .body("[0].'languages'[1].'name'", containsString("Guaraní"))
                .body("[0].'languages'[1].'nativeName'", containsString("Avañe'ẽ"))
                .body("[0].'translations'.'de'", containsString("Argentinien"))
                .body("[0].'translations'.'es'", containsString("Argentina"))
                .body("[0].'translations'.'fr'", containsString("Argentine"))
                .body("[0].'translations'.'ja'", containsString("アルゼンチン"))
                .body("[0].'translations'.'it'", containsString("Argentina"))
                .body("[0].'translations'.'br'", containsString("Argentina"))
                .body("[0].'translations'.'pt'", containsString("Argentina"))
                .body("[0].'translations'.'nl'", containsString("Argentinië"))
                .body("[0].'translations'.'hr'", containsString("Argentina"))
                .body("[0].'translations'.'fa'", containsString("آرژانتین"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/arg.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("USAN"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Union of South American Nations"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(3))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'", hasItems("UNASUR", "UNASUL", "UZAN"))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(4))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("Unión de Naciones Suramericanas", "União de Nações Sul-Americanas", "Unie van Zuid-Amerikaanse Naties", "South American Union"))
                .body("[0].'cioc'", containsString("ARG"))
                .body("[1].'name'", containsString("Bolivia (Plurinational State of)"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".bo"))
                .body("[1].'alpha2Code'", containsString("BO"))
                .body("[1].'alpha3Code'", containsString("BOL"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("591"))
                .body("[1].'capital'", containsString("Sucre"))
                .body("[1].'altSpellings'.size()", equalTo(8))
                .body("[1].'altSpellings'", hasItems("BO", "Buliwya", "Wuliwya", "Plurinational State of Bolivia", "Estado Plurinacional de Bolivia", "Buliwya Mamallaqta", "Wuliwya Suyu", "Tetã Volívia"))
                .body("[1].'region'", containsString("Americas"))
                .body("[1].'subregion'", containsString("South America"))
                .body("[1].'population'", numberMatches(1.0985059E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-17.0))
                .body("[1].'latlng'[1]", numberMatches(-65.0))
                .body("[1].'demonym'", containsString("Bolivian"))
                .body("[1].'area'", numberMatches(1098581.0))
                .body("[1].'gini'", numberMatches(56.3))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC-04:00"))
                .body("[1].'borders'.size()", equalTo(5))
                .body("[1].'borders'", hasItems("ARG", "BRA", "CHL", "PRY", "PER"))
                .body("[1].'nativeName'", containsString("Bolivia"))
                .body("[1].'numericCode'", containsString("068"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("BOB"))
                .body("[1].'currencies'[0].'name'", containsString("Bolivian boliviano"))
                .body("[1].'currencies'[0].'symbol'", containsString("Bs."))
                .body("[1].'languages'.size()", equalTo(3))
                .body("[1].'languages'[0].'iso639_1'", containsString("es"))
                .body("[1].'languages'[0].'iso639_2'", containsString("spa"))
                .body("[1].'languages'[0].'name'", containsString("Spanish"))
                .body("[1].'languages'[0].'nativeName'", containsString("Español"))
                .body("[1].'languages'[1].'iso639_1'", containsString("ay"))
                .body("[1].'languages'[1].'iso639_2'", containsString("aym"))
                .body("[1].'languages'[1].'name'", containsString("Aymara"))
                .body("[1].'languages'[1].'nativeName'", containsString("aymar aru"))
                .body("[1].'languages'[2].'iso639_1'", containsString("qu"))
                .body("[1].'languages'[2].'iso639_2'", containsString("que"))
                .body("[1].'languages'[2].'name'", containsString("Quechua"))
                .body("[1].'languages'[2].'nativeName'", containsString("Runa Simi"))
                .body("[1].'translations'.'de'", containsString("Bolivien"))
                .body("[1].'translations'.'es'", containsString("Bolivia"))
                .body("[1].'translations'.'fr'", containsString("Bolivie"))
                .body("[1].'translations'.'ja'", containsString("ボリビア多民族国"))
                .body("[1].'translations'.'it'", containsString("Bolivia"))
                .body("[1].'translations'.'br'", containsString("Bolívia"))
                .body("[1].'translations'.'pt'", containsString("Bolívia"))
                .body("[1].'translations'.'nl'", containsString("Bolivia"))
                .body("[1].'translations'.'hr'", containsString("Bolivija"))
                .body("[1].'translations'.'fa'", containsString("بولیوی"))
                .body("[1].'flag'", containsString("https://restcountries.eu/data/bol.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[0].'acronym'", containsString("USAN"))
                .body("[1].'regionalBlocs'[0].'name'", containsString("Union of South American Nations"))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(3))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'", hasItems("UNASUR", "UNASUL", "UZAN"))
                .body("[1].'regionalBlocs'[0].'otherNames'.size()", equalTo(4))
                .body("[1].'regionalBlocs'[0].'otherNames'", hasItems("Unión de Naciones Suramericanas", "União de Nações Sul-Americanas", "Unie van Zuid-Amerikaanse Naties", "South American Union"))
                .body("[1].'cioc'", containsString("BOL"))
                .body("[2].'name'", containsString("Brazil"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".br"))
                .body("[2].'alpha2Code'", containsString("BR"))
                .body("[2].'alpha3Code'", containsString("BRA"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("55"))
                .body("[2].'capital'", containsString("Brasília"))
                .body("[2].'altSpellings'.size()", equalTo(4))
                .body("[2].'altSpellings'", hasItems("BR", "Brasil", "Federative Republic of Brazil", "República Federativa do Brasil"))
                .body("[2].'region'", containsString("Americas"))
                .body("[2].'subregion'", containsString("South America"))
                .body("[2].'population'", numberMatches(2.06135893E8))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(-10.0))
                .body("[2].'latlng'[1]", numberMatches(-55.0))
                .body("[2].'demonym'", containsString("Brazilian"))
                .body("[2].'area'", numberMatches(8515767.0))
                .body("[2].'gini'", numberMatches(54.7))
                .body("[2].'timezones'.size()", equalTo(4))
                .body("[2].'timezones'", hasItems("UTC-05:00", "UTC-04:00", "UTC-03:00", "UTC-02:00"))
                .body("[2].'borders'.size()", equalTo(10))
                .body("[2].'borders'", hasItems("ARG", "BOL", "COL", "GUF", "GUY", "PRY", "PER", "SUR", "URY", "VEN"))
                .body("[2].'nativeName'", containsString("Brasil"))
                .body("[2].'numericCode'", containsString("076"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'[0].'code'", containsString("BRL"))
                .body("[2].'currencies'[0].'name'", containsString("Brazilian real"))
                .body("[2].'currencies'[0].'symbol'", containsString("R$"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'[0].'iso639_1'", containsString("pt"))
                .body("[2].'languages'[0].'iso639_2'", containsString("por"))
                .body("[2].'languages'[0].'name'", containsString("Portuguese"))
                .body("[2].'languages'[0].'nativeName'", containsString("Português"))
                .body("[2].'translations'.'de'", containsString("Brasilien"))
                .body("[2].'translations'.'es'", containsString("Brasil"))
                .body("[2].'translations'.'fr'", containsString("Brésil"))
                .body("[2].'translations'.'ja'", containsString("ブラジル"))
                .body("[2].'translations'.'it'", containsString("Brasile"))
                .body("[2].'translations'.'br'", containsString("Brasil"))
                .body("[2].'translations'.'pt'", containsString("Brasil"))
                .body("[2].'translations'.'nl'", containsString("Brazilië"))
                .body("[2].'translations'.'hr'", containsString("Brazil"))
                .body("[2].'translations'.'fa'", containsString("برزیل"))
                .body("[2].'flag'", containsString("https://restcountries.eu/data/bra.svg"))
                .body("[2].'regionalBlocs'.size()", equalTo(1))
                .body("[2].'regionalBlocs'[0].'acronym'", containsString("USAN"))
                .body("[2].'regionalBlocs'[0].'name'", containsString("Union of South American Nations"))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(3))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'", hasItems("UNASUR", "UNASUL", "UZAN"))
                .body("[2].'regionalBlocs'[0].'otherNames'.size()", equalTo(4))
                .body("[2].'regionalBlocs'[0].'otherNames'", hasItems("Unión de Naciones Suramericanas", "União de Nações Sul-Americanas", "Unie van Zuid-Amerikaanse Naties", "South American Union"))
                .body("[2].'cioc'", containsString("BRA"))
                ; // Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_117_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Saint-Barthélemy")
                .get(baseUrlOfSut + "/rest/v2/alpha/KN?" + 
                    "fields=_EM_1011_XYZ_&" + 
                    "EMextraParam123=_EM_1012_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_118_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1561_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/alpha/VE?fields=_EM_1560_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_119_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/brazilian?fields=_EM_7060_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_120_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/phnom%20penh")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Cambodia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".kh"))
                .body("[0].'alpha2Code'", containsString("KH"))
                .body("[0].'alpha3Code'", containsString("KHM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("855"))
                .body("[0].'capital'", containsString("Phnom Penh"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("KH", "Kingdom of Cambodia"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("South-Eastern Asia"))
                .body("[0].'population'", numberMatches(1.5405157E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(13.0))
                .body("[0].'latlng'[1]", numberMatches(105.0))
                .body("[0].'demonym'", containsString("Cambodian"))
                .body("[0].'area'", numberMatches(181035.0))
                .body("[0].'gini'", numberMatches(37.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+07:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("LAO", "THA", "VNM"))
                .body("[0].'nativeName'", containsString("Kâmpŭchéa"))
                .body("[0].'numericCode'", containsString("116"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("KHR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("km"))
                .body("[0].'translations'.'de'", containsString("Kambodscha"))
                .body("[0].'translations'.'es'", containsString("Camboya"))
                .body("[0].'translations'.'fr'", containsString("Cambodge"))
                .body("[0].'translations'.'ja'", containsString("カンボジア"))
                .body("[0].'translations'.'it'", containsString("Cambogia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_121_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/33")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("France"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".fr"))
                .body("[0].'alpha2Code'", containsString("FR"))
                .body("[0].'alpha3Code'", containsString("FRA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("33"))
                .body("[0].'capital'", containsString("Paris"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("FR", "French Republic", "République française"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(6.6186E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(46.0))
                .body("[0].'latlng'[1]", numberMatches(2.0))
                .body("[0].'demonym'", containsString("French"))
                .body("[0].'area'", numberMatches(640679.0))
                .body("[0].'gini'", numberMatches(32.7))
                .body("[0].'timezones'.size()", equalTo(12))
                .body("[0].'timezones'", hasItems("UTC-10:00", "UTC-09:30", "UTC-09:00", "UTC-08:00", "UTC-04:00", "UTC-03:00", "UTC+01:00", "UTC+03:00", "UTC+04:00", "UTC+05:00", "UTC+11:00", "UTC+12:00"))
                .body("[0].'borders'.size()", equalTo(8))
                .body("[0].'borders'", hasItems("AND", "BEL", "DEU", "ITA", "LUX", "MCO", "ESP", "CHE"))
                .body("[0].'nativeName'", containsString("France"))
                .body("[0].'numericCode'", containsString("250"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Frankreich"))
                .body("[0].'translations'.'es'", containsString("Francia"))
                .body("[0].'translations'.'fr'", containsString("France"))
                .body("[0].'translations'.'ja'", containsString("フランス"))
                .body("[0].'translations'.'it'", containsString("Francia"))
                .body("[0].'relevance'", containsString("2.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_122_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/haitian?fields=5HI3Qh748JrH")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_123_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/diego%20garcia")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("British Indian Ocean Territory"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".io"))
                .body("[0].'alpha2Code'", containsString("IO"))
                .body("[0].'alpha3Code'", containsString("IOT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("246"))
                .body("[0].'capital'", containsString("Diego Garcia"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("IO"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(3000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-6.0))
                .body("[0].'latlng'[1]", numberMatches(71.5))
                .body("[0].'demonym'", containsString("Indian"))
                .body("[0].'area'", numberMatches(60.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+06:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("British Indian Ocean Territory"))
                .body("[0].'numericCode'", containsString("086"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Britisches Territorium im Indischen Ozean"))
                .body("[0].'translations'.'es'", containsString("Territorio Británico del Océano Índico"))
                .body("[0].'translations'.'fr'", containsString("Territoire britannique de l'océan Indien"))
                .body("[0].'translations'.'ja'", containsString("イギリス領インド洋地域"))
                .body("[0].'translations'.'it'", containsString("Territorio britannico dell'oceano indiano"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_124_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Tonga")
                .get(baseUrlOfSut + "/rest/v2/alpha/GB?fields=_EM_1155_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_125_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/509")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Haiti"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ht"))
                .body("[0].'alpha2Code'", containsString("HT"))
                .body("[0].'alpha3Code'", containsString("HTI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("509"))
                .body("[0].'capital'", containsString("Port-au-Prince"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("HT", "Republic of Haiti", "République d'Haïti", "Repiblik Ayiti"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(1.1078033E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(19.0))
                .body("[0].'latlng'[1]", numberMatches(-72.41666666))
                .body("[0].'demonym'", containsString("Haitian"))
                .body("[0].'area'", numberMatches(27750.0))
                .body("[0].'gini'", numberMatches(59.2))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-05:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("DOM"))
                .body("[0].'nativeName'", containsString("Haïti"))
                .body("[0].'numericCode'", containsString("332"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("HTG"))
                .body("[0].'currencies'[0].'name'", containsString("Haitian gourde"))
                .body("[0].'currencies'[0].'symbol'", containsString("G"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("fr"))
                .body("[0].'languages'[0].'iso639_2'", containsString("fra"))
                .body("[0].'languages'[0].'name'", containsString("French"))
                .body("[0].'languages'[0].'nativeName'", containsString("français"))
                .body("[0].'languages'[1].'iso639_1'", containsString("ht"))
                .body("[0].'languages'[1].'iso639_2'", containsString("hat"))
                .body("[0].'languages'[1].'name'", containsString("Haitian"))
                .body("[0].'languages'[1].'nativeName'", containsString("Kreyòl ayisyen"))
                .body("[0].'translations'.'de'", containsString("Haiti"))
                .body("[0].'translations'.'es'", containsString("Haiti"))
                .body("[0].'translations'.'fr'", containsString("Haïti"))
                .body("[0].'translations'.'ja'", containsString("ハイチ"))
                .body("[0].'translations'.'it'", containsString("Haiti"))
                .body("[0].'translations'.'br'", containsString("Haiti"))
                .body("[0].'translations'.'pt'", containsString("Haiti"))
                .body("[0].'translations'.'nl'", containsString("Haïti"))
                .body("[0].'translations'.'hr'", containsString("Haiti"))
                .body("[0].'translations'.'fa'", containsString("هائیتی"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/hti.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("CARICOM"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Caribbean Community"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(3))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("Comunidad del Caribe", "Communauté Caribéenne", "Caribische Gemeenschap"))
                .body("[0].'cioc'", containsString("HAI"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_126_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/mw")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Malawi"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mw"))
                .body("[0].'alpha2Code'", containsString("MW"))
                .body("[0].'alpha3Code'", containsString("MWI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("265"))
                .body("[0].'capital'", containsString("Lilongwe"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("MW", "Republic of Malawi"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(1.6310431E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-13.5))
                .body("[0].'latlng'[1]", numberMatches(34.0))
                .body("[0].'demonym'", containsString("Malawian"))
                .body("[0].'area'", numberMatches(118484.0))
                .body("[0].'gini'", numberMatches(39.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("MOZ", "TZA", "ZMB"))
                .body("[0].'nativeName'", containsString("Malawi"))
                .body("[0].'numericCode'", containsString("454"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MWK"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "ny"))
                .body("[0].'translations'.'de'", containsString("Malawi"))
                .body("[0].'translations'.'es'", containsString("Malawi"))
                .body("[0].'translations'.'fr'", containsString("Malawi"))
                .body("[0].'translations'.'ja'", containsString("マラウイ"))
                .body("[0].'translations'.'it'", containsString("Malawi"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_127_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/bielarus?" + 
                    "fields=_EM_3794_XYZ_&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_128_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/dushanbe?fields=_EM_4441_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_129_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/phnom%20penh?fields=alpha3Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha3Code'", containsString("KHM"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_130_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/57")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Colombia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".co"))
                .body("[0].'alpha2Code'", containsString("CO"))
                .body("[0].'alpha3Code'", containsString("COL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("57"))
                .body("[0].'capital'", containsString("Bogotá"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("CO", "Republic of Colombia", "República de Colombia"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(4.82666E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(4.0))
                .body("[0].'latlng'[1]", numberMatches(-72.0))
                .body("[0].'demonym'", containsString("Colombian"))
                .body("[0].'area'", numberMatches(1141748.0))
                .body("[0].'gini'", numberMatches(55.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-05:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("BRA", "ECU", "PAN", "PER", "VEN"))
                .body("[0].'nativeName'", containsString("Colombia"))
                .body("[0].'numericCode'", containsString("170"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("COP"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("es"))
                .body("[0].'translations'.'de'", containsString("Kolumbien"))
                .body("[0].'translations'.'es'", containsString("Colombia"))
                .body("[0].'translations'.'fr'", containsString("Colombie"))
                .body("[0].'translations'.'ja'", containsString("コロンビア"))
                .body("[0].'translations'.'it'", containsString("Colombia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_131_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/232")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Sierra Leone"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sl"))
                .body("[0].'alpha2Code'", containsString("SL"))
                .body("[0].'alpha3Code'", containsString("SLE"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("232"))
                .body("[0].'capital'", containsString("Freetown"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("SL", "Republic of Sierra Leone"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(6453000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(8.5))
                .body("[0].'latlng'[1]", numberMatches(-11.5))
                .body("[0].'demonym'", containsString("Sierra Leonean"))
                .body("[0].'area'", numberMatches(71740.0))
                .body("[0].'gini'", numberMatches(42.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("GIN", "LBR"))
                .body("[0].'nativeName'", containsString("Sierra Leone"))
                .body("[0].'numericCode'", containsString("694"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("SLL"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Sierra Leone"))
                .body("[0].'translations'.'es'", containsString("Sierra Leone"))
                .body("[0].'translations'.'fr'", containsString("Sierra Leone"))
                .body("[0].'translations'.'ja'", containsString("シエラレオネ"))
                .body("[0].'translations'.'it'", containsString("Sierra Leone"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_132_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/1%20340?fields=_EM_8384_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_133_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/jamestown?fields=translations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'translations'.'br'", containsString("Santa Helena"))
                .body("[0].'translations'.'pt'", containsString("Santa Helena"))
                .body("[0].'translations'.'nl'", containsString("Sint-Helena"))
                .body("[0].'translations'.'hr'", containsString("Sveta Helena"))
                .body("[0].'translations'.'fa'", containsString("سنت هلنا، اسنشن و تریستان دا کونا"))
                .body("[0].'translations'.'de'", containsString("Sankt Helena"))
                .body("[0].'translations'.'es'", containsString("Santa Helena"))
                .body("[0].'translations'.'fr'", containsString("Sainte-Hélène"))
                .body("[0].'translations'.'ja'", containsString("セントヘレナ・アセンションおよびトリスタンダクーニャ"))
                .body("[0].'translations'.'it'", containsString("Sant'Elena"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_134_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/93?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Afghanistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".af"))
                .body("[0].'alpha2Code'", containsString("AF"))
                .body("[0].'alpha3Code'", containsString("AFG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("93"))
                .body("[0].'capital'", containsString("Kabul"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("AF", "Afġānistān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(2.60231E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(33.0))
                .body("[0].'latlng'[1]", numberMatches(65.0))
                .body("[0].'demonym'", containsString("Afghan"))
                .body("[0].'area'", numberMatches(652230.0))
                .body("[0].'gini'", numberMatches(27.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:30"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("IRN", "PAK", "TKM", "UZB", "TJK", "CHN"))
                .body("[0].'nativeName'", containsString("افغانستان"))
                .body("[0].'numericCode'", containsString("004"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AFN"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("ps", "uz", "tk"))
                .body("[0].'translations'.'de'", containsString("Afghanistan"))
                .body("[0].'translations'.'es'", containsString("Afganistán"))
                .body("[0].'translations'.'fr'", containsString("Afghanistan"))
                .body("[0].'translations'.'ja'", containsString("アフガニスタン"))
                .body("[0].'translations'.'it'", containsString("Afghanistan"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_135_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/94?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Sri Lanka"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".lk"))
                .body("[0].'alpha2Code'", containsString("LK"))
                .body("[0].'alpha3Code'", containsString("LKA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("94"))
                .body("[0].'capital'", containsString("Colombo"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("LK", "ilaṅkai", "Democratic Socialist Republic of Sri Lanka"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(2.0675E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(7.0))
                .body("[0].'latlng'[1]", numberMatches(81.0))
                .body("[0].'demonym'", containsString("Sri Lankan"))
                .body("[0].'area'", numberMatches(65610.0))
                .body("[0].'gini'", numberMatches(40.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+05:30"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("IND"))
                .body("[0].'nativeName'", containsString("śrī laṃkāva"))
                .body("[0].'numericCode'", containsString("144"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("LKR"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("si", "ta"))
                .body("[0].'translations'.'de'", containsString("Sri Lanka"))
                .body("[0].'translations'.'es'", containsString("Sri Lanka"))
                .body("[0].'translations'.'fr'", containsString("Sri Lanka"))
                .body("[0].'translations'.'ja'", containsString("スリランカ"))
                .body("[0].'translations'.'it'", containsString("Sri Lanka"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_136_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/Central%20Asia?" + 
                    "fields=_EM_1398_XYZ_&" + 
                    "EMextraParam123=_EM_1399_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_137_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/231")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Liberia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".lr"))
                .body("[0].'alpha2Code'", containsString("LR"))
                .body("[0].'alpha3Code'", containsString("LBR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("231"))
                .body("[0].'capital'", containsString("Monrovia"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("LR", "Republic of Liberia"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(4503000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(6.5))
                .body("[0].'latlng'[1]", numberMatches(-9.5))
                .body("[0].'demonym'", containsString("Liberian"))
                .body("[0].'area'", numberMatches(111369.0))
                .body("[0].'gini'", numberMatches(38.2))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("GIN", "CIV", "SLE"))
                .body("[0].'nativeName'", containsString("Liberia"))
                .body("[0].'numericCode'", containsString("430"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("LRD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Liberia"))
                .body("[0].'translations'.'es'", containsString("Liberia"))
                .body("[0].'translations'.'fr'", containsString("Liberia"))
                .body("[0].'translations'.'ja'", containsString("リベリア"))
                .body("[0].'translations'.'it'", containsString("Liberia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_138_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/zu")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("South Africa"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".za"))
                .body("[0].'alpha2Code'", containsString("ZA"))
                .body("[0].'alpha3Code'", containsString("ZAF"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("27"))
                .body("[0].'capital'", containsString("Pretoria"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("ZA", "RSA", "Suid-Afrika", "Republic of South Africa"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Southern Africa"))
                .body("[0].'population'", numberMatches(5.49569E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-29.0))
                .body("[0].'latlng'[1]", numberMatches(24.0))
                .body("[0].'demonym'", containsString("South African"))
                .body("[0].'area'", numberMatches(1221037.0))
                .body("[0].'gini'", numberMatches(63.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("BWA", "LSO", "MOZ", "NAM", "SWZ", "ZWE"))
                .body("[0].'nativeName'", containsString("South Africa"))
                .body("[0].'numericCode'", containsString("710"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ZAR"))
                .body("[0].'languages'.size()", equalTo(10))
                .body("[0].'languages'", hasItems("af", "en", "nr", "st", "ss", "tn", "ts", "ve", "xh", "zu"))
                .body("[0].'translations'.'de'", containsString("Republik Südafrika"))
                .body("[0].'translations'.'es'", containsString("República de Sudáfrica"))
                .body("[0].'translations'.'fr'", containsString("Afrique du Sud"))
                .body("[0].'translations'.'ja'", containsString("南アフリカ"))
                .body("[0].'translations'.'it'", containsString("Sud Africa"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_139_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/bratislava?fields=X")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_140_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/ms")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'name'", containsString("Brunei"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bn"))
                .body("[0].'alpha2Code'", containsString("BN"))
                .body("[0].'alpha3Code'", containsString("BRN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("673"))
                .body("[0].'capital'", containsString("Bandar Seri Begawan"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("BN", "Nation of Brunei", " the Abode of Peace"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("South-Eastern Asia"))
                .body("[0].'population'", numberMatches(393372.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(4.5))
                .body("[0].'latlng'[1]", numberMatches(114.66666666))
                .body("[0].'demonym'", containsString("Bruneian"))
                .body("[0].'area'", numberMatches(5765.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("MYS"))
                .body("[0].'nativeName'", containsString("Negara Brunei Darussalam"))
                .body("[0].'numericCode'", containsString("096"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BND"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ms"))
                .body("[0].'translations'.'de'", containsString("Brunei"))
                .body("[0].'translations'.'es'", containsString("Brunei"))
                .body("[0].'translations'.'fr'", containsString("Brunei"))
                .body("[0].'translations'.'ja'", containsString("ブルネイ・ダルサラーム"))
                .body("[0].'translations'.'it'", containsString("Brunei"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Malaysia"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".my"))
                .body("[1].'alpha2Code'", containsString("MY"))
                .body("[1].'alpha3Code'", containsString("MYS"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("60"))
                .body("[1].'capital'", containsString("Kuala Lumpur"))
                .body("[1].'altSpellings'.size()", equalTo(1))
                .body("[1].'altSpellings'", hasItems("MY"))
                .body("[1].'region'", containsString("Asia"))
                .body("[1].'subregion'", containsString("South-Eastern Asia"))
                .body("[1].'population'", numberMatches(3.06788E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(2.5))
                .body("[1].'latlng'[1]", numberMatches(112.5))
                .body("[1].'demonym'", containsString("Malaysian"))
                .body("[1].'area'", numberMatches(330803.0))
                .body("[1].'gini'", numberMatches(46.2))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+08:00"))
                .body("[1].'borders'.size()", equalTo(3))
                .body("[1].'borders'", hasItems("BRN", "IDN", "THA"))
                .body("[1].'nativeName'", containsString("Malaysia"))
                .body("[1].'numericCode'", containsString("458"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("MYR"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("ms"))
                .body("[1].'translations'.'de'", containsString("Malaysia"))
                .body("[1].'translations'.'es'", containsString("Malasia"))
                .body("[1].'translations'.'fr'", containsString("Malaisie"))
                .body("[1].'translations'.'ja'", containsString("マレーシア"))
                .body("[1].'translations'.'it'", containsString("Malesia"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Singapore"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".sg"))
                .body("[2].'alpha2Code'", containsString("SG"))
                .body("[2].'alpha3Code'", containsString("SGP"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("65"))
                .body("[2].'capital'", containsString("Singapore"))
                .body("[2].'altSpellings'.size()", equalTo(4))
                .body("[2].'altSpellings'", hasItems("SG", "Singapura", "Republik Singapura", "新加坡共和国"))
                .body("[2].'region'", containsString("Asia"))
                .body("[2].'subregion'", containsString("South-Eastern Asia"))
                .body("[2].'population'", numberMatches(5469700.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(1.36666666))
                .body("[2].'latlng'[1]", numberMatches(103.8))
                .body("[2].'demonym'", containsString("Singaporean"))
                .body("[2].'area'", numberMatches(710.0))
                .body("[2].'gini'", numberMatches(48.1))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+08:00"))
                .body("[2].'borders'.size()", equalTo(0))
                .body("[2].'nativeName'", containsString("Singapore"))
                .body("[2].'numericCode'", containsString("702"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("SGD"))
                .body("[2].'languages'.size()", equalTo(4))
                .body("[2].'languages'", hasItems("en", "ms", "ta", "zh"))
                .body("[2].'translations'.'de'", containsString("Singapur"))
                .body("[2].'translations'.'es'", containsString("Singapur"))
                .body("[2].'translations'.'fr'", containsString("Singapour"))
                .body("[2].'translations'.'ja'", containsString("シンガポール"))
                .body("[2].'translations'.'it'", containsString("Singapore"))
                .body("[2].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_141_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/ls?" + 
                    "fields=subregion&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'subregion'", containsString("Southern Africa"))
                .body("[1].'subregion'", containsString("Eastern Europe"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_142_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/55")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Brazil"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".br"))
                .body("[0].'alpha2Code'", containsString("BR"))
                .body("[0].'alpha3Code'", containsString("BRA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("55"))
                .body("[0].'capital'", containsString("Brasília"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("BR", "Brasil", "Federative Republic of Brazil", "República Federativa do Brasil"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(2.04772E8))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-10.0))
                .body("[0].'latlng'[1]", numberMatches(-55.0))
                .body("[0].'demonym'", containsString("Brazilian"))
                .body("[0].'area'", numberMatches(8515767.0))
                .body("[0].'gini'", numberMatches(54.7))
                .body("[0].'timezones'.size()", equalTo(4))
                .body("[0].'timezones'", hasItems("UTC-05:00", "UTC-04:00", "UTC-03:00", "UTC-02:00"))
                .body("[0].'borders'.size()", equalTo(10))
                .body("[0].'borders'", hasItems("ARG", "BOL", "COL", "GUF", "GUY", "PRY", "PER", "SUR", "URY", "VEN"))
                .body("[0].'nativeName'", containsString("Brasil"))
                .body("[0].'numericCode'", containsString("076"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BRL"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("pt"))
                .body("[0].'translations'.'de'", containsString("Brasilien"))
                .body("[0].'translations'.'es'", containsString("Brasil"))
                .body("[0].'translations'.'fr'", containsString("Brésil"))
                .body("[0].'translations'.'ja'", containsString("ブラジル"))
                .body("[0].'translations'.'it'", containsString("Brasile"))
                .body("[0].'relevance'", containsString("2"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_143_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/moscow")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Russia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ru"))
                .body("[0].'alpha2Code'", containsString("RU"))
                .body("[0].'alpha3Code'", containsString("RUS"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("7"))
                .body("[0].'capital'", containsString("Moscow"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("RU", "Rossiya", "Russian Federation", "Российская Федерация", "Rossiyskaya Federatsiya"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(1.4655633E8))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(60.0))
                .body("[0].'latlng'[1]", numberMatches(100.0))
                .body("[0].'demonym'", containsString("Russian"))
                .body("[0].'area'", numberMatches(1.7124442E7))
                .body("[0].'gini'", numberMatches(40.1))
                .body("[0].'timezones'.size()", equalTo(9))
                .body("[0].'timezones'", hasItems("UTC+03:00", "UTC+04:00", "UTC+06:00", "UTC+07:00", "UTC+08:00", "UTC+09:00", "UTC+10:00", "UTC+11:00", "UTC+12:00"))
                .body("[0].'borders'.size()", equalTo(14))
                .body("[0].'borders'", hasItems("AZE", "BLR", "CHN", "EST", "FIN", "GEO", "KAZ", "PRK", "LVA", "LTU", "MNG", "NOR", "POL", "UKR"))
                .body("[0].'nativeName'", containsString("Россия"))
                .body("[0].'numericCode'", containsString("643"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("RUB"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ru"))
                .body("[0].'translations'.'de'", containsString("Russland"))
                .body("[0].'translations'.'es'", containsString("Rusia"))
                .body("[0].'translations'.'fr'", containsString("Russie"))
                .body("[0].'translations'.'ja'", containsString("ロシア連邦"))
                .body("[0].'translations'.'it'", containsString("Russia"))
                .body("[0].'relevance'", containsString("2.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_144_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/denmark?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Denmark"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".dk"))
                .body("[0].'alpha2Code'", containsString("DK"))
                .body("[0].'alpha3Code'", containsString("DNK"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("45"))
                .body("[0].'capital'", containsString("Copenhagen"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("DK", "Danmark", "Kingdom of Denmark", "Kongeriget Danmark"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(5678348.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(56.0))
                .body("[0].'latlng'[1]", numberMatches(10.0))
                .body("[0].'demonym'", containsString("Danish"))
                .body("[0].'area'", numberMatches(43094.0))
                .body("[0].'gini'", numberMatches(24.0))
                .body("[0].'timezones'.size()", equalTo(5))
                .body("[0].'timezones'", hasItems("UTC-04:00", "UTC-03:00", "UTC-01:00", "UTC", "UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("DEU"))
                .body("[0].'nativeName'", containsString("Danmark"))
                .body("[0].'numericCode'", containsString("208"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("DKK"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("da"))
                .body("[0].'translations'.'de'", containsString("Dänemark"))
                .body("[0].'translations'.'es'", containsString("Dinamarca"))
                .body("[0].'translations'.'fr'", containsString("Danemark"))
                .body("[0].'translations'.'ja'", containsString("デンマーク"))
                .body("[0].'translations'.'it'", containsString("Danimarca"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_145_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/madagascar?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Madagascar"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mg"))
                .body("[0].'alpha2Code'", containsString("MG"))
                .body("[0].'alpha3Code'", containsString("MDG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("261"))
                .body("[0].'capital'", containsString("Antananarivo"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("MG", "Republic of Madagascar", "Repoblikan'i Madagasikara", "République de Madagascar"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(2.2434363E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-20.0))
                .body("[0].'latlng'[1]", numberMatches(47.0))
                .body("[0].'demonym'", containsString("Malagasy"))
                .body("[0].'area'", numberMatches(587041.0))
                .body("[0].'gini'", numberMatches(44.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Madagasikara"))
                .body("[0].'numericCode'", containsString("450"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MGA"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fr", "mg"))
                .body("[0].'translations'.'de'", containsString("Madagaskar"))
                .body("[0].'translations'.'es'", containsString("Madagascar"))
                .body("[0].'translations'.'fr'", containsString("Madagascar"))
                .body("[0].'translations'.'ja'", containsString("マダガスカル"))
                .body("[0].'translations'.'it'", containsString("Madagascar"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_146_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/monegasque?fields=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Monaco"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mc"))
                .body("[0].'alpha2Code'", containsString("MC"))
                .body("[0].'alpha3Code'", containsString("MCO"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("377"))
                .body("[0].'capital'", containsString("Monaco"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("MC", "Principality of Monaco", "Principauté de Monaco"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(38400.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(43.73333333))
                .body("[0].'latlng'[1]", numberMatches(7.4))
                .body("[0].'demonym'", containsString("Monegasque"))
                .body("[0].'area'", numberMatches(2.02))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("FRA"))
                .body("[0].'nativeName'", containsString("Monaco"))
                .body("[0].'numericCode'", containsString("492"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("EUR"))
                .body("[0].'currencies'[0].'name'", containsString("Euro"))
                .body("[0].'currencies'[0].'symbol'", containsString("€"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("fr"))
                .body("[0].'languages'[0].'iso639_2'", containsString("fra"))
                .body("[0].'languages'[0].'name'", containsString("French"))
                .body("[0].'languages'[0].'nativeName'", containsString("français"))
                .body("[0].'translations'.'de'", containsString("Monaco"))
                .body("[0].'translations'.'es'", containsString("Mónaco"))
                .body("[0].'translations'.'fr'", containsString("Monaco"))
                .body("[0].'translations'.'ja'", containsString("モナコ"))
                .body("[0].'translations'.'it'", containsString("Principato di Monaco"))
                .body("[0].'translations'.'br'", containsString("Mônaco"))
                .body("[0].'translations'.'pt'", containsString("Mónaco"))
                .body("[0].'translations'.'nl'", containsString("Monaco"))
                .body("[0].'translations'.'hr'", containsString("Monako"))
                .body("[0].'translations'.'fa'", containsString("موناکو"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/mco.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("MON"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_147_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/heard%20and%20mcdonald%20islander?fields=_EM_12084_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_148_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/AL?fields=altSpellings")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(22))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("DZ", "Dzayer", "Algérie"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("BH", "Kingdom of Bahrain", "Mamlakat al-Baḥrayn"))
                .body("[2].'altSpellings'.size()", equalTo(5))
                .body("[2].'altSpellings'", hasItems("KM", "Union of the Comoros", "Union des Comores", "Udzima wa Komori", "al-Ittiḥād al-Qumurī"))
                ; // Skipping assertions on the remaining 19 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_149_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/no")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("Norway"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".no"))
                .body("[0].'alpha2Code'", containsString("NO"))
                .body("[0].'alpha3Code'", containsString("NOR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("47"))
                .body("[0].'capital'", containsString("Oslo"))
                .body("[0].'altSpellings'.size()", equalTo(6))
                .body("[0].'altSpellings'", hasItems("NO", "Norge", "Noreg", "Kingdom of Norway", "Kongeriket Norge", "Kongeriket Noreg"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(5176998.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(62.0))
                .body("[0].'latlng'[1]", numberMatches(10.0))
                .body("[0].'demonym'", containsString("Norwegian"))
                .body("[0].'area'", numberMatches(323802.0))
                .body("[0].'gini'", numberMatches(25.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("FIN", "SWE", "RUS"))
                .body("[0].'nativeName'", containsString("Norge"))
                .body("[0].'numericCode'", containsString("578"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("NOK"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("no", "nb", "nn"))
                .body("[0].'translations'.'de'", containsString("Norwegen"))
                .body("[0].'translations'.'es'", containsString("Noruega"))
                .body("[0].'translations'.'fr'", containsString("Norvège"))
                .body("[0].'translations'.'ja'", containsString("ノルウェー"))
                .body("[0].'translations'.'it'", containsString("Norvegia"))
                .body("[0].'relevance'", containsString("1.5"))
                .body("[1].'name'", containsString("Svalbard and Jan Mayen"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".sj"))
                .body("[1].'alpha2Code'", containsString("SJ"))
                .body("[1].'alpha3Code'", containsString("SJM"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("47"))
                .body("[1].'capital'", containsString("Longyearbyen"))
                .body("[1].'altSpellings'.size()", equalTo(2))
                .body("[1].'altSpellings'", hasItems("SJ", "Svalbard and Jan Mayen Islands"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Northern Europe"))
                .body("[1].'population'", numberMatches(2562.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(78.0))
                .body("[1].'latlng'[1]", numberMatches(20.0))
                .body("[1].'demonym'", containsString("Norwegian"))
                .body("[1].'area'", nullValue())
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+01:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Svalbard og Jan Mayen"))
                .body("[1].'numericCode'", containsString("744"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("NOK"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("no"))
                .body("[1].'translations'.'de'", containsString("Svalbard und Jan Mayen"))
                .body("[1].'translations'.'es'", containsString("Islas Svalbard y Jan Mayen"))
                .body("[1].'translations'.'fr'", containsString("Svalbard et Jan Mayen"))
                .body("[1].'translations'.'ja'", containsString("スヴァールバル諸島およびヤンマイエン島"))
                .body("[1].'translations'.'it'", containsString("Svalbard e Jan Mayen"))
                .body("[1].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_150_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/84")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Vietnam"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".vn"))
                .body("[0].'alpha2Code'", containsString("VN"))
                .body("[0].'alpha3Code'", containsString("VNM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("84"))
                .body("[0].'capital'", containsString("Hanoi"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("VN", "Socialist Republic of Vietnam", "Cộng hòa Xã hội chủ nghĩa Việt Nam"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("South-Eastern Asia"))
                .body("[0].'population'", numberMatches(9.1812E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(16.16666666))
                .body("[0].'latlng'[1]", numberMatches(107.83333333))
                .body("[0].'demonym'", containsString("Vietnamese"))
                .body("[0].'area'", numberMatches(331212.0))
                .body("[0].'gini'", numberMatches(35.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+07:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("KHM", "CHN", "LAO"))
                .body("[0].'nativeName'", containsString("Việt Nam"))
                .body("[0].'numericCode'", containsString("704"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("VND"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("vi"))
                .body("[0].'translations'.'de'", containsString("Vietnam"))
                .body("[0].'translations'.'es'", containsString("Vietnam"))
                .body("[0].'translations'.'fr'", containsString("Viêt Nam"))
                .body("[0].'translations'.'ja'", containsString("ベトナム"))
                .body("[0].'translations'.'it'", containsString("Vietnam"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_151_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/213")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Algeria"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".dz"))
                .body("[0].'alpha2Code'", containsString("DZ"))
                .body("[0].'alpha3Code'", containsString("DZA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("213"))
                .body("[0].'capital'", containsString("Algiers"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("DZ", "Dzayer", "Algérie"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Northern Africa"))
                .body("[0].'population'", numberMatches(3.95E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(28.0))
                .body("[0].'latlng'[1]", numberMatches(3.0))
                .body("[0].'demonym'", containsString("Algerian"))
                .body("[0].'area'", numberMatches(2381741.0))
                .body("[0].'gini'", numberMatches(35.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(7))
                .body("[0].'borders'", hasItems("TUN", "LBY", "NER", "ESH", "MRT", "MLI", "MAR"))
                .body("[0].'nativeName'", containsString("الجزائر"))
                .body("[0].'numericCode'", containsString("012"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("DZD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Algerien"))
                .body("[0].'translations'.'es'", containsString("Argelia"))
                .body("[0].'translations'.'fr'", containsString("Algérie"))
                .body("[0].'translations'.'ja'", containsString("アルジェリア"))
                .body("[0].'translations'.'it'", containsString("Algeria"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_152_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/region/Polar?" + 
                    "fields=_EM_1776_XYZ_&" + 
                    "EMextraParam123=_EM_1777_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_153_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/ag?" + 
                    "fields=callingCodes&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(9))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("261"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("505"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("595"))
                ; // Skipping assertions on the remaining 6 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_154_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/република%20србија?" + 
                    "fields=_EM_13479_XYZ_&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_155_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1803_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/subregion/South-Eastern%20Asia?fields=_EM_1801_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(11))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 8 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_156_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/359?fields=alpha3Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha3Code'", containsString("BGR"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_157_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/970?" + 
                    "fields=_EM_1960_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_158_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/israeli?fields=_EM_11621_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_159_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/Oceania?fields=_EM_2027_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(27))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 24 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_160_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/256?fields=yDFtC_V")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_161_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/alpha/NE?" + 
                    "fields=_EM_2058_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_162_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/594")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("French Guiana"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gf"))
                .body("[0].'alpha2Code'", containsString("GF"))
                .body("[0].'alpha3Code'", containsString("GUF"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("594"))
                .body("[0].'capital'", containsString("Cayenne"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("GF", "Guiana", "Guyane"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(239648.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(4.0))
                .body("[0].'latlng'[1]", numberMatches(-53.0))
                .body("[0].'demonym'", containsString(""))
                .body("[0].'area'", nullValue())
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-03:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("BRA", "SUR"))
                .body("[0].'nativeName'", containsString("Guyane française"))
                .body("[0].'numericCode'", containsString("254"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Französisch Guyana"))
                .body("[0].'translations'.'es'", containsString("Guayana Francesa"))
                .body("[0].'translations'.'fr'", containsString("Guayane"))
                .body("[0].'translations'.'ja'", containsString("フランス領ギアナ"))
                .body("[0].'translations'.'it'", containsString("Guyana francese"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_163_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/guyane?" + 
                    "fields=LmIIih&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_164_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/pl")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Poland"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".pl"))
                .body("[0].'alpha2Code'", containsString("PL"))
                .body("[0].'alpha3Code'", containsString("POL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("48"))
                .body("[0].'capital'", containsString("Warsaw"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("PL", "Republic of Poland", "Rzeczpospolita Polska"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(3.8484E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(52.0))
                .body("[0].'latlng'[1]", numberMatches(20.0))
                .body("[0].'demonym'", containsString("Polish"))
                .body("[0].'area'", numberMatches(312679.0))
                .body("[0].'gini'", numberMatches(34.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(7))
                .body("[0].'borders'", hasItems("BLR", "CZE", "DEU", "LTU", "RUS", "SVK", "UKR"))
                .body("[0].'nativeName'", containsString("Polska"))
                .body("[0].'numericCode'", containsString("616"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("PLN"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("pl"))
                .body("[0].'translations'.'de'", containsString("Polen"))
                .body("[0].'translations'.'es'", containsString("Polonia"))
                .body("[0].'translations'.'fr'", containsString("Pologne"))
                .body("[0].'translations'.'ja'", containsString("ポーランド"))
                .body("[0].'translations'.'it'", containsString("Polonia"))
                .body("[0].'relevance'", containsString("1.25"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_165_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/lima")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Peru"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".pe"))
                .body("[0].'alpha2Code'", containsString("PE"))
                .body("[0].'alpha3Code'", containsString("PER"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("51"))
                .body("[0].'capital'", containsString("Lima"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("PE", "Republic of Peru", " República del Perú"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(3.1151643E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-10.0))
                .body("[0].'latlng'[1]", numberMatches(-76.0))
                .body("[0].'demonym'", containsString("Peruvian"))
                .body("[0].'area'", numberMatches(1285216.0))
                .body("[0].'gini'", numberMatches(48.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-05:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("BOL", "BRA", "CHL", "COL", "ECU"))
                .body("[0].'nativeName'", containsString("Perú"))
                .body("[0].'numericCode'", containsString("604"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("PEN"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("es"))
                .body("[0].'translations'.'de'", containsString("Peru"))
                .body("[0].'translations'.'es'", containsString("Perú"))
                .body("[0].'translations'.'fr'", containsString("Pérou"))
                .body("[0].'translations'.'ja'", containsString("ペルー"))
                .body("[0].'translations'.'it'", containsString("Perù"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_166_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/255?fields=_EM_15250_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_167_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/niamey?fields=_EM_5722_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_168_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/234?fields=mnU")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_169_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/french%20guiana?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("French Guiana"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gf"))
                .body("[0].'alpha2Code'", containsString("GF"))
                .body("[0].'alpha3Code'", containsString("GUF"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("594"))
                .body("[0].'capital'", containsString("Cayenne"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("GF", "Guiana", "Guyane"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(239648.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(4.0))
                .body("[0].'latlng'[1]", numberMatches(-53.0))
                .body("[0].'demonym'", containsString(""))
                .body("[0].'area'", nullValue())
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-03:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("BRA", "SUR"))
                .body("[0].'nativeName'", containsString("Guyane française"))
                .body("[0].'numericCode'", containsString("254"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Französisch Guyana"))
                .body("[0].'translations'.'es'", containsString("Guayana Francesa"))
                .body("[0].'translations'.'fr'", containsString("Guayane"))
                .body("[0].'translations'.'ja'", containsString("フランス領ギアナ"))
                .body("[0].'translations'.'it'", containsString("Guyana francese"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_170_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/64")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("New Zealand"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".nz"))
                .body("[0].'alpha2Code'", containsString("NZ"))
                .body("[0].'alpha3Code'", containsString("NZL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("64"))
                .body("[0].'capital'", containsString("Wellington"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("NZ", "Aotearoa"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Australia and New Zealand"))
                .body("[0].'population'", numberMatches(4609440.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-41.0))
                .body("[0].'latlng'[1]", numberMatches(174.0))
                .body("[0].'demonym'", containsString("New Zealander"))
                .body("[0].'area'", numberMatches(270467.0))
                .body("[0].'gini'", numberMatches(36.2))
                .body("[0].'timezones'.size()", equalTo(5))
                .body("[0].'timezones'", hasItems("UTC-11:00", "UTC-10:00", "UTC+12:00", "UTC+12:45", "UTC+13:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("New Zealand"))
                .body("[0].'numericCode'", containsString("554"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("NZD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "mi"))
                .body("[0].'translations'.'de'", containsString("Neuseeland"))
                .body("[0].'translations'.'es'", containsString("Nueva Zelanda"))
                .body("[0].'translations'.'fr'", containsString("Nouvelle-Zélande"))
                .body("[0].'translations'.'ja'", containsString("ニュージーランド"))
                .body("[0].'translations'.'it'", containsString("Nuova Zelanda"))
                .body("[0].'relevance'", containsString("1.0"))
                .body("[1].'name'", containsString("Pitcairn Islands"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".pn"))
                .body("[1].'alpha2Code'", containsString("PN"))
                .body("[1].'alpha3Code'", containsString("PCN"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("64"))
                .body("[1].'capital'", containsString("Adamstown"))
                .body("[1].'altSpellings'.size()", equalTo(2))
                .body("[1].'altSpellings'", hasItems("PN", "Pitcairn Henderson Ducie and Oeno Islands"))
                .body("[1].'region'", containsString("Oceania"))
                .body("[1].'subregion'", containsString("Polynesia"))
                .body("[1].'population'", numberMatches(56.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-25.06666666))
                .body("[1].'latlng'[1]", numberMatches(-130.1))
                .body("[1].'demonym'", containsString("Pitcairn Islander"))
                .body("[1].'area'", numberMatches(47.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC-08:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Pitcairn Islands"))
                .body("[1].'numericCode'", containsString("612"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("NZD"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("en"))
                .body("[1].'translations'.'de'", containsString("Pitcairn"))
                .body("[1].'translations'.'es'", containsString("Islas Pitcairn"))
                .body("[1].'translations'.'fr'", containsString("Îles Pitcairn"))
                .body("[1].'translations'.'ja'", containsString("ピトケアン"))
                .body("[1].'translations'.'it'", containsString("Isole Pitcairn"))
                .body("[1].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_171_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/963")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Syria"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sy"))
                .body("[0].'alpha2Code'", containsString("SY"))
                .body("[0].'alpha3Code'", containsString("SYR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("963"))
                .body("[0].'capital'", containsString("Damascus"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("SY", "Syrian Arab Republic", "Al-Jumhūrīyah Al-ʻArabīyah As-Sūrīyah"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(2.3339517E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(35.0))
                .body("[0].'latlng'[1]", numberMatches(38.0))
                .body("[0].'demonym'", containsString("Syrian"))
                .body("[0].'area'", numberMatches(185180.0))
                .body("[0].'gini'", numberMatches(35.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("IRQ", "ISR", "JOR", "LBN", "TUR"))
                .body("[0].'nativeName'", containsString("سوريا"))
                .body("[0].'numericCode'", containsString("760"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("SYP"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Syrien"))
                .body("[0].'translations'.'es'", containsString("Siria"))
                .body("[0].'translations'.'fr'", containsString("Syrie"))
                .body("[0].'translations'.'ja'", containsString("シリア・アラブ共和国"))
                .body("[0].'translations'.'it'", containsString("Siria"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_172_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/248?EMextraParam123=_EM_1315_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Seychelles"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sc"))
                .body("[0].'alpha2Code'", containsString("SC"))
                .body("[0].'alpha3Code'", containsString("SYC"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("248"))
                .body("[0].'capital'", containsString("Victoria"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("SC", "Republic of Seychelles", "Repiblik Sesel", "République des Seychelles"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(89949.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-4.58333333))
                .body("[0].'latlng'[1]", numberMatches(55.66666666))
                .body("[0].'demonym'", containsString("Seychellois"))
                .body("[0].'area'", numberMatches(452.0))
                .body("[0].'gini'", numberMatches(65.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Seychelles"))
                .body("[0].'numericCode'", containsString("690"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("SCR"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fr", "en"))
                .body("[0].'translations'.'de'", containsString("Seychellen"))
                .body("[0].'translations'.'es'", containsString("Seychelles"))
                .body("[0].'translations'.'fr'", containsString("Seychelles"))
                .body("[0].'translations'.'ja'", containsString("セーシェル"))
                .body("[0].'translations'.'it'", containsString("Seychelles"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_173_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/pago%20pago?fields=translations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'translations'.'br'", containsString("Samoa Americana"))
                .body("[0].'translations'.'pt'", containsString("Samoa Americana"))
                .body("[0].'translations'.'nl'", containsString("Amerikaans Samoa"))
                .body("[0].'translations'.'hr'", containsString("Američka Samoa"))
                .body("[0].'translations'.'fa'", containsString("ساموآی آمریکا"))
                .body("[0].'translations'.'de'", containsString("Amerikanisch-Samoa"))
                .body("[0].'translations'.'es'", containsString("Samoa Americana"))
                .body("[0].'translations'.'fr'", containsString("Samoa américaines"))
                .body("[0].'translations'.'ja'", containsString("アメリカ領サモア"))
                .body("[0].'translations'.'it'", containsString("Samoa Americane"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_174_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/678")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Vanuatu"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".vu"))
                .body("[0].'alpha2Code'", containsString("VU"))
                .body("[0].'alpha3Code'", containsString("VUT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("678"))
                .body("[0].'capital'", containsString("Port Vila"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("VU", "Republic of Vanuatu", "Ripablik blong Vanuatu", "République de Vanuatu"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Melanesia"))
                .body("[0].'population'", numberMatches(264652.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-16.0))
                .body("[0].'latlng'[1]", numberMatches(167.0))
                .body("[0].'demonym'", containsString("Ni-Vanuatu"))
                .body("[0].'area'", numberMatches(12189.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+11:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Vanuatu"))
                .body("[0].'numericCode'", containsString("548"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("VUV"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("bi", "en", "fr"))
                .body("[0].'translations'.'de'", containsString("Vanuatu"))
                .body("[0].'translations'.'es'", containsString("Vanuatu"))
                .body("[0].'translations'.'fr'", containsString("Vanuatu"))
                .body("[0].'translations'.'ja'", containsString("バヌアツ"))
                .body("[0].'translations'.'it'", containsString("Vanuatu"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_175_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/baghdad")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Iraq"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".iq"))
                .body("[0].'alpha2Code'", containsString("IQ"))
                .body("[0].'alpha3Code'", containsString("IRQ"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("964"))
                .body("[0].'capital'", containsString("Baghdad"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("IQ", "Republic of Iraq", "Jumhūriyyat al-‘Irāq"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(3.6004552E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(33.0))
                .body("[0].'latlng'[1]", numberMatches(44.0))
                .body("[0].'demonym'", containsString("Iraqi"))
                .body("[0].'area'", numberMatches(438317.0))
                .body("[0].'gini'", numberMatches(30.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("IRN", "JOR", "KWT", "SAU", "SYR", "TUR"))
                .body("[0].'nativeName'", containsString("العراق"))
                .body("[0].'numericCode'", containsString("368"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("IQD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("ar", "ku"))
                .body("[0].'translations'.'de'", containsString("Irak"))
                .body("[0].'translations'.'es'", containsString("Irak"))
                .body("[0].'translations'.'fr'", containsString("Irak"))
                .body("[0].'translations'.'ja'", containsString("イラク"))
                .body("[0].'translations'.'it'", containsString("Iraq"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_176_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/960")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Maldives"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mv"))
                .body("[0].'alpha2Code'", containsString("MV"))
                .body("[0].'alpha3Code'", containsString("MDV"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("960"))
                .body("[0].'capital'", containsString("Malé"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("MV", "Maldive Islands", "Republic of the Maldives", "Dhivehi Raajjeyge Jumhooriyya"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(341256.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(3.25))
                .body("[0].'latlng'[1]", numberMatches(73.0))
                .body("[0].'demonym'", containsString("Maldivan"))
                .body("[0].'area'", numberMatches(300.0))
                .body("[0].'gini'", numberMatches(37.4))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+05:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Maldives"))
                .body("[0].'numericCode'", containsString("462"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MVR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("dv"))
                .body("[0].'translations'.'de'", containsString("Malediven"))
                .body("[0].'translations'.'es'", containsString("Maldivas"))
                .body("[0].'translations'.'fr'", containsString("Maldives"))
                .body("[0].'translations'.'ja'", containsString("モルディブ"))
                .body("[0].'translations'.'it'", containsString("Maldive"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_177_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Samoa")
                .get(baseUrlOfSut + "/rest/v1/callingcode/961")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Lebanon"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".lb"))
                .body("[0].'alpha2Code'", containsString("LB"))
                .body("[0].'alpha3Code'", containsString("LBN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("961"))
                .body("[0].'capital'", containsString("Beirut"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("LB", "Lebanese Republic", "Al-Jumhūrīyah Al-Libnānīyah"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(4104000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(33.83333333))
                .body("[0].'latlng'[1]", numberMatches(35.83333333))
                .body("[0].'demonym'", containsString("Lebanese"))
                .body("[0].'area'", numberMatches(10452.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("ISR", "SYR"))
                .body("[0].'nativeName'", containsString("لبنان"))
                .body("[0].'numericCode'", containsString("422"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("LBP"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("ar", "fr"))
                .body("[0].'translations'.'de'", containsString("Libanon"))
                .body("[0].'translations'.'es'", containsString("Líbano"))
                .body("[0].'translations'.'fr'", containsString("Liban"))
                .body("[0].'translations'.'ja'", containsString("レバノン"))
                .body("[0].'translations'.'it'", containsString("Libano"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_178_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/257?fields=yDFtC_V")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_179_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/962")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Jordan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".jo"))
                .body("[0].'alpha2Code'", containsString("JO"))
                .body("[0].'alpha3Code'", containsString("JOR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("962"))
                .body("[0].'capital'", containsString("Amman"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("JO", "Hashemite Kingdom of Jordan", "al-Mamlakah al-Urdunīyah al-Hāshimīyah"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(6767600.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(31.0))
                .body("[0].'latlng'[1]", numberMatches(36.0))
                .body("[0].'demonym'", containsString("Jordanian"))
                .body("[0].'area'", numberMatches(89342.0))
                .body("[0].'gini'", numberMatches(35.4))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("IRQ", "ISR", "SAU", "SYR"))
                .body("[0].'nativeName'", containsString("الأردن"))
                .body("[0].'numericCode'", containsString("400"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("JOD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Jordanien"))
                .body("[0].'translations'.'es'", containsString("Jordania"))
                .body("[0].'translations'.'fr'", containsString("Jordanie"))
                .body("[0].'translations'.'ja'", containsString("ヨルダン"))
                .body("[0].'translations'.'it'", containsString("Giordania"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_180_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/226")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Burkina Faso"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bf"))
                .body("[0].'alpha2Code'", containsString("BF"))
                .body("[0].'alpha3Code'", containsString("BFA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("226"))
                .body("[0].'capital'", containsString("Ouagadougou"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("BF"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(1.8450494E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(13.0))
                .body("[0].'latlng'[1]", numberMatches(-2.0))
                .body("[0].'demonym'", containsString("Burkinabe"))
                .body("[0].'area'", numberMatches(272967.0))
                .body("[0].'gini'", numberMatches(39.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("BEN", "CIV", "GHA", "MLI", "NER", "TGO"))
                .body("[0].'nativeName'", containsString("Burkina Faso"))
                .body("[0].'numericCode'", containsString("854"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XOF"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fr", "ff"))
                .body("[0].'translations'.'de'", containsString("Burkina Faso"))
                .body("[0].'translations'.'es'", containsString("Burkina Faso"))
                .body("[0].'translations'.'fr'", containsString("Burkina Faso"))
                .body("[0].'translations'.'ja'", containsString("ブルキナファソ"))
                .body("[0].'translations'.'it'", containsString("Burkina Faso"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_181_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/291")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Eritrea"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".er"))
                .body("[0].'alpha2Code'", containsString("ER"))
                .body("[0].'alpha3Code'", containsString("ERI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("291"))
                .body("[0].'capital'", containsString("Asmara"))
                .body("[0].'altSpellings'.size()", equalTo(7))
                .body("[0].'altSpellings'", hasItems("ER", "State of Eritrea", "ሃገረ ኤርትራ", "Dawlat Iritriyá", "ʾErtrā", "Iritriyā", ""))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(5228000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(15.0))
                .body("[0].'latlng'[1]", numberMatches(39.0))
                .body("[0].'demonym'", containsString("Eritrean"))
                .body("[0].'area'", numberMatches(117600.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("DJI", "ETH", "SDN"))
                .body("[0].'nativeName'", containsString("ኤርትራ"))
                .body("[0].'numericCode'", containsString("232"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ERN"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("ti", "ar", "en"))
                .body("[0].'translations'.'de'", containsString("Eritrea"))
                .body("[0].'translations'.'es'", containsString("Eritrea"))
                .body("[0].'translations'.'fr'", containsString("Érythrée"))
                .body("[0].'translations'.'ja'", containsString("エリトリア"))
                .body("[0].'translations'.'it'", containsString("Eritrea"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_182_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/262?fields=alpha2Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'alpha2Code'", containsString("TF"))
                .body("[1].'alpha2Code'", containsString("YT"))
                .body("[2].'alpha2Code'", containsString("RE"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_183_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/republique%20de%20vanuatu?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Vanuatu"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".vu"))
                .body("[0].'alpha2Code'", containsString("VU"))
                .body("[0].'alpha3Code'", containsString("VUT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("678"))
                .body("[0].'capital'", containsString("Port Vila"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("VU", "Republic of Vanuatu", "Ripablik blong Vanuatu", "République de Vanuatu"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Melanesia"))
                .body("[0].'population'", numberMatches(277500.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-16.0))
                .body("[0].'latlng'[1]", numberMatches(167.0))
                .body("[0].'demonym'", containsString("Ni-Vanuatu"))
                .body("[0].'area'", numberMatches(12189.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+11:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Vanuatu"))
                .body("[0].'numericCode'", containsString("548"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("VUV"))
                .body("[0].'currencies'[0].'name'", containsString("Vanuatu vatu"))
                .body("[0].'currencies'[0].'symbol'", containsString("Vt"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'[0].'iso639_1'", containsString("bi"))
                .body("[0].'languages'[0].'iso639_2'", containsString("bis"))
                .body("[0].'languages'[0].'name'", containsString("Bislama"))
                .body("[0].'languages'[0].'nativeName'", containsString("Bislama"))
                .body("[0].'languages'[1].'iso639_1'", containsString("en"))
                .body("[0].'languages'[1].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[1].'name'", containsString("English"))
                .body("[0].'languages'[1].'nativeName'", containsString("English"))
                .body("[0].'languages'[2].'iso639_1'", containsString("fr"))
                .body("[0].'languages'[2].'iso639_2'", containsString("fra"))
                .body("[0].'languages'[2].'name'", containsString("French"))
                .body("[0].'languages'[2].'nativeName'", containsString("français"))
                .body("[0].'translations'.'de'", containsString("Vanuatu"))
                .body("[0].'translations'.'es'", containsString("Vanuatu"))
                .body("[0].'translations'.'fr'", containsString("Vanuatu"))
                .body("[0].'translations'.'ja'", containsString("バヌアツ"))
                .body("[0].'translations'.'it'", containsString("Vanuatu"))
                .body("[0].'translations'.'br'", containsString("Vanuatu"))
                .body("[0].'translations'.'pt'", containsString("Vanuatu"))
                .body("[0].'translations'.'nl'", containsString("Vanuatu"))
                .body("[0].'translations'.'hr'", containsString("Vanuatu"))
                .body("[0].'translations'.'fa'", containsString("وانواتو"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/vut.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("VAN"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_184_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/Oceania?" + 
                    "fields=_EM_2608_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(27))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 24 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_185_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/ngerulmud")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Palau"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".pw"))
                .body("[0].'alpha2Code'", containsString("PW"))
                .body("[0].'alpha3Code'", containsString("PLW"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("680"))
                .body("[0].'capital'", containsString("Ngerulmud"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("PW", "Republic of Palau", "Beluu er a Belau"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Micronesia"))
                .body("[0].'population'", numberMatches(20901.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(7.5))
                .body("[0].'latlng'[1]", numberMatches(134.5))
                .body("[0].'demonym'", containsString("Palauan"))
                .body("[0].'area'", numberMatches(459.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+09:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Palau"))
                .body("[0].'numericCode'", containsString("585"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Palau"))
                .body("[0].'translations'.'es'", containsString("Palau"))
                .body("[0].'translations'.'fr'", containsString("Palaos"))
                .body("[0].'translations'.'ja'", containsString("パラオ"))
                .body("[0].'translations'.'it'", containsString("Palau"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_186_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/south%20georgia%20and%20the%20south%20sandwich%20islander?fields=l0i")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_187_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/379")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Holy See"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".va"))
                .body("[0].'alpha2Code'", containsString("VA"))
                .body("[0].'alpha3Code'", containsString("VAT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("379"))
                .body("[0].'capital'", containsString("Rome"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("Sancta Sedes", "Vatican", "The Vatican"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(451.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(41.9))
                .body("[0].'latlng'[1]", numberMatches(12.45))
                .body("[0].'demonym'", containsString(""))
                .body("[0].'area'", numberMatches(0.44))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("ITA"))
                .body("[0].'nativeName'", containsString("Sancta Sedes"))
                .body("[0].'numericCode'", nullValue())
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(4))
                .body("[0].'languages'", hasItems("la", "it", "fr", "de"))
                .body("[0].'translations'.'de'", containsString("Heiliger Stuhl"))
                .body("[0].'translations'.'es'", containsString("Santa Sede"))
                .body("[0].'translations'.'fr'", containsString("voir Saint"))
                .body("[0].'translations'.'ja'", containsString("聖座"))
                .body("[0].'translations'.'it'", containsString("Santa Sede"))
                .body("[0].'relevance'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_188_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/subregion/Southern%20Europe?" + 
                    "fields=_EM_2719_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(17))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 14 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_189_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/82")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("South Korea"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".kr"))
                .body("[0].'alpha2Code'", containsString("KR"))
                .body("[0].'alpha3Code'", containsString("KOR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("82"))
                .body("[0].'capital'", containsString("Seoul"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("KR", "Republic of Korea"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Eastern Asia"))
                .body("[0].'population'", numberMatches(5.1448183E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(37.0))
                .body("[0].'latlng'[1]", numberMatches(127.5))
                .body("[0].'demonym'", containsString("South Korean"))
                .body("[0].'area'", numberMatches(100210.0))
                .body("[0].'gini'", numberMatches(31.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+09:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("PRK"))
                .body("[0].'nativeName'", containsString("대한민국"))
                .body("[0].'numericCode'", containsString("410"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("KRW"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ko"))
                .body("[0].'translations'.'de'", containsString("Südkorea"))
                .body("[0].'translations'.'es'", containsString("Corea del Sur"))
                .body("[0].'translations'.'fr'", containsString("Corée du Sud"))
                .body("[0].'translations'.'ja'", containsString("大韓民国"))
                .body("[0].'translations'.'it'", containsString("Corea del Sud"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_190_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/tallinn?fields=0Zvx%3CnVz")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_191_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/addis%20ababa?fields=_EM_5722_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_192_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/nauruan?fields=PK")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_193_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/moroni")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Comoros"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".km"))
                .body("[0].'alpha2Code'", containsString("KM"))
                .body("[0].'alpha3Code'", containsString("COM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("269"))
                .body("[0].'capital'", containsString("Moroni"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("KM", "Union of the Comoros", "Union des Comores", "Udzima wa Komori", "al-Ittiḥād al-Qumurī"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(784745.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-12.16666666))
                .body("[0].'latlng'[1]", numberMatches(44.25))
                .body("[0].'demonym'", containsString("Comoran"))
                .body("[0].'area'", numberMatches(1862.0))
                .body("[0].'gini'", numberMatches(64.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Komori"))
                .body("[0].'numericCode'", containsString("174"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("KMF"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("ar", "fr"))
                .body("[0].'translations'.'de'", containsString("Union der Komoren"))
                .body("[0].'translations'.'es'", containsString("Comoras"))
                .body("[0].'translations'.'fr'", containsString("Comores"))
                .body("[0].'translations'.'ja'", containsString("コモロ"))
                .body("[0].'translations'.'it'", containsString("Comore"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_194_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/copenhagen?fields=_EM_15252_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_195_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/saipan")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Northern Mariana Islands"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mp"))
                .body("[0].'alpha2Code'", containsString("MP"))
                .body("[0].'alpha3Code'", containsString("MNP"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Saipan"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("MP", "Commonwealth of the Northern Mariana Islands", "Sankattan Siha Na Islas Mariånas"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Micronesia"))
                .body("[0].'population'", numberMatches(53883.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(15.2))
                .body("[0].'latlng'[1]", numberMatches(145.75))
                .body("[0].'demonym'", containsString("American"))
                .body("[0].'area'", numberMatches(464.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+10:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Northern Mariana Islands"))
                .body("[0].'numericCode'", containsString("580"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "ch"))
                .body("[0].'translations'.'de'", containsString("Nördliche Marianen"))
                .body("[0].'translations'.'es'", containsString("Islas Marianas del Norte"))
                .body("[0].'translations'.'fr'", containsString("Îles Mariannes du Nord"))
                .body("[0].'translations'.'ja'", containsString("北マリアナ諸島"))
                .body("[0].'translations'.'it'", containsString("Isole Marianne Settentrionali"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_196_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/77")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Kazakhstan"))
                .body("[0].'topLevelDomain'.size()", equalTo(2))
                .body("[0].'topLevelDomain'", hasItems(".kz", ".қаз"))
                .body("[0].'alpha2Code'", containsString("KZ"))
                .body("[0].'alpha3Code'", containsString("KAZ"))
                .body("[0].'callingCodes'.size()", equalTo(2))
                .body("[0].'callingCodes'", hasItems("76", "77"))
                .body("[0].'capital'", containsString("Astana"))
                .body("[0].'altSpellings'.size()", equalTo(8))
                .body("[0].'altSpellings'", hasItems("KZ", "Qazaqstan", "Казахстан", "Republic of Kazakhstan", "Қазақстан Республикасы", "Qazaqstan Respublïkası", "Республика Казахстан", "Respublika Kazakhstan"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Central Asia"))
                .body("[0].'population'", numberMatches(1.75412E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(48.0))
                .body("[0].'latlng'[1]", numberMatches(68.0))
                .body("[0].'demonym'", containsString("Kazakhstani"))
                .body("[0].'area'", numberMatches(2724900.0))
                .body("[0].'gini'", numberMatches(29.0))
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC+05:00", "UTC+06:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("CHN", "KGZ", "RUS", "TKM", "UZB"))
                .body("[0].'nativeName'", containsString("Қазақстан"))
                .body("[0].'numericCode'", containsString("398"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("KZT"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("kk", "ru"))
                .body("[0].'translations'.'de'", containsString("Kasachstan"))
                .body("[0].'translations'.'es'", containsString("Kazajistán"))
                .body("[0].'translations'.'fr'", containsString("Kazakhstan"))
                .body("[0].'translations'.'ja'", containsString("カザフスタン"))
                .body("[0].'translations'.'it'", containsString("Kazakistan"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_197_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/turkmen?fields=_EM_12547_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_198_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/lb")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Luxembourg"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".lu"))
                .body("[0].'alpha2Code'", containsString("LU"))
                .body("[0].'alpha3Code'", containsString("LUX"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("352"))
                .body("[0].'capital'", containsString("Luxembourg"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("LU", "Grand Duchy of Luxembourg", "Grand-Duché de Luxembourg", "Großherzogtum Luxemburg", "Groussherzogtum Lëtzebuerg"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(562958.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(49.75))
                .body("[0].'latlng'[1]", numberMatches(6.16666666))
                .body("[0].'demonym'", containsString("Luxembourger"))
                .body("[0].'area'", numberMatches(2586.0))
                .body("[0].'gini'", numberMatches(30.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("BEL", "FRA", "DEU"))
                .body("[0].'nativeName'", containsString("Luxembourg"))
                .body("[0].'numericCode'", containsString("442"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("fr", "de", "lb"))
                .body("[0].'translations'.'de'", containsString("Luxemburg"))
                .body("[0].'translations'.'es'", containsString("Luxemburgo"))
                .body("[0].'translations'.'fr'", containsString("Luxembourg"))
                .body("[0].'translations'.'ja'", containsString("ルクセンブルク"))
                .body("[0].'translations'.'it'", containsString("Lussemburgo"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_199_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/sk?" + 
                    "fields=alpha2Code&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'alpha2Code'", containsString("HR"))
                .body("[1].'alpha2Code'", containsString("CZ"))
                .body("[2].'alpha2Code'", containsString("PL"))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_200_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/maldive%20islands?" + 
                    "fields=_EM_12587_XYZ_&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_201_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/508?fields=_EM_10222_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_202_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/mosotho?fields=altSpellings")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("LS", "Kingdom of Lesotho", "Muso oa Lesotho"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_203_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/plymouth")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Montserrat"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ms"))
                .body("[0].'alpha2Code'", containsString("MS"))
                .body("[0].'alpha3Code'", containsString("MSR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Plymouth"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("MS"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(4922.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(16.75))
                .body("[0].'latlng'[1]", numberMatches(-62.2))
                .body("[0].'demonym'", containsString("Montserratian"))
                .body("[0].'area'", numberMatches(102.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Montserrat"))
                .body("[0].'numericCode'", containsString("500"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XCD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Montserrat"))
                .body("[0].'translations'.'es'", containsString("Montserrat"))
                .body("[0].'translations'.'fr'", containsString("Montserrat"))
                .body("[0].'translations'.'ja'", containsString("モントセラト"))
                .body("[0].'translations'.'it'", containsString("Montserrat"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_204_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/albanian?fields=_EM_7060_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_205_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/paris?fields=alpha3Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha3Code'", containsString("FRA"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_206_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/dhaka")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Bangladesh"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bd"))
                .body("[0].'alpha2Code'", containsString("BD"))
                .body("[0].'alpha3Code'", containsString("BGD"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("880"))
                .body("[0].'capital'", containsString("Dhaka"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("BD", "People's Republic of Bangladesh", "Gônôprôjatôntri Bangladesh"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(1.58875E8))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(24.0))
                .body("[0].'latlng'[1]", numberMatches(90.0))
                .body("[0].'demonym'", containsString("Bangladeshi"))
                .body("[0].'area'", numberMatches(147570.0))
                .body("[0].'gini'", numberMatches(32.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+06:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("MMR", "IND"))
                .body("[0].'nativeName'", containsString("Bangladesh"))
                .body("[0].'numericCode'", containsString("050"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BDT"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("bn"))
                .body("[0].'translations'.'de'", containsString("Bangladesch"))
                .body("[0].'translations'.'es'", containsString("Bangladesh"))
                .body("[0].'translations'.'fr'", containsString("Bangladesh"))
                .body("[0].'translations'.'ja'", containsString("バングラデシュ"))
                .body("[0].'translations'.'it'", containsString("Bangladesh"))
                .body("[0].'relevance'", containsString("2"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_207_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/honduras?" + 
                    "fields=k&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_208_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/se?fields=HZ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(16))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 13 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_209_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/amman")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Jordan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".jo"))
                .body("[0].'alpha2Code'", containsString("JO"))
                .body("[0].'alpha3Code'", containsString("JOR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("962"))
                .body("[0].'capital'", containsString("Amman"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("JO", "Hashemite Kingdom of Jordan", "al-Mamlakah al-Urdunīyah al-Hāshimīyah"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(6767600.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(31.0))
                .body("[0].'latlng'[1]", numberMatches(36.0))
                .body("[0].'demonym'", containsString("Jordanian"))
                .body("[0].'area'", numberMatches(89342.0))
                .body("[0].'gini'", numberMatches(35.4))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("IRQ", "ISR", "SAU", "SYR"))
                .body("[0].'nativeName'", containsString("الأردن"))
                .body("[0].'numericCode'", containsString("400"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("JOD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Jordanien"))
                .body("[0].'translations'.'es'", containsString("Jordania"))
                .body("[0].'translations'.'fr'", containsString("Jordanie"))
                .body("[0].'translations'.'ja'", containsString("ヨルダン"))
                .body("[0].'translations'.'it'", containsString("Giordania"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_210_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/norwegian?fields=wmAC1lVN7aae6")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_211_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/nn")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Norway"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".no"))
                .body("[0].'alpha2Code'", containsString("NO"))
                .body("[0].'alpha3Code'", containsString("NOR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("47"))
                .body("[0].'capital'", containsString("Oslo"))
                .body("[0].'altSpellings'.size()", equalTo(6))
                .body("[0].'altSpellings'", hasItems("NO", "Norge", "Noreg", "Kingdom of Norway", "Kongeriket Norge", "Kongeriket Noreg"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(5176998.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(62.0))
                .body("[0].'latlng'[1]", numberMatches(10.0))
                .body("[0].'demonym'", containsString("Norwegian"))
                .body("[0].'area'", numberMatches(323802.0))
                .body("[0].'gini'", numberMatches(25.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("FIN", "SWE", "RUS"))
                .body("[0].'nativeName'", containsString("Norge"))
                .body("[0].'numericCode'", containsString("578"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("NOK"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("no", "nb", "nn"))
                .body("[0].'translations'.'de'", containsString("Norwegen"))
                .body("[0].'translations'.'es'", containsString("Noruega"))
                .body("[0].'translations'.'fr'", containsString("Norvège"))
                .body("[0].'translations'.'ja'", containsString("ノルウェー"))
                .body("[0].'translations'.'it'", containsString("Norvegia"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_212_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/islamabad?fields=H5s")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_213_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/USAN?fields=_EM_6220_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(15))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_214_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/the%20valley?fields=_EM_4441_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_215_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/960?fields=TqbXv5MhE9")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_216_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/qatari?fields=region")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'region'", containsString("Asia"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_217_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/966")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Saudi Arabia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sa"))
                .body("[0].'alpha2Code'", containsString("SA"))
                .body("[0].'alpha3Code'", containsString("SAU"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("966"))
                .body("[0].'capital'", containsString("Riyadh"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("SA", "Kingdom of Saudi Arabia", "Al-Mamlakah al-‘Arabiyyah as-Su‘ūdiyyah"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(3.1521418E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(25.0))
                .body("[0].'latlng'[1]", numberMatches(45.0))
                .body("[0].'demonym'", containsString("Saudi Arabian"))
                .body("[0].'area'", numberMatches(2149690.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(7))
                .body("[0].'borders'", hasItems("IRQ", "JOR", "KWT", "OMN", "QAT", "ARE", "YEM"))
                .body("[0].'nativeName'", containsString("العربية السعودية"))
                .body("[0].'numericCode'", containsString("682"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("SAR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Saudi-Arabien"))
                .body("[0].'translations'.'es'", containsString("Arabia Saudí"))
                .body("[0].'translations'.'fr'", containsString("Arabie Saoudite"))
                .body("[0].'translations'.'ja'", containsString("サウジアラビア"))
                .body("[0].'translations'.'it'", containsString("Arabia Saudita"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_218_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/260?fields=translations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'translations'.'br'", containsString("Zâmbia"))
                .body("[0].'translations'.'pt'", containsString("Zâmbia"))
                .body("[0].'translations'.'nl'", containsString("Zambia"))
                .body("[0].'translations'.'hr'", containsString("Zambija"))
                .body("[0].'translations'.'fa'", containsString("زامبیا"))
                .body("[0].'translations'.'de'", containsString("Sambia"))
                .body("[0].'translations'.'es'", containsString("Zambia"))
                .body("[0].'translations'.'fr'", containsString("Zambie"))
                .body("[0].'translations'.'ja'", containsString("ザンビア"))
                .body("[0].'translations'.'it'", containsString("Zambia"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_219_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha/PL?" + 
                    "fields=_EM_3509_XYZ_&" + 
                    "EMextraParam123=_EM_56_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_220_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_3511_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/currency/XOF?fields=_EM_3510_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(8))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 5 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_221_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/mn")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Mongolia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mn"))
                .body("[0].'alpha2Code'", containsString("MN"))
                .body("[0].'alpha3Code'", containsString("MNG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("976"))
                .body("[0].'capital'", containsString("Ulan Bator"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("MN"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Eastern Asia"))
                .body("[0].'population'", numberMatches(3031099.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(46.0))
                .body("[0].'latlng'[1]", numberMatches(105.0))
                .body("[0].'demonym'", containsString("Mongolian"))
                .body("[0].'area'", numberMatches(1564110.0))
                .body("[0].'gini'", numberMatches(36.5))
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC+07:00", "UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("CHN", "RUS"))
                .body("[0].'nativeName'", containsString("Монгол улс"))
                .body("[0].'numericCode'", containsString("496"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MNT"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("mn"))
                .body("[0].'translations'.'de'", containsString("Mongolei"))
                .body("[0].'translations'.'es'", containsString("Mongolia"))
                .body("[0].'translations'.'fr'", containsString("Mongolie"))
                .body("[0].'translations'.'ja'", containsString("モンゴル"))
                .body("[0].'translations'.'it'", containsString("Mongolia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_222_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/tbilisi")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Georgia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ge"))
                .body("[0].'alpha2Code'", containsString("GE"))
                .body("[0].'alpha3Code'", containsString("GEO"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("995"))
                .body("[0].'capital'", containsString("Tbilisi"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("GE", "Sakartvelo"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(3729500.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(42.0))
                .body("[0].'latlng'[1]", numberMatches(43.5))
                .body("[0].'demonym'", containsString("Georgian"))
                .body("[0].'area'", numberMatches(69700.0))
                .body("[0].'gini'", numberMatches(41.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-05:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("ARM", "AZE", "RUS", "TUR"))
                .body("[0].'nativeName'", containsString("საქართველო"))
                .body("[0].'numericCode'", containsString("268"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("GEL"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ka"))
                .body("[0].'translations'.'de'", containsString("Georgien"))
                .body("[0].'translations'.'es'", containsString("Georgia"))
                .body("[0].'translations'.'fr'", containsString("Géorgie"))
                .body("[0].'translations'.'ja'", containsString("グルジア"))
                .body("[0].'translations'.'it'", containsString("Georgia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_223_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/tadzhik?fields=_EM_4167_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_224_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/sahrawi?fields=translations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'translations'.'br'", containsString("Saara Ocidental"))
                .body("[0].'translations'.'pt'", containsString("Saara Ocidental"))
                .body("[0].'translations'.'nl'", containsString("Westelijke Sahara"))
                .body("[0].'translations'.'hr'", containsString("Zapadna Sahara"))
                .body("[0].'translations'.'fa'", containsString("جمهوری دموکراتیک عربی صحرا"))
                .body("[0].'translations'.'de'", containsString("Westsahara"))
                .body("[0].'translations'.'es'", containsString("Sahara Occidental"))
                .body("[0].'translations'.'fr'", containsString("Sahara Occidental"))
                .body("[0].'translations'.'ja'", containsString("西サハラ"))
                .body("[0].'translations'.'it'", containsString("Sahara Occidentale"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_225_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/233?fields=mnU")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_226_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/258?fields=translations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'translations'.'br'", containsString("Moçambique"))
                .body("[0].'translations'.'pt'", containsString("Moçambique"))
                .body("[0].'translations'.'nl'", containsString("Mozambique"))
                .body("[0].'translations'.'hr'", containsString("Mozambik"))
                .body("[0].'translations'.'fa'", containsString("موزامبیک"))
                .body("[0].'translations'.'de'", containsString("Mosambik"))
                .body("[0].'translations'.'es'", containsString("Mozambique"))
                .body("[0].'translations'.'fr'", containsString("Mozambique"))
                .body("[0].'translations'.'ja'", containsString("モザンビーク"))
                .body("[0].'translations'.'it'", containsString("Mozambico"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_227_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/423?fields=altSpellings")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("LI", "Principality of Liechtenstein", "Fürstentum Liechtenstein"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_228_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/saint-pierre")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Saint Pierre and Miquelon"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".pm"))
                .body("[0].'alpha2Code'", containsString("PM"))
                .body("[0].'alpha3Code'", containsString("SPM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("508"))
                .body("[0].'capital'", containsString("Saint-Pierre"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("PM", "Collectivité territoriale de Saint-Pierre-et-Miquelon"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Northern America"))
                .body("[0].'population'", numberMatches(6069.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(46.83333333))
                .body("[0].'latlng'[1]", numberMatches(-56.33333333))
                .body("[0].'demonym'", containsString("French"))
                .body("[0].'area'", numberMatches(242.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-03:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Saint-Pierre-et-Miquelon"))
                .body("[0].'numericCode'", containsString("666"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Saint-Pierre und Miquelon"))
                .body("[0].'translations'.'es'", containsString("San Pedro y Miquelón"))
                .body("[0].'translations'.'fr'", containsString("Saint-Pierre-et-Miquelon"))
                .body("[0].'translations'.'ja'", containsString("サンピエール島・ミクロン島"))
                .body("[0].'translations'.'it'", containsString("Saint-Pierre e Miquelon"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_229_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/naypyidaw")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Myanmar"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mm"))
                .body("[0].'alpha2Code'", containsString("MM"))
                .body("[0].'alpha3Code'", containsString("MMR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("95"))
                .body("[0].'capital'", containsString("Naypyidaw"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("MM", "Burma", "Republic of the Union of Myanmar", "Pyidaunzu Thanmăda Myăma Nainngandaw"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("South-Eastern Asia"))
                .body("[0].'population'", numberMatches(5.3897E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(22.0))
                .body("[0].'latlng'[1]", numberMatches(98.0))
                .body("[0].'demonym'", containsString("Burmese"))
                .body("[0].'area'", numberMatches(676578.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+06:30"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("BGD", "CHN", "IND", "LAO", "THA"))
                .body("[0].'nativeName'", containsString("Myanma"))
                .body("[0].'numericCode'", containsString("104"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MMK"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("my"))
                .body("[0].'translations'.'de'", containsString("Myanmar"))
                .body("[0].'translations'.'es'", containsString("Myanmar"))
                .body("[0].'translations'.'fr'", containsString("Myanmar"))
                .body("[0].'translations'.'ja'", containsString("ミャンマー"))
                .body("[0].'translations'.'it'", containsString("Birmania"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_230_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/mt")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Malta"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mt"))
                .body("[0].'alpha2Code'", containsString("MT"))
                .body("[0].'alpha3Code'", containsString("MLT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("356"))
                .body("[0].'capital'", containsString("Valletta"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("MT", "Republic of Malta", "Repubblika ta' Malta"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(445426.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(35.83333333))
                .body("[0].'latlng'[1]", numberMatches(14.58333333))
                .body("[0].'demonym'", containsString("Maltese"))
                .body("[0].'area'", numberMatches(316.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Malta"))
                .body("[0].'numericCode'", containsString("470"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("mt", "en"))
                .body("[0].'translations'.'de'", containsString("Malta"))
                .body("[0].'translations'.'es'", containsString("Malta"))
                .body("[0].'translations'.'fr'", containsString("Malte"))
                .body("[0].'translations'.'ja'", containsString("マルタ"))
                .body("[0].'translations'.'it'", containsString("Malta"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_231_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/west%20island?fields=_EM_4441_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_232_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/region/Asia?" + 
                    "fields=_EM_3975_XYZ_&" + 
                    "EMextraParam123=_EM_3976_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(50))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 47 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_233_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/na?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(45))
                .body("[0].'name'", containsString("Argentina"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ar"))
                .body("[0].'alpha2Code'", containsString("AR"))
                .body("[0].'alpha3Code'", containsString("ARG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("54"))
                .body("[0].'capital'", containsString("Buenos Aires"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("AR", "Argentine Republic", "República Argentina"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(4.3131966E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-34.0))
                .body("[0].'latlng'[1]", numberMatches(-64.0))
                .body("[0].'demonym'", containsString("Argentinean"))
                .body("[0].'area'", numberMatches(2780400.0))
                .body("[0].'gini'", numberMatches(44.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-03:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("BOL", "BRA", "CHL", "PRY", "URY"))
                .body("[0].'nativeName'", containsString("Argentina"))
                .body("[0].'numericCode'", containsString("032"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ARS"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("es", "gn"))
                .body("[0].'translations'.'de'", containsString("Argentinien"))
                .body("[0].'translations'.'es'", containsString("Argentina"))
                .body("[0].'translations'.'fr'", containsString("Argentine"))
                .body("[0].'translations'.'ja'", containsString("アルゼンチン"))
                .body("[0].'translations'.'it'", containsString("Argentina"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Bonaire"))
                .body("[1].'topLevelDomain'.size()", equalTo(2))
                .body("[1].'topLevelDomain'", hasItems(".an", ".nl"))
                .body("[1].'alpha2Code'", containsString("BQ"))
                .body("[1].'alpha3Code'", containsString("BES"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("599"))
                .body("[1].'capital'", containsString("Kralendijk"))
                .body("[1].'altSpellings'.size()", equalTo(2))
                .body("[1].'altSpellings'", hasItems("BQ", "Boneiru"))
                .body("[1].'region'", containsString("Americas"))
                .body("[1].'subregion'", containsString("Caribbean"))
                .body("[1].'population'", numberMatches(17408.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(12.15))
                .body("[1].'latlng'[1]", numberMatches(-68.266667))
                .body("[1].'demonym'", containsString("Dutch"))
                .body("[1].'area'", numberMatches(294.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC-04:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Bonaire"))
                .body("[1].'numericCode'", containsString("535"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("USD"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("nl"))
                .body("[1].'translations'.'de'", nullValue())
                .body("[1].'translations'.'es'", nullValue())
                .body("[1].'translations'.'fr'", nullValue())
                .body("[1].'translations'.'ja'", nullValue())
                .body("[1].'translations'.'it'", nullValue())
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Bosnia and Herzegovina"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".ba"))
                .body("[2].'alpha2Code'", containsString("BA"))
                .body("[2].'alpha3Code'", containsString("BIH"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("387"))
                .body("[2].'capital'", containsString("Sarajevo"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("BA", "Bosnia-Herzegovina", "Босна и Херцеговина"))
                .body("[2].'region'", containsString("Europe"))
                .body("[2].'subregion'", containsString("Southern Europe"))
                .body("[2].'population'", numberMatches(3791622.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(44.0))
                .body("[2].'latlng'[1]", numberMatches(18.0))
                .body("[2].'demonym'", containsString("Bosnian, Herzegovinian"))
                .body("[2].'area'", numberMatches(51209.0))
                .body("[2].'gini'", numberMatches(36.2))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(3))
                .body("[2].'borders'", hasItems("HRV", "MNE", "SRB"))
                .body("[2].'nativeName'", containsString("Bosna i Hercegovina"))
                .body("[2].'numericCode'", containsString("070"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("BAM"))
                .body("[2].'languages'.size()", equalTo(3))
                .body("[2].'languages'", hasItems("bs", "hr", "sr"))
                .body("[2].'translations'.'de'", containsString("Bosnien und Herzegowina"))
                .body("[2].'translations'.'es'", containsString("Bosnia y Herzegovina"))
                .body("[2].'translations'.'fr'", containsString("Bosnie-Herzégovine"))
                .body("[2].'translations'.'ja'", containsString("ボスニア・ヘルツェゴビナ"))
                .body("[2].'translations'.'it'", containsString("Bosnia ed Erzegovina"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 42 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_234_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/EEU?" + 
                    "fields=_EM_4083_XYZ_&" + 
                    "EMextraParam123=_EM_3393_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_235_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/pa")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("Aruba"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".aw"))
                .body("[0].'alpha2Code'", containsString("AW"))
                .body("[0].'alpha3Code'", containsString("ABW"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("297"))
                .body("[0].'capital'", containsString("Oranjestad"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("AW"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(107394.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(12.5))
                .body("[0].'latlng'[1]", numberMatches(-69.96666666))
                .body("[0].'demonym'", containsString("Aruban"))
                .body("[0].'area'", numberMatches(180.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Aruba"))
                .body("[0].'numericCode'", containsString("533"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AWG"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("nl", "pa"))
                .body("[0].'translations'.'de'", containsString("Aruba"))
                .body("[0].'translations'.'es'", containsString("Aruba"))
                .body("[0].'translations'.'fr'", containsString("Aruba"))
                .body("[0].'translations'.'ja'", containsString("アルバ"))
                .body("[0].'translations'.'it'", containsString("Aruba"))
                .body("[0].'relevance'", containsString("0.5"))
                .body("[1].'name'", containsString("Curaçao"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".cw"))
                .body("[1].'alpha2Code'", containsString("CW"))
                .body("[1].'alpha3Code'", containsString("CUW"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("599"))
                .body("[1].'capital'", containsString("Willemstad"))
                .body("[1].'altSpellings'.size()", equalTo(6))
                .body("[1].'altSpellings'", hasItems("CW", "Curacao", "Kòrsou", "Country of Curaçao", "Land Curaçao", "Pais Kòrsou"))
                .body("[1].'region'", containsString("Americas"))
                .body("[1].'subregion'", containsString("Caribbean"))
                .body("[1].'population'", numberMatches(154843.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(12.116667))
                .body("[1].'latlng'[1]", numberMatches(-68.933333))
                .body("[1].'demonym'", containsString("Dutch"))
                .body("[1].'area'", numberMatches(444.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC-04:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Curaçao"))
                .body("[1].'numericCode'", containsString("531"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("ANG"))
                .body("[1].'languages'.size()", equalTo(3))
                .body("[1].'languages'", hasItems("nl", "pa", "en"))
                .body("[1].'translations'.'de'", nullValue())
                .body("[1].'translations'.'es'", nullValue())
                .body("[1].'translations'.'fr'", nullValue())
                .body("[1].'translations'.'ja'", nullValue())
                .body("[1].'translations'.'it'", nullValue())
                .body("[1].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_236_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/nederland?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Netherlands"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".nl"))
                .body("[0].'alpha2Code'", containsString("NL"))
                .body("[0].'alpha3Code'", containsString("NLD"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("31"))
                .body("[0].'capital'", containsString("Amsterdam"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("NL", "Holland", "Nederland"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(1.6916E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(52.5))
                .body("[0].'latlng'[1]", numberMatches(5.75))
                .body("[0].'demonym'", containsString("Dutch"))
                .body("[0].'area'", numberMatches(41850.0))
                .body("[0].'gini'", numberMatches(30.9))
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC-04:00", "UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("BEL", "DEU"))
                .body("[0].'nativeName'", containsString("Nederland"))
                .body("[0].'numericCode'", containsString("528"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("nl"))
                .body("[0].'translations'.'de'", containsString("Niederlande"))
                .body("[0].'translations'.'es'", containsString("Países Bajos"))
                .body("[0].'translations'.'fr'", containsString("Pays-Bas"))
                .body("[0].'translations'.'ja'", containsString("オランダ"))
                .body("[0].'translations'.'it'", containsString("Paesi Bassi"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_237_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/61")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'name'", containsString("Australia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".au"))
                .body("[0].'alpha2Code'", containsString("AU"))
                .body("[0].'alpha3Code'", containsString("AUS"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("61"))
                .body("[0].'capital'", containsString("Canberra"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("AU"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Australia and New Zealand"))
                .body("[0].'population'", numberMatches(2.38688E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-27.0))
                .body("[0].'latlng'[1]", numberMatches(133.0))
                .body("[0].'demonym'", containsString("Australian"))
                .body("[0].'area'", numberMatches(7692024.0))
                .body("[0].'gini'", numberMatches(30.5))
                .body("[0].'timezones'.size()", equalTo(8))
                .body("[0].'timezones'", hasItems("UTC+05:00", "UTC+06:30", "UTC+07:00", "UTC+08:00", "UTC+09:30", "UTC+10:00", "UTC+10:30", "UTC+11:30"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Australia"))
                .body("[0].'numericCode'", containsString("036"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AUD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Australien"))
                .body("[0].'translations'.'es'", containsString("Australia"))
                .body("[0].'translations'.'fr'", containsString("Australie"))
                .body("[0].'translations'.'ja'", containsString("オーストラリア"))
                .body("[0].'translations'.'it'", containsString("Australia"))
                .body("[0].'relevance'", containsString("1.5"))
                .body("[1].'name'", containsString("Christmas Island"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".cx"))
                .body("[1].'alpha2Code'", containsString("CX"))
                .body("[1].'alpha3Code'", containsString("CXR"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("61"))
                .body("[1].'capital'", containsString("Flying Fish Cove"))
                .body("[1].'altSpellings'.size()", equalTo(2))
                .body("[1].'altSpellings'", hasItems("CX", "Territory of Christmas Island"))
                .body("[1].'region'", containsString("Oceania"))
                .body("[1].'subregion'", containsString("Australia and New Zealand"))
                .body("[1].'population'", numberMatches(2072.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-10.5))
                .body("[1].'latlng'[1]", numberMatches(105.66666666))
                .body("[1].'demonym'", containsString("Christmas Island"))
                .body("[1].'area'", numberMatches(135.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+07:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Christmas Island"))
                .body("[1].'numericCode'", containsString("162"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("AUD"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("en"))
                .body("[1].'translations'.'de'", containsString("Weihnachtsinsel"))
                .body("[1].'translations'.'es'", containsString("Isla de Navidad"))
                .body("[1].'translations'.'fr'", containsString("Île Christmas"))
                .body("[1].'translations'.'ja'", containsString("クリスマス島"))
                .body("[1].'translations'.'it'", containsString("Isola di Natale"))
                .body("[1].'relevance'", containsString("0.5"))
                .body("[2].'name'", containsString("Cocos (Keeling) Islands"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".cc"))
                .body("[2].'alpha2Code'", containsString("CC"))
                .body("[2].'alpha3Code'", containsString("CCK"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("61"))
                .body("[2].'capital'", containsString("West Island"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("CC", "Territory of the Cocos (Keeling) Islands", "Keeling Islands"))
                .body("[2].'region'", containsString("Oceania"))
                .body("[2].'subregion'", containsString("Australia and New Zealand"))
                .body("[2].'population'", numberMatches(550.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(-12.5))
                .body("[2].'latlng'[1]", numberMatches(96.83333333))
                .body("[2].'demonym'", containsString("Cocos Islander"))
                .body("[2].'area'", numberMatches(14.0))
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+06:30"))
                .body("[2].'borders'.size()", equalTo(0))
                .body("[2].'nativeName'", containsString("Cocos (Keeling) Islands"))
                .body("[2].'numericCode'", containsString("166"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("AUD"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("en"))
                .body("[2].'translations'.'de'", containsString("Kokosinseln"))
                .body("[2].'translations'.'es'", containsString("Islas Cocos o Islas Keeling"))
                .body("[2].'translations'.'fr'", containsString("Îles Cocos"))
                .body("[2].'translations'.'ja'", containsString("ココス（キーリング）諸島"))
                .body("[2].'translations'.'it'", containsString("Isole Cocos e Keeling"))
                .body("[2].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_238_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/singapore?" + 
                    "fields=_EM_10872_XYZ_&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_239_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/республика%20казахстан?" + 
                    "fields=callingCodes&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'callingCodes'.size()", equalTo(2))
                .body("[0].'callingCodes'", hasItems("76", "77"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_240_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/senegal?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Senegal"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sn"))
                .body("[0].'alpha2Code'", containsString("SN"))
                .body("[0].'alpha3Code'", containsString("SEN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("221"))
                .body("[0].'capital'", containsString("Dakar"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("SN", "Republic of Senegal", "République du Sénégal"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(1.3508715E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(14.0))
                .body("[0].'latlng'[1]", numberMatches(-14.0))
                .body("[0].'demonym'", containsString("Senegalese"))
                .body("[0].'area'", numberMatches(196722.0))
                .body("[0].'gini'", numberMatches(39.2))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("GMB", "GIN", "GNB", "MLI", "MRT"))
                .body("[0].'nativeName'", containsString("Sénégal"))
                .body("[0].'numericCode'", containsString("686"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XOF"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Senegal"))
                .body("[0].'translations'.'es'", containsString("Senegal"))
                .body("[0].'translations'.'fr'", containsString("Sénégal"))
                .body("[0].'translations'.'ja'", containsString("セネガル"))
                .body("[0].'translations'.'it'", containsString("Senegal"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_241_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/238?fields=enT")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_242_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/EFTA?" + 
                    "fields=_EM_4356_XYZ_&" + 
                    "EMextraParam123=_EM_3393_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_243_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/ml?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Mali"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ml"))
                .body("[0].'alpha2Code'", containsString("ML"))
                .body("[0].'alpha3Code'", containsString("MLI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("223"))
                .body("[0].'capital'", containsString("Bamako"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("ML", "Republic of Mali", "République du Mali"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(1.76E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(17.0))
                .body("[0].'latlng'[1]", numberMatches(-4.0))
                .body("[0].'demonym'", containsString("Malian"))
                .body("[0].'area'", numberMatches(1240192.0))
                .body("[0].'gini'", numberMatches(33.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(7))
                .body("[0].'borders'", hasItems("DZA", "BFA", "GIN", "CIV", "MRT", "NER", "SEN"))
                .body("[0].'nativeName'", containsString("Mali"))
                .body("[0].'numericCode'", containsString("466"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XOF"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Mali"))
                .body("[0].'translations'.'es'", containsString("Mali"))
                .body("[0].'translations'.'fr'", containsString("Mali"))
                .body("[0].'translations'.'ja'", containsString("マリ"))
                .body("[0].'translations'.'it'", containsString("Mali"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_244_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/996?fields=LZi2rDjtdxf")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_245_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/SLL?fields=_EM_1676_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_246_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/212")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("Morocco"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ma"))
                .body("[0].'alpha2Code'", containsString("MA"))
                .body("[0].'alpha3Code'", containsString("MAR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("212"))
                .body("[0].'capital'", containsString("Rabat"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("MA", "Kingdom of Morocco", "Al-Mamlakah al-Maġribiyah"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Northern Africa"))
                .body("[0].'population'", numberMatches(3.3337529E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(32.0))
                .body("[0].'latlng'[1]", numberMatches(-5.0))
                .body("[0].'demonym'", containsString("Moroccan"))
                .body("[0].'area'", numberMatches(446550.0))
                .body("[0].'gini'", numberMatches(40.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("DZA", "ESH", "ESP"))
                .body("[0].'nativeName'", containsString("المغرب"))
                .body("[0].'numericCode'", containsString("504"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MAD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Marokko"))
                .body("[0].'translations'.'es'", containsString("Marruecos"))
                .body("[0].'translations'.'fr'", containsString("Maroc"))
                .body("[0].'translations'.'ja'", containsString("モロッコ"))
                .body("[0].'translations'.'it'", containsString("Marocco"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Western Sahara"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".eh"))
                .body("[1].'alpha2Code'", containsString("EH"))
                .body("[1].'alpha3Code'", containsString("ESH"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("212"))
                .body("[1].'capital'", containsString("El Aaiún"))
                .body("[1].'altSpellings'.size()", equalTo(2))
                .body("[1].'altSpellings'", hasItems("EH", "Taneẓroft Tutrimt"))
                .body("[1].'region'", containsString("Africa"))
                .body("[1].'subregion'", containsString("Northern Africa"))
                .body("[1].'population'", numberMatches(510713.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(24.5))
                .body("[1].'latlng'[1]", numberMatches(-13.0))
                .body("[1].'demonym'", containsString("Sahrawi"))
                .body("[1].'area'", numberMatches(266000.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+00:00"))
                .body("[1].'borders'.size()", equalTo(3))
                .body("[1].'borders'", hasItems("DZA", "MRT", "MAR"))
                .body("[1].'nativeName'", containsString("الصحراء الغربية"))
                .body("[1].'numericCode'", containsString("732"))
                .body("[1].'currencies'.size()", equalTo(3))
                .body("[1].'currencies'", hasItems("MAD", "DZD", "MRO"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("es"))
                .body("[1].'translations'.'de'", containsString("Westsahara"))
                .body("[1].'translations'.'es'", containsString("Sahara Occidental"))
                .body("[1].'translations'.'fr'", containsString("Sahara Occidental"))
                .body("[1].'translations'.'ja'", containsString("西サハラ"))
                .body("[1].'translations'.'it'", containsString("Sahara Occidentale"))
                .body("[1].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_247_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/venezuelan?fields=_EM_7060_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_248_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/vc?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Saint Vincent and the Grenadines"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".vc"))
                .body("[0].'alpha2Code'", containsString("VC"))
                .body("[0].'alpha3Code'", containsString("VCT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Kingstown"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("VC"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(109991.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(13.25))
                .body("[0].'latlng'[1]", numberMatches(-61.2))
                .body("[0].'demonym'", containsString("Saint Vincentian"))
                .body("[0].'area'", numberMatches(389.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Saint Vincent and the Grenadines"))
                .body("[0].'numericCode'", containsString("670"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XCD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Saint Vincent und die Grenadinen"))
                .body("[0].'translations'.'es'", containsString("San Vicente y Granadinas"))
                .body("[0].'translations'.'fr'", containsString("Saint-Vincent-et-les-Grenadines"))
                .body("[0].'translations'.'ja'", containsString("セントビンセントおよびグレナディーン諸島"))
                .body("[0].'translations'.'it'", containsString("Saint Vincent e Grenadine"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_249_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha/SR?fields=lh94")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_250_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/belarusian")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Belarus"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".by"))
                .body("[0].'alpha2Code'", containsString("BY"))
                .body("[0].'alpha3Code'", containsString("BLR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("375"))
                .body("[0].'capital'", containsString("Minsk"))
                .body("[0].'altSpellings'.size()", equalTo(7))
                .body("[0].'altSpellings'", hasItems("BY", "Bielaruś", "Republic of Belarus", "Белоруссия", "Республика Беларусь", "Belorussiya", "Respublika Belarus’"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(9498700.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(53.0))
                .body("[0].'latlng'[1]", numberMatches(28.0))
                .body("[0].'demonym'", containsString("Belarusian"))
                .body("[0].'area'", numberMatches(207600.0))
                .body("[0].'gini'", numberMatches(26.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("LVA", "LTU", "POL", "RUS", "UKR"))
                .body("[0].'nativeName'", containsString("Белару́сь"))
                .body("[0].'numericCode'", containsString("112"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'[0].'code'", containsString("BYN"))
                .body("[0].'currencies'[0].'name'", containsString("New Belarusian ruble"))
                .body("[0].'currencies'[0].'symbol'", containsString("Br"))
                .body("[0].'currencies'[1].'code'", containsString("BYR"))
                .body("[0].'currencies'[1].'name'", containsString("Old Belarusian ruble"))
                .body("[0].'currencies'[1].'symbol'", containsString("Br"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("be"))
                .body("[0].'languages'[0].'iso639_2'", containsString("bel"))
                .body("[0].'languages'[0].'name'", containsString("Belarusian"))
                .body("[0].'languages'[0].'nativeName'", containsString("беларуская мова"))
                .body("[0].'languages'[1].'iso639_1'", containsString("ru"))
                .body("[0].'languages'[1].'iso639_2'", containsString("rus"))
                .body("[0].'languages'[1].'name'", containsString("Russian"))
                .body("[0].'languages'[1].'nativeName'", containsString("Русский"))
                .body("[0].'translations'.'de'", containsString("Weißrussland"))
                .body("[0].'translations'.'es'", containsString("Bielorrusia"))
                .body("[0].'translations'.'fr'", containsString("Biélorussie"))
                .body("[0].'translations'.'ja'", containsString("ベラルーシ"))
                .body("[0].'translations'.'it'", containsString("Bielorussia"))
                .body("[0].'translations'.'br'", containsString("Bielorrússia"))
                .body("[0].'translations'.'pt'", containsString("Bielorrússia"))
                .body("[0].'translations'.'nl'", containsString("Wit-Rusland"))
                .body("[0].'translations'.'hr'", containsString("Bjelorusija"))
                .body("[0].'translations'.'fa'", containsString("بلاروس"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/blr.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("EEU"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Eurasian Economic Union"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'", hasItems("EAEU"))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("BLR"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_251_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/montenegrin?fields=translations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'translations'.'br'", containsString("Montenegro"))
                .body("[0].'translations'.'pt'", containsString("Montenegro"))
                .body("[0].'translations'.'nl'", containsString("Montenegro"))
                .body("[0].'translations'.'hr'", containsString("Crna Gora"))
                .body("[0].'translations'.'fa'", containsString("مونته‌نگرو"))
                .body("[0].'translations'.'de'", containsString("Montenegro"))
                .body("[0].'translations'.'es'", containsString("Montenegro"))
                .body("[0].'translations'.'fr'", containsString("Monténégro"))
                .body("[0].'translations'.'ja'", containsString("モンテネグロ"))
                .body("[0].'translations'.'it'", containsString("Montenegro"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_252_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/russian?fields=subregion")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'subregion'", containsString("Eastern Europe"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_253_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/montevideo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Uruguay"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".uy"))
                .body("[0].'alpha2Code'", containsString("UY"))
                .body("[0].'alpha3Code'", containsString("URY"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("598"))
                .body("[0].'capital'", containsString("Montevideo"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("UY", "Oriental Republic of Uruguay", "República Oriental del Uruguay"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(3415866.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-33.0))
                .body("[0].'latlng'[1]", numberMatches(-56.0))
                .body("[0].'demonym'", containsString("Uruguayan"))
                .body("[0].'area'", numberMatches(181034.0))
                .body("[0].'gini'", numberMatches(39.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-03:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("ARG", "BRA"))
                .body("[0].'nativeName'", containsString("Uruguay"))
                .body("[0].'numericCode'", containsString("858"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'", hasItems("UYI", "UYU"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("es"))
                .body("[0].'translations'.'de'", containsString("Uruguay"))
                .body("[0].'translations'.'es'", containsString("Uruguay"))
                .body("[0].'translations'.'fr'", containsString("Uruguay"))
                .body("[0].'translations'.'ja'", containsString("ウルグアイ"))
                .body("[0].'translations'.'it'", containsString("Uruguay"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_254_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/228")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Togo"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".tg"))
                .body("[0].'alpha2Code'", containsString("TG"))
                .body("[0].'alpha3Code'", containsString("TGO"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("228"))
                .body("[0].'capital'", containsString("Lomé"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("TG", "Togolese", "Togolese Republic", "République Togolaise"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(7305000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(8.0))
                .body("[0].'latlng'[1]", numberMatches(1.16666666))
                .body("[0].'demonym'", containsString("Togolese"))
                .body("[0].'area'", numberMatches(56785.0))
                .body("[0].'gini'", numberMatches(34.4))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("BEN", "BFA", "GHA"))
                .body("[0].'nativeName'", containsString("Togo"))
                .body("[0].'numericCode'", containsString("768"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XOF"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Togo"))
                .body("[0].'translations'.'es'", containsString("Togo"))
                .body("[0].'translations'.'fr'", containsString("Togo"))
                .body("[0].'translations'.'ja'", containsString("トーゴ"))
                .body("[0].'translations'.'it'", containsString("Togo"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_255_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/44?fields=XnZdx94LKnElUFC")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_256_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/cypriot?fields=BBoQmXuY")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_257_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/ln")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("Republic of the Congo"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cg"))
                .body("[0].'alpha2Code'", containsString("CG"))
                .body("[0].'alpha3Code'", containsString("COG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("242"))
                .body("[0].'capital'", containsString("Brazzaville"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("CG", "Congo-Brazzaville"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Middle Africa"))
                .body("[0].'population'", numberMatches(4620000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-1.0))
                .body("[0].'latlng'[1]", numberMatches(15.0))
                .body("[0].'demonym'", containsString("Congolese"))
                .body("[0].'area'", numberMatches(342000.0))
                .body("[0].'gini'", numberMatches(47.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("AGO", "CMR", "CAF", "COD", "GAB"))
                .body("[0].'nativeName'", containsString("République du Congo"))
                .body("[0].'numericCode'", containsString("178"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XAF"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fr", "ln"))
                .body("[0].'translations'.'de'", containsString("Kongo"))
                .body("[0].'translations'.'es'", containsString("Congo"))
                .body("[0].'translations'.'fr'", containsString("Congo"))
                .body("[0].'translations'.'ja'", containsString("コンゴ共和国"))
                .body("[0].'translations'.'it'", containsString("Congo"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Democratic Republic of the Congo"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".cd"))
                .body("[1].'alpha2Code'", containsString("CD"))
                .body("[1].'alpha3Code'", containsString("COD"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("243"))
                .body("[1].'capital'", containsString("Kinshasa"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("CD", "DR Congo", "Congo-Kinshasa", "DRC"))
                .body("[1].'region'", containsString("Africa"))
                .body("[1].'subregion'", containsString("Middle Africa"))
                .body("[1].'population'", numberMatches(7.7267E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(0.0))
                .body("[1].'latlng'[1]", numberMatches(25.0))
                .body("[1].'demonym'", containsString("Congolese"))
                .body("[1].'area'", numberMatches(2344858.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(2))
                .body("[1].'timezones'", hasItems("UTC+01:00", "UTC+02:00"))
                .body("[1].'borders'.size()", equalTo(9))
                .body("[1].'borders'", hasItems("AGO", "BDI", "CAF", "COG", "RWA", "SSD", "TZA", "UGA", "ZMB"))
                .body("[1].'nativeName'", containsString("République démocratique du Congo"))
                .body("[1].'numericCode'", containsString("180"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("CDF"))
                .body("[1].'languages'.size()", equalTo(5))
                .body("[1].'languages'", hasItems("fr", "ln", "kg", "sw", "lu"))
                .body("[1].'translations'.'de'", containsString("Kongo (Dem. Rep.)"))
                .body("[1].'translations'.'es'", containsString("Congo (Rep. Dem.)"))
                .body("[1].'translations'.'fr'", containsString("Congo (Rép. dém.)"))
                .body("[1].'translations'.'ja'", containsString("コンゴ民主共和国"))
                .body("[1].'translations'.'it'", containsString("Congo (Rep. Dem.)"))
                .body("[1].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_258_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/laos?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Laos"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".la"))
                .body("[0].'alpha2Code'", containsString("LA"))
                .body("[0].'alpha3Code'", containsString("LAO"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("856"))
                .body("[0].'capital'", containsString("Vientiane"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("LA", "Lao", "Lao People's Democratic Republic", "Sathalanalat Paxathipatai Paxaxon Lao"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("South-Eastern Asia"))
                .body("[0].'population'", numberMatches(6802000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(18.0))
                .body("[0].'latlng'[1]", numberMatches(105.0))
                .body("[0].'demonym'", containsString("Laotian"))
                .body("[0].'area'", numberMatches(236800.0))
                .body("[0].'gini'", numberMatches(36.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+07:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("MMR", "KHM", "CHN", "THA", "VNM"))
                .body("[0].'nativeName'", containsString("ສປປລາວ"))
                .body("[0].'numericCode'", containsString("418"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("LAK"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("lo"))
                .body("[0].'translations'.'de'", containsString("Laos"))
                .body("[0].'translations'.'es'", containsString("Laos"))
                .body("[0].'translations'.'fr'", containsString("Laos"))
                .body("[0].'translations'.'ja'", containsString("ラオス人民民主共和国"))
                .body("[0].'translations'.'it'", containsString("Laos"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_259_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/245")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Guinea-Bissau"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gw"))
                .body("[0].'alpha2Code'", containsString("GW"))
                .body("[0].'alpha3Code'", containsString("GNB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("245"))
                .body("[0].'capital'", containsString("Bissau"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("GW", "Republic of Guinea-Bissau", "República da Guiné-Bissau"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(1844000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(12.0))
                .body("[0].'latlng'[1]", numberMatches(-15.0))
                .body("[0].'demonym'", containsString("Guinea-Bissauan"))
                .body("[0].'area'", numberMatches(36125.0))
                .body("[0].'gini'", numberMatches(35.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("GIN", "SEN"))
                .body("[0].'nativeName'", containsString("Guiné-Bissau"))
                .body("[0].'numericCode'", containsString("624"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XOF"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("pt"))
                .body("[0].'translations'.'de'", containsString("Guinea-Bissau"))
                .body("[0].'translations'.'es'", containsString("Guinea-Bisáu"))
                .body("[0].'translations'.'fr'", containsString("Guinée-Bissau"))
                .body("[0].'translations'.'ja'", containsString("ギニアビサウ"))
                .body("[0].'translations'.'it'", containsString("Guinea-Bissau"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_260_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1678_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/currency/SLL?fields=_EM_1676_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_261_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/panama%20city?fields=alpha3Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha3Code'", containsString("PAN"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_262_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/bamako")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Mali"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ml"))
                .body("[0].'alpha2Code'", containsString("ML"))
                .body("[0].'alpha3Code'", containsString("MLI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("223"))
                .body("[0].'capital'", containsString("Bamako"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("ML", "Republic of Mali", "République du Mali"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(1.76E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(17.0))
                .body("[0].'latlng'[1]", numberMatches(-4.0))
                .body("[0].'demonym'", containsString("Malian"))
                .body("[0].'area'", numberMatches(1240192.0))
                .body("[0].'gini'", numberMatches(33.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(7))
                .body("[0].'borders'", hasItems("DZA", "BFA", "GIN", "CIV", "MRT", "NER", "SEN"))
                .body("[0].'nativeName'", containsString("Mali"))
                .body("[0].'numericCode'", containsString("466"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XOF"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Mali"))
                .body("[0].'translations'.'es'", containsString("Mali"))
                .body("[0].'translations'.'fr'", containsString("Mali"))
                .body("[0].'translations'.'ja'", containsString("マリ"))
                .body("[0].'translations'.'it'", containsString("Mali"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_263_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/sd?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Sudan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sd"))
                .body("[0].'alpha2Code'", containsString("SD"))
                .body("[0].'alpha3Code'", containsString("SDN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("249"))
                .body("[0].'capital'", containsString("Khartoum"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("SD", "Republic of the Sudan", "Jumhūrīyat as-Sūdān"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Northern Africa"))
                .body("[0].'population'", numberMatches(3.8435252E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(15.0))
                .body("[0].'latlng'[1]", numberMatches(30.0))
                .body("[0].'demonym'", containsString("Sudanese"))
                .body("[0].'area'", numberMatches(1886068.0))
                .body("[0].'gini'", numberMatches(35.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(7))
                .body("[0].'borders'", hasItems("CAF", "TCD", "EGY", "ERI", "ETH", "LBY", "SSD"))
                .body("[0].'nativeName'", containsString("السودان"))
                .body("[0].'numericCode'", containsString("729"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("SDG"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("ar", "en"))
                .body("[0].'translations'.'de'", containsString("Sudan"))
                .body("[0].'translations'.'es'", containsString("Sudán"))
                .body("[0].'translations'.'fr'", containsString("Soudan"))
                .body("[0].'translations'.'ja'", containsString("スーダン"))
                .body("[0].'translations'.'it'", containsString("Sudan"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_264_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/378")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("San Marino"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sm"))
                .body("[0].'alpha2Code'", containsString("SM"))
                .body("[0].'alpha3Code'", containsString("SMR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("378"))
                .body("[0].'capital'", containsString("City of San Marino"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("SM", "Republic of San Marino", "Repubblica di San Marino"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(32831.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(43.76666666))
                .body("[0].'latlng'[1]", numberMatches(12.41666666))
                .body("[0].'demonym'", containsString("Sammarinese"))
                .body("[0].'area'", numberMatches(61.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("ITA"))
                .body("[0].'nativeName'", containsString("San Marino"))
                .body("[0].'numericCode'", containsString("674"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("it"))
                .body("[0].'translations'.'de'", containsString("San Marino"))
                .body("[0].'translations'.'es'", containsString("San Marino"))
                .body("[0].'translations'.'fr'", containsString("Saint-Marin"))
                .body("[0].'translations'.'ja'", containsString("サンマリノ"))
                .body("[0].'translations'.'it'", containsString("San Marino"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_265_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/231?fields=mnU")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_266_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/594?fields=mr%5D")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_267_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/ku")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Iraq"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".iq"))
                .body("[0].'alpha2Code'", containsString("IQ"))
                .body("[0].'alpha3Code'", containsString("IRQ"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("964"))
                .body("[0].'capital'", containsString("Baghdad"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("IQ", "Republic of Iraq", "Jumhūriyyat al-‘Irāq"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(3.6004552E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(33.0))
                .body("[0].'latlng'[1]", numberMatches(44.0))
                .body("[0].'demonym'", containsString("Iraqi"))
                .body("[0].'area'", numberMatches(438317.0))
                .body("[0].'gini'", numberMatches(30.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("IRN", "JOR", "KWT", "SAU", "SYR", "TUR"))
                .body("[0].'nativeName'", containsString("العراق"))
                .body("[0].'numericCode'", containsString("368"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("IQD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("ar", "ku"))
                .body("[0].'translations'.'de'", containsString("Irak"))
                .body("[0].'translations'.'es'", containsString("Irak"))
                .body("[0].'translations'.'fr'", containsString("Irak"))
                .body("[0].'translations'.'ja'", containsString("イラク"))
                .body("[0].'translations'.'it'", containsString("Iraq"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_268_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/castries?fields=QYfXM8")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_269_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/ky")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Kyrgyzstan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".kg"))
                .body("[0].'alpha2Code'", containsString("KG"))
                .body("[0].'alpha3Code'", containsString("KGZ"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("996"))
                .body("[0].'capital'", containsString("Bishkek"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("KG", "Киргизия", "Kyrgyz Republic", "Кыргыз Республикасы", "Kyrgyz Respublikasy"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Central Asia"))
                .body("[0].'population'", numberMatches(5944400.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(41.0))
                .body("[0].'latlng'[1]", numberMatches(75.0))
                .body("[0].'demonym'", containsString("Kirghiz"))
                .body("[0].'area'", numberMatches(199951.0))
                .body("[0].'gini'", numberMatches(36.2))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+06:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("CHN", "KAZ", "TJK", "UZB"))
                .body("[0].'nativeName'", containsString("Кыргызстан"))
                .body("[0].'numericCode'", containsString("417"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("KGS"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("ky", "ru"))
                .body("[0].'translations'.'de'", containsString("Kirgisistan"))
                .body("[0].'translations'.'es'", containsString("Kirguizistán"))
                .body("[0].'translations'.'fr'", containsString("Kirghizistan"))
                .body("[0].'translations'.'ja'", containsString("キルギス"))
                .body("[0].'translations'.'it'", containsString("Kirghizistan"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_270_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/la")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Holy See"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".va"))
                .body("[0].'alpha2Code'", containsString("VA"))
                .body("[0].'alpha3Code'", containsString("VAT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("379"))
                .body("[0].'capital'", containsString("Rome"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("Sancta Sedes", "Vatican", "The Vatican"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(451.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(41.9))
                .body("[0].'latlng'[1]", numberMatches(12.45))
                .body("[0].'demonym'", containsString(""))
                .body("[0].'area'", numberMatches(0.44))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("ITA"))
                .body("[0].'nativeName'", containsString("Sancta Sedes"))
                .body("[0].'numericCode'", nullValue())
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(4))
                .body("[0].'languages'", hasItems("la", "it", "fr", "de"))
                .body("[0].'translations'.'de'", containsString("Heiliger Stuhl"))
                .body("[0].'translations'.'es'", containsString("Santa Sede"))
                .body("[0].'translations'.'fr'", containsString("voir Saint"))
                .body("[0].'translations'.'ja'", containsString("聖座"))
                .body("[0].'translations'.'it'", containsString("Santa Sede"))
                .body("[0].'relevance'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_271_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/nr")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("South Africa"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".za"))
                .body("[0].'alpha2Code'", containsString("ZA"))
                .body("[0].'alpha3Code'", containsString("ZAF"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("27"))
                .body("[0].'capital'", containsString("Pretoria"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("ZA", "RSA", "Suid-Afrika", "Republic of South Africa"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Southern Africa"))
                .body("[0].'population'", numberMatches(5.49569E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-29.0))
                .body("[0].'latlng'[1]", numberMatches(24.0))
                .body("[0].'demonym'", containsString("South African"))
                .body("[0].'area'", numberMatches(1221037.0))
                .body("[0].'gini'", numberMatches(63.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("BWA", "LSO", "MOZ", "NAM", "SWZ", "ZWE"))
                .body("[0].'nativeName'", containsString("South Africa"))
                .body("[0].'numericCode'", containsString("710"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ZAR"))
                .body("[0].'languages'.size()", equalTo(10))
                .body("[0].'languages'", hasItems("af", "en", "nr", "st", "ss", "tn", "ts", "ve", "xh", "zu"))
                .body("[0].'translations'.'de'", containsString("Republik Südafrika"))
                .body("[0].'translations'.'es'", containsString("República de Sudáfrica"))
                .body("[0].'translations'.'fr'", containsString("Afrique du Sud"))
                .body("[0].'translations'.'ja'", containsString("南アフリカ"))
                .body("[0].'translations'.'it'", containsString("Sud Africa"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_272_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/ny")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Malawi"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mw"))
                .body("[0].'alpha2Code'", containsString("MW"))
                .body("[0].'alpha3Code'", containsString("MWI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("265"))
                .body("[0].'capital'", containsString("Lilongwe"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("MW", "Republic of Malawi"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(1.6310431E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-13.5))
                .body("[0].'latlng'[1]", numberMatches(34.0))
                .body("[0].'demonym'", containsString("Malawian"))
                .body("[0].'area'", numberMatches(118484.0))
                .body("[0].'gini'", numberMatches(39.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("MOZ", "TZA", "ZMB"))
                .body("[0].'nativeName'", containsString("Malawi"))
                .body("[0].'numericCode'", containsString("454"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MWK"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "ny"))
                .body("[0].'translations'.'de'", containsString("Malawi"))
                .body("[0].'translations'.'es'", containsString("Malawi"))
                .body("[0].'translations'.'fr'", containsString("Malawi"))
                .body("[0].'translations'.'ja'", containsString("マラウイ"))
                .body("[0].'translations'.'it'", containsString("Malawi"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_273_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/237?fields=nnU")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_274_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/namibian?fields=P")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_275_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/et")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Estonia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ee"))
                .body("[0].'alpha2Code'", containsString("EE"))
                .body("[0].'alpha3Code'", containsString("EST"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("372"))
                .body("[0].'capital'", containsString("Tallinn"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("EE", "Eesti", "Republic of Estonia", "Eesti Vabariik"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(1313271.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(59.0))
                .body("[0].'latlng'[1]", numberMatches(26.0))
                .body("[0].'demonym'", containsString("Estonian"))
                .body("[0].'area'", numberMatches(45227.0))
                .body("[0].'gini'", numberMatches(36.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("LVA", "RUS"))
                .body("[0].'nativeName'", containsString("Eesti"))
                .body("[0].'numericCode'", containsString("233"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("et"))
                .body("[0].'translations'.'de'", containsString("Estland"))
                .body("[0].'translations'.'es'", containsString("Estonia"))
                .body("[0].'translations'.'fr'", containsString("Estonie"))
                .body("[0].'translations'.'ja'", containsString("エストニア"))
                .body("[0].'translations'.'it'", containsString("Estonia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_276_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/ps")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Afghanistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".af"))
                .body("[0].'alpha2Code'", containsString("AF"))
                .body("[0].'alpha3Code'", containsString("AFG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("93"))
                .body("[0].'capital'", containsString("Kabul"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("AF", "Afġānistān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(2.60231E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(33.0))
                .body("[0].'latlng'[1]", numberMatches(65.0))
                .body("[0].'demonym'", containsString("Afghan"))
                .body("[0].'area'", numberMatches(652230.0))
                .body("[0].'gini'", numberMatches(27.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:30"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("IRN", "PAK", "TKM", "UZB", "TJK", "CHN"))
                .body("[0].'nativeName'", containsString("افغانستان"))
                .body("[0].'numericCode'", containsString("004"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AFN"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("ps", "uz", "tk"))
                .body("[0].'translations'.'de'", containsString("Afghanistan"))
                .body("[0].'translations'.'es'", containsString("Afganistán"))
                .body("[0].'translations'.'fr'", containsString("Afghanistan"))
                .body("[0].'translations'.'ja'", containsString("アフガニスタン"))
                .body("[0].'translations'.'it'", containsString("Afghanistan"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_277_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/reykjavik?fields=_EM_15558_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_278_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/bi")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(13))
                .body("[0].'name'", containsString("Colombia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".co"))
                .body("[0].'alpha2Code'", containsString("CO"))
                .body("[0].'alpha3Code'", containsString("COL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("57"))
                .body("[0].'capital'", containsString("Bogotá"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("CO", "Republic of Colombia", "República de Colombia"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(4.8759958E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(4.0))
                .body("[0].'latlng'[1]", numberMatches(-72.0))
                .body("[0].'demonym'", containsString("Colombian"))
                .body("[0].'area'", numberMatches(1141748.0))
                .body("[0].'gini'", numberMatches(55.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-05:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("BRA", "ECU", "PAN", "PER", "VEN"))
                .body("[0].'nativeName'", containsString("Colombia"))
                .body("[0].'numericCode'", containsString("170"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("COP"))
                .body("[0].'currencies'[0].'name'", containsString("Colombian peso"))
                .body("[0].'currencies'[0].'symbol'", containsString("$"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("es"))
                .body("[0].'languages'[0].'iso639_2'", containsString("spa"))
                .body("[0].'languages'[0].'name'", containsString("Spanish"))
                .body("[0].'languages'[0].'nativeName'", containsString("Español"))
                .body("[0].'translations'.'de'", containsString("Kolumbien"))
                .body("[0].'translations'.'es'", containsString("Colombia"))
                .body("[0].'translations'.'fr'", containsString("Colombie"))
                .body("[0].'translations'.'ja'", containsString("コロンビア"))
                .body("[0].'translations'.'it'", containsString("Colombia"))
                .body("[0].'translations'.'br'", containsString("Colômbia"))
                .body("[0].'translations'.'pt'", containsString("Colômbia"))
                .body("[0].'translations'.'nl'", containsString("Colombia"))
                .body("[0].'translations'.'hr'", containsString("Kolumbija"))
                .body("[0].'translations'.'fa'", containsString("کلمبیا"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/col.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(2))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("PA"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Pacific Alliance"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("Alianza del Pacífico"))
                .body("[0].'regionalBlocs'[1].'acronym'", containsString("USAN"))
                .body("[0].'regionalBlocs'[1].'name'", containsString("Union of South American Nations"))
                .body("[0].'regionalBlocs'[1].'otherAcronyms'.size()", equalTo(3))
                .body("[0].'regionalBlocs'[1].'otherAcronyms'", hasItems("UNASUR", "UNASUL", "UZAN"))
                .body("[0].'regionalBlocs'[1].'otherNames'.size()", equalTo(4))
                .body("[0].'regionalBlocs'[1].'otherNames'", hasItems("Unión de Naciones Suramericanas", "União de Nações Sul-Americanas", "Unie van Zuid-Amerikaanse Naties", "South American Union"))
                .body("[0].'cioc'", containsString("COL"))
                .body("[1].'name'", containsString("Gambia"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".gm"))
                .body("[1].'alpha2Code'", containsString("GM"))
                .body("[1].'alpha3Code'", containsString("GMB"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("220"))
                .body("[1].'capital'", containsString("Banjul"))
                .body("[1].'altSpellings'.size()", equalTo(2))
                .body("[1].'altSpellings'", hasItems("GM", "Republic of the Gambia"))
                .body("[1].'region'", containsString("Africa"))
                .body("[1].'subregion'", containsString("Western Africa"))
                .body("[1].'population'", numberMatches(1882450.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(13.46666666))
                .body("[1].'latlng'[1]", numberMatches(-16.56666666))
                .body("[1].'demonym'", containsString("Gambian"))
                .body("[1].'area'", numberMatches(11295.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+00:00"))
                .body("[1].'borders'.size()", equalTo(1))
                .body("[1].'borders'", hasItems("SEN"))
                .body("[1].'nativeName'", containsString("Gambia"))
                .body("[1].'numericCode'", containsString("270"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("GMD"))
                .body("[1].'currencies'[0].'name'", containsString("Gambian dalasi"))
                .body("[1].'currencies'[0].'symbol'", containsString("D"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'[0].'iso639_1'", containsString("en"))
                .body("[1].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[1].'languages'[0].'name'", containsString("English"))
                .body("[1].'languages'[0].'nativeName'", containsString("English"))
                .body("[1].'translations'.'de'", containsString("Gambia"))
                .body("[1].'translations'.'es'", containsString("Gambia"))
                .body("[1].'translations'.'fr'", containsString("Gambie"))
                .body("[1].'translations'.'ja'", containsString("ガンビア"))
                .body("[1].'translations'.'it'", containsString("Gambia"))
                .body("[1].'translations'.'br'", containsString("Gâmbia"))
                .body("[1].'translations'.'pt'", containsString("Gâmbia"))
                .body("[1].'translations'.'nl'", containsString("Gambia"))
                .body("[1].'translations'.'hr'", containsString("Gambija"))
                .body("[1].'translations'.'fa'", containsString("گامبیا"))
                .body("[1].'flag'", containsString("https://restcountries.eu/data/gmb.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[1].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[1].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[1].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[1].'cioc'", containsString("GAM"))
                .body("[2].'name'", containsString("Guinea-Bissau"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".gw"))
                .body("[2].'alpha2Code'", containsString("GW"))
                .body("[2].'alpha3Code'", containsString("GNB"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("245"))
                .body("[2].'capital'", containsString("Bissau"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("GW", "Republic of Guinea-Bissau", "República da Guiné-Bissau"))
                .body("[2].'region'", containsString("Africa"))
                .body("[2].'subregion'", containsString("Western Africa"))
                .body("[2].'population'", numberMatches(1547777.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(12.0))
                .body("[2].'latlng'[1]", numberMatches(-15.0))
                .body("[2].'demonym'", containsString("Guinea-Bissauan"))
                .body("[2].'area'", numberMatches(36125.0))
                .body("[2].'gini'", numberMatches(35.5))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC"))
                .body("[2].'borders'.size()", equalTo(2))
                .body("[2].'borders'", hasItems("GIN", "SEN"))
                .body("[2].'nativeName'", containsString("Guiné-Bissau"))
                .body("[2].'numericCode'", containsString("624"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'[0].'code'", containsString("XOF"))
                .body("[2].'currencies'[0].'name'", containsString("West African CFA franc"))
                .body("[2].'currencies'[0].'symbol'", containsString("Fr"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'[0].'iso639_1'", containsString("pt"))
                .body("[2].'languages'[0].'iso639_2'", containsString("por"))
                .body("[2].'languages'[0].'name'", containsString("Portuguese"))
                .body("[2].'languages'[0].'nativeName'", containsString("Português"))
                .body("[2].'translations'.'de'", containsString("Guinea-Bissau"))
                .body("[2].'translations'.'es'", containsString("Guinea-Bisáu"))
                .body("[2].'translations'.'fr'", containsString("Guinée-Bissau"))
                .body("[2].'translations'.'ja'", containsString("ギニアビサウ"))
                .body("[2].'translations'.'it'", containsString("Guinea-Bissau"))
                .body("[2].'translations'.'br'", containsString("Guiné-Bissau"))
                .body("[2].'translations'.'pt'", containsString("Guiné-Bissau"))
                .body("[2].'translations'.'nl'", containsString("Guinee-Bissau"))
                .body("[2].'translations'.'hr'", containsString("Gvineja Bisau"))
                .body("[2].'translations'.'fa'", containsString("گینه بیسائو"))
                .body("[2].'flag'", containsString("https://restcountries.eu/data/gnb.svg"))
                .body("[2].'regionalBlocs'.size()", equalTo(1))
                .body("[2].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[2].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[2].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[2].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[2].'cioc'", containsString("GBS"))
                ; // Skipping assertions on the remaining 10 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_279_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/Southern%20Africa?fields=_EM_4088_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(6))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_280_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/croatian?fields=_EM_7060_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_281_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/nb")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Norway"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".no"))
                .body("[0].'alpha2Code'", containsString("NO"))
                .body("[0].'alpha3Code'", containsString("NOR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("47"))
                .body("[0].'capital'", containsString("Oslo"))
                .body("[0].'altSpellings'.size()", equalTo(6))
                .body("[0].'altSpellings'", hasItems("NO", "Norge", "Noreg", "Kingdom of Norway", "Kongeriket Norge", "Kongeriket Noreg"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(5176998.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(62.0))
                .body("[0].'latlng'[1]", numberMatches(10.0))
                .body("[0].'demonym'", containsString("Norwegian"))
                .body("[0].'area'", numberMatches(323802.0))
                .body("[0].'gini'", numberMatches(25.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("FIN", "SWE", "RUS"))
                .body("[0].'nativeName'", containsString("Norge"))
                .body("[0].'numericCode'", containsString("578"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("NOK"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("no", "nb", "nn"))
                .body("[0].'translations'.'de'", containsString("Norwegen"))
                .body("[0].'translations'.'es'", containsString("Noruega"))
                .body("[0].'translations'.'fr'", containsString("Norvège"))
                .body("[0].'translations'.'ja'", containsString("ノルウェー"))
                .body("[0].'translations'.'it'", containsString("Norvegia"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_282_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/53?fields=_EM_4148_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_283_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/serbian?fields=tDSk")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_284_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/tbilisi?fields=_EM_15163_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_285_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/abuja")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Nigeria"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ng"))
                .body("[0].'alpha2Code'", containsString("NG"))
                .body("[0].'alpha3Code'", containsString("NGA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("234"))
                .body("[0].'capital'", containsString("Abuja"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("NG", "Nijeriya", "Naíjíríà", "Federal Republic of Nigeria"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(1.82202E8))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(10.0))
                .body("[0].'latlng'[1]", numberMatches(8.0))
                .body("[0].'demonym'", containsString("Nigerian"))
                .body("[0].'area'", numberMatches(923768.0))
                .body("[0].'gini'", numberMatches(48.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("BEN", "CMR", "TCD", "NER"))
                .body("[0].'nativeName'", containsString("Nigeria"))
                .body("[0].'numericCode'", containsString("566"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("NGN"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Nigeria"))
                .body("[0].'translations'.'es'", containsString("Nigeria"))
                .body("[0].'translations'.'fr'", containsString("Nigéria"))
                .body("[0].'translations'.'ja'", containsString("ナイジェリア"))
                .body("[0].'translations'.'it'", containsString("Nigeria"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_286_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/lo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Laos"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".la"))
                .body("[0].'alpha2Code'", containsString("LA"))
                .body("[0].'alpha3Code'", containsString("LAO"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("856"))
                .body("[0].'capital'", containsString("Vientiane"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("LA", "Lao", "Lao People's Democratic Republic", "Sathalanalat Paxathipatai Paxaxon Lao"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("South-Eastern Asia"))
                .body("[0].'population'", numberMatches(6802000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(18.0))
                .body("[0].'latlng'[1]", numberMatches(105.0))
                .body("[0].'demonym'", containsString("Laotian"))
                .body("[0].'area'", numberMatches(236800.0))
                .body("[0].'gini'", numberMatches(36.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+07:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("MMR", "KHM", "CHN", "THA", "VNM"))
                .body("[0].'nativeName'", containsString("ສປປລາວ"))
                .body("[0].'numericCode'", containsString("418"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("LAK"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("lo"))
                .body("[0].'translations'.'de'", containsString("Laos"))
                .body("[0].'translations'.'es'", containsString("Laos"))
                .body("[0].'translations'.'fr'", containsString("Laos"))
                .body("[0].'translations'.'ja'", containsString("ラオス人民民主共和国"))
                .body("[0].'translations'.'it'", containsString("Laos"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_287_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/lt")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Lithuania"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".lt"))
                .body("[0].'alpha2Code'", containsString("LT"))
                .body("[0].'alpha3Code'", containsString("LTU"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("370"))
                .body("[0].'capital'", containsString("Vilnius"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("LT", "Republic of Lithuania", "Lietuvos Respublika"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(2900787.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(56.0))
                .body("[0].'latlng'[1]", numberMatches(24.0))
                .body("[0].'demonym'", containsString("Lithuanian"))
                .body("[0].'area'", numberMatches(65300.0))
                .body("[0].'gini'", numberMatches(37.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("BLR", "LVA", "POL", "RUS"))
                .body("[0].'nativeName'", containsString("Lietuva"))
                .body("[0].'numericCode'", containsString("440"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("lt"))
                .body("[0].'translations'.'de'", containsString("Litauen"))
                .body("[0].'translations'.'es'", containsString("Lituania"))
                .body("[0].'translations'.'fr'", containsString("Lituanie"))
                .body("[0].'translations'.'ja'", containsString("リトアニア"))
                .body("[0].'translations'.'it'", containsString("Lituania"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_288_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/brasil?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Brazil"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".br"))
                .body("[0].'alpha2Code'", containsString("BR"))
                .body("[0].'alpha3Code'", containsString("BRA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("55"))
                .body("[0].'capital'", containsString("Brasília"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("BR", "Brasil", "Federative Republic of Brazil", "República Federativa do Brasil"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(2.04772E8))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-10.0))
                .body("[0].'latlng'[1]", numberMatches(-55.0))
                .body("[0].'demonym'", containsString("Brazilian"))
                .body("[0].'area'", numberMatches(8515767.0))
                .body("[0].'gini'", numberMatches(54.7))
                .body("[0].'timezones'.size()", equalTo(4))
                .body("[0].'timezones'", hasItems("UTC-05:00", "UTC-04:00", "UTC-03:00", "UTC-02:00"))
                .body("[0].'borders'.size()", equalTo(10))
                .body("[0].'borders'", hasItems("ARG", "BOL", "COL", "GUF", "GUY", "PRY", "PER", "SUR", "URY", "VEN"))
                .body("[0].'nativeName'", containsString("Brasil"))
                .body("[0].'numericCode'", containsString("076"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BRL"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("pt"))
                .body("[0].'translations'.'de'", containsString("Brasilien"))
                .body("[0].'translations'.'es'", containsString("Brasil"))
                .body("[0].'translations'.'fr'", containsString("Brésil"))
                .body("[0].'translations'.'ja'", containsString("ブラジル"))
                .body("[0].'translations'.'it'", containsString("Brasile"))
                .body("[0].'relevance'", containsString("2"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_289_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/mg")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Madagascar"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mg"))
                .body("[0].'alpha2Code'", containsString("MG"))
                .body("[0].'alpha3Code'", containsString("MDG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("261"))
                .body("[0].'capital'", containsString("Antananarivo"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("MG", "Republic of Madagascar", "Repoblikan'i Madagasikara", "République de Madagascar"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(2.2434363E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-20.0))
                .body("[0].'latlng'[1]", numberMatches(47.0))
                .body("[0].'demonym'", containsString("Malagasy"))
                .body("[0].'area'", numberMatches(587041.0))
                .body("[0].'gini'", numberMatches(44.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Madagasikara"))
                .body("[0].'numericCode'", containsString("450"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MGA"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fr", "mg"))
                .body("[0].'translations'.'de'", containsString("Madagaskar"))
                .body("[0].'translations'.'es'", containsString("Madagascar"))
                .body("[0].'translations'.'fr'", containsString("Madagascar"))
                .body("[0].'translations'.'ja'", containsString("マダガスカル"))
                .body("[0].'translations'.'it'", containsString("Madagascar"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_290_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/lisbon?fields=_EM_10129_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_291_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/Southern%20Africa?fields=_EM_4088_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(6))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_292_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/41")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Switzerland"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ch"))
                .body("[0].'alpha2Code'", containsString("CH"))
                .body("[0].'alpha3Code'", containsString("CHE"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("41"))
                .body("[0].'capital'", containsString("Bern"))
                .body("[0].'altSpellings'.size()", equalTo(6))
                .body("[0].'altSpellings'", hasItems("CH", "Swiss Confederation", "Schweiz", "Suisse", "Svizzera", "Svizra"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(8256000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(47.0))
                .body("[0].'latlng'[1]", numberMatches(8.0))
                .body("[0].'demonym'", containsString("Swiss"))
                .body("[0].'area'", numberMatches(41284.0))
                .body("[0].'gini'", numberMatches(33.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("AUT", "FRA", "ITA", "LIE", "DEU"))
                .body("[0].'nativeName'", containsString("Schweiz"))
                .body("[0].'numericCode'", containsString("756"))
                .body("[0].'currencies'.size()", equalTo(3))
                .body("[0].'currencies'", hasItems("CHE", "CHF", "CHW"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("de", "fr", "it"))
                .body("[0].'translations'.'de'", containsString("Schweiz"))
                .body("[0].'translations'.'es'", containsString("Suiza"))
                .body("[0].'translations'.'fr'", containsString("Suisse"))
                .body("[0].'translations'.'ja'", containsString("スイス"))
                .body("[0].'translations'.'it'", containsString("Svizzera"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_293_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/tehran")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Iran"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ir"))
                .body("[0].'alpha2Code'", containsString("IR"))
                .body("[0].'alpha3Code'", containsString("IRN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("98"))
                .body("[0].'capital'", containsString("Tehran"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("IR", "Islamic Republic of Iran", "Jomhuri-ye Eslāmi-ye Irān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(7.85725E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(32.0))
                .body("[0].'latlng'[1]", numberMatches(53.0))
                .body("[0].'demonym'", containsString("Iranian"))
                .body("[0].'area'", numberMatches(1648195.0))
                .body("[0].'gini'", numberMatches(38.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:30"))
                .body("[0].'borders'.size()", equalTo(7))
                .body("[0].'borders'", hasItems("AFG", "ARM", "AZE", "IRQ", "PAK", "TUR", "TKM"))
                .body("[0].'nativeName'", containsString("ایران"))
                .body("[0].'numericCode'", containsString("364"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("IRR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fa"))
                .body("[0].'translations'.'de'", containsString("Iran"))
                .body("[0].'translations'.'es'", containsString("Iran"))
                .body("[0].'translations'.'fr'", containsString("Iran"))
                .body("[0].'translations'.'ja'", containsString("イラン・イスラム共和国"))
                .body("[0].'translations'.'it'", nullValue())
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_294_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/Western%20Africa?fields=_EM_5749_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(17))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 14 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_295_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/lang/th?fields=_EM_5756_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_296_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/lang/bn?fields=_EM_5796_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_297_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/french%20polynesian?fields=alpha3Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha3Code'", containsString("PYF"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_298_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/angolan?fields=_EM_14949_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_299_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/LKR?fields=_EM_5896_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_300_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/madrid")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Spain"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".es"))
                .body("[0].'alpha2Code'", containsString("ES"))
                .body("[0].'alpha3Code'", containsString("ESP"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("34"))
                .body("[0].'capital'", containsString("Madrid"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("ES", "Kingdom of Spain", "Reino de España"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(4.6439864E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(40.0))
                .body("[0].'latlng'[1]", numberMatches(-4.0))
                .body("[0].'demonym'", containsString("Spanish"))
                .body("[0].'area'", numberMatches(505992.0))
                .body("[0].'gini'", numberMatches(34.7))
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC", "UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("AND", "FRA", "GIB", "PRT", "MAR"))
                .body("[0].'nativeName'", containsString("España"))
                .body("[0].'numericCode'", containsString("724"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("es"))
                .body("[0].'translations'.'de'", containsString("Spanien"))
                .body("[0].'translations'.'es'", containsString("España"))
                .body("[0].'translations'.'fr'", containsString("Espagne"))
                .body("[0].'translations'.'ja'", containsString("スペイン"))
                .body("[0].'translations'.'it'", containsString("Spagna"))
                .body("[0].'relevance'", containsString("2"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_301_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/abuja?fields=_EM_5722_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_302_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/fr?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(6))
                .body("[0].'name'", containsString("Central African Republic"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cf"))
                .body("[0].'alpha2Code'", containsString("CF"))
                .body("[0].'alpha3Code'", containsString("CAF"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("236"))
                .body("[0].'capital'", containsString("Bangui"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("CF", "Central African Republic", "République centrafricaine"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Middle Africa"))
                .body("[0].'population'", numberMatches(4900000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(7.0))
                .body("[0].'latlng'[1]", numberMatches(21.0))
                .body("[0].'demonym'", containsString("Central African"))
                .body("[0].'area'", numberMatches(622984.0))
                .body("[0].'gini'", numberMatches(56.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("CMR", "TCD", "COD", "COG", "SSD", "SDN"))
                .body("[0].'nativeName'", containsString("Ködörösêse tî Bêafrîka"))
                .body("[0].'numericCode'", containsString("140"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XAF"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fr", "sg"))
                .body("[0].'translations'.'de'", containsString("Zentralafrikanische Republik"))
                .body("[0].'translations'.'es'", containsString("República Centroafricana"))
                .body("[0].'translations'.'fr'", containsString("République centrafricaine"))
                .body("[0].'translations'.'ja'", containsString("中央アフリカ共和国"))
                .body("[0].'translations'.'it'", containsString("Repubblica Centrafricana"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("France"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".fr"))
                .body("[1].'alpha2Code'", containsString("FR"))
                .body("[1].'alpha3Code'", containsString("FRA"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("33"))
                .body("[1].'capital'", containsString("Paris"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("FR", "French Republic", "République française"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Western Europe"))
                .body("[1].'population'", numberMatches(6.6186E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(46.0))
                .body("[1].'latlng'[1]", numberMatches(2.0))
                .body("[1].'demonym'", containsString("French"))
                .body("[1].'area'", numberMatches(640679.0))
                .body("[1].'gini'", numberMatches(32.7))
                .body("[1].'timezones'.size()", equalTo(12))
                .body("[1].'timezones'", hasItems("UTC-10:00", "UTC-09:30", "UTC-09:00", "UTC-08:00", "UTC-04:00", "UTC-03:00", "UTC+01:00", "UTC+03:00", "UTC+04:00", "UTC+05:00", "UTC+11:00", "UTC+12:00"))
                .body("[1].'borders'.size()", equalTo(8))
                .body("[1].'borders'", hasItems("AND", "BEL", "DEU", "ITA", "LUX", "MCO", "ESP", "CHE"))
                .body("[1].'nativeName'", containsString("France"))
                .body("[1].'numericCode'", containsString("250"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("EUR"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("fr"))
                .body("[1].'translations'.'de'", containsString("Frankreich"))
                .body("[1].'translations'.'es'", containsString("Francia"))
                .body("[1].'translations'.'fr'", containsString("France"))
                .body("[1].'translations'.'ja'", containsString("フランス"))
                .body("[1].'translations'.'it'", containsString("Francia"))
                .body("[1].'relevance'", containsString("2.5"))
                .body("[2].'name'", containsString("French Guiana"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".gf"))
                .body("[2].'alpha2Code'", containsString("GF"))
                .body("[2].'alpha3Code'", containsString("GUF"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("594"))
                .body("[2].'capital'", containsString("Cayenne"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("GF", "Guiana", "Guyane"))
                .body("[2].'region'", containsString("Americas"))
                .body("[2].'subregion'", containsString("South America"))
                .body("[2].'population'", numberMatches(239648.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(4.0))
                .body("[2].'latlng'[1]", numberMatches(-53.0))
                .body("[2].'demonym'", containsString(""))
                .body("[2].'area'", nullValue())
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC-03:00"))
                .body("[2].'borders'.size()", equalTo(2))
                .body("[2].'borders'", hasItems("BRA", "SUR"))
                .body("[2].'nativeName'", containsString("Guyane française"))
                .body("[2].'numericCode'", containsString("254"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("EUR"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("fr"))
                .body("[2].'translations'.'de'", containsString("Französisch Guyana"))
                .body("[2].'translations'.'es'", containsString("Guayana Francesa"))
                .body("[2].'translations'.'fr'", containsString("Guayane"))
                .body("[2].'translations'.'ja'", containsString("フランス領ギアナ"))
                .body("[2].'translations'.'it'", containsString("Guyana francese"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_303_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/af?" + 
                    "fields=_EM_15895_XYZ_&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_304_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/afganistan?" + 
                    "fields=altSpellings&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("AF", "Afġānistān"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_305_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/andorran?fields=_EM_4167_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_306_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/jamestown")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Saint Helena"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sh"))
                .body("[0].'alpha2Code'", containsString("SH"))
                .body("[0].'alpha3Code'", containsString("SHN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("290"))
                .body("[0].'capital'", containsString("Jamestown"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("SH"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(4255.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-15.95))
                .body("[0].'latlng'[1]", numberMatches(-5.7))
                .body("[0].'demonym'", containsString("Saint Helenian"))
                .body("[0].'area'", nullValue())
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+00:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Saint Helena"))
                .body("[0].'numericCode'", containsString("654"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("SHP"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Sankt Helena"))
                .body("[0].'translations'.'es'", containsString("Santa Helena"))
                .body("[0].'translations'.'fr'", containsString("Sainte-Hélène"))
                .body("[0].'translations'.'ja'", containsString("セントヘレナ・アセンションおよびトリスタンダクーニャ"))
                .body("[0].'translations'.'it'", containsString("Sant'Elena"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_307_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/263?fields=_EM_4148_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_308_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/680")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Palau"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".pw"))
                .body("[0].'alpha2Code'", containsString("PW"))
                .body("[0].'alpha3Code'", containsString("PLW"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("680"))
                .body("[0].'capital'", containsString("Ngerulmud"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("PW", "Republic of Palau", "Beluu er a Belau"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Micronesia"))
                .body("[0].'population'", numberMatches(20901.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(7.5))
                .body("[0].'latlng'[1]", numberMatches(134.5))
                .body("[0].'demonym'", containsString("Palauan"))
                .body("[0].'area'", numberMatches(459.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+09:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Palau"))
                .body("[0].'numericCode'", containsString("585"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Palau"))
                .body("[0].'translations'.'es'", containsString("Palau"))
                .body("[0].'translations'.'fr'", containsString("Palaos"))
                .body("[0].'translations'.'ja'", containsString("パラオ"))
                .body("[0].'translations'.'it'", containsString("Palau"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_309_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/stockholm?fields=xi18kolk")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_310_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/SZL?fields=_EM_6032_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_311_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/MZN?fields=_EM_6108_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_312_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/namibie?" + 
                    "fields=_EM_13874_XYZ_&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_313_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/239?fields=enT")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_314_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/249?fields=mpY")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_315_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/naijiria?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Nigeria"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ng"))
                .body("[0].'alpha2Code'", containsString("NG"))
                .body("[0].'alpha3Code'", containsString("NGA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("234"))
                .body("[0].'capital'", containsString("Abuja"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("NG", "Nijeriya", "Naíjíríà", "Federal Republic of Nigeria"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(1.82202E8))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(10.0))
                .body("[0].'latlng'[1]", numberMatches(8.0))
                .body("[0].'demonym'", containsString("Nigerian"))
                .body("[0].'area'", numberMatches(923768.0))
                .body("[0].'gini'", numberMatches(48.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("BEN", "CMR", "TCD", "NER"))
                .body("[0].'nativeName'", containsString("Nigeria"))
                .body("[0].'numericCode'", containsString("566"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("NGN"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Nigeria"))
                .body("[0].'translations'.'es'", containsString("Nigeria"))
                .body("[0].'translations'.'fr'", containsString("Nigéria"))
                .body("[0].'translations'.'ja'", containsString("ナイジェリア"))
                .body("[0].'translations'.'it'", containsString("Nigeria"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_316_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/zh")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'name'", containsString("China"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cn"))
                .body("[0].'alpha2Code'", containsString("CN"))
                .body("[0].'alpha3Code'", containsString("CHN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("86"))
                .body("[0].'capital'", containsString("Beijing"))
                .body("[0].'altSpellings'.size()", equalTo(7))
                .body("[0].'altSpellings'", hasItems("CN", "Zhōngguó", "Zhongguo", "Zhonghua", "People's Republic of China", "中华人民共和国", "Zhōnghuá Rénmín Gònghéguó"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Eastern Asia"))
                .body("[0].'population'", numberMatches(1.37159E9))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(35.0))
                .body("[0].'latlng'[1]", numberMatches(105.0))
                .body("[0].'demonym'", containsString("Chinese"))
                .body("[0].'area'", numberMatches(9640011.0))
                .body("[0].'gini'", numberMatches(47.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(15))
                .body("[0].'borders'", hasItems("AFG", "BTN", "MMR", "HKG", "IND", "KAZ", "PRK", "KGZ", "LAO", "MAC", "MNG", "PAK", "RUS", "TJK", "VNM"))
                .body("[0].'nativeName'", containsString("中国"))
                .body("[0].'numericCode'", containsString("156"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("CNY"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("zh"))
                .body("[0].'translations'.'de'", containsString("China"))
                .body("[0].'translations'.'es'", containsString("China"))
                .body("[0].'translations'.'fr'", containsString("Chine"))
                .body("[0].'translations'.'ja'", containsString("中国"))
                .body("[0].'translations'.'it'", containsString("Cina"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Hong Kong"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".hk"))
                .body("[1].'alpha2Code'", containsString("HK"))
                .body("[1].'alpha3Code'", containsString("HKG"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("852"))
                .body("[1].'capital'", containsString("City of Victoria"))
                .body("[1].'altSpellings'.size()", equalTo(2))
                .body("[1].'altSpellings'", hasItems("HK", "香港"))
                .body("[1].'region'", containsString("Asia"))
                .body("[1].'subregion'", containsString("Eastern Asia"))
                .body("[1].'population'", numberMatches(7298600.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(22.25))
                .body("[1].'latlng'[1]", numberMatches(114.16666666))
                .body("[1].'demonym'", containsString("Chinese"))
                .body("[1].'area'", numberMatches(1104.0))
                .body("[1].'gini'", numberMatches(53.3))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+08:00"))
                .body("[1].'borders'.size()", equalTo(1))
                .body("[1].'borders'", hasItems("CHN"))
                .body("[1].'nativeName'", containsString("香港"))
                .body("[1].'numericCode'", containsString("344"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("HKD"))
                .body("[1].'languages'.size()", equalTo(2))
                .body("[1].'languages'", hasItems("en", "zh"))
                .body("[1].'translations'.'de'", containsString("Hong Kong"))
                .body("[1].'translations'.'es'", containsString("Hong Kong"))
                .body("[1].'translations'.'fr'", containsString("Hong Kong"))
                .body("[1].'translations'.'ja'", containsString("香港"))
                .body("[1].'translations'.'it'", containsString("Hong Kong"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Macau"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".mo"))
                .body("[2].'alpha2Code'", containsString("MO"))
                .body("[2].'alpha3Code'", containsString("MAC"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("853"))
                .body("[2].'capital'", containsString(""))
                .body("[2].'altSpellings'.size()", equalTo(5))
                .body("[2].'altSpellings'", hasItems("MO", "澳门", "Macao Special Administrative Region of the People's Republic of China", "中華人民共和國澳門特別行政區", "Região Administrativa Especial de Macau da República Popular da China"))
                .body("[2].'region'", containsString("Asia"))
                .body("[2].'subregion'", containsString("Eastern Asia"))
                .body("[2].'population'", numberMatches(642900.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(22.16666666))
                .body("[2].'latlng'[1]", numberMatches(113.55))
                .body("[2].'demonym'", containsString("Chinese"))
                .body("[2].'area'", numberMatches(30.0))
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+08:00"))
                .body("[2].'borders'.size()", equalTo(1))
                .body("[2].'borders'", hasItems("CHN"))
                .body("[2].'nativeName'", containsString("澳門"))
                .body("[2].'numericCode'", containsString("446"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("MOP"))
                .body("[2].'languages'.size()", equalTo(2))
                .body("[2].'languages'", hasItems("zh", "pt"))
                .body("[2].'translations'.'de'", containsString("Macao"))
                .body("[2].'translations'.'es'", containsString("Macao"))
                .body("[2].'translations'.'fr'", containsString("Macao"))
                .body("[2].'translations'.'ja'", containsString("マカオ"))
                .body("[2].'translations'.'it'", containsString("Macao"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_317_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/kigali")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Rwanda"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".rw"))
                .body("[0].'alpha2Code'", containsString("RW"))
                .body("[0].'alpha3Code'", containsString("RWA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("250"))
                .body("[0].'capital'", containsString("Kigali"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("RW", "Republic of Rwanda", "Repubulika y'u Rwanda", "République du Rwanda"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(1.1262564E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-2.0))
                .body("[0].'latlng'[1]", numberMatches(30.0))
                .body("[0].'demonym'", containsString("Rwandan"))
                .body("[0].'area'", numberMatches(26338.0))
                .body("[0].'gini'", numberMatches(50.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("BDI", "COD", "TZA", "UGA"))
                .body("[0].'nativeName'", containsString("Rwanda"))
                .body("[0].'numericCode'", containsString("646"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("RWF"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("rw", "en", "fr"))
                .body("[0].'translations'.'de'", containsString("Ruanda"))
                .body("[0].'translations'.'es'", containsString("Ruanda"))
                .body("[0].'translations'.'fr'", containsString("Rwanda"))
                .body("[0].'translations'.'ja'", containsString("ルワンダ"))
                .body("[0].'translations'.'it'", containsString("Ruanda"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_318_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/QAR?fields=_EM_3831_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_319_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/lome")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Togo"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".tg"))
                .body("[0].'alpha2Code'", containsString("TG"))
                .body("[0].'alpha3Code'", containsString("TGO"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("228"))
                .body("[0].'capital'", containsString("Lomé"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("TG", "Togolese", "Togolese Republic", "République Togolaise"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(7305000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(8.0))
                .body("[0].'latlng'[1]", numberMatches(1.16666666))
                .body("[0].'demonym'", containsString("Togolese"))
                .body("[0].'area'", numberMatches(56785.0))
                .body("[0].'gini'", numberMatches(34.4))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("BEN", "BFA", "GHA"))
                .body("[0].'nativeName'", containsString("Togo"))
                .body("[0].'numericCode'", containsString("768"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XOF"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Togo"))
                .body("[0].'translations'.'es'", containsString("Togo"))
                .body("[0].'translations'.'fr'", containsString("Togo"))
                .body("[0].'translations'.'ja'", containsString("トーゴ"))
                .body("[0].'translations'.'it'", containsString("Togo"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_320_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/georgian?fields=capital")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'capital'", containsString("Tbilisi"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_321_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/352?fields=_EM_15997_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_322_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/moroccan?fields=alpha3Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha3Code'", containsString("MAR"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_323_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/romanian?fields=subregion")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'subregion'", containsString("Eastern Europe"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_324_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/lobamba")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Swaziland"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sz"))
                .body("[0].'alpha2Code'", containsString("SZ"))
                .body("[0].'alpha3Code'", containsString("SWZ"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("268"))
                .body("[0].'capital'", containsString("Lobamba"))
                .body("[0].'altSpellings'.size()", equalTo(6))
                .body("[0].'altSpellings'", hasItems("SZ", "weSwatini", "Swatini", "Ngwane", "Kingdom of Swaziland", "Umbuso waseSwatini"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Southern Africa"))
                .body("[0].'population'", numberMatches(1119375.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-26.5))
                .body("[0].'latlng'[1]", numberMatches(31.5))
                .body("[0].'demonym'", containsString("Swazi"))
                .body("[0].'area'", numberMatches(17364.0))
                .body("[0].'gini'", numberMatches(51.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("MOZ", "ZAF"))
                .body("[0].'nativeName'", containsString("Swaziland"))
                .body("[0].'numericCode'", containsString("748"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("SZL"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "ss"))
                .body("[0].'translations'.'de'", containsString("Swasiland"))
                .body("[0].'translations'.'es'", containsString("Suazilandia"))
                .body("[0].'translations'.'fr'", containsString("Swaziland"))
                .body("[0].'translations'.'ja'", containsString("スワジランド"))
                .body("[0].'translations'.'it'", containsString("Swaziland"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_325_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/tegucigalpa?fields=3eMTW9")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_326_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/algerian?fields=_EM_6483_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_327_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/stanley?fields=_EM_15200_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_328_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/31")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Netherlands"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".nl"))
                .body("[0].'alpha2Code'", containsString("NL"))
                .body("[0].'alpha3Code'", containsString("NLD"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("31"))
                .body("[0].'capital'", containsString("Amsterdam"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("NL", "Holland", "Nederland"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(1.6916E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(52.5))
                .body("[0].'latlng'[1]", numberMatches(5.75))
                .body("[0].'demonym'", containsString("Dutch"))
                .body("[0].'area'", numberMatches(41850.0))
                .body("[0].'gini'", numberMatches(30.9))
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC-04:00", "UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("BEL", "DEU"))
                .body("[0].'nativeName'", containsString("Nederland"))
                .body("[0].'numericCode'", containsString("528"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("nl"))
                .body("[0].'translations'.'de'", containsString("Niederlande"))
                .body("[0].'translations'.'es'", containsString("Países Bajos"))
                .body("[0].'translations'.'fr'", containsString("Pays-Bas"))
                .body("[0].'translations'.'ja'", containsString("オランダ"))
                .body("[0].'translations'.'it'", containsString("Paesi Bassi"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_329_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/douglas")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Isle of Man"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".im"))
                .body("[0].'alpha2Code'", containsString("IM"))
                .body("[0].'alpha3Code'", containsString("IMN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("44"))
                .body("[0].'capital'", containsString("Douglas"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("IM", "Ellan Vannin", "Mann", "Mannin"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(84497.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(54.25))
                .body("[0].'latlng'[1]", numberMatches(-4.5))
                .body("[0].'demonym'", containsString("Manx"))
                .body("[0].'area'", numberMatches(572.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+00:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Isle of Man"))
                .body("[0].'numericCode'", containsString("833"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("GBP"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "gv"))
                .body("[0].'translations'.'de'", containsString("Insel Man"))
                .body("[0].'translations'.'es'", containsString("Isla de Man"))
                .body("[0].'translations'.'fr'", containsString("Île de Man"))
                .body("[0].'translations'.'ja'", containsString("マン島"))
                .body("[0].'translations'.'it'", containsString("Isola di Man"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_330_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/yt?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Mayotte"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".yt"))
                .body("[0].'alpha2Code'", containsString("YT"))
                .body("[0].'alpha3Code'", containsString("MYT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("262"))
                .body("[0].'capital'", containsString("Mamoudzou"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("YT", "Department of Mayotte", "Département de Mayotte"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(212645.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-12.83333333))
                .body("[0].'latlng'[1]", numberMatches(45.16666666))
                .body("[0].'demonym'", containsString("French"))
                .body("[0].'area'", nullValue())
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Mayotte"))
                .body("[0].'numericCode'", containsString("175"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Mayotte"))
                .body("[0].'translations'.'es'", containsString("Mayotte"))
                .body("[0].'translations'.'fr'", containsString("Mayotte"))
                .body("[0].'translations'.'ja'", containsString("マヨット"))
                .body("[0].'translations'.'it'", containsString("Mayotte"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_331_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/nijeriya")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Nigeria"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ng"))
                .body("[0].'alpha2Code'", containsString("NG"))
                .body("[0].'alpha3Code'", containsString("NGA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("234"))
                .body("[0].'capital'", containsString("Abuja"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("NG", "Nijeriya", "Naíjíríà", "Federal Republic of Nigeria"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(1.82202E8))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(10.0))
                .body("[0].'latlng'[1]", numberMatches(8.0))
                .body("[0].'demonym'", containsString("Nigerian"))
                .body("[0].'area'", numberMatches(923768.0))
                .body("[0].'gini'", numberMatches(48.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("BEN", "CMR", "TCD", "NER"))
                .body("[0].'nativeName'", containsString("Nigeria"))
                .body("[0].'numericCode'", containsString("566"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("NGN"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Nigeria"))
                .body("[0].'translations'.'es'", containsString("Nigeria"))
                .body("[0].'translations'.'fr'", containsString("Nigéria"))
                .body("[0].'translations'.'ja'", containsString("ナイジェリア"))
                .body("[0].'translations'.'it'", containsString("Nigeria"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_332_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/967")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Yemen"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ye"))
                .body("[0].'alpha2Code'", containsString("YE"))
                .body("[0].'alpha3Code'", containsString("YEM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("967"))
                .body("[0].'capital'", containsString("Sana'a"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("YE", "Yemeni Republic", "al-Jumhūriyyah al-Yamaniyyah"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(2.5956E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(15.0))
                .body("[0].'latlng'[1]", numberMatches(48.0))
                .body("[0].'demonym'", containsString("Yemeni"))
                .body("[0].'area'", numberMatches(527968.0))
                .body("[0].'gini'", numberMatches(37.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("OMN", "SAU"))
                .body("[0].'nativeName'", containsString("اليَمَن"))
                .body("[0].'numericCode'", containsString("887"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("YER"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Jemen"))
                .body("[0].'translations'.'es'", containsString("Yemen"))
                .body("[0].'translations'.'fr'", containsString("Yémen"))
                .body("[0].'translations'.'ja'", containsString("イエメン"))
                .body("[0].'translations'.'it'", containsString("Yemen"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_333_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/naoero?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Nauru"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".nr"))
                .body("[0].'alpha2Code'", containsString("NR"))
                .body("[0].'alpha3Code'", containsString("NRU"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("674"))
                .body("[0].'capital'", containsString("Yaren"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("NR", "Naoero", "Pleasant Island", "Republic of Nauru", "Ripublik Naoero"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Micronesia"))
                .body("[0].'population'", numberMatches(10084.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-0.53333333))
                .body("[0].'latlng'[1]", numberMatches(166.91666666))
                .body("[0].'demonym'", containsString("Nauruan"))
                .body("[0].'area'", numberMatches(21.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+12:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Nauru"))
                .body("[0].'numericCode'", containsString("520"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AUD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "na"))
                .body("[0].'translations'.'de'", containsString("Nauru"))
                .body("[0].'translations'.'es'", containsString("Nauru"))
                .body("[0].'translations'.'fr'", containsString("Nauru"))
                .body("[0].'translations'.'ja'", containsString("ナウル"))
                .body("[0].'translations'.'it'", containsString("Nauru"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_334_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/san%20juan")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Puerto Rico"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".pr"))
                .body("[0].'alpha2Code'", containsString("PR"))
                .body("[0].'alpha3Code'", containsString("PRI"))
                .body("[0].'callingCodes'.size()", equalTo(2))
                .body("[0].'callingCodes'", hasItems("1", "1"))
                .body("[0].'capital'", containsString("San Juan"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("PR", "Commonwealth of Puerto Rico", "Estado Libre Asociado de Puerto Rico"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(3548397.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(18.25))
                .body("[0].'latlng'[1]", numberMatches(-66.5))
                .body("[0].'demonym'", containsString("Puerto Rican"))
                .body("[0].'area'", numberMatches(8870.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Puerto Rico"))
                .body("[0].'numericCode'", containsString("630"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("es", "en"))
                .body("[0].'translations'.'de'", containsString("Puerto Rico"))
                .body("[0].'translations'.'es'", containsString("Puerto Rico"))
                .body("[0].'translations'.'fr'", containsString("Porto Rico"))
                .body("[0].'translations'.'ja'", containsString("プエルトリコ"))
                .body("[0].'translations'.'it'", containsString("Porto Rico"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_335_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/351?fields=_EM_15996_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_336_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/Southern%20Africa?fields=_EM_4088_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(6))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_337_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/american?fields=iVPzRgIna1")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_338_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/65")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Singapore"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sg"))
                .body("[0].'alpha2Code'", containsString("SG"))
                .body("[0].'alpha3Code'", containsString("SGP"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("65"))
                .body("[0].'capital'", containsString("Singapore"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("SG", "Singapura", "Republik Singapura", "新加坡共和国"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("South-Eastern Asia"))
                .body("[0].'population'", numberMatches(5469700.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(1.36666666))
                .body("[0].'latlng'[1]", numberMatches(103.8))
                .body("[0].'demonym'", containsString("Singaporean"))
                .body("[0].'area'", numberMatches(710.0))
                .body("[0].'gini'", numberMatches(48.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Singapore"))
                .body("[0].'numericCode'", containsString("702"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("SGD"))
                .body("[0].'languages'.size()", equalTo(4))
                .body("[0].'languages'", hasItems("en", "ms", "ta", "zh"))
                .body("[0].'translations'.'de'", containsString("Singapur"))
                .body("[0].'translations'.'es'", containsString("Singapur"))
                .body("[0].'translations'.'fr'", containsString("Singapour"))
                .body("[0].'translations'.'ja'", containsString("シンガポール"))
                .body("[0].'translations'.'it'", containsString("Singapore"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_339_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/mauritian?fields=_EM_6847_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_340_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/monaco?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Monaco"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mc"))
                .body("[0].'alpha2Code'", containsString("MC"))
                .body("[0].'alpha3Code'", containsString("MCO"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("377"))
                .body("[0].'capital'", containsString("Monaco"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("MC", "Principality of Monaco", "Principauté de Monaco"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(37800.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(43.73333333))
                .body("[0].'latlng'[1]", numberMatches(7.4))
                .body("[0].'demonym'", containsString("Monegasque"))
                .body("[0].'area'", numberMatches(2.02))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("FRA"))
                .body("[0].'nativeName'", containsString("Monaco"))
                .body("[0].'numericCode'", containsString("492"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Monaco"))
                .body("[0].'translations'.'es'", containsString("Mónaco"))
                .body("[0].'translations'.'fr'", containsString("Monaco"))
                .body("[0].'translations'.'ja'", containsString("モナコ"))
                .body("[0].'translations'.'it'", containsString("Principato di Monaco"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_341_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/685")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Samoa"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ws"))
                .body("[0].'alpha2Code'", containsString("WS"))
                .body("[0].'alpha3Code'", containsString("WSM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("685"))
                .body("[0].'capital'", containsString("Apia"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("WS", "Independent State of Samoa", "Malo Saʻoloto Tutoʻatasi o Sāmoa"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Polynesia"))
                .body("[0].'population'", numberMatches(187820.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-13.58333333))
                .body("[0].'latlng'[1]", numberMatches(-172.33333333))
                .body("[0].'demonym'", containsString("Samoan"))
                .body("[0].'area'", numberMatches(2842.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+13:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Samoa"))
                .body("[0].'numericCode'", containsString("882"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("WST"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("sm", "en"))
                .body("[0].'translations'.'de'", containsString("Samoa"))
                .body("[0].'translations'.'es'", containsString("Samoa"))
                .body("[0].'translations'.'fr'", containsString("Samoa"))
                .body("[0].'translations'.'ja'", containsString("サモア"))
                .body("[0].'translations'.'it'", containsString("Samoa"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_342_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/lu")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Democratic Republic of the Congo"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cd"))
                .body("[0].'alpha2Code'", containsString("CD"))
                .body("[0].'alpha3Code'", containsString("COD"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("243"))
                .body("[0].'capital'", containsString("Kinshasa"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("CD", "DR Congo", "Congo-Kinshasa", "DRC"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Middle Africa"))
                .body("[0].'population'", numberMatches(7.7267E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(0.0))
                .body("[0].'latlng'[1]", numberMatches(25.0))
                .body("[0].'demonym'", containsString("Congolese"))
                .body("[0].'area'", numberMatches(2344858.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC+01:00", "UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(9))
                .body("[0].'borders'", hasItems("AGO", "BDI", "CAF", "COG", "RWA", "SSD", "TZA", "UGA", "ZMB"))
                .body("[0].'nativeName'", containsString("République démocratique du Congo"))
                .body("[0].'numericCode'", containsString("180"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("CDF"))
                .body("[0].'languages'.size()", equalTo(5))
                .body("[0].'languages'", hasItems("fr", "ln", "kg", "sw", "lu"))
                .body("[0].'translations'.'de'", containsString("Kongo (Dem. Rep.)"))
                .body("[0].'translations'.'es'", containsString("Congo (Rep. Dem.)"))
                .body("[0].'translations'.'fr'", containsString("Congo (Rép. dém.)"))
                .body("[0].'translations'.'ja'", containsString("コンゴ民主共和国"))
                .body("[0].'translations'.'it'", containsString("Congo (Rep. Dem.)"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_343_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/420?fields=_EM_12806_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_344_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/syrian?fields=translations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'translations'.'br'", containsString("Síria"))
                .body("[0].'translations'.'pt'", containsString("Síria"))
                .body("[0].'translations'.'nl'", containsString("Syrië"))
                .body("[0].'translations'.'hr'", containsString("Sirija"))
                .body("[0].'translations'.'fa'", containsString("سوریه"))
                .body("[0].'translations'.'de'", containsString("Syrien"))
                .body("[0].'translations'.'es'", containsString("Siria"))
                .body("[0].'translations'.'fr'", containsString("Syrie"))
                .body("[0].'translations'.'ja'", containsString("シリア・アラブ共和国"))
                .body("[0].'translations'.'it'", containsString("Siria"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_345_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/nl")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(8))
                .body("[0].'name'", containsString("Aruba"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".aw"))
                .body("[0].'alpha2Code'", containsString("AW"))
                .body("[0].'alpha3Code'", containsString("ABW"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("297"))
                .body("[0].'capital'", containsString("Oranjestad"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("AW"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(107394.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(12.5))
                .body("[0].'latlng'[1]", numberMatches(-69.96666666))
                .body("[0].'demonym'", containsString("Aruban"))
                .body("[0].'area'", numberMatches(180.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Aruba"))
                .body("[0].'numericCode'", containsString("533"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AWG"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("nl", "pa"))
                .body("[0].'translations'.'de'", containsString("Aruba"))
                .body("[0].'translations'.'es'", containsString("Aruba"))
                .body("[0].'translations'.'fr'", containsString("Aruba"))
                .body("[0].'translations'.'ja'", containsString("アルバ"))
                .body("[0].'translations'.'it'", containsString("Aruba"))
                .body("[0].'relevance'", containsString("0.5"))
                .body("[1].'name'", containsString("Belgium"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".be"))
                .body("[1].'alpha2Code'", containsString("BE"))
                .body("[1].'alpha3Code'", containsString("BEL"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("32"))
                .body("[1].'capital'", containsString("Brussels"))
                .body("[1].'altSpellings'.size()", equalTo(9))
                .body("[1].'altSpellings'", hasItems("BE", "België", "Belgie", "Belgien", "Belgique", "Kingdom of Belgium", "Koninkrijk België", "Royaume de Belgique", "Königreich Belgien"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Western Europe"))
                .body("[1].'population'", numberMatches(1.124833E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(50.83333333))
                .body("[1].'latlng'[1]", numberMatches(4.0))
                .body("[1].'demonym'", containsString("Belgian"))
                .body("[1].'area'", numberMatches(30528.0))
                .body("[1].'gini'", numberMatches(33.0))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+01:00"))
                .body("[1].'borders'.size()", equalTo(4))
                .body("[1].'borders'", hasItems("FRA", "DEU", "LUX", "NLD"))
                .body("[1].'nativeName'", containsString("België"))
                .body("[1].'numericCode'", containsString("056"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("EUR"))
                .body("[1].'languages'.size()", equalTo(3))
                .body("[1].'languages'", hasItems("nl", "fr", "de"))
                .body("[1].'translations'.'de'", containsString("Belgien"))
                .body("[1].'translations'.'es'", containsString("Bélgica"))
                .body("[1].'translations'.'fr'", containsString("Belgique"))
                .body("[1].'translations'.'ja'", containsString("ベルギー"))
                .body("[1].'translations'.'it'", containsString("Belgio"))
                .body("[1].'relevance'", containsString("1.5"))
                .body("[2].'name'", containsString("Bonaire"))
                .body("[2].'topLevelDomain'.size()", equalTo(2))
                .body("[2].'topLevelDomain'", hasItems(".an", ".nl"))
                .body("[2].'alpha2Code'", containsString("BQ"))
                .body("[2].'alpha3Code'", containsString("BES"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("599"))
                .body("[2].'capital'", containsString("Kralendijk"))
                .body("[2].'altSpellings'.size()", equalTo(2))
                .body("[2].'altSpellings'", hasItems("BQ", "Boneiru"))
                .body("[2].'region'", containsString("Americas"))
                .body("[2].'subregion'", containsString("Caribbean"))
                .body("[2].'population'", numberMatches(17408.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(12.15))
                .body("[2].'latlng'[1]", numberMatches(-68.266667))
                .body("[2].'demonym'", containsString("Dutch"))
                .body("[2].'area'", numberMatches(294.0))
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC-04:00"))
                .body("[2].'borders'.size()", equalTo(0))
                .body("[2].'nativeName'", containsString("Bonaire"))
                .body("[2].'numericCode'", containsString("535"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("USD"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("nl"))
                .body("[2].'translations'.'de'", nullValue())
                .body("[2].'translations'.'es'", nullValue())
                .body("[2].'translations'.'fr'", nullValue())
                .body("[2].'translations'.'ja'", nullValue())
                .body("[2].'translations'.'it'", nullValue())
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 5 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_346_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/ne")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Nepal"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".np"))
                .body("[0].'alpha2Code'", containsString("NP"))
                .body("[0].'alpha3Code'", containsString("NPL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("977"))
                .body("[0].'capital'", containsString("Kathmandu"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("NP", "Federal Democratic Republic of Nepal", "Loktāntrik Ganatantra Nepāl"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(2.8037904E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(28.0))
                .body("[0].'latlng'[1]", numberMatches(84.0))
                .body("[0].'demonym'", containsString("Nepalese"))
                .body("[0].'area'", numberMatches(147181.0))
                .body("[0].'gini'", numberMatches(32.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+05:45"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("CHN", "IND"))
                .body("[0].'nativeName'", containsString("नेपाल"))
                .body("[0].'numericCode'", containsString("524"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("NPR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ne"))
                .body("[0].'translations'.'de'", containsString("Népal"))
                .body("[0].'translations'.'es'", containsString("Nepal"))
                .body("[0].'translations'.'fr'", containsString("Népal"))
                .body("[0].'translations'.'ja'", containsString("ネパール"))
                .body("[0].'translations'.'it'", containsString("Nepal"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_347_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/berlin")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Germany"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".de"))
                .body("[0].'alpha2Code'", containsString("DE"))
                .body("[0].'alpha3Code'", containsString("DEU"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("49"))
                .body("[0].'capital'", containsString("Berlin"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("DE", "Federal Republic of Germany", "Bundesrepublik Deutschland"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(8.10836E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(51.0))
                .body("[0].'latlng'[1]", numberMatches(9.0))
                .body("[0].'demonym'", containsString("German"))
                .body("[0].'area'", numberMatches(357114.0))
                .body("[0].'gini'", numberMatches(28.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(9))
                .body("[0].'borders'", hasItems("AUT", "BEL", "CZE", "DNK", "FRA", "LUX", "NLD", "POL", "CHE"))
                .body("[0].'nativeName'", containsString("Deutschland"))
                .body("[0].'numericCode'", containsString("276"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("de"))
                .body("[0].'translations'.'de'", containsString("Deutschland"))
                .body("[0].'translations'.'es'", containsString("Alemania"))
                .body("[0].'translations'.'fr'", containsString("Allemagne"))
                .body("[0].'translations'.'ja'", containsString("ドイツ"))
                .body("[0].'translations'.'it'", containsString("Germania"))
                .body("[0].'relevance'", containsString("3"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_348_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/slovakia?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Slovakia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sk"))
                .body("[0].'alpha2Code'", containsString("SK"))
                .body("[0].'alpha3Code'", containsString("SVK"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("421"))
                .body("[0].'capital'", containsString("Bratislava"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("SK", "Slovak Republic", "Slovenská republika"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(5421349.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(48.66666666))
                .body("[0].'latlng'[1]", numberMatches(19.5))
                .body("[0].'demonym'", containsString("Slovak"))
                .body("[0].'area'", numberMatches(49037.0))
                .body("[0].'gini'", numberMatches(26.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("AUT", "CZE", "HUN", "POL", "UKR"))
                .body("[0].'nativeName'", containsString("Slovensko"))
                .body("[0].'numericCode'", containsString("703"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("sk"))
                .body("[0].'translations'.'de'", containsString("Slowakei"))
                .body("[0].'translations'.'es'", containsString("República Eslovaca"))
                .body("[0].'translations'.'fr'", containsString("Slovaquie"))
                .body("[0].'translations'.'ja'", containsString("スロバキア"))
                .body("[0].'translations'.'it'", containsString("Slovacchia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_349_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/677")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Solomon Islands"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sb"))
                .body("[0].'alpha2Code'", containsString("SB"))
                .body("[0].'alpha3Code'", containsString("SLB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("677"))
                .body("[0].'capital'", containsString("Honiara"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("SB"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Melanesia"))
                .body("[0].'population'", numberMatches(581344.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-8.0))
                .body("[0].'latlng'[1]", numberMatches(159.0))
                .body("[0].'demonym'", containsString("Solomon Islander"))
                .body("[0].'area'", numberMatches(28896.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+11:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Solomon Islands"))
                .body("[0].'numericCode'", containsString("090"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("SBD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Salomonen"))
                .body("[0].'translations'.'es'", containsString("Islas Salomón"))
                .body("[0].'translations'.'fr'", containsString("Îles Salomon"))
                .body("[0].'translations'.'ja'", containsString("ソロモン諸島"))
                .body("[0].'translations'.'it'", containsString("Isole Salomone"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_350_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/mi")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("New Zealand"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".nz"))
                .body("[0].'alpha2Code'", containsString("NZ"))
                .body("[0].'alpha3Code'", containsString("NZL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("64"))
                .body("[0].'capital'", containsString("Wellington"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("NZ", "Aotearoa"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Australia and New Zealand"))
                .body("[0].'population'", numberMatches(4609440.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-41.0))
                .body("[0].'latlng'[1]", numberMatches(174.0))
                .body("[0].'demonym'", containsString("New Zealander"))
                .body("[0].'area'", numberMatches(270467.0))
                .body("[0].'gini'", numberMatches(36.2))
                .body("[0].'timezones'.size()", equalTo(5))
                .body("[0].'timezones'", hasItems("UTC-11:00", "UTC-10:00", "UTC+12:00", "UTC+12:45", "UTC+13:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("New Zealand"))
                .body("[0].'numericCode'", containsString("554"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("NZD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "mi"))
                .body("[0].'translations'.'de'", containsString("Neuseeland"))
                .body("[0].'translations'.'es'", containsString("Nueva Zelanda"))
                .body("[0].'translations'.'fr'", containsString("Nouvelle-Zélande"))
                .body("[0].'translations'.'ja'", containsString("ニュージーランド"))
                .body("[0].'translations'.'it'", containsString("Nuova Zelanda"))
                .body("[0].'relevance'", containsString("1.0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_351_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/598")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Uruguay"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".uy"))
                .body("[0].'alpha2Code'", containsString("UY"))
                .body("[0].'alpha3Code'", containsString("URY"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("598"))
                .body("[0].'capital'", containsString("Montevideo"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("UY", "Oriental Republic of Uruguay", "República Oriental del Uruguay"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(3415866.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-33.0))
                .body("[0].'latlng'[1]", numberMatches(-56.0))
                .body("[0].'demonym'", containsString("Uruguayan"))
                .body("[0].'area'", numberMatches(181034.0))
                .body("[0].'gini'", numberMatches(39.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-03:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("ARG", "BRA"))
                .body("[0].'nativeName'", containsString("Uruguay"))
                .body("[0].'numericCode'", containsString("858"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'", hasItems("UYI", "UYU"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("es"))
                .body("[0].'translations'.'de'", containsString("Uruguay"))
                .body("[0].'translations'.'es'", containsString("Uruguay"))
                .body("[0].'translations'.'fr'", containsString("Uruguay"))
                .body("[0].'translations'.'ja'", containsString("ウルグアイ"))
                .body("[0].'translations'.'it'", containsString("Uruguay"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_352_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/230?fields=mpY")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_353_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/968")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Oman"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".om"))
                .body("[0].'alpha2Code'", containsString("OM"))
                .body("[0].'alpha3Code'", containsString("OMN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("968"))
                .body("[0].'capital'", containsString("Muscat"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("OM", "Sultanate of Oman", "Salṭanat ʻUmān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(4185440.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(21.0))
                .body("[0].'latlng'[1]", numberMatches(57.0))
                .body("[0].'demonym'", containsString("Omani"))
                .body("[0].'area'", numberMatches(309500.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("SAU", "ARE", "YEM"))
                .body("[0].'nativeName'", containsString("عمان"))
                .body("[0].'numericCode'", containsString("512"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("OMR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Oman"))
                .body("[0].'translations'.'es'", containsString("Omán"))
                .body("[0].'translations'.'fr'", containsString("Oman"))
                .body("[0].'translations'.'ja'", containsString("オマーン"))
                .body("[0].'translations'.'it'", containsString("oman"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_354_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/ottawa?fields=topLevelDomain")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ca"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_355_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/bv?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Bouvet Island"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bv"))
                .body("[0].'alpha2Code'", containsString("BV"))
                .body("[0].'alpha3Code'", containsString("BVT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("47"))
                .body("[0].'capital'", containsString(""))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("BV", "Bouvetøya", "Bouvet-øya"))
                .body("[0].'region'", containsString(""))
                .body("[0].'subregion'", containsString(""))
                .body("[0].'population'", numberMatches(0.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-54.43333333))
                .body("[0].'latlng'[1]", numberMatches(3.4))
                .body("[0].'demonym'", containsString(""))
                .body("[0].'area'", numberMatches(49.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Bouvetøya"))
                .body("[0].'numericCode'", containsString("074"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("NOK"))
                .body("[0].'languages'.size()", equalTo(0))
                .body("[0].'translations'.'de'", containsString("Bouvetinsel"))
                .body("[0].'translations'.'es'", containsString("Isla Bouvet"))
                .body("[0].'translations'.'fr'", containsString("Île Bouvet"))
                .body("[0].'translations'.'ja'", containsString("ブーベ島"))
                .body("[0].'translations'.'it'", containsString("Isola Bouvet"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_356_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/20")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Egypt"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".eg"))
                .body("[0].'alpha2Code'", containsString("EG"))
                .body("[0].'alpha3Code'", containsString("EGY"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("20"))
                .body("[0].'capital'", containsString("Cairo"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("EG", "Arab Republic of Egypt"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Northern Africa"))
                .body("[0].'population'", numberMatches(8.93356E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(27.0))
                .body("[0].'latlng'[1]", numberMatches(30.0))
                .body("[0].'demonym'", containsString("Egyptian"))
                .body("[0].'area'", numberMatches(1002450.0))
                .body("[0].'gini'", numberMatches(30.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("ISR", "LBY", "SDN"))
                .body("[0].'nativeName'", containsString("مصر‎"))
                .body("[0].'numericCode'", containsString("818"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EGP"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Ägypten"))
                .body("[0].'translations'.'es'", containsString("Egipto"))
                .body("[0].'translations'.'fr'", containsString("Égypte"))
                .body("[0].'translations'.'ja'", containsString("エジプト"))
                .body("[0].'translations'.'it'", containsString("Egitto"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_357_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/lv?" + 
                    "fields=Glh&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_358_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/357?fields=_EM_4148_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_359_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/lang/bn?fields=_EM_7288_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_360_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/japanese")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Japan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".jp"))
                .body("[0].'alpha2Code'", containsString("JP"))
                .body("[0].'alpha3Code'", containsString("JPN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("81"))
                .body("[0].'capital'", containsString("Tokyo"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("JP", "Nippon", "Nihon"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Eastern Asia"))
                .body("[0].'population'", numberMatches(1.2696E8))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(36.0))
                .body("[0].'latlng'[1]", numberMatches(138.0))
                .body("[0].'demonym'", containsString("Japanese"))
                .body("[0].'area'", numberMatches(377930.0))
                .body("[0].'gini'", numberMatches(38.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+09:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("日本"))
                .body("[0].'numericCode'", containsString("392"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("JPY"))
                .body("[0].'currencies'[0].'name'", containsString("Japanese yen"))
                .body("[0].'currencies'[0].'symbol'", containsString("¥"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("ja"))
                .body("[0].'languages'[0].'iso639_2'", containsString("jpn"))
                .body("[0].'languages'[0].'name'", containsString("Japanese"))
                .body("[0].'languages'[0].'nativeName'", containsString("日本語 (にほんご)"))
                .body("[0].'translations'.'de'", containsString("Japan"))
                .body("[0].'translations'.'es'", containsString("Japón"))
                .body("[0].'translations'.'fr'", containsString("Japon"))
                .body("[0].'translations'.'ja'", containsString("日本"))
                .body("[0].'translations'.'it'", containsString("Giappone"))
                .body("[0].'translations'.'br'", containsString("Japão"))
                .body("[0].'translations'.'pt'", containsString("Japão"))
                .body("[0].'translations'.'nl'", containsString("Japan"))
                .body("[0].'translations'.'hr'", containsString("Japan"))
                .body("[0].'translations'.'fa'", containsString("ژاپن"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/jpn.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("JPN"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_361_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/luxembourg?fields=I")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_362_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/lang/thA?fields=_EM_7371_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_363_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/lang/tn?fields=_EM_7377_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_364_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/964")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Iraq"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".iq"))
                .body("[0].'alpha2Code'", containsString("IQ"))
                .body("[0].'alpha3Code'", containsString("IRQ"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("964"))
                .body("[0].'capital'", containsString("Baghdad"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("IQ", "Republic of Iraq", "Jumhūriyyat al-‘Irāq"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(3.6004552E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(33.0))
                .body("[0].'latlng'[1]", numberMatches(44.0))
                .body("[0].'demonym'", containsString("Iraqi"))
                .body("[0].'area'", numberMatches(438317.0))
                .body("[0].'gini'", numberMatches(30.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("IRN", "JOR", "KWT", "SAU", "SYR", "TUR"))
                .body("[0].'nativeName'", containsString("العراق"))
                .body("[0].'numericCode'", containsString("368"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("IQD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("ar", "ku"))
                .body("[0].'translations'.'de'", containsString("Irak"))
                .body("[0].'translations'.'es'", containsString("Irak"))
                .body("[0].'translations'.'fr'", containsString("Irak"))
                .body("[0].'translations'.'ja'", containsString("イラク"))
                .body("[0].'translations'.'it'", containsString("Iraq"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_365_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/kingston?fields=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("Jamaica"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".jm"))
                .body("[0].'alpha2Code'", containsString("JM"))
                .body("[0].'alpha3Code'", containsString("JAM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Kingston"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("JM"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(2723246.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(18.25))
                .body("[0].'latlng'[1]", numberMatches(-77.5))
                .body("[0].'demonym'", containsString("Jamaican"))
                .body("[0].'area'", numberMatches(10991.0))
                .body("[0].'gini'", numberMatches(45.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-05:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Jamaica"))
                .body("[0].'numericCode'", containsString("388"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("JMD"))
                .body("[0].'currencies'[0].'name'", containsString("Jamaican dollar"))
                .body("[0].'currencies'[0].'symbol'", containsString("$"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("en"))
                .body("[0].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[0].'name'", containsString("English"))
                .body("[0].'languages'[0].'nativeName'", containsString("English"))
                .body("[0].'translations'.'de'", containsString("Jamaika"))
                .body("[0].'translations'.'es'", containsString("Jamaica"))
                .body("[0].'translations'.'fr'", containsString("Jamaïque"))
                .body("[0].'translations'.'ja'", containsString("ジャマイカ"))
                .body("[0].'translations'.'it'", containsString("Giamaica"))
                .body("[0].'translations'.'br'", containsString("Jamaica"))
                .body("[0].'translations'.'pt'", containsString("Jamaica"))
                .body("[0].'translations'.'nl'", containsString("Jamaica"))
                .body("[0].'translations'.'hr'", containsString("Jamajka"))
                .body("[0].'translations'.'fa'", containsString("جامائیکا"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/jam.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("CARICOM"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Caribbean Community"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(3))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("Comunidad del Caribe", "Communauté Caribéenne", "Caribische Gemeenschap"))
                .body("[0].'cioc'", containsString("JAM"))
                .body("[1].'name'", containsString("Norfolk Island"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".nf"))
                .body("[1].'alpha2Code'", containsString("NF"))
                .body("[1].'alpha3Code'", containsString("NFK"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("672"))
                .body("[1].'capital'", containsString("Kingston"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("NF", "Territory of Norfolk Island", "Teratri of Norf'k Ailen"))
                .body("[1].'region'", containsString("Oceania"))
                .body("[1].'subregion'", containsString("Australia and New Zealand"))
                .body("[1].'population'", numberMatches(2302.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-29.03333333))
                .body("[1].'latlng'[1]", numberMatches(167.95))
                .body("[1].'demonym'", containsString("Norfolk Islander"))
                .body("[1].'area'", numberMatches(36.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+11:30"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Norfolk Island"))
                .body("[1].'numericCode'", containsString("574"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("AUD"))
                .body("[1].'currencies'[0].'name'", containsString("Australian dollar"))
                .body("[1].'currencies'[0].'symbol'", containsString("$"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'[0].'iso639_1'", containsString("en"))
                .body("[1].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[1].'languages'[0].'name'", containsString("English"))
                .body("[1].'languages'[0].'nativeName'", containsString("English"))
                .body("[1].'translations'.'de'", containsString("Norfolkinsel"))
                .body("[1].'translations'.'es'", containsString("Isla de Norfolk"))
                .body("[1].'translations'.'fr'", containsString("Île de Norfolk"))
                .body("[1].'translations'.'ja'", containsString("ノーフォーク島"))
                .body("[1].'translations'.'it'", containsString("Isola Norfolk"))
                .body("[1].'translations'.'br'", containsString("Ilha Norfolk"))
                .body("[1].'translations'.'pt'", containsString("Ilha Norfolk"))
                .body("[1].'translations'.'nl'", containsString("Norfolkeiland"))
                .body("[1].'translations'.'hr'", containsString("Otok Norfolk"))
                .body("[1].'translations'.'fa'", containsString("جزیره نورفک"))
                .body("[1].'flag'", containsString("https://restcountries.eu/data/nfk.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(0))
                .body("[1].'cioc'", containsString(""));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_366_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/Polar?fields=_EM_7496_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_367_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/tokelauan?fields=tESk")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_368_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/679")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Fiji"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".fj"))
                .body("[0].'alpha2Code'", containsString("FJ"))
                .body("[0].'alpha3Code'", containsString("FJI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("679"))
                .body("[0].'capital'", containsString("Suva"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("FJ", "Viti", "Republic of Fiji", "Matanitu ko Viti", "Fijī Gaṇarājya"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Melanesia"))
                .body("[0].'population'", numberMatches(859178.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-18.0))
                .body("[0].'latlng'[1]", numberMatches(175.0))
                .body("[0].'demonym'", containsString("Fijian"))
                .body("[0].'area'", numberMatches(18272.0))
                .body("[0].'gini'", numberMatches(42.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+12:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Fiji"))
                .body("[0].'numericCode'", containsString("242"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("FJD"))
                .body("[0].'languages'.size()", equalTo(4))
                .body("[0].'languages'", hasItems("en", "fj", "hi", "ur"))
                .body("[0].'translations'.'de'", containsString("Fidschi"))
                .body("[0].'translations'.'es'", containsString("Fiyi"))
                .body("[0].'translations'.'fr'", containsString("Fidji"))
                .body("[0].'translations'.'ja'", containsString("フィジー"))
                .body("[0].'translations'.'it'", containsString("Figi"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_369_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/681")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Wallis and Futuna"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".wf"))
                .body("[0].'alpha2Code'", containsString("WF"))
                .body("[0].'alpha3Code'", containsString("WLF"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("681"))
                .body("[0].'capital'", containsString("Mata-Utu"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("WF", "Territory of the Wallis and Futuna Islands", "Territoire des îles Wallis et Futuna"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Polynesia"))
                .body("[0].'population'", numberMatches(13135.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-13.3))
                .body("[0].'latlng'[1]", numberMatches(-176.2))
                .body("[0].'demonym'", containsString("Wallis and Futuna Islander"))
                .body("[0].'area'", numberMatches(142.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+12:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Wallis et Futuna"))
                .body("[0].'numericCode'", containsString("876"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XPF"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Wallis und Futuna"))
                .body("[0].'translations'.'es'", containsString("Wallis y Futuna"))
                .body("[0].'translations'.'fr'", containsString("Wallis-et-Futuna"))
                .body("[0].'translations'.'ja'", containsString("ウォリス・フツナ"))
                .body("[0].'translations'.'it'", containsString("Wallis e Futuna"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_370_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/af")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("Namibia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".na"))
                .body("[0].'alpha2Code'", containsString("NA"))
                .body("[0].'alpha3Code'", containsString("NAM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("264"))
                .body("[0].'capital'", containsString("Windhoek"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("NA", "Namibië", "Republic of Namibia"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Southern Africa"))
                .body("[0].'population'", numberMatches(2280700.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-22.0))
                .body("[0].'latlng'[1]", numberMatches(17.0))
                .body("[0].'demonym'", containsString("Namibian"))
                .body("[0].'area'", numberMatches(825615.0))
                .body("[0].'gini'", numberMatches(63.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("AGO", "BWA", "ZAF", "ZMB"))
                .body("[0].'nativeName'", containsString("Namibia"))
                .body("[0].'numericCode'", containsString("516"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'", hasItems("NAD", "ZAR"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "af"))
                .body("[0].'translations'.'de'", containsString("Namibia"))
                .body("[0].'translations'.'es'", containsString("Namibia"))
                .body("[0].'translations'.'fr'", containsString("Namibie"))
                .body("[0].'translations'.'ja'", containsString("ナミビア"))
                .body("[0].'translations'.'it'", containsString("Namibia"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("South Africa"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".za"))
                .body("[1].'alpha2Code'", containsString("ZA"))
                .body("[1].'alpha3Code'", containsString("ZAF"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("27"))
                .body("[1].'capital'", containsString("Pretoria"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("ZA", "RSA", "Suid-Afrika", "Republic of South Africa"))
                .body("[1].'region'", containsString("Africa"))
                .body("[1].'subregion'", containsString("Southern Africa"))
                .body("[1].'population'", numberMatches(5.49569E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-29.0))
                .body("[1].'latlng'[1]", numberMatches(24.0))
                .body("[1].'demonym'", containsString("South African"))
                .body("[1].'area'", numberMatches(1221037.0))
                .body("[1].'gini'", numberMatches(63.1))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+02:00"))
                .body("[1].'borders'.size()", equalTo(6))
                .body("[1].'borders'", hasItems("BWA", "LSO", "MOZ", "NAM", "SWZ", "ZWE"))
                .body("[1].'nativeName'", containsString("South Africa"))
                .body("[1].'numericCode'", containsString("710"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("ZAR"))
                .body("[1].'languages'.size()", equalTo(10))
                .body("[1].'languages'", hasItems("af", "en", "nr", "st", "ss", "tn", "ts", "ve", "xh", "zu"))
                .body("[1].'translations'.'de'", containsString("Republik Südafrika"))
                .body("[1].'translations'.'es'", containsString("República de Sudáfrica"))
                .body("[1].'translations'.'fr'", containsString("Afrique du Sud"))
                .body("[1].'translations'.'ja'", containsString("南アフリカ"))
                .body("[1].'translations'.'it'", containsString("Sud Africa"))
                .body("[1].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_371_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/rabat?fields=xi18kolk")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_372_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/222")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Mauritania"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mr"))
                .body("[0].'alpha2Code'", containsString("MR"))
                .body("[0].'alpha3Code'", containsString("MRT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("222"))
                .body("[0].'capital'", containsString("Nouakchott"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("MR", "Islamic Republic of Mauritania", "al-Jumhūriyyah al-ʾIslāmiyyah al-Mūrītāniyyah"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(3631775.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(20.0))
                .body("[0].'latlng'[1]", numberMatches(-12.0))
                .body("[0].'demonym'", containsString("Mauritanian"))
                .body("[0].'area'", numberMatches(1030700.0))
                .body("[0].'gini'", numberMatches(40.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("DZA", "MLI", "SEN", "ESH"))
                .body("[0].'nativeName'", containsString("موريتانيا"))
                .body("[0].'numericCode'", containsString("478"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MRO"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Mauretanien"))
                .body("[0].'translations'.'es'", containsString("Mauritania"))
                .body("[0].'translations'.'fr'", containsString("Mauritanie"))
                .body("[0].'translations'.'ja'", containsString("モーリタニア"))
                .body("[0].'translations'.'it'", containsString("Mauritania"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_373_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/buliwya?fields=Glh")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_374_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/willemstad?fields=_EM_4441_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_375_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/290")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Saint Helena"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sh"))
                .body("[0].'alpha2Code'", containsString("SH"))
                .body("[0].'alpha3Code'", containsString("SHN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("290"))
                .body("[0].'capital'", containsString("Jamestown"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("SH"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(4255.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-15.95))
                .body("[0].'latlng'[1]", numberMatches(-5.7))
                .body("[0].'demonym'", containsString("Saint Helenian"))
                .body("[0].'area'", nullValue())
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+00:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Saint Helena"))
                .body("[0].'numericCode'", containsString("654"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("SHP"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Sankt Helena"))
                .body("[0].'translations'.'es'", containsString("Santa Helena"))
                .body("[0].'translations'.'fr'", containsString("Sainte-Hélène"))
                .body("[0].'translations'.'ja'", containsString("セントヘレナ・アセンションおよびトリスタンダクーニャ"))
                .body("[0].'translations'.'it'", containsString("Sant'Elena"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_376_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/bouvetøya?" + 
                    "fields=TeLm&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_377_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/bq?" + 
                    "fields=TeLm&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_378_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/belgian")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Belgium"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".be"))
                .body("[0].'alpha2Code'", containsString("BE"))
                .body("[0].'alpha3Code'", containsString("BEL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("32"))
                .body("[0].'capital'", containsString("Brussels"))
                .body("[0].'altSpellings'.size()", equalTo(9))
                .body("[0].'altSpellings'", hasItems("BE", "België", "Belgie", "Belgien", "Belgique", "Kingdom of Belgium", "Koninkrijk België", "Royaume de Belgique", "Königreich Belgien"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(1.1319511E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(50.83333333))
                .body("[0].'latlng'[1]", numberMatches(4.0))
                .body("[0].'demonym'", containsString("Belgian"))
                .body("[0].'area'", numberMatches(30528.0))
                .body("[0].'gini'", numberMatches(33.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("FRA", "DEU", "LUX", "NLD"))
                .body("[0].'nativeName'", containsString("België"))
                .body("[0].'numericCode'", containsString("056"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("EUR"))
                .body("[0].'currencies'[0].'name'", containsString("Euro"))
                .body("[0].'currencies'[0].'symbol'", containsString("€"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'[0].'iso639_1'", containsString("nl"))
                .body("[0].'languages'[0].'iso639_2'", containsString("nld"))
                .body("[0].'languages'[0].'name'", containsString("Dutch"))
                .body("[0].'languages'[0].'nativeName'", containsString("Nederlands"))
                .body("[0].'languages'[1].'iso639_1'", containsString("fr"))
                .body("[0].'languages'[1].'iso639_2'", containsString("fra"))
                .body("[0].'languages'[1].'name'", containsString("French"))
                .body("[0].'languages'[1].'nativeName'", containsString("français"))
                .body("[0].'languages'[2].'iso639_1'", containsString("de"))
                .body("[0].'languages'[2].'iso639_2'", containsString("deu"))
                .body("[0].'languages'[2].'name'", containsString("German"))
                .body("[0].'languages'[2].'nativeName'", containsString("Deutsch"))
                .body("[0].'translations'.'de'", containsString("Belgien"))
                .body("[0].'translations'.'es'", containsString("Bélgica"))
                .body("[0].'translations'.'fr'", containsString("Belgique"))
                .body("[0].'translations'.'ja'", containsString("ベルギー"))
                .body("[0].'translations'.'it'", containsString("Belgio"))
                .body("[0].'translations'.'br'", containsString("Bélgica"))
                .body("[0].'translations'.'pt'", containsString("Bélgica"))
                .body("[0].'translations'.'nl'", containsString("België"))
                .body("[0].'translations'.'hr'", containsString("Belgija"))
                .body("[0].'translations'.'fa'", containsString("بلژیک"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/bel.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("EU"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("European Union"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("BEL"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_379_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/Asia?fields=_EM_7853_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(50))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 47 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_380_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/canadian?fields=tDSk")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_381_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/eh")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'name'", containsString("Maldives"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mv"))
                .body("[0].'alpha2Code'", containsString("MV"))
                .body("[0].'alpha3Code'", containsString("MDV"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("960"))
                .body("[0].'capital'", containsString("Malé"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("MV", "Maldive Islands", "Republic of the Maldives", "Dhivehi Raajjeyge Jumhooriyya"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(341256.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(3.25))
                .body("[0].'latlng'[1]", numberMatches(73.0))
                .body("[0].'demonym'", containsString("Maldivan"))
                .body("[0].'area'", numberMatches(300.0))
                .body("[0].'gini'", numberMatches(37.4))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+05:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Maldives"))
                .body("[0].'numericCode'", containsString("462"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MVR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("dv"))
                .body("[0].'translations'.'de'", containsString("Malediven"))
                .body("[0].'translations'.'es'", containsString("Maldivas"))
                .body("[0].'translations'.'fr'", containsString("Maldives"))
                .body("[0].'translations'.'ja'", containsString("モルディブ"))
                .body("[0].'translations'.'it'", containsString("Maldive"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Pakistan"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".pk"))
                .body("[1].'alpha2Code'", containsString("PK"))
                .body("[1].'alpha3Code'", containsString("PAK"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("92"))
                .body("[1].'capital'", containsString("Islamabad"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("PK", "Pākistān", "Islamic Republic of Pakistan", "Islāmī Jumhūriya'eh Pākistān"))
                .body("[1].'region'", containsString("Asia"))
                .body("[1].'subregion'", containsString("Southern Asia"))
                .body("[1].'population'", numberMatches(1.90668E8))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(30.0))
                .body("[1].'latlng'[1]", numberMatches(70.0))
                .body("[1].'demonym'", containsString("Pakistani"))
                .body("[1].'area'", numberMatches(881912.0))
                .body("[1].'gini'", numberMatches(30.0))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+05:00"))
                .body("[1].'borders'.size()", equalTo(4))
                .body("[1].'borders'", hasItems("AFG", "CHN", "IND", "IRN"))
                .body("[1].'nativeName'", containsString("Pakistan"))
                .body("[1].'numericCode'", containsString("586"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("PKR"))
                .body("[1].'languages'.size()", equalTo(2))
                .body("[1].'languages'", hasItems("en", "ur"))
                .body("[1].'translations'.'de'", containsString("Pakistan"))
                .body("[1].'translations'.'es'", containsString("Pakistán"))
                .body("[1].'translations'.'fr'", containsString("Pakistan"))
                .body("[1].'translations'.'ja'", containsString("パキスタン"))
                .body("[1].'translations'.'it'", containsString("Pakistan"))
                .body("[1].'relevance'", containsString("2"))
                .body("[2].'name'", containsString("Western Sahara"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".eh"))
                .body("[2].'alpha2Code'", containsString("EH"))
                .body("[2].'alpha3Code'", containsString("ESH"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("212"))
                .body("[2].'capital'", containsString("El Aaiún"))
                .body("[2].'altSpellings'.size()", equalTo(2))
                .body("[2].'altSpellings'", hasItems("EH", "Taneẓroft Tutrimt"))
                .body("[2].'region'", containsString("Africa"))
                .body("[2].'subregion'", containsString("Northern Africa"))
                .body("[2].'population'", numberMatches(510713.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(24.5))
                .body("[2].'latlng'[1]", numberMatches(-13.0))
                .body("[2].'demonym'", containsString("Sahrawi"))
                .body("[2].'area'", numberMatches(266000.0))
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+00:00"))
                .body("[2].'borders'.size()", equalTo(3))
                .body("[2].'borders'", hasItems("DZA", "MRT", "MAR"))
                .body("[2].'nativeName'", containsString("الصحراء الغربية"))
                .body("[2].'numericCode'", containsString("732"))
                .body("[2].'currencies'.size()", equalTo(3))
                .body("[2].'currencies'", hasItems("MAD", "DZD", "MRO"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("es"))
                .body("[2].'translations'.'de'", containsString("Westsahara"))
                .body("[2].'translations'.'es'", containsString("Sahara Occidental"))
                .body("[2].'translations'.'fr'", containsString("Sahara Occidental"))
                .body("[2].'translations'.'ja'", containsString("西サハラ"))
                .body("[2].'translations'.'it'", containsString("Sahara Occidentale"))
                .body("[2].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_382_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/gustavia")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Saint Barthélemy"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bl"))
                .body("[0].'alpha2Code'", containsString("BL"))
                .body("[0].'alpha3Code'", containsString("BLM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("590"))
                .body("[0].'capital'", containsString("Gustavia"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("BL", "St. Barthelemy", "Collectivity of Saint Barthélemy", "Collectivité de Saint-Barthélemy"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(9269.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(18.5))
                .body("[0].'latlng'[1]", numberMatches(-63.41666666))
                .body("[0].'demonym'", containsString("Saint Barthélemy Islander"))
                .body("[0].'area'", numberMatches(21.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Saint-Barthélemy"))
                .body("[0].'numericCode'", containsString("652"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Saint-Barthélemy"))
                .body("[0].'translations'.'es'", containsString("San Bartolomé"))
                .body("[0].'translations'.'fr'", containsString("Saint-Barthélemy"))
                .body("[0].'translations'.'ja'", containsString("サン・バルテルミー"))
                .body("[0].'translations'.'it'", containsString("Antille Francesi"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_383_getOnV2CallingcodWithQueryParamEmptyFields() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/853?fields=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Macao"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mo"))
                .body("[0].'alpha2Code'", containsString("MO"))
                .body("[0].'alpha3Code'", containsString("MAC"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("853"))
                .body("[0].'capital'", containsString(""))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("MO", "澳门", "Macao Special Administrative Region of the People's Republic of China", "中華人民共和國澳門特別行政區", "Região Administrativa Especial de Macau da República Popular da China"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Eastern Asia"))
                .body("[0].'population'", numberMatches(649100.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(22.16666666))
                .body("[0].'latlng'[1]", numberMatches(113.55))
                .body("[0].'demonym'", containsString("Chinese"))
                .body("[0].'area'", numberMatches(30.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("CHN"))
                .body("[0].'nativeName'", containsString("澳門"))
                .body("[0].'numericCode'", containsString("446"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("MOP"))
                .body("[0].'currencies'[0].'name'", containsString("Macanese pataca"))
                .body("[0].'currencies'[0].'symbol'", containsString("P"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("zh"))
                .body("[0].'languages'[0].'iso639_2'", containsString("zho"))
                .body("[0].'languages'[0].'name'", containsString("Chinese"))
                .body("[0].'languages'[0].'nativeName'", containsString("中文 (Zhōngwén)"))
                .body("[0].'languages'[1].'iso639_1'", containsString("pt"))
                .body("[0].'languages'[1].'iso639_2'", containsString("por"))
                .body("[0].'languages'[1].'name'", containsString("Portuguese"))
                .body("[0].'languages'[1].'nativeName'", containsString("Português"))
                .body("[0].'translations'.'de'", containsString("Macao"))
                .body("[0].'translations'.'es'", containsString("Macao"))
                .body("[0].'translations'.'fr'", containsString("Macao"))
                .body("[0].'translations'.'ja'", containsString("マカオ"))
                .body("[0].'translations'.'it'", containsString("Macao"))
                .body("[0].'translations'.'br'", containsString("Macau"))
                .body("[0].'translations'.'pt'", containsString("Macau"))
                .body("[0].'translations'.'nl'", containsString("Macao"))
                .body("[0].'translations'.'hr'", containsString("Makao"))
                .body("[0].'translations'.'fa'", containsString("مکائو"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/mac.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString(""));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_384_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/253")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Djibouti"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".dj"))
                .body("[0].'alpha2Code'", containsString("DJ"))
                .body("[0].'alpha3Code'", containsString("DJI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("253"))
                .body("[0].'capital'", containsString("Djibouti"))
                .body("[0].'altSpellings'.size()", equalTo(7))
                .body("[0].'altSpellings'", hasItems("DJ", "Jabuuti", "Gabuuti", "Republic of Djibouti", "République de Djibouti", "Gabuutih Ummuuno", "Jamhuuriyadda Jabuuti"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(888000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(11.5))
                .body("[0].'latlng'[1]", numberMatches(43.0))
                .body("[0].'demonym'", containsString("Djibouti"))
                .body("[0].'area'", numberMatches(23200.0))
                .body("[0].'gini'", numberMatches(40.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("ERI", "ETH", "SOM"))
                .body("[0].'nativeName'", containsString("Djibouti"))
                .body("[0].'numericCode'", containsString("262"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("DJF"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fr", "ar"))
                .body("[0].'translations'.'de'", containsString("Dschibuti"))
                .body("[0].'translations'.'es'", containsString("Yibuti"))
                .body("[0].'translations'.'fr'", containsString("Djibouti"))
                .body("[0].'translations'.'ja'", containsString("ジブチ"))
                .body("[0].'translations'.'it'", containsString("Gibuti"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_385_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/hagatna")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Guam"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gu"))
                .body("[0].'alpha2Code'", containsString("GU"))
                .body("[0].'alpha3Code'", containsString("GUM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Hagåtña"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("GU", "Guåhån"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Micronesia"))
                .body("[0].'population'", numberMatches(159358.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(13.46666666))
                .body("[0].'latlng'[1]", numberMatches(144.78333333))
                .body("[0].'demonym'", containsString("Guamanian"))
                .body("[0].'area'", numberMatches(549.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+10:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Guam"))
                .body("[0].'numericCode'", containsString("316"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("en", "ch", "es"))
                .body("[0].'translations'.'de'", containsString("Guam"))
                .body("[0].'translations'.'es'", containsString("Guam"))
                .body("[0].'translations'.'fr'", containsString("Guam"))
                .body("[0].'translations'.'ja'", containsString("グアム"))
                .body("[0].'translations'.'it'", containsString("Guam"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_386_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/hamilton")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Bermuda"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bm"))
                .body("[0].'alpha2Code'", containsString("BM"))
                .body("[0].'alpha3Code'", containsString("BMU"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Hamilton"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("BM", "The Islands of Bermuda", "The Bermudas", "Somers Isles"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Northern America"))
                .body("[0].'population'", numberMatches(64237.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(32.33333333))
                .body("[0].'latlng'[1]", numberMatches(-64.75))
                .body("[0].'demonym'", containsString("Bermudian"))
                .body("[0].'area'", numberMatches(54.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Bermuda"))
                .body("[0].'numericCode'", containsString("060"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BMD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Bermuda"))
                .body("[0].'translations'.'es'", containsString("Bermudas"))
                .body("[0].'translations'.'fr'", containsString("Bermudes"))
                .body("[0].'translations'.'ja'", containsString("バミューダ"))
                .body("[0].'translations'.'it'", containsString("Bermuda"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_387_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/hanoi")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Vietnam"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".vn"))
                .body("[0].'alpha2Code'", containsString("VN"))
                .body("[0].'alpha3Code'", containsString("VNM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("84"))
                .body("[0].'capital'", containsString("Hanoi"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("VN", "Socialist Republic of Vietnam", "Cộng hòa Xã hội chủ nghĩa Việt Nam"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("South-Eastern Asia"))
                .body("[0].'population'", numberMatches(9.1812E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(16.16666666))
                .body("[0].'latlng'[1]", numberMatches(107.83333333))
                .body("[0].'demonym'", containsString("Vietnamese"))
                .body("[0].'area'", numberMatches(331212.0))
                .body("[0].'gini'", numberMatches(35.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+07:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("KHM", "CHN", "LAO"))
                .body("[0].'nativeName'", containsString("Việt Nam"))
                .body("[0].'numericCode'", containsString("704"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("VND"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("vi"))
                .body("[0].'translations'.'de'", containsString("Vietnam"))
                .body("[0].'translations'.'es'", containsString("Vietnam"))
                .body("[0].'translations'.'fr'", containsString("Viêt Nam"))
                .body("[0].'translations'.'ja'", containsString("ベトナム"))
                .body("[0].'translations'.'it'", containsString("Vietnam"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_388_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/cayman%20islands?" + 
                    "fields=_EM_8026_XYZ_&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_389_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/254")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Kenya"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ke"))
                .body("[0].'alpha2Code'", containsString("KE"))
                .body("[0].'alpha3Code'", containsString("KEN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("254"))
                .body("[0].'capital'", containsString("Nairobi"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("KE", "Republic of Kenya", "Jamhuri ya Kenya"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(4.605E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(1.0))
                .body("[0].'latlng'[1]", numberMatches(38.0))
                .body("[0].'demonym'", containsString("Kenyan"))
                .body("[0].'area'", numberMatches(580367.0))
                .body("[0].'gini'", numberMatches(47.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("ETH", "SOM", "SSD", "TZA", "UGA"))
                .body("[0].'nativeName'", containsString("Kenya"))
                .body("[0].'numericCode'", containsString("404"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("KES"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "sw"))
                .body("[0].'translations'.'de'", containsString("Kenia"))
                .body("[0].'translations'.'es'", containsString("Kenia"))
                .body("[0].'translations'.'fr'", containsString("Kenya"))
                .body("[0].'translations'.'ja'", containsString("ケニア"))
                .body("[0].'translations'.'it'", containsString("Kenya"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_390_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/255")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Tanzania"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".tz"))
                .body("[0].'alpha2Code'", containsString("TZ"))
                .body("[0].'alpha3Code'", containsString("TZA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("255"))
                .body("[0].'capital'", containsString("Dodoma"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("TZ", "United Republic of Tanzania", "Jamhuri ya Muungano wa Tanzania"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(5.347E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-6.0))
                .body("[0].'latlng'[1]", numberMatches(35.0))
                .body("[0].'demonym'", containsString("Tanzanian"))
                .body("[0].'area'", numberMatches(945087.0))
                .body("[0].'gini'", numberMatches(37.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(8))
                .body("[0].'borders'", hasItems("BDI", "COD", "KEN", "MWI", "MOZ", "RWA", "UGA", "ZMB"))
                .body("[0].'nativeName'", containsString("Tanzania"))
                .body("[0].'numericCode'", containsString("834"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("TZS"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("sw", "en"))
                .body("[0].'translations'.'de'", containsString("Tansania"))
                .body("[0].'translations'.'es'", containsString("Tanzania"))
                .body("[0].'translations'.'fr'", containsString("Tanzanie"))
                .body("[0].'translations'.'ja'", containsString("タンザニア"))
                .body("[0].'translations'.'it'", containsString("Tanzania"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_391_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/256")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Uganda"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ug"))
                .body("[0].'alpha2Code'", containsString("UG"))
                .body("[0].'alpha3Code'", containsString("UGA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("256"))
                .body("[0].'capital'", containsString("Kampala"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("UG", "Republic of Uganda", "Jamhuri ya Uganda"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(3.4856813E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(1.0))
                .body("[0].'latlng'[1]", numberMatches(32.0))
                .body("[0].'demonym'", containsString("Ugandan"))
                .body("[0].'area'", numberMatches(241550.0))
                .body("[0].'gini'", numberMatches(44.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("COD", "KEN", "RWA", "SSD", "TZA"))
                .body("[0].'nativeName'", containsString("Uganda"))
                .body("[0].'numericCode'", containsString("800"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("UGX"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "sw"))
                .body("[0].'translations'.'de'", containsString("Uganda"))
                .body("[0].'translations'.'es'", containsString("Uganda"))
                .body("[0].'translations'.'fr'", containsString("Uganda"))
                .body("[0].'translations'.'ja'", containsString("ウガンダ"))
                .body("[0].'translations'.'it'", containsString("Uganda"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_392_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/copenhagen")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Denmark"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".dk"))
                .body("[0].'alpha2Code'", containsString("DK"))
                .body("[0].'alpha3Code'", containsString("DNK"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("45"))
                .body("[0].'capital'", containsString("Copenhagen"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("DK", "Danmark", "Kingdom of Denmark", "Kongeriget Danmark"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(5678348.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(56.0))
                .body("[0].'latlng'[1]", numberMatches(10.0))
                .body("[0].'demonym'", containsString("Danish"))
                .body("[0].'area'", numberMatches(43094.0))
                .body("[0].'gini'", numberMatches(24.0))
                .body("[0].'timezones'.size()", equalTo(5))
                .body("[0].'timezones'", hasItems("UTC-04:00", "UTC-03:00", "UTC-01:00", "UTC", "UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("DEU"))
                .body("[0].'nativeName'", containsString("Danmark"))
                .body("[0].'numericCode'", containsString("208"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("DKK"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("da"))
                .body("[0].'translations'.'de'", containsString("Dänemark"))
                .body("[0].'translations'.'es'", containsString("Dinamarca"))
                .body("[0].'translations'.'fr'", containsString("Danemark"))
                .body("[0].'translations'.'ja'", containsString("デンマーク"))
                .body("[0].'translations'.'it'", containsString("Danimarca"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_393_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/burmese?fields=tDSk")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_394_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/plymouth?fields=altSpellings")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("MS"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_395_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/ʾertra?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Eritrea"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".er"))
                .body("[0].'alpha2Code'", containsString("ER"))
                .body("[0].'alpha3Code'", containsString("ERI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("291"))
                .body("[0].'capital'", containsString("Asmara"))
                .body("[0].'altSpellings'.size()", equalTo(7))
                .body("[0].'altSpellings'", hasItems("ER", "State of Eritrea", "ሃገረ ኤርትራ", "Dawlat Iritriyá", "ʾErtrā", "Iritriyā", ""))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(5228000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(15.0))
                .body("[0].'latlng'[1]", numberMatches(39.0))
                .body("[0].'demonym'", containsString("Eritrean"))
                .body("[0].'area'", numberMatches(117600.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("DJI", "ETH", "SDN"))
                .body("[0].'nativeName'", containsString("ኤርትራ"))
                .body("[0].'numericCode'", containsString("232"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ERN"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("ti", "ar", "en"))
                .body("[0].'translations'.'de'", containsString("Eritrea"))
                .body("[0].'translations'.'es'", containsString("Eritrea"))
                .body("[0].'translations'.'fr'", containsString("Érythrée"))
                .body("[0].'translations'.'ja'", containsString("エリトリア"))
                .body("[0].'translations'.'it'", containsString("Eritrea"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_396_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/232?fields=mnU")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_397_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/lang/thA?fields=_EM_8228_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_398_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/pitcairn%20islander?fields=callingCodes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("64"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_399_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/43?fields=_EM_4148_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_400_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/amerika%20samoa?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("American Samoa"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".as"))
                .body("[0].'alpha2Code'", containsString("AS"))
                .body("[0].'alpha3Code'", containsString("ASM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Pago Pago"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("AS", "Amerika Sāmoa", "Amelika Sāmoa", "Sāmoa Amelika"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Polynesia"))
                .body("[0].'population'", numberMatches(55519.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-14.33333333))
                .body("[0].'latlng'[1]", numberMatches(-170.0))
                .body("[0].'demonym'", containsString("American Samoan"))
                .body("[0].'area'", numberMatches(199.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-11:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("American Samoa"))
                .body("[0].'numericCode'", containsString("016"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "sm"))
                .body("[0].'translations'.'de'", containsString("Amerikanisch-Samoa"))
                .body("[0].'translations'.'es'", containsString("Samoa Americana"))
                .body("[0].'translations'.'fr'", containsString("Samoa américaines"))
                .body("[0].'translations'.'ja'", containsString("アメリカ領サモア"))
                .body("[0].'translations'.'it'", containsString("Samoa Americane"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_401_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/970")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Palestine"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ps"))
                .body("[0].'alpha2Code'", containsString("PS"))
                .body("[0].'alpha3Code'", containsString("PSE"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("970"))
                .body("[0].'capital'", containsString("Ramallah"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("PS", "State of Palestine", "Dawlat Filasṭin"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(4682467.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(31.9))
                .body("[0].'latlng'[1]", numberMatches(35.2))
                .body("[0].'demonym'", containsString("Palestinian"))
                .body("[0].'area'", nullValue())
                .body("[0].'gini'", numberMatches(35.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("ISR", "EGY", "JOR"))
                .body("[0].'nativeName'", containsString("فلسطين"))
                .body("[0].'numericCode'", containsString("275"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ILS"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Palästina"))
                .body("[0].'translations'.'es'", containsString("Palestina"))
                .body("[0].'translations'.'fr'", containsString("Palestine"))
                .body("[0].'translations'.'ja'", containsString("パレスチナ"))
                .body("[0].'translations'.'it'", containsString("Palestina"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_402_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/971")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("United Arab Emirates"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ae"))
                .body("[0].'alpha2Code'", containsString("AE"))
                .body("[0].'alpha3Code'", containsString("ARE"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("971"))
                .body("[0].'capital'", containsString("Abu Dhabi"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("AE", "UAE"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(9157000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(24.0))
                .body("[0].'latlng'[1]", numberMatches(54.0))
                .body("[0].'demonym'", containsString("Emirati"))
                .body("[0].'area'", numberMatches(83600.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("OMN", "SAU"))
                .body("[0].'nativeName'", containsString("دولة الإمارات العربية المتحدة"))
                .body("[0].'numericCode'", containsString("784"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AED"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Vereinigte Arabische Emirate"))
                .body("[0].'translations'.'es'", containsString("Emiratos Árabes Unidos"))
                .body("[0].'translations'.'fr'", containsString("Émirats arabes unis"))
                .body("[0].'translations'.'ja'", containsString("アラブ首長国連邦"))
                .body("[0].'translations'.'it'", containsString("Emirati Arabi Uniti"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_403_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/972")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Israel"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".il"))
                .body("[0].'alpha2Code'", containsString("IL"))
                .body("[0].'alpha3Code'", containsString("ISR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("972"))
                .body("[0].'capital'", containsString("Jerusalem"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("IL", "State of Israel", "Medīnat Yisrā'el"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(8371600.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(31.5))
                .body("[0].'latlng'[1]", numberMatches(34.75))
                .body("[0].'demonym'", containsString("Israeli"))
                .body("[0].'area'", numberMatches(20770.0))
                .body("[0].'gini'", numberMatches(39.2))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("EGY", "JOR", "LBN", "SYR"))
                .body("[0].'nativeName'", containsString("יִשְׂרָאֵל"))
                .body("[0].'numericCode'", containsString("376"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ILS"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("he", "ar"))
                .body("[0].'translations'.'de'", containsString("Israel"))
                .body("[0].'translations'.'es'", containsString("Israel"))
                .body("[0].'translations'.'fr'", containsString("Israël"))
                .body("[0].'translations'.'ja'", containsString("イスラエル"))
                .body("[0].'translations'.'it'", containsString("Israele"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_404_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/palikir")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Federated States of Micronesia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".fm"))
                .body("[0].'alpha2Code'", containsString("FM"))
                .body("[0].'alpha3Code'", containsString("FSM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("691"))
                .body("[0].'capital'", containsString("Palikir"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("FM", "Federated States of Micronesia"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Micronesia"))
                .body("[0].'population'", numberMatches(101351.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(6.91666666))
                .body("[0].'latlng'[1]", numberMatches(158.25))
                .body("[0].'demonym'", containsString("Micronesian"))
                .body("[0].'area'", numberMatches(702.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC+10:00", "UTC+11"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Micronesia"))
                .body("[0].'numericCode'", containsString("583"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Mikronesien"))
                .body("[0].'translations'.'es'", containsString("Micronesia"))
                .body("[0].'translations'.'fr'", containsString("Micronésie"))
                .body("[0].'translations'.'ja'", containsString("ミクロネシア連邦"))
                .body("[0].'translations'.'it'", containsString("Micronesia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_405_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/fo?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Faroe Islands"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".fo"))
                .body("[0].'alpha2Code'", containsString("FO"))
                .body("[0].'alpha3Code'", containsString("FRO"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("298"))
                .body("[0].'capital'", containsString("Tórshavn"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("FO", "Føroyar", "Færøerne"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(48846.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(62.0))
                .body("[0].'latlng'[1]", numberMatches(-7.0))
                .body("[0].'demonym'", containsString("Faroese"))
                .body("[0].'area'", numberMatches(1393.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+00:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Føroyar"))
                .body("[0].'numericCode'", containsString("234"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("DKK"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fo"))
                .body("[0].'translations'.'de'", containsString("Färöer-Inseln"))
                .body("[0].'translations'.'es'", containsString("Islas Faroe"))
                .body("[0].'translations'.'fr'", containsString("Îles Féroé"))
                .body("[0].'translations'.'ja'", containsString("フェロー諸島"))
                .body("[0].'translations'.'it'", containsString("Isole Far Oer"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_406_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/andorra?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Andorra"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ad"))
                .body("[0].'alpha2Code'", containsString("AD"))
                .body("[0].'alpha3Code'", containsString("AND"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("376"))
                .body("[0].'capital'", containsString("Andorra la Vella"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("AD", "Principality of Andorra", "Principat d'Andorra"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(76949.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(42.5))
                .body("[0].'latlng'[1]", numberMatches(1.5))
                .body("[0].'demonym'", containsString("Andorran"))
                .body("[0].'area'", numberMatches(468.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("FRA", "ESP"))
                .body("[0].'nativeName'", containsString("Andorra"))
                .body("[0].'numericCode'", containsString("020"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ca"))
                .body("[0].'translations'.'de'", containsString("Andorra"))
                .body("[0].'translations'.'es'", containsString("Andorra"))
                .body("[0].'translations'.'fr'", containsString("Andorre"))
                .body("[0].'translations'.'ja'", containsString("アンドラ"))
                .body("[0].'translations'.'it'", containsString("Andorra"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_407_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/angola?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Angola"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ao"))
                .body("[0].'alpha2Code'", containsString("AO"))
                .body("[0].'alpha3Code'", containsString("AGO"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("244"))
                .body("[0].'capital'", containsString("Luanda"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("AO", "República de Angola", "ʁɛpublika de an'ɡɔla"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Middle Africa"))
                .body("[0].'population'", numberMatches(2.4383301E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-12.5))
                .body("[0].'latlng'[1]", numberMatches(18.5))
                .body("[0].'demonym'", containsString("Angolan"))
                .body("[0].'area'", numberMatches(1246700.0))
                .body("[0].'gini'", numberMatches(58.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("COG", "COD", "ZMB", "NAM"))
                .body("[0].'nativeName'", containsString("Angola"))
                .body("[0].'numericCode'", containsString("024"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AOA"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("pt"))
                .body("[0].'translations'.'de'", containsString("Angola"))
                .body("[0].'translations'.'es'", containsString("Angola"))
                .body("[0].'translations'.'fr'", containsString("Angola"))
                .body("[0].'translations'.'ja'", containsString("アンゴラ"))
                .body("[0].'translations'.'it'", containsString("Angola"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_408_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/676")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Tonga"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".to"))
                .body("[0].'alpha2Code'", containsString("TO"))
                .body("[0].'alpha3Code'", containsString("TON"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("676"))
                .body("[0].'capital'", containsString("Nuku'alofa"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("TO"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Polynesia"))
                .body("[0].'population'", numberMatches(103252.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-20.0))
                .body("[0].'latlng'[1]", numberMatches(-175.0))
                .body("[0].'demonym'", containsString("Tongan"))
                .body("[0].'area'", numberMatches(747.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+13:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Tonga"))
                .body("[0].'numericCode'", containsString("776"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("TOP"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "to"))
                .body("[0].'translations'.'de'", containsString("Tonga"))
                .body("[0].'translations'.'es'", containsString("Tonga"))
                .body("[0].'translations'.'fr'", containsString("Tonga"))
                .body("[0].'translations'.'ja'", containsString("トンガ"))
                .body("[0].'translations'.'it'", containsString("Tonga"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_409_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/san%20salvador")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("El Salvador"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sv"))
                .body("[0].'alpha2Code'", containsString("SV"))
                .body("[0].'alpha3Code'", containsString("SLV"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("503"))
                .body("[0].'capital'", containsString("San Salvador"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("SV", "Republic of El Salvador", "República de El Salvador"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Central America"))
                .body("[0].'population'", numberMatches(6520675.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(13.83333333))
                .body("[0].'latlng'[1]", numberMatches(-88.91666666))
                .body("[0].'demonym'", containsString("Salvadoran"))
                .body("[0].'area'", numberMatches(21041.0))
                .body("[0].'gini'", numberMatches(48.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-06:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("GTM", "HND"))
                .body("[0].'nativeName'", containsString("El Salvador"))
                .body("[0].'numericCode'", containsString("222"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("USD"))
                .body("[0].'currencies'[0].'name'", containsString("United States dollar"))
                .body("[0].'currencies'[0].'symbol'", containsString("$"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("es"))
                .body("[0].'languages'[0].'iso639_2'", containsString("spa"))
                .body("[0].'languages'[0].'name'", containsString("Spanish"))
                .body("[0].'languages'[0].'nativeName'", containsString("Español"))
                .body("[0].'translations'.'de'", containsString("El Salvador"))
                .body("[0].'translations'.'es'", containsString("El Salvador"))
                .body("[0].'translations'.'fr'", containsString("Salvador"))
                .body("[0].'translations'.'ja'", containsString("エルサルバドル"))
                .body("[0].'translations'.'it'", containsString("El Salvador"))
                .body("[0].'translations'.'br'", containsString("El Salvador"))
                .body("[0].'translations'.'pt'", containsString("El Salvador"))
                .body("[0].'translations'.'nl'", containsString("El Salvador"))
                .body("[0].'translations'.'hr'", containsString("Salvador"))
                .body("[0].'translations'.'fa'", containsString("السالوادور"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/slv.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("CAIS"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Central American Integration System"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'", hasItems("SICA"))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("Sistema de la Integración Centroamericana,"))
                .body("[0].'cioc'", containsString("ESA"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_410_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/gr?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(10))
                .body("[0].'name'", containsString("Greece"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gr"))
                .body("[0].'alpha2Code'", containsString("GR"))
                .body("[0].'alpha3Code'", containsString("GRC"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("30"))
                .body("[0].'capital'", containsString("Athens"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("GR", "Elláda", "Hellenic Republic", "Ελληνική Δημοκρατία"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(1.0846979E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(39.0))
                .body("[0].'latlng'[1]", numberMatches(22.0))
                .body("[0].'demonym'", containsString("Greek"))
                .body("[0].'area'", numberMatches(131990.0))
                .body("[0].'gini'", numberMatches(34.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("ALB", "BGR", "TUR", "MKD"))
                .body("[0].'nativeName'", containsString("Ελλάδα"))
                .body("[0].'numericCode'", containsString("300"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("el"))
                .body("[0].'translations'.'de'", containsString("Griechenland"))
                .body("[0].'translations'.'es'", containsString("Grecia"))
                .body("[0].'translations'.'fr'", containsString("Grèce"))
                .body("[0].'translations'.'ja'", containsString("ギリシャ"))
                .body("[0].'translations'.'it'", containsString("Grecia"))
                .body("[0].'relevance'", containsString("1.5"))
                .body("[1].'name'", containsString("Greenland"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".gl"))
                .body("[1].'alpha2Code'", containsString("GL"))
                .body("[1].'alpha3Code'", containsString("GRL"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("299"))
                .body("[1].'capital'", containsString("Nuuk"))
                .body("[1].'altSpellings'.size()", equalTo(2))
                .body("[1].'altSpellings'", hasItems("GL", "Grønland"))
                .body("[1].'region'", containsString("Americas"))
                .body("[1].'subregion'", containsString("Northern America"))
                .body("[1].'population'", numberMatches(56114.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(72.0))
                .body("[1].'latlng'[1]", numberMatches(-40.0))
                .body("[1].'demonym'", containsString("Greenlandic"))
                .body("[1].'area'", numberMatches(2166086.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(4))
                .body("[1].'timezones'", hasItems("UTC-04:00", "UTC-03:00", "UTC-01:00", "UTC+00:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Kalaallit Nunaat"))
                .body("[1].'numericCode'", containsString("304"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("DKK"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("kl"))
                .body("[1].'translations'.'de'", containsString("Grönland"))
                .body("[1].'translations'.'es'", containsString("Groenlandia"))
                .body("[1].'translations'.'fr'", containsString("Groenland"))
                .body("[1].'translations'.'ja'", containsString("グリーンランド"))
                .body("[1].'translations'.'it'", containsString("Groenlandia"))
                .body("[1].'relevance'", containsString("0.5"))
                .body("[2].'name'", containsString("Grenada"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".gd"))
                .body("[2].'alpha2Code'", containsString("GD"))
                .body("[2].'alpha3Code'", containsString("GRD"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("1"))
                .body("[2].'capital'", containsString("St. George's"))
                .body("[2].'altSpellings'.size()", equalTo(1))
                .body("[2].'altSpellings'", hasItems("GD"))
                .body("[2].'region'", containsString("Americas"))
                .body("[2].'subregion'", containsString("Caribbean"))
                .body("[2].'population'", numberMatches(103328.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(12.11666666))
                .body("[2].'latlng'[1]", numberMatches(-61.66666666))
                .body("[2].'demonym'", containsString("Grenadian"))
                .body("[2].'area'", numberMatches(344.0))
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC-04:00"))
                .body("[2].'borders'.size()", equalTo(0))
                .body("[2].'nativeName'", containsString("Grenada"))
                .body("[2].'numericCode'", containsString("308"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("XCD"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("en"))
                .body("[2].'translations'.'de'", containsString("Grenada"))
                .body("[2].'translations'.'es'", containsString("Grenada"))
                .body("[2].'translations'.'fr'", containsString("Grenade"))
                .body("[2].'translations'.'ja'", containsString("グレナダ"))
                .body("[2].'translations'.'it'", containsString("Grenada"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_411_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/grand%20duchy%20of%20luxembourg?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Luxembourg"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".lu"))
                .body("[0].'alpha2Code'", containsString("LU"))
                .body("[0].'alpha3Code'", containsString("LUX"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("352"))
                .body("[0].'capital'", containsString("Luxembourg"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("LU", "Grand Duchy of Luxembourg", "Grand-Duché de Luxembourg", "Großherzogtum Luxemburg", "Groussherzogtum Lëtzebuerg"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(562958.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(49.75))
                .body("[0].'latlng'[1]", numberMatches(6.16666666))
                .body("[0].'demonym'", containsString("Luxembourger"))
                .body("[0].'area'", numberMatches(2586.0))
                .body("[0].'gini'", numberMatches(30.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("BEL", "FRA", "DEU"))
                .body("[0].'nativeName'", containsString("Luxembourg"))
                .body("[0].'numericCode'", containsString("442"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("fr", "de", "lb"))
                .body("[0].'translations'.'de'", containsString("Luxemburg"))
                .body("[0].'translations'.'es'", containsString("Luxemburgo"))
                .body("[0].'translations'.'fr'", containsString("Luxembourg"))
                .body("[0].'translations'.'ja'", containsString("ルクセンブルク"))
                .body("[0].'translations'.'it'", containsString("Lussemburgo"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_412_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/Syria?" + 
                    "fields=_EM_3794_XYZ_&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_413_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/papeete?fields=_EM_16661_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_414_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/bosnian,%20herzegovinian")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Bosnia and Herzegovina"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ba"))
                .body("[0].'alpha2Code'", containsString("BA"))
                .body("[0].'alpha3Code'", containsString("BIH"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("387"))
                .body("[0].'capital'", containsString("Sarajevo"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("BA", "Bosnia-Herzegovina", "Босна и Херцеговина"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(3531159.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(44.0))
                .body("[0].'latlng'[1]", numberMatches(18.0))
                .body("[0].'demonym'", containsString("Bosnian, Herzegovinian"))
                .body("[0].'area'", numberMatches(51209.0))
                .body("[0].'gini'", numberMatches(36.2))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("HRV", "MNE", "SRB"))
                .body("[0].'nativeName'", containsString("Bosna i Hercegovina"))
                .body("[0].'numericCode'", containsString("070"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("BAM"))
                .body("[0].'currencies'[0].'name'", containsString("Bosnia and Herzegovina convertible mark"))
                .body("[0].'currencies'[0].'symbol'", nullValue())
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'[0].'iso639_1'", containsString("bs"))
                .body("[0].'languages'[0].'iso639_2'", containsString("bos"))
                .body("[0].'languages'[0].'name'", containsString("Bosnian"))
                .body("[0].'languages'[0].'nativeName'", containsString("bosanski jezik"))
                .body("[0].'languages'[1].'iso639_1'", containsString("hr"))
                .body("[0].'languages'[1].'iso639_2'", containsString("hrv"))
                .body("[0].'languages'[1].'name'", containsString("Croatian"))
                .body("[0].'languages'[1].'nativeName'", containsString("hrvatski jezik"))
                .body("[0].'languages'[2].'iso639_1'", containsString("sr"))
                .body("[0].'languages'[2].'iso639_2'", containsString("srp"))
                .body("[0].'languages'[2].'name'", containsString("Serbian"))
                .body("[0].'languages'[2].'nativeName'", containsString("српски језик"))
                .body("[0].'translations'.'de'", containsString("Bosnien und Herzegowina"))
                .body("[0].'translations'.'es'", containsString("Bosnia y Herzegovina"))
                .body("[0].'translations'.'fr'", containsString("Bosnie-Herzégovine"))
                .body("[0].'translations'.'ja'", containsString("ボスニア・ヘルツェゴビナ"))
                .body("[0].'translations'.'it'", containsString("Bosnia ed Erzegovina"))
                .body("[0].'translations'.'br'", containsString("Bósnia e Herzegovina"))
                .body("[0].'translations'.'pt'", containsString("Bósnia e Herzegovina"))
                .body("[0].'translations'.'nl'", containsString("Bosnië en Herzegovina"))
                .body("[0].'translations'.'hr'", containsString("Bosna i Hercegovina"))
                .body("[0].'translations'.'fa'", containsString("بوسنی و هرزگوین"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/bih.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("CEFTA"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Central European Free Trade Agreement"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("BIH"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_415_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/EFTA?fields=_EM_8604_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_416_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/algiers?fields=_EM_5722_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_417_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/gambian?fields=callingCodes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("220"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_418_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/nepalese?fields=PK9")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_419_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/385")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Croatia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".hr"))
                .body("[0].'alpha2Code'", containsString("HR"))
                .body("[0].'alpha3Code'", containsString("HRV"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("385"))
                .body("[0].'capital'", containsString("Zagreb"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("HR", "Hrvatska", "Republic of Croatia", "Republika Hrvatska"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(4246800.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(45.16666666))
                .body("[0].'latlng'[1]", numberMatches(15.5))
                .body("[0].'demonym'", containsString("Croatian"))
                .body("[0].'area'", numberMatches(56594.0))
                .body("[0].'gini'", numberMatches(33.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("BIH", "HUN", "MNE", "SRB", "SVN"))
                .body("[0].'nativeName'", containsString("Hrvatska"))
                .body("[0].'numericCode'", containsString("191"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("HRK"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("hr"))
                .body("[0].'translations'.'de'", containsString("Kroatien"))
                .body("[0].'translations'.'es'", containsString("Croacia"))
                .body("[0].'translations'.'fr'", containsString("Croatie"))
                .body("[0].'translations'.'ja'", containsString("クロアチア"))
                .body("[0].'translations'.'it'", containsString("Croazia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_420_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/386")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Slovenia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".si"))
                .body("[0].'alpha2Code'", containsString("SI"))
                .body("[0].'alpha3Code'", containsString("SVN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("386"))
                .body("[0].'capital'", containsString("Ljubljana"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("SI", "Republic of Slovenia", "Republika Slovenija"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(2067683.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(46.11666666))
                .body("[0].'latlng'[1]", numberMatches(14.81666666))
                .body("[0].'demonym'", containsString("Slovene"))
                .body("[0].'area'", numberMatches(20273.0))
                .body("[0].'gini'", numberMatches(31.2))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("AUT", "HRV", "ITA", "HUN"))
                .body("[0].'nativeName'", containsString("Slovenija"))
                .body("[0].'numericCode'", containsString("705"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("sl"))
                .body("[0].'translations'.'de'", containsString("Slowenien"))
                .body("[0].'translations'.'es'", containsString("Eslovenia"))
                .body("[0].'translations'.'fr'", containsString("Slovénie"))
                .body("[0].'translations'.'ja'", containsString("スロベニア"))
                .body("[0].'translations'.'it'", containsString("Slovenia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_421_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/378")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("San Marino"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sm"))
                .body("[0].'alpha2Code'", containsString("SM"))
                .body("[0].'alpha3Code'", containsString("SMR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("378"))
                .body("[0].'capital'", containsString("City of San Marino"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("SM", "Republic of San Marino", "Repubblica di San Marino"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(33005.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(43.76666666))
                .body("[0].'latlng'[1]", numberMatches(12.41666666))
                .body("[0].'demonym'", containsString("Sammarinese"))
                .body("[0].'area'", numberMatches(61.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("ITA"))
                .body("[0].'nativeName'", containsString("San Marino"))
                .body("[0].'numericCode'", containsString("674"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("EUR"))
                .body("[0].'currencies'[0].'name'", containsString("Euro"))
                .body("[0].'currencies'[0].'symbol'", containsString("€"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("it"))
                .body("[0].'languages'[0].'iso639_2'", containsString("ita"))
                .body("[0].'languages'[0].'name'", containsString("Italian"))
                .body("[0].'languages'[0].'nativeName'", containsString("Italiano"))
                .body("[0].'translations'.'de'", containsString("San Marino"))
                .body("[0].'translations'.'es'", containsString("San Marino"))
                .body("[0].'translations'.'fr'", containsString("Saint-Marin"))
                .body("[0].'translations'.'ja'", containsString("サンマリノ"))
                .body("[0].'translations'.'it'", containsString("San Marino"))
                .body("[0].'translations'.'br'", containsString("San Marino"))
                .body("[0].'translations'.'pt'", containsString("São Marinho"))
                .body("[0].'translations'.'nl'", containsString("San Marino"))
                .body("[0].'translations'.'hr'", containsString("San Marino"))
                .body("[0].'translations'.'fa'", containsString("سان مارینو"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/smr.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("SMR"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_422_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/guyanese?fields=5HI3Qh748JrH")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_423_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/grand-duche%20de%20luxembourg?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Luxembourg"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".lu"))
                .body("[0].'alpha2Code'", containsString("LU"))
                .body("[0].'alpha3Code'", containsString("LUX"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("352"))
                .body("[0].'capital'", containsString("Luxembourg"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("LU", "Grand Duchy of Luxembourg", "Grand-Duché de Luxembourg", "Großherzogtum Luxemburg", "Groussherzogtum Lëtzebuerg"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(562958.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(49.75))
                .body("[0].'latlng'[1]", numberMatches(6.16666666))
                .body("[0].'demonym'", containsString("Luxembourger"))
                .body("[0].'area'", numberMatches(2586.0))
                .body("[0].'gini'", numberMatches(30.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("BEL", "FRA", "DEU"))
                .body("[0].'nativeName'", containsString("Luxembourg"))
                .body("[0].'numericCode'", containsString("442"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("fr", "de", "lb"))
                .body("[0].'translations'.'de'", containsString("Luxemburg"))
                .body("[0].'translations'.'es'", containsString("Luxemburgo"))
                .body("[0].'translations'.'fr'", containsString("Luxembourg"))
                .body("[0].'translations'.'ja'", containsString("ルクセンブルク"))
                .body("[0].'translations'.'it'", containsString("Lussemburgo"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_424_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/great%20britain?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("United Kingdom"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".uk"))
                .body("[0].'alpha2Code'", containsString("GB"))
                .body("[0].'alpha3Code'", containsString("GBR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("44"))
                .body("[0].'capital'", containsString("London"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("GB", "UK", "Great Britain"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(6.48E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(54.0))
                .body("[0].'latlng'[1]", numberMatches(-2.0))
                .body("[0].'demonym'", containsString("British"))
                .body("[0].'area'", numberMatches(242900.0))
                .body("[0].'gini'", numberMatches(34.0))
                .body("[0].'timezones'.size()", equalTo(9))
                .body("[0].'timezones'", hasItems("UTC-08:00", "UTC-05:00", "UTC-04:00", "UTC-03:00", "UTC-02:00", "UTC", "UTC+01:00", "UTC+02:00", "UTC+06:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("IRL"))
                .body("[0].'nativeName'", containsString("United Kingdom"))
                .body("[0].'numericCode'", containsString("826"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("GBP"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Vereinigtes Königreich"))
                .body("[0].'translations'.'es'", containsString("Reino Unido"))
                .body("[0].'translations'.'fr'", containsString("Royaume-Uni"))
                .body("[0].'translations'.'ja'", containsString("イギリス"))
                .body("[0].'translations'.'it'", containsString("Regno Unito"))
                .body("[0].'relevance'", containsString("2.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_425_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/greece?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Greece"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gr"))
                .body("[0].'alpha2Code'", containsString("GR"))
                .body("[0].'alpha3Code'", containsString("GRC"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("30"))
                .body("[0].'capital'", containsString("Athens"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("GR", "Elláda", "Hellenic Republic", "Ελληνική Δημοκρατία"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(1.0846979E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(39.0))
                .body("[0].'latlng'[1]", numberMatches(22.0))
                .body("[0].'demonym'", containsString("Greek"))
                .body("[0].'area'", numberMatches(131990.0))
                .body("[0].'gini'", numberMatches(34.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("ALB", "BGR", "TUR", "MKD"))
                .body("[0].'nativeName'", containsString("Ελλάδα"))
                .body("[0].'numericCode'", containsString("300"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("el"))
                .body("[0].'translations'.'de'", containsString("Griechenland"))
                .body("[0].'translations'.'es'", containsString("Grecia"))
                .body("[0].'translations'.'fr'", containsString("Grèce"))
                .body("[0].'translations'.'ja'", containsString("ギリシャ"))
                .body("[0].'translations'.'it'", containsString("Grecia"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_426_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/suva")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Fiji"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".fj"))
                .body("[0].'alpha2Code'", containsString("FJ"))
                .body("[0].'alpha3Code'", containsString("FJI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("679"))
                .body("[0].'capital'", containsString("Suva"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("FJ", "Viti", "Republic of Fiji", "Matanitu ko Viti", "Fijī Gaṇarājya"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Melanesia"))
                .body("[0].'population'", numberMatches(859178.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-18.0))
                .body("[0].'latlng'[1]", numberMatches(175.0))
                .body("[0].'demonym'", containsString("Fijian"))
                .body("[0].'area'", numberMatches(18272.0))
                .body("[0].'gini'", numberMatches(42.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+12:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Fiji"))
                .body("[0].'numericCode'", containsString("242"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("FJD"))
                .body("[0].'languages'.size()", equalTo(4))
                .body("[0].'languages'", hasItems("en", "fj", "hi", "ur"))
                .body("[0].'translations'.'de'", containsString("Fidschi"))
                .body("[0].'translations'.'es'", containsString("Fiyi"))
                .body("[0].'translations'.'fr'", containsString("Fidji"))
                .body("[0].'translations'.'ja'", containsString("フィジー"))
                .body("[0].'translations'.'it'", containsString("Figi"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_427_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/zimbabwean?fields=rRLavV5zdC_awH")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_428_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/bangkok?fields=QYfZM")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_429_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/greenland?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Greenland"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gl"))
                .body("[0].'alpha2Code'", containsString("GL"))
                .body("[0].'alpha3Code'", containsString("GRL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("299"))
                .body("[0].'capital'", containsString("Nuuk"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("GL", "Grønland"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Northern America"))
                .body("[0].'population'", numberMatches(56114.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(72.0))
                .body("[0].'latlng'[1]", numberMatches(-40.0))
                .body("[0].'demonym'", containsString("Greenlandic"))
                .body("[0].'area'", numberMatches(2166086.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(4))
                .body("[0].'timezones'", hasItems("UTC-04:00", "UTC-03:00", "UTC-01:00", "UTC+00:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Kalaallit Nunaat"))
                .body("[0].'numericCode'", containsString("304"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("DKK"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("kl"))
                .body("[0].'translations'.'de'", containsString("Grönland"))
                .body("[0].'translations'.'es'", containsString("Groenlandia"))
                .body("[0].'translations'.'fr'", containsString("Groenland"))
                .body("[0].'translations'.'ja'", containsString("グリーンランド"))
                .body("[0].'translations'.'it'", containsString("Groenlandia"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_430_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/grenada?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Grenada"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gd"))
                .body("[0].'alpha2Code'", containsString("GD"))
                .body("[0].'alpha3Code'", containsString("GRD"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("St. George's"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("GD"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(103328.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(12.11666666))
                .body("[0].'latlng'[1]", numberMatches(-61.66666666))
                .body("[0].'demonym'", containsString("Grenadian"))
                .body("[0].'area'", numberMatches(344.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Grenada"))
                .body("[0].'numericCode'", containsString("308"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XCD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Grenada"))
                .body("[0].'translations'.'es'", containsString("Grenada"))
                .body("[0].'translations'.'fr'", containsString("Grenade"))
                .body("[0].'translations'.'ja'", containsString("グレナダ"))
                .body("[0].'translations'.'it'", containsString("Grenada"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_431_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/pretoria")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("South Africa"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".za"))
                .body("[0].'alpha2Code'", containsString("ZA"))
                .body("[0].'alpha3Code'", containsString("ZAF"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("27"))
                .body("[0].'capital'", containsString("Pretoria"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("ZA", "RSA", "Suid-Afrika", "Republic of South Africa"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Southern Africa"))
                .body("[0].'population'", numberMatches(5.49569E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-29.0))
                .body("[0].'latlng'[1]", numberMatches(24.0))
                .body("[0].'demonym'", containsString("South African"))
                .body("[0].'area'", numberMatches(1221037.0))
                .body("[0].'gini'", numberMatches(63.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("BWA", "LSO", "MOZ", "NAM", "SWZ", "ZWE"))
                .body("[0].'nativeName'", containsString("South Africa"))
                .body("[0].'numericCode'", containsString("710"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ZAR"))
                .body("[0].'languages'.size()", equalTo(10))
                .body("[0].'languages'", hasItems("af", "en", "nr", "st", "ss", "tn", "ts", "ve", "xh", "zu"))
                .body("[0].'translations'.'de'", containsString("Republik Südafrika"))
                .body("[0].'translations'.'es'", containsString("República de Sudáfrica"))
                .body("[0].'translations'.'fr'", containsString("Afrique du Sud"))
                .body("[0].'translations'.'ja'", containsString("南アフリカ"))
                .body("[0].'translations'.'it'", containsString("Sud Africa"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_432_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/211")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("South Sudan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ss"))
                .body("[0].'alpha2Code'", containsString("SS"))
                .body("[0].'alpha3Code'", containsString("SSD"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("211"))
                .body("[0].'capital'", containsString("Juba"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("SS"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Middle Africa"))
                .body("[0].'population'", numberMatches(1.1892934E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(7.0))
                .body("[0].'latlng'[1]", numberMatches(30.0))
                .body("[0].'demonym'", containsString("South Sudanese"))
                .body("[0].'area'", numberMatches(619745.0))
                .body("[0].'gini'", numberMatches(45.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("CAF", "COD", "ETH", "KEN", "SDN", "UGA"))
                .body("[0].'nativeName'", containsString("South Sudan"))
                .body("[0].'numericCode'", containsString("728"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("SSP"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Südsudan"))
                .body("[0].'translations'.'es'", containsString("Sudán del Sur"))
                .body("[0].'translations'.'fr'", containsString("Soudan du Sud"))
                .body("[0].'translations'.'ja'", containsString("南スーダン"))
                .body("[0].'translations'.'it'", containsString("Sudan del sud"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_433_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/vietnamese?fields=_EM_7060_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_434_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/299")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Greenland"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gl"))
                .body("[0].'alpha2Code'", containsString("GL"))
                .body("[0].'alpha3Code'", containsString("GRL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("299"))
                .body("[0].'capital'", containsString("Nuuk"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("GL", "Grønland"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Northern America"))
                .body("[0].'population'", numberMatches(56114.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(72.0))
                .body("[0].'latlng'[1]", numberMatches(-40.0))
                .body("[0].'demonym'", containsString("Greenlandic"))
                .body("[0].'area'", numberMatches(2166086.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(4))
                .body("[0].'timezones'", hasItems("UTC-04:00", "UTC-03:00", "UTC-01:00", "UTC+00:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Kalaallit Nunaat"))
                .body("[0].'numericCode'", containsString("304"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("DKK"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("kl"))
                .body("[0].'translations'.'de'", containsString("Grönland"))
                .body("[0].'translations'.'es'", containsString("Groenlandia"))
                .body("[0].'translations'.'fr'", containsString("Groenland"))
                .body("[0].'translations'.'ja'", containsString("グリーンランド"))
                .body("[0].'translations'.'it'", containsString("Groenlandia"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_435_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/th?" + 
                    "fields=t2PvmaN6kRYKf5k5&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_436_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/doha")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Qatar"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".qa"))
                .body("[0].'alpha2Code'", containsString("QA"))
                .body("[0].'alpha3Code'", containsString("QAT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("974"))
                .body("[0].'capital'", containsString("Doha"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("QA", "State of Qatar", "Dawlat Qaṭar"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(2120129.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(25.5))
                .body("[0].'latlng'[1]", numberMatches(51.25))
                .body("[0].'demonym'", containsString("Qatari"))
                .body("[0].'area'", numberMatches(11586.0))
                .body("[0].'gini'", numberMatches(41.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("SAU"))
                .body("[0].'nativeName'", containsString("قطر"))
                .body("[0].'numericCode'", containsString("634"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("QAR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Katar"))
                .body("[0].'translations'.'es'", containsString("Catar"))
                .body("[0].'translations'.'fr'", containsString("Qatar"))
                .body("[0].'translations'.'ja'", containsString("カタール"))
                .body("[0].'translations'.'it'", containsString("Qatar"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_437_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/bogota")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Colombia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".co"))
                .body("[0].'alpha2Code'", containsString("CO"))
                .body("[0].'alpha3Code'", containsString("COL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("57"))
                .body("[0].'capital'", containsString("Bogotá"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("CO", "Republic of Colombia", "República de Colombia"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(4.82666E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(4.0))
                .body("[0].'latlng'[1]", numberMatches(-72.0))
                .body("[0].'demonym'", containsString("Colombian"))
                .body("[0].'area'", numberMatches(1141748.0))
                .body("[0].'gini'", numberMatches(55.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-05:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("BRA", "ECU", "PAN", "PER", "VEN"))
                .body("[0].'nativeName'", containsString("Colombia"))
                .body("[0].'numericCode'", containsString("170"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("COP"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("es"))
                .body("[0].'translations'.'de'", containsString("Kolumbien"))
                .body("[0].'translations'.'es'", containsString("Colombia"))
                .body("[0].'translations'.'fr'", containsString("Colombie"))
                .body("[0].'translations'.'ja'", containsString("コロンビア"))
                .body("[0].'translations'.'it'", containsString("Colombia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_438_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/595?fields=mr%5D")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_439_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/astana?fields=0Zt%C2%808nWv")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_440_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/30")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Greece"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gr"))
                .body("[0].'alpha2Code'", containsString("GR"))
                .body("[0].'alpha3Code'", containsString("GRC"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("30"))
                .body("[0].'capital'", containsString("Athens"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("GR", "Elláda", "Hellenic Republic", "Ελληνική Δημοκρατία"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(1.0846979E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(39.0))
                .body("[0].'latlng'[1]", numberMatches(22.0))
                .body("[0].'demonym'", containsString("Greek"))
                .body("[0].'area'", numberMatches(131990.0))
                .body("[0].'gini'", numberMatches(34.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("ALB", "BGR", "TUR", "MKD"))
                .body("[0].'nativeName'", containsString("Ελλάδα"))
                .body("[0].'numericCode'", containsString("300"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("el"))
                .body("[0].'translations'.'de'", containsString("Griechenland"))
                .body("[0].'translations'.'es'", containsString("Grecia"))
                .body("[0].'translations'.'fr'", containsString("Grèce"))
                .body("[0].'translations'.'ja'", containsString("ギリシャ"))
                .body("[0].'translations'.'it'", containsString("Grecia"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_441_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/32")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Belgium"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".be"))
                .body("[0].'alpha2Code'", containsString("BE"))
                .body("[0].'alpha3Code'", containsString("BEL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("32"))
                .body("[0].'capital'", containsString("Brussels"))
                .body("[0].'altSpellings'.size()", equalTo(9))
                .body("[0].'altSpellings'", hasItems("BE", "België", "Belgie", "Belgien", "Belgique", "Kingdom of Belgium", "Koninkrijk België", "Royaume de Belgique", "Königreich Belgien"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(1.124833E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(50.83333333))
                .body("[0].'latlng'[1]", numberMatches(4.0))
                .body("[0].'demonym'", containsString("Belgian"))
                .body("[0].'area'", numberMatches(30528.0))
                .body("[0].'gini'", numberMatches(33.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("FRA", "DEU", "LUX", "NLD"))
                .body("[0].'nativeName'", containsString("België"))
                .body("[0].'numericCode'", containsString("056"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("nl", "fr", "de"))
                .body("[0].'translations'.'de'", containsString("Belgien"))
                .body("[0].'translations'.'es'", containsString("Bélgica"))
                .body("[0].'translations'.'fr'", containsString("Belgique"))
                .body("[0].'translations'.'ja'", containsString("ベルギー"))
                .body("[0].'translations'.'it'", containsString("Belgio"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_442_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/havana")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Cuba"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cu"))
                .body("[0].'alpha2Code'", containsString("CU"))
                .body("[0].'alpha3Code'", containsString("CUB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("53"))
                .body("[0].'capital'", containsString("Havana"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("CU", "Republic of Cuba", "República de Cuba"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(1.1238317E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(21.5))
                .body("[0].'latlng'[1]", numberMatches(-80.0))
                .body("[0].'demonym'", containsString("Cuban"))
                .body("[0].'area'", numberMatches(109884.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-05:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Cuba"))
                .body("[0].'numericCode'", containsString("192"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'", hasItems("CUC", "CUP"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("es"))
                .body("[0].'translations'.'de'", containsString("Kuba"))
                .body("[0].'translations'.'es'", containsString("Cuba"))
                .body("[0].'translations'.'fr'", containsString("Cuba"))
                .body("[0].'translations'.'ja'", containsString("キューバ"))
                .body("[0].'translations'.'it'", containsString("Cuba"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_443_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/34")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Spain"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".es"))
                .body("[0].'alpha2Code'", containsString("ES"))
                .body("[0].'alpha3Code'", containsString("ESP"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("34"))
                .body("[0].'capital'", containsString("Madrid"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("ES", "Kingdom of Spain", "Reino de España"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(4.6439864E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(40.0))
                .body("[0].'latlng'[1]", numberMatches(-4.0))
                .body("[0].'demonym'", containsString("Spanish"))
                .body("[0].'area'", numberMatches(505992.0))
                .body("[0].'gini'", numberMatches(34.7))
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC", "UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("AND", "FRA", "GIB", "PRT", "MAR"))
                .body("[0].'nativeName'", containsString("España"))
                .body("[0].'numericCode'", containsString("724"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("es"))
                .body("[0].'translations'.'de'", containsString("Spanien"))
                .body("[0].'translations'.'es'", containsString("España"))
                .body("[0].'translations'.'fr'", containsString("Espagne"))
                .body("[0].'translations'.'ja'", containsString("スペイン"))
                .body("[0].'translations'.'it'", containsString("Spagna"))
                .body("[0].'relevance'", containsString("2"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_444_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/somali")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Somalia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".so"))
                .body("[0].'alpha2Code'", containsString("SO"))
                .body("[0].'alpha3Code'", containsString("SOM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("252"))
                .body("[0].'capital'", containsString("Mogadishu"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("SO", "aṣ-Ṣūmāl", "Federal Republic of Somalia", "Jamhuuriyadda Federaalka Soomaaliya", "Jumhūriyyat aṣ-Ṣūmāl al-Fiderāliyya"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(1.1079E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(10.0))
                .body("[0].'latlng'[1]", numberMatches(49.0))
                .body("[0].'demonym'", containsString("Somali"))
                .body("[0].'area'", numberMatches(637657.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("DJI", "ETH", "KEN"))
                .body("[0].'nativeName'", containsString("Soomaaliya"))
                .body("[0].'numericCode'", containsString("706"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("SOS"))
                .body("[0].'currencies'[0].'name'", containsString("Somali shilling"))
                .body("[0].'currencies'[0].'symbol'", containsString("Sh"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("so"))
                .body("[0].'languages'[0].'iso639_2'", containsString("som"))
                .body("[0].'languages'[0].'name'", containsString("Somali"))
                .body("[0].'languages'[0].'nativeName'", containsString("Soomaaliga"))
                .body("[0].'languages'[1].'iso639_1'", containsString("ar"))
                .body("[0].'languages'[1].'iso639_2'", containsString("ara"))
                .body("[0].'languages'[1].'name'", containsString("Arabic"))
                .body("[0].'languages'[1].'nativeName'", containsString("العربية"))
                .body("[0].'translations'.'de'", containsString("Somalia"))
                .body("[0].'translations'.'es'", containsString("Somalia"))
                .body("[0].'translations'.'fr'", containsString("Somalie"))
                .body("[0].'translations'.'ja'", containsString("ソマリア"))
                .body("[0].'translations'.'it'", containsString("Somalia"))
                .body("[0].'translations'.'br'", containsString("Somália"))
                .body("[0].'translations'.'pt'", containsString("Somália"))
                .body("[0].'translations'.'nl'", containsString("Somalië"))
                .body("[0].'translations'.'hr'", containsString("Somalija"))
                .body("[0].'translations'.'fa'", containsString("سومالی"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/som.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(2))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[0].'regionalBlocs'[1].'acronym'", containsString("AL"))
                .body("[0].'regionalBlocs'[1].'name'", containsString("Arab League"))
                .body("[0].'regionalBlocs'[1].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[1].'otherNames'.size()", equalTo(3))
                .body("[0].'regionalBlocs'[1].'otherNames'", hasItems("جامعة الدول العربية", "Jāmiʻat ad-Duwal al-ʻArabīyah", "League of Arab States"))
                .body("[0].'cioc'", containsString("SOM"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_445_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/minsk")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Belarus"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".by"))
                .body("[0].'alpha2Code'", containsString("BY"))
                .body("[0].'alpha3Code'", containsString("BLR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("375"))
                .body("[0].'capital'", containsString("Minsk"))
                .body("[0].'altSpellings'.size()", equalTo(7))
                .body("[0].'altSpellings'", hasItems("BY", "Bielaruś", "Republic of Belarus", "Белоруссия", "Республика Беларусь", "Belorussiya", "Respublika Belarus’"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(9485300.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(53.0))
                .body("[0].'latlng'[1]", numberMatches(28.0))
                .body("[0].'demonym'", containsString("Belarusian"))
                .body("[0].'area'", numberMatches(207600.0))
                .body("[0].'gini'", numberMatches(26.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("LVA", "LTU", "POL", "RUS", "UKR"))
                .body("[0].'nativeName'", containsString("Белару́сь"))
                .body("[0].'numericCode'", containsString("112"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BYR"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("be", "ru"))
                .body("[0].'translations'.'de'", containsString("Weißrussland"))
                .body("[0].'translations'.'es'", containsString("Bielorrusia"))
                .body("[0].'translations'.'fr'", containsString("Biélorussie"))
                .body("[0].'translations'.'ja'", containsString("ベラルーシ"))
                .body("[0].'translations'.'it'", containsString("Bielorussia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_446_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/cg?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Republic of the Congo"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cg"))
                .body("[0].'alpha2Code'", containsString("CG"))
                .body("[0].'alpha3Code'", containsString("COG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("242"))
                .body("[0].'capital'", containsString("Brazzaville"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("CG", "Congo-Brazzaville"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Middle Africa"))
                .body("[0].'population'", numberMatches(4620000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-1.0))
                .body("[0].'latlng'[1]", numberMatches(15.0))
                .body("[0].'demonym'", containsString("Congolese"))
                .body("[0].'area'", numberMatches(342000.0))
                .body("[0].'gini'", numberMatches(47.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("AGO", "CMR", "CAF", "COD", "GAB"))
                .body("[0].'nativeName'", containsString("République du Congo"))
                .body("[0].'numericCode'", containsString("178"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XAF"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fr", "ln"))
                .body("[0].'translations'.'de'", containsString("Kongo"))
                .body("[0].'translations'.'es'", containsString("Congo"))
                .body("[0].'translations'.'fr'", containsString("Congo"))
                .body("[0].'translations'.'ja'", containsString("コンゴ共和国"))
                .body("[0].'translations'.'it'", containsString("Congo"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_447_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/351")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Portugal"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".pt"))
                .body("[0].'alpha2Code'", containsString("PT"))
                .body("[0].'alpha3Code'", containsString("PRT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("351"))
                .body("[0].'capital'", containsString("Lisbon"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("PT", "Portuguesa", "Portuguese Republic", "República Portuguesa"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(1.0374822E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(39.5))
                .body("[0].'latlng'[1]", numberMatches(-8.0))
                .body("[0].'demonym'", containsString("Portuguese"))
                .body("[0].'area'", numberMatches(92090.0))
                .body("[0].'gini'", numberMatches(38.5))
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC-01:00", "UTC"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("ESP"))
                .body("[0].'nativeName'", containsString("Portugal"))
                .body("[0].'numericCode'", containsString("620"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("pt"))
                .body("[0].'translations'.'de'", containsString("Portugal"))
                .body("[0].'translations'.'es'", containsString("Portugal"))
                .body("[0].'translations'.'fr'", containsString("Portugal"))
                .body("[0].'translations'.'ja'", containsString("ポルトガル"))
                .body("[0].'translations'.'it'", containsString("Portogallo"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_448_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/352")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Luxembourg"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".lu"))
                .body("[0].'alpha2Code'", containsString("LU"))
                .body("[0].'alpha3Code'", containsString("LUX"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("352"))
                .body("[0].'capital'", containsString("Luxembourg"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("LU", "Grand Duchy of Luxembourg", "Grand-Duché de Luxembourg", "Großherzogtum Luxemburg", "Groussherzogtum Lëtzebuerg"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(562958.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(49.75))
                .body("[0].'latlng'[1]", numberMatches(6.16666666))
                .body("[0].'demonym'", containsString("Luxembourger"))
                .body("[0].'area'", numberMatches(2586.0))
                .body("[0].'gini'", numberMatches(30.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("BEL", "FRA", "DEU"))
                .body("[0].'nativeName'", containsString("Luxembourg"))
                .body("[0].'numericCode'", containsString("442"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("fr", "de", "lb"))
                .body("[0].'translations'.'de'", containsString("Luxemburg"))
                .body("[0].'translations'.'es'", containsString("Luxemburgo"))
                .body("[0].'translations'.'fr'", containsString("Luxembourg"))
                .body("[0].'translations'.'ja'", containsString("ルクセンブルク"))
                .body("[0].'translations'.'it'", containsString("Lussemburgo"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_449_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/ሃገረ%20ኤርትራ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Eritrea"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".er"))
                .body("[0].'alpha2Code'", containsString("ER"))
                .body("[0].'alpha3Code'", containsString("ERI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("291"))
                .body("[0].'capital'", containsString("Asmara"))
                .body("[0].'altSpellings'.size()", equalTo(7))
                .body("[0].'altSpellings'", hasItems("ER", "State of Eritrea", "ሃገረ ኤርትራ", "Dawlat Iritriyá", "ʾErtrā", "Iritriyā", ""))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(5352000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(15.0))
                .body("[0].'latlng'[1]", numberMatches(39.0))
                .body("[0].'demonym'", containsString("Eritrean"))
                .body("[0].'area'", numberMatches(117600.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("DJI", "ETH", "SDN"))
                .body("[0].'nativeName'", containsString("ኤርትራ"))
                .body("[0].'numericCode'", containsString("232"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("ERN"))
                .body("[0].'currencies'[0].'name'", containsString("Eritrean nakfa"))
                .body("[0].'currencies'[0].'symbol'", containsString("Nfk"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'[0].'iso639_1'", containsString("ti"))
                .body("[0].'languages'[0].'iso639_2'", containsString("tir"))
                .body("[0].'languages'[0].'name'", containsString("Tigrinya"))
                .body("[0].'languages'[0].'nativeName'", containsString("ትግርኛ"))
                .body("[0].'languages'[1].'iso639_1'", containsString("ar"))
                .body("[0].'languages'[1].'iso639_2'", containsString("ara"))
                .body("[0].'languages'[1].'name'", containsString("Arabic"))
                .body("[0].'languages'[1].'nativeName'", containsString("العربية"))
                .body("[0].'languages'[2].'iso639_1'", containsString("en"))
                .body("[0].'languages'[2].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[2].'name'", containsString("English"))
                .body("[0].'languages'[2].'nativeName'", containsString("English"))
                .body("[0].'translations'.'de'", containsString("Eritrea"))
                .body("[0].'translations'.'es'", containsString("Eritrea"))
                .body("[0].'translations'.'fr'", containsString("Érythrée"))
                .body("[0].'translations'.'ja'", containsString("エリトリア"))
                .body("[0].'translations'.'it'", containsString("Eritrea"))
                .body("[0].'translations'.'br'", containsString("Eritreia"))
                .body("[0].'translations'.'pt'", containsString("Eritreia"))
                .body("[0].'translations'.'nl'", containsString("Eritrea"))
                .body("[0].'translations'.'hr'", containsString("Eritreja"))
                .body("[0].'translations'.'fa'", containsString("اریتره"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/eri.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[0].'cioc'", containsString("ERI"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_450_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/nauru?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Nauru"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".nr"))
                .body("[0].'alpha2Code'", containsString("NR"))
                .body("[0].'alpha3Code'", containsString("NRU"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("674"))
                .body("[0].'capital'", containsString("Yaren"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("NR", "Naoero", "Pleasant Island", "Republic of Nauru", "Ripublik Naoero"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Micronesia"))
                .body("[0].'population'", numberMatches(10084.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-0.53333333))
                .body("[0].'latlng'[1]", numberMatches(166.91666666))
                .body("[0].'demonym'", containsString("Nauruan"))
                .body("[0].'area'", numberMatches(21.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+12:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Nauru"))
                .body("[0].'numericCode'", containsString("520"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AUD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "na"))
                .body("[0].'translations'.'de'", containsString("Nauru"))
                .body("[0].'translations'.'es'", containsString("Nauru"))
                .body("[0].'translations'.'fr'", containsString("Nauru"))
                .body("[0].'translations'.'ja'", containsString("ナウル"))
                .body("[0].'translations'.'it'", containsString("Nauru"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_451_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/228?fields=NS%7CG8Y")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_452_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/60")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Malaysia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".my"))
                .body("[0].'alpha2Code'", containsString("MY"))
                .body("[0].'alpha3Code'", containsString("MYS"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("60"))
                .body("[0].'capital'", containsString("Kuala Lumpur"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("MY"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("South-Eastern Asia"))
                .body("[0].'population'", numberMatches(3.06788E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(2.5))
                .body("[0].'latlng'[1]", numberMatches(112.5))
                .body("[0].'demonym'", containsString("Malaysian"))
                .body("[0].'area'", numberMatches(330803.0))
                .body("[0].'gini'", numberMatches(46.2))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("BRN", "IDN", "THA"))
                .body("[0].'nativeName'", containsString("Malaysia"))
                .body("[0].'numericCode'", containsString("458"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MYR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ms"))
                .body("[0].'translations'.'de'", containsString("Malaysia"))
                .body("[0].'translations'.'es'", containsString("Malasia"))
                .body("[0].'translations'.'fr'", containsString("Malaisie"))
                .body("[0].'translations'.'ja'", containsString("マレーシア"))
                .body("[0].'translations'.'it'", containsString("Malesia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_453_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/mogadishu")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Somalia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".so"))
                .body("[0].'alpha2Code'", containsString("SO"))
                .body("[0].'alpha3Code'", containsString("SOM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("252"))
                .body("[0].'capital'", containsString("Mogadishu"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("SO", "aṣ-Ṣūmāl", "Federal Republic of Somalia", "Jamhuuriyadda Federaalka Soomaaliya", "Jumhūriyyat aṣ-Ṣūmāl al-Fiderāliyya"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(1.0787E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(10.0))
                .body("[0].'latlng'[1]", numberMatches(49.0))
                .body("[0].'demonym'", containsString("Somali"))
                .body("[0].'area'", numberMatches(637657.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("DJI", "ETH", "KEN"))
                .body("[0].'nativeName'", containsString("Soomaaliya"))
                .body("[0].'numericCode'", containsString("706"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("SOS"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("so", "ar"))
                .body("[0].'translations'.'de'", containsString("Somalia"))
                .body("[0].'translations'.'es'", containsString("Somalia"))
                .body("[0].'translations'.'fr'", containsString("Somalie"))
                .body("[0].'translations'.'ja'", containsString("ソマリア"))
                .body("[0].'translations'.'it'", containsString("Somalia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_454_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/monaco")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Monaco"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mc"))
                .body("[0].'alpha2Code'", containsString("MC"))
                .body("[0].'alpha3Code'", containsString("MCO"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("377"))
                .body("[0].'capital'", containsString("Monaco"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("MC", "Principality of Monaco", "Principauté de Monaco"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(37800.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(43.73333333))
                .body("[0].'latlng'[1]", numberMatches(7.4))
                .body("[0].'demonym'", containsString("Monegasque"))
                .body("[0].'area'", numberMatches(2.02))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("FRA"))
                .body("[0].'nativeName'", containsString("Monaco"))
                .body("[0].'numericCode'", containsString("492"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Monaco"))
                .body("[0].'translations'.'es'", containsString("Mónaco"))
                .body("[0].'translations'.'fr'", containsString("Monaco"))
                .body("[0].'translations'.'ja'", containsString("モナコ"))
                .body("[0].'translations'.'it'", containsString("Principato di Monaco"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_455_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/monrovia")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Liberia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".lr"))
                .body("[0].'alpha2Code'", containsString("LR"))
                .body("[0].'alpha3Code'", containsString("LBR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("231"))
                .body("[0].'capital'", containsString("Monrovia"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("LR", "Republic of Liberia"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(4503000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(6.5))
                .body("[0].'latlng'[1]", numberMatches(-9.5))
                .body("[0].'demonym'", containsString("Liberian"))
                .body("[0].'area'", numberMatches(111369.0))
                .body("[0].'gini'", numberMatches(38.2))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("GIN", "CIV", "SLE"))
                .body("[0].'nativeName'", containsString("Liberia"))
                .body("[0].'numericCode'", containsString("430"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("LRD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Liberia"))
                .body("[0].'translations'.'es'", containsString("Liberia"))
                .body("[0].'translations'.'fr'", containsString("Liberia"))
                .body("[0].'translations'.'ja'", containsString("リベリア"))
                .body("[0].'translations'.'it'", containsString("Liberia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_456_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/my")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Myanmar"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mm"))
                .body("[0].'alpha2Code'", containsString("MM"))
                .body("[0].'alpha3Code'", containsString("MMR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("95"))
                .body("[0].'capital'", containsString("Naypyidaw"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("MM", "Burma", "Republic of the Union of Myanmar", "Pyidaunzu Thanmăda Myăma Nainngandaw"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("South-Eastern Asia"))
                .body("[0].'population'", numberMatches(5.3897E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(22.0))
                .body("[0].'latlng'[1]", numberMatches(98.0))
                .body("[0].'demonym'", containsString("Burmese"))
                .body("[0].'area'", numberMatches(676578.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+06:30"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("BGD", "CHN", "IND", "LAO", "THA"))
                .body("[0].'nativeName'", containsString("Myanma"))
                .body("[0].'numericCode'", containsString("104"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MMK"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("my"))
                .body("[0].'translations'.'de'", containsString("Myanmar"))
                .body("[0].'translations'.'es'", containsString("Myanmar"))
                .body("[0].'translations'.'fr'", containsString("Myanmar"))
                .body("[0].'translations'.'ja'", containsString("ミャンマー"))
                .body("[0].'translations'.'it'", containsString("Birmania"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_457_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/na")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Nauru"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".nr"))
                .body("[0].'alpha2Code'", containsString("NR"))
                .body("[0].'alpha3Code'", containsString("NRU"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("674"))
                .body("[0].'capital'", containsString("Yaren"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("NR", "Naoero", "Pleasant Island", "Republic of Nauru", "Ripublik Naoero"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Micronesia"))
                .body("[0].'population'", numberMatches(10084.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-0.53333333))
                .body("[0].'latlng'[1]", numberMatches(166.91666666))
                .body("[0].'demonym'", containsString("Nauruan"))
                .body("[0].'area'", numberMatches(21.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+12:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Nauru"))
                .body("[0].'numericCode'", containsString("520"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AUD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "na"))
                .body("[0].'translations'.'de'", containsString("Nauru"))
                .body("[0].'translations'.'es'", containsString("Nauru"))
                .body("[0].'translations'.'fr'", containsString("Nauru"))
                .body("[0].'translations'.'ja'", containsString("ナウル"))
                .body("[0].'translations'.'it'", containsString("Nauru"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_458_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/n'djamena?fields=xi18kolk")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_459_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/lang/thA?fields=_EM_9584_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_460_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/P")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(40))
                .body("[0].'name'", containsString("American Samoa"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".as"))
                .body("[0].'alpha2Code'", containsString("AS"))
                .body("[0].'alpha3Code'", containsString("ASM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Pago Pago"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("AS", "Amerika Sāmoa", "Amelika Sāmoa", "Sāmoa Amelika"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Polynesia"))
                .body("[0].'population'", numberMatches(55519.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-14.33333333))
                .body("[0].'latlng'[1]", numberMatches(-170.0))
                .body("[0].'demonym'", containsString("American Samoan"))
                .body("[0].'area'", numberMatches(199.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-11:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("American Samoa"))
                .body("[0].'numericCode'", containsString("016"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "sm"))
                .body("[0].'translations'.'de'", containsString("Amerikanisch-Samoa"))
                .body("[0].'translations'.'es'", containsString("Samoa Americana"))
                .body("[0].'translations'.'fr'", containsString("Samoa américaines"))
                .body("[0].'translations'.'ja'", containsString("アメリカ領サモア"))
                .body("[0].'translations'.'it'", containsString("Samoa Americane"))
                .body("[0].'relevance'", containsString("0.5"))
                .body("[1].'name'", containsString("Belize"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".bz"))
                .body("[1].'alpha2Code'", containsString("BZ"))
                .body("[1].'alpha3Code'", containsString("BLZ"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("501"))
                .body("[1].'capital'", containsString("Belmopan"))
                .body("[1].'altSpellings'.size()", equalTo(1))
                .body("[1].'altSpellings'", hasItems("BZ"))
                .body("[1].'region'", containsString("Americas"))
                .body("[1].'subregion'", containsString("Central America"))
                .body("[1].'population'", numberMatches(368310.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(17.25))
                .body("[1].'latlng'[1]", numberMatches(-88.75))
                .body("[1].'demonym'", containsString("Belizean"))
                .body("[1].'area'", numberMatches(22966.0))
                .body("[1].'gini'", numberMatches(53.1))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC-06:00"))
                .body("[1].'borders'.size()", equalTo(2))
                .body("[1].'borders'", hasItems("GTM", "MEX"))
                .body("[1].'nativeName'", containsString("Belize"))
                .body("[1].'numericCode'", containsString("084"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("BZD"))
                .body("[1].'languages'.size()", equalTo(2))
                .body("[1].'languages'", hasItems("en", "es"))
                .body("[1].'translations'.'de'", containsString("Belize"))
                .body("[1].'translations'.'es'", containsString("Belice"))
                .body("[1].'translations'.'fr'", containsString("Belize"))
                .body("[1].'translations'.'ja'", containsString("ベリーズ"))
                .body("[1].'translations'.'it'", containsString("Belize"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Benin"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".bj"))
                .body("[2].'alpha2Code'", containsString("BJ"))
                .body("[2].'alpha3Code'", containsString("BEN"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("229"))
                .body("[2].'capital'", containsString("Porto-Novo"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("BJ", "Republic of Benin", "République du Bénin"))
                .body("[2].'region'", containsString("Africa"))
                .body("[2].'subregion'", containsString("Western Africa"))
                .body("[2].'population'", numberMatches(1.0315244E7))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(9.5))
                .body("[2].'latlng'[1]", numberMatches(2.25))
                .body("[2].'demonym'", containsString("Beninese"))
                .body("[2].'area'", numberMatches(112622.0))
                .body("[2].'gini'", numberMatches(38.6))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(4))
                .body("[2].'borders'", hasItems("BFA", "NER", "NGA", "TGO"))
                .body("[2].'nativeName'", containsString("Bénin"))
                .body("[2].'numericCode'", containsString("204"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("XOF"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("fr"))
                .body("[2].'translations'.'de'", containsString("Benin"))
                .body("[2].'translations'.'es'", containsString("Benín"))
                .body("[2].'translations'.'fr'", containsString("Bénin"))
                .body("[2].'translations'.'ja'", containsString("ベナン"))
                .body("[2].'translations'.'it'", containsString("Benin"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 37 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_461_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/382?fields=_EM_12063_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_462_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/zambia?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Zambia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".zm"))
                .body("[0].'alpha2Code'", containsString("ZM"))
                .body("[0].'alpha3Code'", containsString("ZMB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("260"))
                .body("[0].'capital'", containsString("Lusaka"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("ZM", "Republic of Zambia"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(1.5473905E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-15.0))
                .body("[0].'latlng'[1]", numberMatches(30.0))
                .body("[0].'demonym'", containsString("Zambian"))
                .body("[0].'area'", numberMatches(752612.0))
                .body("[0].'gini'", numberMatches(54.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(8))
                .body("[0].'borders'", hasItems("AGO", "BWA", "COD", "MWI", "MOZ", "NAM", "TZA", "ZWE"))
                .body("[0].'nativeName'", containsString("Zambia"))
                .body("[0].'numericCode'", containsString("894"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ZMW"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Sambia"))
                .body("[0].'translations'.'es'", containsString("Zambia"))
                .body("[0].'translations'.'fr'", containsString("Zambie"))
                .body("[0].'translations'.'ja'", containsString("ザンビア"))
                .body("[0].'translations'.'it'", containsString("Zambia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_463_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/880?fields=mpY")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_464_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/EEU?fields=_EM_9743_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_465_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/zhonghua?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("China"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cn"))
                .body("[0].'alpha2Code'", containsString("CN"))
                .body("[0].'alpha3Code'", containsString("CHN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("86"))
                .body("[0].'capital'", containsString("Beijing"))
                .body("[0].'altSpellings'.size()", equalTo(7))
                .body("[0].'altSpellings'", hasItems("CN", "Zhōngguó", "Zhongguo", "Zhonghua", "People's Republic of China", "中华人民共和国", "Zhōnghuá Rénmín Gònghéguó"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Eastern Asia"))
                .body("[0].'population'", numberMatches(1.37159E9))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(35.0))
                .body("[0].'latlng'[1]", numberMatches(105.0))
                .body("[0].'demonym'", containsString("Chinese"))
                .body("[0].'area'", numberMatches(9640011.0))
                .body("[0].'gini'", numberMatches(47.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(15))
                .body("[0].'borders'", hasItems("AFG", "BTN", "MMR", "HKG", "IND", "KAZ", "PRK", "KGZ", "LAO", "MAC", "MNG", "PAK", "RUS", "TJK", "VNM"))
                .body("[0].'nativeName'", containsString("中国"))
                .body("[0].'numericCode'", containsString("156"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("CNY"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("zh"))
                .body("[0].'translations'.'de'", containsString("China"))
                .body("[0].'translations'.'es'", containsString("China"))
                .body("[0].'translations'.'fr'", containsString("Chine"))
                .body("[0].'translations'.'ja'", containsString("中国"))
                .body("[0].'translations'.'it'", containsString("Cina"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Taiwan"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".tw"))
                .body("[1].'alpha2Code'", containsString("TW"))
                .body("[1].'alpha3Code'", containsString("TWN"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("886"))
                .body("[1].'capital'", containsString("Taipei"))
                .body("[1].'altSpellings'.size()", equalTo(5))
                .body("[1].'altSpellings'", hasItems("TW", "Táiwān", "Republic of China", "中華民國", "Zhōnghuá Mínguó"))
                .body("[1].'region'", containsString("Asia"))
                .body("[1].'subregion'", containsString("Eastern Asia"))
                .body("[1].'population'", numberMatches(2.3461708E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(23.5))
                .body("[1].'latlng'[1]", numberMatches(121.0))
                .body("[1].'demonym'", containsString("Taiwanese"))
                .body("[1].'area'", numberMatches(36193.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+08:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("臺灣"))
                .body("[1].'numericCode'", containsString("158"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("TWD"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("zh"))
                .body("[1].'translations'.'de'", containsString("Taiwan"))
                .body("[1].'translations'.'es'", containsString("Taiwán"))
                .body("[1].'translations'.'fr'", containsString("Taïwan"))
                .body("[1].'translations'.'ja'", containsString("台湾（台湾省/中華民国）"))
                .body("[1].'translations'.'it'", containsString("Taiwan"))
                .body("[1].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_466_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/zhonghua%20minguo?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Taiwan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".tw"))
                .body("[0].'alpha2Code'", containsString("TW"))
                .body("[0].'alpha3Code'", containsString("TWN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("886"))
                .body("[0].'capital'", containsString("Taipei"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("TW", "Táiwān", "Republic of China", "中華民國", "Zhōnghuá Mínguó"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Eastern Asia"))
                .body("[0].'population'", numberMatches(2.3461708E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(23.5))
                .body("[0].'latlng'[1]", numberMatches(121.0))
                .body("[0].'demonym'", containsString("Taiwanese"))
                .body("[0].'area'", numberMatches(36193.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("臺灣"))
                .body("[0].'numericCode'", containsString("158"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("TWD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("zh"))
                .body("[0].'translations'.'de'", containsString("Taiwan"))
                .body("[0].'translations'.'es'", containsString("Taiwán"))
                .body("[0].'translations'.'fr'", containsString("Taïwan"))
                .body("[0].'translations'.'ja'", containsString("台湾（台湾省/中華民国）"))
                .body("[0].'translations'.'it'", containsString("Taiwan"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_467_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/muscat")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Oman"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".om"))
                .body("[0].'alpha2Code'", containsString("OM"))
                .body("[0].'alpha3Code'", containsString("OMN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("968"))
                .body("[0].'capital'", containsString("Muscat"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("OM", "Sultanate of Oman", "Salṭanat ʻUmān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(4185440.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(21.0))
                .body("[0].'latlng'[1]", numberMatches(57.0))
                .body("[0].'demonym'", containsString("Omani"))
                .body("[0].'area'", numberMatches(309500.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("SAU", "ARE", "YEM"))
                .body("[0].'nativeName'", containsString("عمان"))
                .body("[0].'numericCode'", containsString("512"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("OMR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Oman"))
                .body("[0].'translations'.'es'", containsString("Omán"))
                .body("[0].'translations'.'fr'", containsString("Oman"))
                .body("[0].'translations'.'ja'", containsString("オマーン"))
                .body("[0].'translations'.'it'", containsString("oman"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_468_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/mozambican?fields=P")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_469_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/mayotte?" + 
                    "fields=Hlh&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_470_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/mc?" + 
                    "fields=Hlh&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_471_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/vilnius?fields=_EM_4441_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_472_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/repubblica%20italiana?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Italy"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".it"))
                .body("[0].'alpha2Code'", containsString("IT"))
                .body("[0].'alpha3Code'", containsString("ITA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("39"))
                .body("[0].'capital'", containsString("Rome"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("IT", "Italian Republic", "Repubblica italiana"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(6.0753794E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(42.83333333))
                .body("[0].'latlng'[1]", numberMatches(12.83333333))
                .body("[0].'demonym'", containsString("Italian"))
                .body("[0].'area'", numberMatches(301336.0))
                .body("[0].'gini'", numberMatches(36.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("AUT", "FRA", "SMR", "SVN", "CHE", "VAT"))
                .body("[0].'nativeName'", containsString("Italia"))
                .body("[0].'numericCode'", containsString("380"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("it"))
                .body("[0].'translations'.'de'", containsString("Italien"))
                .body("[0].'translations'.'es'", containsString("Italia"))
                .body("[0].'translations'.'fr'", containsString("Italie"))
                .body("[0].'translations'.'ja'", containsString("イタリア"))
                .body("[0].'translations'.'it'", containsString("Italia"))
                .body("[0].'relevance'", containsString("2"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_473_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/370")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Lithuania"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".lt"))
                .body("[0].'alpha2Code'", containsString("LT"))
                .body("[0].'alpha3Code'", containsString("LTU"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("370"))
                .body("[0].'capital'", containsString("Vilnius"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("LT", "Republic of Lithuania", "Lietuvos Respublika"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(2900787.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(56.0))
                .body("[0].'latlng'[1]", numberMatches(24.0))
                .body("[0].'demonym'", containsString("Lithuanian"))
                .body("[0].'area'", numberMatches(65300.0))
                .body("[0].'gini'", numberMatches(37.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("BLR", "LVA", "POL", "RUS"))
                .body("[0].'nativeName'", containsString("Lietuva"))
                .body("[0].'numericCode'", containsString("440"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("lt"))
                .body("[0].'translations'.'de'", containsString("Litauen"))
                .body("[0].'translations'.'es'", containsString("Lituania"))
                .body("[0].'translations'.'fr'", containsString("Lituanie"))
                .body("[0].'translations'.'ja'", containsString("リトアニア"))
                .body("[0].'translations'.'it'", containsString("Lituania"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_474_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/371")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Latvia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".lv"))
                .body("[0].'alpha2Code'", containsString("LV"))
                .body("[0].'alpha3Code'", containsString("LVA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("371"))
                .body("[0].'capital'", containsString("Riga"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("LV", "Republic of Latvia", "Latvijas Republika"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(1980700.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(57.0))
                .body("[0].'latlng'[1]", numberMatches(25.0))
                .body("[0].'demonym'", containsString("Latvian"))
                .body("[0].'area'", numberMatches(64559.0))
                .body("[0].'gini'", numberMatches(36.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("BLR", "EST", "LTU", "RUS"))
                .body("[0].'nativeName'", containsString("Latvija"))
                .body("[0].'numericCode'", containsString("428"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("lv"))
                .body("[0].'translations'.'de'", containsString("Lettland"))
                .body("[0].'translations'.'es'", containsString("Letonia"))
                .body("[0].'translations'.'fr'", containsString("Lettonie"))
                .body("[0].'translations'.'ja'", containsString("ラトビア"))
                .body("[0].'translations'.'it'", containsString("Lettonia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_475_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/994?fields=23uj")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_476_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/375?fields=30MBOOPEO3J")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_477_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/298")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Faroe Islands"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".fo"))
                .body("[0].'alpha2Code'", containsString("FO"))
                .body("[0].'alpha3Code'", containsString("FRO"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("298"))
                .body("[0].'capital'", containsString("Tórshavn"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("FO", "Føroyar", "Færøerne"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(48846.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(62.0))
                .body("[0].'latlng'[1]", numberMatches(-7.0))
                .body("[0].'demonym'", containsString("Faroese"))
                .body("[0].'area'", numberMatches(1393.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+00:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Føroyar"))
                .body("[0].'numericCode'", containsString("234"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("DKK"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fo"))
                .body("[0].'translations'.'de'", containsString("Färöer-Inseln"))
                .body("[0].'translations'.'es'", containsString("Islas Faroe"))
                .body("[0].'translations'.'fr'", containsString("Îles Féroé"))
                .body("[0].'translations'.'ja'", containsString("フェロー諸島"))
                .body("[0].'translations'.'it'", containsString("Isole Far Oer"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_478_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/german?fields=capital")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'capital'", containsString("Berlin"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_479_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/ma?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(42))
                .body("[0].'name'", containsString("The Bahamas"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bs"))
                .body("[0].'alpha2Code'", containsString("BS"))
                .body("[0].'alpha3Code'", containsString("BHS"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Nassau"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("BS", "Commonwealth of the Bahamas"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(368390.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(24.25))
                .body("[0].'latlng'[1]", numberMatches(-76.0))
                .body("[0].'demonym'", containsString("Bahamian"))
                .body("[0].'area'", numberMatches(13943.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-05:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Bahamas"))
                .body("[0].'numericCode'", containsString("044"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BSD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Bahamas"))
                .body("[0].'translations'.'es'", containsString("Bahamas"))
                .body("[0].'translations'.'fr'", containsString("Bahamas"))
                .body("[0].'translations'.'ja'", containsString("バハマ"))
                .body("[0].'translations'.'it'", containsString("Bahamas"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Cayman Islands"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ky"))
                .body("[1].'alpha2Code'", containsString("KY"))
                .body("[1].'alpha3Code'", containsString("CYM"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("1"))
                .body("[1].'capital'", containsString("George Town"))
                .body("[1].'altSpellings'.size()", equalTo(1))
                .body("[1].'altSpellings'", hasItems("KY"))
                .body("[1].'region'", containsString("Americas"))
                .body("[1].'subregion'", containsString("Caribbean"))
                .body("[1].'population'", numberMatches(58238.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(19.5))
                .body("[1].'latlng'[1]", numberMatches(-80.5))
                .body("[1].'demonym'", containsString("Caymanian"))
                .body("[1].'area'", numberMatches(264.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC-05:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Cayman Islands"))
                .body("[1].'numericCode'", containsString("136"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("KYD"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("en"))
                .body("[1].'translations'.'de'", containsString("Kaimaninseln"))
                .body("[1].'translations'.'es'", containsString("Islas Caimán"))
                .body("[1].'translations'.'fr'", containsString("Îles Caïmans"))
                .body("[1].'translations'.'ja'", containsString("ケイマン諸島"))
                .body("[1].'translations'.'it'", containsString("Isole Cayman"))
                .body("[1].'relevance'", containsString("0.5"))
                .body("[2].'name'", containsString("Christmas Island"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".cx"))
                .body("[2].'alpha2Code'", containsString("CX"))
                .body("[2].'alpha3Code'", containsString("CXR"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("61"))
                .body("[2].'capital'", containsString("Flying Fish Cove"))
                .body("[2].'altSpellings'.size()", equalTo(2))
                .body("[2].'altSpellings'", hasItems("CX", "Territory of Christmas Island"))
                .body("[2].'region'", containsString("Oceania"))
                .body("[2].'subregion'", containsString("Australia and New Zealand"))
                .body("[2].'population'", numberMatches(2072.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(-10.5))
                .body("[2].'latlng'[1]", numberMatches(105.66666666))
                .body("[2].'demonym'", containsString("Christmas Island"))
                .body("[2].'area'", numberMatches(135.0))
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+07:00"))
                .body("[2].'borders'.size()", equalTo(0))
                .body("[2].'nativeName'", containsString("Christmas Island"))
                .body("[2].'numericCode'", containsString("162"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("AUD"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("en"))
                .body("[2].'translations'.'de'", containsString("Weihnachtsinsel"))
                .body("[2].'translations'.'es'", containsString("Isla de Navidad"))
                .body("[2].'translations'.'fr'", containsString("Île Christmas"))
                .body("[2].'translations'.'ja'", containsString("クリスマス島"))
                .body("[2].'translations'.'it'", containsString("Isola di Natale"))
                .body("[2].'relevance'", containsString("0.5"))
                ; // Skipping assertions on the remaining 39 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_480_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/233")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Ghana"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gh"))
                .body("[0].'alpha2Code'", containsString("GH"))
                .body("[0].'alpha3Code'", containsString("GHA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("233"))
                .body("[0].'capital'", containsString("Accra"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("GH"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(2.7043093E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(8.0))
                .body("[0].'latlng'[1]", numberMatches(-2.0))
                .body("[0].'demonym'", containsString("Ghanaian"))
                .body("[0].'area'", numberMatches(238533.0))
                .body("[0].'gini'", numberMatches(42.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("BFA", "CIV", "TGO"))
                .body("[0].'nativeName'", containsString("Ghana"))
                .body("[0].'numericCode'", containsString("288"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("GHS"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Ghana"))
                .body("[0].'translations'.'es'", containsString("Ghana"))
                .body("[0].'translations'.'fr'", containsString("Ghana"))
                .body("[0].'translations'.'ja'", containsString("ガーナ"))
                .body("[0].'translations'.'it'", containsString("Ghana"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_481_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/suva?fields=0Ztx8nVv")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_482_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/51")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Peru"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".pe"))
                .body("[0].'alpha2Code'", containsString("PE"))
                .body("[0].'alpha3Code'", containsString("PER"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("51"))
                .body("[0].'capital'", containsString("Lima"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("PE", "Republic of Peru", " República del Perú"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(3.1151643E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-10.0))
                .body("[0].'latlng'[1]", numberMatches(-76.0))
                .body("[0].'demonym'", containsString("Peruvian"))
                .body("[0].'area'", numberMatches(1285216.0))
                .body("[0].'gini'", numberMatches(48.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-05:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("BOL", "BRA", "CHL", "COL", "ECU"))
                .body("[0].'nativeName'", containsString("Perú"))
                .body("[0].'numericCode'", containsString("604"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("PEN"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("es"))
                .body("[0].'translations'.'de'", containsString("Peru"))
                .body("[0].'translations'.'es'", containsString("Perú"))
                .body("[0].'translations'.'fr'", containsString("Pérou"))
                .body("[0].'translations'.'ja'", containsString("ペルー"))
                .body("[0].'translations'.'it'", containsString("Perù"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_483_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/886")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Taiwan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".tw"))
                .body("[0].'alpha2Code'", containsString("TW"))
                .body("[0].'alpha3Code'", containsString("TWN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("886"))
                .body("[0].'capital'", containsString("Taipei"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("TW", "Táiwān", "Republic of China", "中華民國", "Zhōnghuá Mínguó"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Eastern Asia"))
                .body("[0].'population'", numberMatches(2.3461708E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(23.5))
                .body("[0].'latlng'[1]", numberMatches(121.0))
                .body("[0].'demonym'", containsString("Taiwanese"))
                .body("[0].'area'", numberMatches(36193.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("臺灣"))
                .body("[0].'numericCode'", containsString("158"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("TWD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("zh"))
                .body("[0].'translations'.'de'", containsString("Taiwan"))
                .body("[0].'translations'.'es'", containsString("Taiwán"))
                .body("[0].'translations'.'fr'", containsString("Taïwan"))
                .body("[0].'translations'.'ja'", containsString("台湾（台湾省/中華民国）"))
                .body("[0].'translations'.'it'", containsString("Taiwan"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_484_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/507?fields=mtY")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_485_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/polish?fields=capital")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'capital'", containsString("Warsaw"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_486_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/paramaribo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Suriname"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sr"))
                .body("[0].'alpha2Code'", containsString("SR"))
                .body("[0].'alpha3Code'", containsString("SUR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("597"))
                .body("[0].'capital'", containsString("Paramaribo"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("SR", "Sarnam", "Sranangron", "Republic of Suriname", "Republiek Suriname"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(534189.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(4.0))
                .body("[0].'latlng'[1]", numberMatches(-56.0))
                .body("[0].'demonym'", containsString("Surinamer"))
                .body("[0].'area'", numberMatches(163820.0))
                .body("[0].'gini'", numberMatches(52.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-03:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("BRA", "GUF", "FRA", "GUY"))
                .body("[0].'nativeName'", containsString("Suriname"))
                .body("[0].'numericCode'", containsString("740"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("SRD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("nl"))
                .body("[0].'translations'.'de'", containsString("Suriname"))
                .body("[0].'translations'.'es'", containsString("Surinam"))
                .body("[0].'translations'.'fr'", containsString("Surinam"))
                .body("[0].'translations'.'ja'", containsString("スリナム"))
                .body("[0].'translations'.'it'", containsString("Suriname"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_487_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/principat%20d'andorra?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Andorra"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ad"))
                .body("[0].'alpha2Code'", containsString("AD"))
                .body("[0].'alpha3Code'", containsString("AND"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("376"))
                .body("[0].'capital'", containsString("Andorra la Vella"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("AD", "Principality of Andorra", "Principat d'Andorra"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(76949.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(42.5))
                .body("[0].'latlng'[1]", numberMatches(1.5))
                .body("[0].'demonym'", containsString("Andorran"))
                .body("[0].'area'", numberMatches(468.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("FRA", "ESP"))
                .body("[0].'nativeName'", containsString("Andorra"))
                .body("[0].'numericCode'", containsString("020"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ca"))
                .body("[0].'translations'.'de'", containsString("Andorra"))
                .body("[0].'translations'.'es'", containsString("Andorra"))
                .body("[0].'translations'.'fr'", containsString("Andorre"))
                .body("[0].'translations'.'ja'", containsString("アンドラ"))
                .body("[0].'translations'.'it'", containsString("Andorra"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_488_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/387")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Bosnia and Herzegovina"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ba"))
                .body("[0].'alpha2Code'", containsString("BA"))
                .body("[0].'alpha3Code'", containsString("BIH"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("387"))
                .body("[0].'capital'", containsString("Sarajevo"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("BA", "Bosnia-Herzegovina", "Босна и Херцеговина"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(3791622.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(44.0))
                .body("[0].'latlng'[1]", numberMatches(18.0))
                .body("[0].'demonym'", containsString("Bosnian, Herzegovinian"))
                .body("[0].'area'", numberMatches(51209.0))
                .body("[0].'gini'", numberMatches(36.2))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("HRV", "MNE", "SRB"))
                .body("[0].'nativeName'", containsString("Bosna i Hercegovina"))
                .body("[0].'numericCode'", containsString("070"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BAM"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("bs", "hr", "sr"))
                .body("[0].'translations'.'de'", containsString("Bosnien und Herzegowina"))
                .body("[0].'translations'.'es'", containsString("Bosnia y Herzegovina"))
                .body("[0].'translations'.'fr'", containsString("Bosnie-Herzégovine"))
                .body("[0].'translations'.'ja'", containsString("ボスニア・ヘルツェゴビナ"))
                .body("[0].'translations'.'it'", containsString("Bosnia ed Erzegovina"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_489_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/389")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Republic of Macedonia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mk"))
                .body("[0].'alpha2Code'", containsString("MK"))
                .body("[0].'alpha3Code'", containsString("MKD"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("389"))
                .body("[0].'capital'", containsString("Skopje"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("MK", "Republic of Macedonia", "Република Македонија"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(2058539.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(41.83333333))
                .body("[0].'latlng'[1]", numberMatches(22.0))
                .body("[0].'demonym'", containsString("Macedonian"))
                .body("[0].'area'", numberMatches(25713.0))
                .body("[0].'gini'", numberMatches(43.2))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("ALB", "BGR", "GRC", "KOS", "SRB"))
                .body("[0].'nativeName'", containsString("Македонија"))
                .body("[0].'numericCode'", containsString("807"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MKD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("mk"))
                .body("[0].'translations'.'de'", containsString("Mazedonien"))
                .body("[0].'translations'.'es'", containsString("Macedonia"))
                .body("[0].'translations'.'fr'", containsString("Macédoine"))
                .body("[0].'translations'.'ja'", containsString("マケドニア旧ユーゴスラビア共和国"))
                .body("[0].'translations'.'it'", containsString("Macedonia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_490_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/lilongwe")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Malawi"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mw"))
                .body("[0].'alpha2Code'", containsString("MW"))
                .body("[0].'alpha3Code'", containsString("MWI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("265"))
                .body("[0].'capital'", containsString("Lilongwe"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("MW", "Republic of Malawi"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(1.6310431E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-13.5))
                .body("[0].'latlng'[1]", numberMatches(34.0))
                .body("[0].'demonym'", containsString("Malawian"))
                .body("[0].'area'", numberMatches(118484.0))
                .body("[0].'gini'", numberMatches(39.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("MOZ", "TZA", "ZMB"))
                .body("[0].'nativeName'", containsString("Malawi"))
                .body("[0].'numericCode'", containsString("454"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MWK"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "ny"))
                .body("[0].'translations'.'de'", containsString("Malawi"))
                .body("[0].'translations'.'es'", containsString("Malawi"))
                .body("[0].'translations'.'fr'", containsString("Malawi"))
                .body("[0].'translations'.'ja'", containsString("マラウイ"))
                .body("[0].'translations'.'it'", containsString("Malawi"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_491_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/lisbon")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Portugal"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".pt"))
                .body("[0].'alpha2Code'", containsString("PT"))
                .body("[0].'alpha3Code'", containsString("PRT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("351"))
                .body("[0].'capital'", containsString("Lisbon"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("PT", "Portuguesa", "Portuguese Republic", "República Portuguesa"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(1.0374822E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(39.5))
                .body("[0].'latlng'[1]", numberMatches(-8.0))
                .body("[0].'demonym'", containsString("Portuguese"))
                .body("[0].'area'", numberMatches(92090.0))
                .body("[0].'gini'", numberMatches(38.5))
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC-01:00", "UTC"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("ESP"))
                .body("[0].'nativeName'", containsString("Portugal"))
                .body("[0].'numericCode'", containsString("620"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("pt"))
                .body("[0].'translations'.'de'", containsString("Portugal"))
                .body("[0].'translations'.'es'", containsString("Portugal"))
                .body("[0].'translations'.'fr'", containsString("Portugal"))
                .body("[0].'translations'.'ja'", containsString("ポルトガル"))
                .body("[0].'translations'.'it'", containsString("Portogallo"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_492_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/963")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Syrian Arab Republic"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sy"))
                .body("[0].'alpha2Code'", containsString("SY"))
                .body("[0].'alpha3Code'", containsString("SYR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("963"))
                .body("[0].'capital'", containsString("Damascus"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("SY", "Syrian Arab Republic", "Al-Jumhūrīyah Al-ʻArabīyah As-Sūrīyah"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(1.8564E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(35.0))
                .body("[0].'latlng'[1]", numberMatches(38.0))
                .body("[0].'demonym'", containsString("Syrian"))
                .body("[0].'area'", numberMatches(185180.0))
                .body("[0].'gini'", numberMatches(35.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("IRQ", "ISR", "JOR", "LBN", "TUR"))
                .body("[0].'nativeName'", containsString("سوريا"))
                .body("[0].'numericCode'", containsString("760"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("SYP"))
                .body("[0].'currencies'[0].'name'", containsString("Syrian pound"))
                .body("[0].'currencies'[0].'symbol'", containsString("£"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("ar"))
                .body("[0].'languages'[0].'iso639_2'", containsString("ara"))
                .body("[0].'languages'[0].'name'", containsString("Arabic"))
                .body("[0].'languages'[0].'nativeName'", containsString("العربية"))
                .body("[0].'translations'.'de'", containsString("Syrien"))
                .body("[0].'translations'.'es'", containsString("Siria"))
                .body("[0].'translations'.'fr'", containsString("Syrie"))
                .body("[0].'translations'.'ja'", containsString("シリア・アラブ共和国"))
                .body("[0].'translations'.'it'", containsString("Siria"))
                .body("[0].'translations'.'br'", containsString("Síria"))
                .body("[0].'translations'.'pt'", containsString("Síria"))
                .body("[0].'translations'.'nl'", containsString("Syrië"))
                .body("[0].'translations'.'hr'", containsString("Sirija"))
                .body("[0].'translations'.'fa'", containsString("سوریه"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/syr.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("AL"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Arab League"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(3))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("جامعة الدول العربية", "Jāmiʻat ad-Duwal al-ʻArabīyah", "League of Arab States"))
                .body("[0].'cioc'", containsString("SYR"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_493_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/riga?fields=d")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_494_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/serbia?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Serbia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".rs"))
                .body("[0].'alpha2Code'", containsString("RS"))
                .body("[0].'alpha3Code'", containsString("SRB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("381"))
                .body("[0].'capital'", containsString("Belgrade"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("RS", "Srbija", "Republic of Serbia", "Република Србија", "Republika Srbija"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(7114393.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(44.0))
                .body("[0].'latlng'[1]", numberMatches(21.0))
                .body("[0].'demonym'", containsString("Serbian"))
                .body("[0].'area'", numberMatches(88361.0))
                .body("[0].'gini'", numberMatches(27.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(8))
                .body("[0].'borders'", hasItems("BIH", "BGR", "HRV", "HUN", "KOS", "MKD", "MNE", "ROU"))
                .body("[0].'nativeName'", containsString("Србија"))
                .body("[0].'numericCode'", containsString("688"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("RSD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("sr"))
                .body("[0].'translations'.'de'", containsString("Serbien"))
                .body("[0].'translations'.'es'", containsString("Serbia"))
                .body("[0].'translations'.'fr'", containsString("Serbie"))
                .body("[0].'translations'.'ja'", containsString("セルビア"))
                .body("[0].'translations'.'it'", containsString("Serbia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_495_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/guinea?fields=Lmxcih")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_496_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/guinea-bissau?" + 
                    "fields=Lmxcih&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_497_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/guyana?" + 
                    "fields=Lmxcih&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_498_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/dhaka?fields=iQqGbJgoyV")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_499_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/39")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Italy"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".it"))
                .body("[0].'alpha2Code'", containsString("IT"))
                .body("[0].'alpha3Code'", containsString("ITA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("39"))
                .body("[0].'capital'", containsString("Rome"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("IT", "Italian Republic", "Repubblica italiana"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(6.0753794E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(42.83333333))
                .body("[0].'latlng'[1]", numberMatches(12.83333333))
                .body("[0].'demonym'", containsString("Italian"))
                .body("[0].'area'", numberMatches(301336.0))
                .body("[0].'gini'", numberMatches(36.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("AUT", "FRA", "SMR", "SVN", "CHE", "VAT"))
                .body("[0].'nativeName'", containsString("Italia"))
                .body("[0].'numericCode'", containsString("380"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("it"))
                .body("[0].'translations'.'de'", containsString("Italien"))
                .body("[0].'translations'.'es'", containsString("Italia"))
                .body("[0].'translations'.'fr'", containsString("Italie"))
                .body("[0].'translations'.'ja'", containsString("イタリア"))
                .body("[0].'translations'.'it'", containsString("Italia"))
                .body("[0].'relevance'", containsString("2"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_500_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/40")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Romania"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ro"))
                .body("[0].'alpha2Code'", containsString("RO"))
                .body("[0].'alpha3Code'", containsString("ROU"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("40"))
                .body("[0].'capital'", containsString("Bucharest"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("RO", "Rumania", "Roumania", "România"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(1.9942642E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(46.0))
                .body("[0].'latlng'[1]", numberMatches(25.0))
                .body("[0].'demonym'", containsString("Romanian"))
                .body("[0].'area'", numberMatches(238391.0))
                .body("[0].'gini'", numberMatches(30.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("BGR", "HUN", "MDA", "SRB", "UKR"))
                .body("[0].'nativeName'", containsString("România"))
                .body("[0].'numericCode'", containsString("642"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("RON"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ro"))
                .body("[0].'translations'.'de'", containsString("Rumänien"))
                .body("[0].'translations'.'es'", containsString("Rumania"))
                .body("[0].'translations'.'fr'", containsString("Roumanie"))
                .body("[0].'translations'.'ja'", containsString("ルーマニア"))
                .body("[0].'translations'.'it'", containsString("Romania"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_501_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/guyane")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("French Guiana"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gf"))
                .body("[0].'alpha2Code'", containsString("GF"))
                .body("[0].'alpha3Code'", containsString("GUF"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("594"))
                .body("[0].'capital'", containsString("Cayenne"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("GF", "Guiana", "Guyane"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(239648.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(4.0))
                .body("[0].'latlng'[1]", numberMatches(-53.0))
                .body("[0].'demonym'", containsString(""))
                .body("[0].'area'", nullValue())
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-03:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("BRA", "SUR"))
                .body("[0].'nativeName'", containsString("Guyane française"))
                .body("[0].'numericCode'", containsString("254"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Französisch Guyana"))
                .body("[0].'translations'.'es'", containsString("Guayana Francesa"))
                .body("[0].'translations'.'fr'", containsString("Guayane"))
                .body("[0].'translations'.'ja'", containsString("フランス領ギアナ"))
                .body("[0].'translations'.'it'", containsString("Guyana francese"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_502_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/53")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Cuba"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cu"))
                .body("[0].'alpha2Code'", containsString("CU"))
                .body("[0].'alpha3Code'", containsString("CUB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("53"))
                .body("[0].'capital'", containsString("Havana"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("CU", "Republic of Cuba", "República de Cuba"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(1.1238317E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(21.5))
                .body("[0].'latlng'[1]", numberMatches(-80.0))
                .body("[0].'demonym'", containsString("Cuban"))
                .body("[0].'area'", numberMatches(109884.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-05:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Cuba"))
                .body("[0].'numericCode'", containsString("192"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'", hasItems("CUC", "CUP"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("es"))
                .body("[0].'translations'.'de'", containsString("Kuba"))
                .body("[0].'translations'.'es'", containsString("Cuba"))
                .body("[0].'translations'.'fr'", containsString("Cuba"))
                .body("[0].'translations'.'ja'", containsString("キューバ"))
                .body("[0].'translations'.'it'", containsString("Cuba"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_503_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/670?fields=LZi2rDjtdx")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_504_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/672?fields=LZi2rDjtdx")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_505_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/ukrayina?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Ukraine"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ua"))
                .body("[0].'alpha2Code'", containsString("UA"))
                .body("[0].'alpha3Code'", containsString("UKR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("380"))
                .body("[0].'capital'", containsString("Kiev"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("UA", "Ukrayina"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(4.2836922E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(49.0))
                .body("[0].'latlng'[1]", numberMatches(32.0))
                .body("[0].'demonym'", containsString("Ukrainian"))
                .body("[0].'area'", numberMatches(603700.0))
                .body("[0].'gini'", numberMatches(26.4))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(7))
                .body("[0].'borders'", hasItems("BLR", "HUN", "MDA", "POL", "ROU", "RUS", "SVK"))
                .body("[0].'nativeName'", containsString("Україна"))
                .body("[0].'numericCode'", containsString("804"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("UAH"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("uk"))
                .body("[0].'translations'.'de'", containsString("Ukraine"))
                .body("[0].'translations'.'es'", containsString("Ucrania"))
                .body("[0].'translations'.'fr'", containsString("Ukraine"))
                .body("[0].'translations'.'ja'", containsString("ウクライナ"))
                .body("[0].'translations'.'it'", containsString("Ucraina"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_506_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/pristina")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Republic of Kosovo"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(""))
                .body("[0].'alpha2Code'", containsString("XK"))
                .body("[0].'alpha3Code'", containsString("KOS"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("383"))
                .body("[0].'capital'", containsString("Pristina"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("XK", "Република Косово"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(1733842.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(42.666667))
                .body("[0].'latlng'[1]", numberMatches(21.166667))
                .body("[0].'demonym'", containsString("Kosovar"))
                .body("[0].'area'", numberMatches(10908.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("ALB", "MKD", "MNE", "SRB"))
                .body("[0].'nativeName'", containsString("Republika e Kosovës"))
                .body("[0].'numericCode'", containsString("780"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("sq", "sr"))
                .body("[0].'translations'.'de'", nullValue())
                .body("[0].'translations'.'es'", containsString("Kosovo"))
                .body("[0].'translations'.'fr'", nullValue())
                .body("[0].'translations'.'ja'", nullValue())
                .body("[0].'translations'.'it'", nullValue())
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_507_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/podgorica?fields=_EM_10549_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_508_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/sakartvelo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Georgia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ge"))
                .body("[0].'alpha2Code'", containsString("GE"))
                .body("[0].'alpha3Code'", containsString("GEO"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("995"))
                .body("[0].'capital'", containsString("Tbilisi"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("GE", "Sakartvelo"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(3729500.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(42.0))
                .body("[0].'latlng'[1]", numberMatches(43.5))
                .body("[0].'demonym'", containsString("Georgian"))
                .body("[0].'area'", numberMatches(69700.0))
                .body("[0].'gini'", numberMatches(41.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-05:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("ARM", "AZE", "RUS", "TUR"))
                .body("[0].'nativeName'", containsString("საქართველო"))
                .body("[0].'numericCode'", containsString("268"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("GEL"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ka"))
                .body("[0].'translations'.'de'", containsString("Georgien"))
                .body("[0].'translations'.'es'", containsString("Georgia"))
                .body("[0].'translations'.'fr'", containsString("Géorgie"))
                .body("[0].'translations'.'ja'", containsString("グルジア"))
                .body("[0].'translations'.'it'", containsString("Georgia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_509_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/saltanat%20ʻuman")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Oman"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".om"))
                .body("[0].'alpha2Code'", containsString("OM"))
                .body("[0].'alpha3Code'", containsString("OMN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("968"))
                .body("[0].'capital'", containsString("Muscat"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("OM", "Sultanate of Oman", "Salṭanat ʻUmān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(4185440.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(21.0))
                .body("[0].'latlng'[1]", numberMatches(57.0))
                .body("[0].'demonym'", containsString("Omani"))
                .body("[0].'area'", numberMatches(309500.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("SAU", "ARE", "YEM"))
                .body("[0].'nativeName'", containsString("عمان"))
                .body("[0].'numericCode'", containsString("512"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("OMR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Oman"))
                .body("[0].'translations'.'es'", containsString("Omán"))
                .body("[0].'translations'.'fr'", containsString("Oman"))
                .body("[0].'translations'.'ja'", containsString("オマーン"))
                .body("[0].'translations'.'it'", containsString("oman"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_510_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/tv?" + 
                    "fields=callingCodes&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("688"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_511_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/new%20caledonian?fields=_EM_10626_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_512_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/stockholm")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Sweden"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".se"))
                .body("[0].'alpha2Code'", containsString("SE"))
                .body("[0].'alpha3Code'", containsString("SWE"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("46"))
                .body("[0].'capital'", containsString("Stockholm"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("SE", "Kingdom of Sweden", "Konungariket Sverige"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(9793172.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(62.0))
                .body("[0].'latlng'[1]", numberMatches(15.0))
                .body("[0].'demonym'", containsString("Swedish"))
                .body("[0].'area'", numberMatches(450295.0))
                .body("[0].'gini'", numberMatches(25.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("FIN", "NOR"))
                .body("[0].'nativeName'", containsString("Sverige"))
                .body("[0].'numericCode'", containsString("752"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("SEK"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("sv"))
                .body("[0].'translations'.'de'", containsString("Schweden"))
                .body("[0].'translations'.'es'", containsString("Suecia"))
                .body("[0].'translations'.'fr'", containsString("Suède"))
                .body("[0].'translations'.'ja'", containsString("スウェーデン"))
                .body("[0].'translations'.'it'", containsString("Svezia"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_513_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/mozambique?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Mozambique"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mz"))
                .body("[0].'alpha2Code'", containsString("MZ"))
                .body("[0].'alpha3Code'", containsString("MOZ"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("258"))
                .body("[0].'capital'", containsString("Maputo"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("MZ", "Republic of Mozambique", "República de Moçambique"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(2.5727911E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-18.25))
                .body("[0].'latlng'[1]", numberMatches(35.0))
                .body("[0].'demonym'", containsString("Mozambican"))
                .body("[0].'area'", numberMatches(801590.0))
                .body("[0].'gini'", numberMatches(45.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("MWI", "ZAF", "SWZ", "TZA", "ZMB", "ZWE"))
                .body("[0].'nativeName'", containsString("Moçambique"))
                .body("[0].'numericCode'", containsString("508"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MZN"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("pt"))
                .body("[0].'translations'.'de'", containsString("Mosambik"))
                .body("[0].'translations'.'es'", containsString("Mozambique"))
                .body("[0].'translations'.'fr'", containsString("Mozambique"))
                .body("[0].'translations'.'ja'", containsString("モザンビーク"))
                .body("[0].'translations'.'it'", containsString("Mozambico"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_514_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/52")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Mexico"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mx"))
                .body("[0].'alpha2Code'", containsString("MX"))
                .body("[0].'alpha3Code'", containsString("MEX"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("52"))
                .body("[0].'capital'", containsString("Mexico City"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("MX", "Mexicanos", "United Mexican States", "Estados Unidos Mexicanos"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Central America"))
                .body("[0].'population'", numberMatches(1.2174E8))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(23.0))
                .body("[0].'latlng'[1]", numberMatches(-102.0))
                .body("[0].'demonym'", containsString("Mexican"))
                .body("[0].'area'", numberMatches(1964375.0))
                .body("[0].'gini'", numberMatches(47.0))
                .body("[0].'timezones'.size()", equalTo(3))
                .body("[0].'timezones'", hasItems("UTC-08:00", "UTC-07:00", "UTC-06:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("BLZ", "GTM", "USA"))
                .body("[0].'nativeName'", containsString("México"))
                .body("[0].'numericCode'", containsString("484"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MXN"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("es"))
                .body("[0].'translations'.'de'", containsString("Mexiko"))
                .body("[0].'translations'.'es'", containsString("México"))
                .body("[0].'translations'.'fr'", containsString("Mexique"))
                .body("[0].'translations'.'ja'", containsString("メキシコ"))
                .body("[0].'translations'.'it'", containsString("Messico"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_515_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/el%20aaiun")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Western Sahara"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".eh"))
                .body("[0].'alpha2Code'", containsString("EH"))
                .body("[0].'alpha3Code'", containsString("ESH"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("212"))
                .body("[0].'capital'", containsString("El Aaiún"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("EH", "Taneẓroft Tutrimt"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Northern Africa"))
                .body("[0].'population'", numberMatches(510713.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(24.5))
                .body("[0].'latlng'[1]", numberMatches(-13.0))
                .body("[0].'demonym'", containsString("Sahrawi"))
                .body("[0].'area'", numberMatches(266000.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+00:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("DZA", "MRT", "MAR"))
                .body("[0].'nativeName'", containsString("الصحراء الغربية"))
                .body("[0].'numericCode'", containsString("732"))
                .body("[0].'currencies'.size()", equalTo(3))
                .body("[0].'currencies'", hasItems("MAD", "DZD", "MRO"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("es"))
                .body("[0].'translations'.'de'", containsString("Westsahara"))
                .body("[0].'translations'.'es'", containsString("Sahara Occidental"))
                .body("[0].'translations'.'fr'", containsString("Sahara Occidental"))
                .body("[0].'translations'.'ja'", containsString("西サハラ"))
                .body("[0].'translations'.'it'", containsString("Sahara Occidentale"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_516_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/fakaofo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Tokelau"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".tk"))
                .body("[0].'alpha2Code'", containsString("TK"))
                .body("[0].'alpha3Code'", containsString("TKL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("690"))
                .body("[0].'capital'", containsString("Fakaofo"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("TK"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Polynesia"))
                .body("[0].'population'", numberMatches(1411.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-9.0))
                .body("[0].'latlng'[1]", numberMatches(-172.0))
                .body("[0].'demonym'", containsString("Tokelauan"))
                .body("[0].'area'", numberMatches(12.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+13:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Tokelau"))
                .body("[0].'numericCode'", containsString("772"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("NZD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Tokelau"))
                .body("[0].'translations'.'es'", containsString("Islas Tokelau"))
                .body("[0].'translations'.'fr'", containsString("Tokelau"))
                .body("[0].'translations'.'ja'", containsString("トケラウ"))
                .body("[0].'translations'.'it'", containsString("Isole Tokelau"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_517_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/san%20juan?fields=0Ztx8nWv")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_518_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/ye?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Yemen"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ye"))
                .body("[0].'alpha2Code'", containsString("YE"))
                .body("[0].'alpha3Code'", containsString("YEM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("967"))
                .body("[0].'capital'", containsString("Sana'a"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("YE", "Yemeni Republic", "al-Jumhūriyyah al-Yamaniyyah"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(2.5956E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(15.0))
                .body("[0].'latlng'[1]", numberMatches(48.0))
                .body("[0].'demonym'", containsString("Yemeni"))
                .body("[0].'area'", numberMatches(527968.0))
                .body("[0].'gini'", numberMatches(37.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("OMN", "SAU"))
                .body("[0].'nativeName'", containsString("اليَمَن"))
                .body("[0].'numericCode'", containsString("887"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("YER"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Jemen"))
                .body("[0].'translations'.'es'", containsString("Yemen"))
                .body("[0].'translations'.'fr'", containsString("Yémen"))
                .body("[0].'translations'.'ja'", containsString("イエメン"))
                .body("[0].'translations'.'it'", containsString("Yemen"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_519_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/tirana")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Albania"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".al"))
                .body("[0].'alpha2Code'", containsString("AL"))
                .body("[0].'alpha3Code'", containsString("ALB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("355"))
                .body("[0].'capital'", containsString("Tirana"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("AL", "Shqipëri", "Shqipëria", "Shqipnia"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(2893005.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(41.0))
                .body("[0].'latlng'[1]", numberMatches(20.0))
                .body("[0].'demonym'", containsString("Albanian"))
                .body("[0].'area'", numberMatches(28748.0))
                .body("[0].'gini'", numberMatches(34.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("MNE", "GRC", "MKD", "KOS"))
                .body("[0].'nativeName'", containsString("Shqipëria"))
                .body("[0].'numericCode'", containsString("008"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ALL"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("sq"))
                .body("[0].'translations'.'de'", containsString("Albanien"))
                .body("[0].'translations'.'es'", containsString("Albania"))
                .body("[0].'translations'.'fr'", containsString("Albanie"))
                .body("[0].'translations'.'ja'", containsString("アルバニア"))
                .body("[0].'translations'.'it'", containsString("Albania"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_520_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/si?" + 
                    "fields=Glh&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_521_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/damascus?fields=iQqGbJgoyV")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_522_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/sierra%20leone?" + 
                    "fields=Glh&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_523_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/singapura?" + 
                    "fields=_GU_10892_XYU_&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_524_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/243")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Democratic Republic of the Congo"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cd"))
                .body("[0].'alpha2Code'", containsString("CD"))
                .body("[0].'alpha3Code'", containsString("COD"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("243"))
                .body("[0].'capital'", containsString("Kinshasa"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("CD", "DR Congo", "Congo-Kinshasa", "DRC"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Middle Africa"))
                .body("[0].'population'", numberMatches(7.7267E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(0.0))
                .body("[0].'latlng'[1]", numberMatches(25.0))
                .body("[0].'demonym'", containsString("Congolese"))
                .body("[0].'area'", numberMatches(2344858.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC+01:00", "UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(9))
                .body("[0].'borders'", hasItems("AGO", "BDI", "CAF", "COG", "RWA", "SSD", "TZA", "UGA", "ZMB"))
                .body("[0].'nativeName'", containsString("République démocratique du Congo"))
                .body("[0].'numericCode'", containsString("180"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("CDF"))
                .body("[0].'languages'.size()", equalTo(5))
                .body("[0].'languages'", hasItems("fr", "ln", "kg", "sw", "lu"))
                .body("[0].'translations'.'de'", containsString("Kongo (Dem. Rep.)"))
                .body("[0].'translations'.'es'", containsString("Congo (Rep. Dem.)"))
                .body("[0].'translations'.'fr'", containsString("Congo (Rép. dém.)"))
                .body("[0].'translations'.'ja'", containsString("コンゴ民主共和国"))
                .body("[0].'translations'.'it'", containsString("Congo (Rep. Dem.)"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_525_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/basse-terre")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Guadeloupe"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gp"))
                .body("[0].'alpha2Code'", containsString("GP"))
                .body("[0].'alpha3Code'", containsString("GLP"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("590"))
                .body("[0].'capital'", containsString("Basse-Terre"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("GP", "Gwadloup"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(403750.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(16.25))
                .body("[0].'latlng'[1]", numberMatches(-61.583333))
                .body("[0].'demonym'", containsString("Guadeloupian"))
                .body("[0].'area'", nullValue())
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Guadeloupe"))
                .body("[0].'numericCode'", containsString("312"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Guadeloupe"))
                .body("[0].'translations'.'es'", containsString("Guadalupe"))
                .body("[0].'translations'.'fr'", containsString("Guadeloupe"))
                .body("[0].'translations'.'ja'", containsString("グアドループ"))
                .body("[0].'translations'.'it'", containsString("Guadeloupa"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_526_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/sj?" + 
                    "fields=translations&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'translations'.'br'", containsString("Svalbard"))
                .body("[0].'translations'.'pt'", containsString("Svalbard"))
                .body("[0].'translations'.'nl'", containsString("Svalbard en Jan Mayen"))
                .body("[0].'translations'.'hr'", containsString("Svalbard i Jan Mayen"))
                .body("[0].'translations'.'fa'", containsString("سوالبارد و یان ماین"))
                .body("[0].'translations'.'de'", containsString("Svalbard und Jan Mayen"))
                .body("[0].'translations'.'es'", containsString("Islas Svalbard y Jan Mayen"))
                .body("[0].'translations'.'fr'", containsString("Svalbard et Jan Mayen"))
                .body("[0].'translations'.'ja'", containsString("スヴァールバル諸島およびヤンマイエン島"))
                .body("[0].'translations'.'it'", containsString("Svalbard e Jan Mayen"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_527_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/998")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Uzbekistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".uz"))
                .body("[0].'alpha2Code'", containsString("UZ"))
                .body("[0].'alpha3Code'", containsString("UZB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("998"))
                .body("[0].'capital'", containsString("Tashkent"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("UZ", "Republic of Uzbekistan", "O‘zbekiston Respublikasi", "Ўзбекистон Республикаси"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Central Asia"))
                .body("[0].'population'", numberMatches(3.15764E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(41.0))
                .body("[0].'latlng'[1]", numberMatches(64.0))
                .body("[0].'demonym'", containsString("Uzbekistani"))
                .body("[0].'area'", numberMatches(447400.0))
                .body("[0].'gini'", numberMatches(36.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+05:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("AFG", "KAZ", "KGZ", "TJK", "TKM"))
                .body("[0].'nativeName'", containsString("O‘zbekiston"))
                .body("[0].'numericCode'", containsString("860"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("UZS"))
                .body("[0].'currencies'[0].'name'", containsString("Uzbekistani so'm"))
                .body("[0].'currencies'[0].'symbol'", nullValue())
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("uz"))
                .body("[0].'languages'[0].'iso639_2'", containsString("uzb"))
                .body("[0].'languages'[0].'name'", containsString("Uzbek"))
                .body("[0].'languages'[0].'nativeName'", containsString("Oʻzbek"))
                .body("[0].'languages'[1].'iso639_1'", containsString("ru"))
                .body("[0].'languages'[1].'iso639_2'", containsString("rus"))
                .body("[0].'languages'[1].'name'", containsString("Russian"))
                .body("[0].'languages'[1].'nativeName'", containsString("Русский"))
                .body("[0].'translations'.'de'", containsString("Usbekistan"))
                .body("[0].'translations'.'es'", containsString("Uzbekistán"))
                .body("[0].'translations'.'fr'", containsString("Ouzbékistan"))
                .body("[0].'translations'.'ja'", containsString("ウズベキスタン"))
                .body("[0].'translations'.'it'", containsString("Uzbekistan"))
                .body("[0].'translations'.'br'", containsString("Uzbequistão"))
                .body("[0].'translations'.'pt'", containsString("Usbequistão"))
                .body("[0].'translations'.'nl'", containsString("Oezbekistan"))
                .body("[0].'translations'.'hr'", containsString("Uzbekistan"))
                .body("[0].'translations'.'fa'", containsString("ازبکستان"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/uzb.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("UZB"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_528_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/1")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(25))
                .body("[0].'name'", containsString("American Samoa"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".as"))
                .body("[0].'alpha2Code'", containsString("AS"))
                .body("[0].'alpha3Code'", containsString("ASM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Pago Pago"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("AS", "Amerika Sāmoa", "Amelika Sāmoa", "Sāmoa Amelika"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Polynesia"))
                .body("[0].'population'", numberMatches(57100.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-14.33333333))
                .body("[0].'latlng'[1]", numberMatches(-170.0))
                .body("[0].'demonym'", containsString("American Samoan"))
                .body("[0].'area'", numberMatches(199.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-11:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("American Samoa"))
                .body("[0].'numericCode'", containsString("016"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("USD"))
                .body("[0].'currencies'[0].'name'", containsString("United State Dollar"))
                .body("[0].'currencies'[0].'symbol'", containsString("$"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("en"))
                .body("[0].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[0].'name'", containsString("English"))
                .body("[0].'languages'[0].'nativeName'", containsString("English"))
                .body("[0].'languages'[1].'iso639_1'", containsString("sm"))
                .body("[0].'languages'[1].'iso639_2'", containsString("smo"))
                .body("[0].'languages'[1].'name'", containsString("Samoan"))
                .body("[0].'languages'[1].'nativeName'", containsString("gagana fa'a Samoa"))
                .body("[0].'translations'.'de'", containsString("Amerikanisch-Samoa"))
                .body("[0].'translations'.'es'", containsString("Samoa Americana"))
                .body("[0].'translations'.'fr'", containsString("Samoa américaines"))
                .body("[0].'translations'.'ja'", containsString("アメリカ領サモア"))
                .body("[0].'translations'.'it'", containsString("Samoa Americane"))
                .body("[0].'translations'.'br'", containsString("Samoa Americana"))
                .body("[0].'translations'.'pt'", containsString("Samoa Americana"))
                .body("[0].'translations'.'nl'", containsString("Amerikaans Samoa"))
                .body("[0].'translations'.'hr'", containsString("Američka Samoa"))
                .body("[0].'translations'.'fa'", containsString("ساموآی آمریکا"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/asm.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("ASA"))
                .body("[1].'name'", containsString("Anguilla"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ai"))
                .body("[1].'alpha2Code'", containsString("AI"))
                .body("[1].'alpha3Code'", containsString("AIA"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("1"))
                .body("[1].'capital'", containsString("The Valley"))
                .body("[1].'altSpellings'.size()", equalTo(1))
                .body("[1].'altSpellings'", hasItems("AI"))
                .body("[1].'region'", containsString("Americas"))
                .body("[1].'subregion'", containsString("Caribbean"))
                .body("[1].'population'", numberMatches(13452.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(18.25))
                .body("[1].'latlng'[1]", numberMatches(-63.16666666))
                .body("[1].'demonym'", containsString("Anguillian"))
                .body("[1].'area'", numberMatches(91.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC-04:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Anguilla"))
                .body("[1].'numericCode'", containsString("660"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("XCD"))
                .body("[1].'currencies'[0].'name'", containsString("East Caribbean dollar"))
                .body("[1].'currencies'[0].'symbol'", containsString("$"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'[0].'iso639_1'", containsString("en"))
                .body("[1].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[1].'languages'[0].'name'", containsString("English"))
                .body("[1].'languages'[0].'nativeName'", containsString("English"))
                .body("[1].'translations'.'de'", containsString("Anguilla"))
                .body("[1].'translations'.'es'", containsString("Anguilla"))
                .body("[1].'translations'.'fr'", containsString("Anguilla"))
                .body("[1].'translations'.'ja'", containsString("アンギラ"))
                .body("[1].'translations'.'it'", containsString("Anguilla"))
                .body("[1].'translations'.'br'", containsString("Anguila"))
                .body("[1].'translations'.'pt'", containsString("Anguila"))
                .body("[1].'translations'.'nl'", containsString("Anguilla"))
                .body("[1].'translations'.'hr'", containsString("Angvila"))
                .body("[1].'translations'.'fa'", containsString("آنگویلا"))
                .body("[1].'flag'", containsString("https://restcountries.eu/data/aia.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(0))
                .body("[1].'cioc'", containsString(""))
                .body("[2].'name'", containsString("Antigua and Barbuda"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".ag"))
                .body("[2].'alpha2Code'", containsString("AG"))
                .body("[2].'alpha3Code'", containsString("ATG"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("1"))
                .body("[2].'capital'", containsString("Saint John's"))
                .body("[2].'altSpellings'.size()", equalTo(1))
                .body("[2].'altSpellings'", hasItems("AG"))
                .body("[2].'region'", containsString("Americas"))
                .body("[2].'subregion'", containsString("Caribbean"))
                .body("[2].'population'", numberMatches(86295.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(17.05))
                .body("[2].'latlng'[1]", numberMatches(-61.8))
                .body("[2].'demonym'", containsString("Antiguan, Barbudan"))
                .body("[2].'area'", numberMatches(442.0))
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC-04:00"))
                .body("[2].'borders'.size()", equalTo(0))
                .body("[2].'nativeName'", containsString("Antigua and Barbuda"))
                .body("[2].'numericCode'", containsString("028"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'[0].'code'", containsString("XCD"))
                .body("[2].'currencies'[0].'name'", containsString("East Caribbean dollar"))
                .body("[2].'currencies'[0].'symbol'", containsString("$"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'[0].'iso639_1'", containsString("en"))
                .body("[2].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[2].'languages'[0].'name'", containsString("English"))
                .body("[2].'languages'[0].'nativeName'", containsString("English"))
                .body("[2].'translations'.'de'", containsString("Antigua und Barbuda"))
                .body("[2].'translations'.'es'", containsString("Antigua y Barbuda"))
                .body("[2].'translations'.'fr'", containsString("Antigua-et-Barbuda"))
                .body("[2].'translations'.'ja'", containsString("アンティグア・バーブーダ"))
                .body("[2].'translations'.'it'", containsString("Antigua e Barbuda"))
                .body("[2].'translations'.'br'", containsString("Antígua e Barbuda"))
                .body("[2].'translations'.'pt'", containsString("Antígua e Barbuda"))
                .body("[2].'translations'.'nl'", containsString("Antigua en Barbuda"))
                .body("[2].'translations'.'hr'", containsString("Antigva i Barbuda"))
                .body("[2].'translations'.'fa'", containsString("آنتیگوا و باربودا"))
                .body("[2].'flag'", containsString("https://restcountries.eu/data/atg.svg"))
                .body("[2].'regionalBlocs'.size()", equalTo(1))
                .body("[2].'regionalBlocs'[0].'acronym'", containsString("CARICOM"))
                .body("[2].'regionalBlocs'[0].'name'", containsString("Caribbean Community"))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[2].'regionalBlocs'[0].'otherNames'.size()", equalTo(3))
                .body("[2].'regionalBlocs'[0].'otherNames'", hasItems("Comunidad del Caribe", "Communauté Caribéenne", "Caribische Gemeenschap"))
                .body("[2].'cioc'", containsString("ANT"))
                ; // Skipping assertions on the remaining 22 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_529_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/saint%20helenian?fields=tDSi")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_530_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/latvia?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Latvia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".lv"))
                .body("[0].'alpha2Code'", containsString("LV"))
                .body("[0].'alpha3Code'", containsString("LVA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("371"))
                .body("[0].'capital'", containsString("Riga"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("LV", "Republic of Latvia", "Latvijas Republika"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(1980700.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(57.0))
                .body("[0].'latlng'[1]", numberMatches(25.0))
                .body("[0].'demonym'", containsString("Latvian"))
                .body("[0].'area'", numberMatches(64559.0))
                .body("[0].'gini'", numberMatches(36.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("BLR", "EST", "LTU", "RUS"))
                .body("[0].'nativeName'", containsString("Latvija"))
                .body("[0].'numericCode'", containsString("428"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("lv"))
                .body("[0].'translations'.'de'", containsString("Lettland"))
                .body("[0].'translations'.'es'", containsString("Letonia"))
                .body("[0].'translations'.'fr'", containsString("Lettonie"))
                .body("[0].'translations'.'ja'", containsString("ラトビア"))
                .body("[0].'translations'.'it'", containsString("Lettonia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_531_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/mexico%20city")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Mexico"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mx"))
                .body("[0].'alpha2Code'", containsString("MX"))
                .body("[0].'alpha3Code'", containsString("MEX"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("52"))
                .body("[0].'capital'", containsString("Mexico City"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("MX", "Mexicanos", "United Mexican States", "Estados Unidos Mexicanos"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Central America"))
                .body("[0].'population'", numberMatches(1.2174E8))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(23.0))
                .body("[0].'latlng'[1]", numberMatches(-102.0))
                .body("[0].'demonym'", containsString("Mexican"))
                .body("[0].'area'", numberMatches(1964375.0))
                .body("[0].'gini'", numberMatches(47.0))
                .body("[0].'timezones'.size()", equalTo(3))
                .body("[0].'timezones'", hasItems("UTC-08:00", "UTC-07:00", "UTC-06:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("BLZ", "GTM", "USA"))
                .body("[0].'nativeName'", containsString("México"))
                .body("[0].'numericCode'", containsString("484"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MXN"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("es"))
                .body("[0].'translations'.'de'", containsString("Mexiko"))
                .body("[0].'translations'.'es'", containsString("México"))
                .body("[0].'translations'.'fr'", containsString("Mexique"))
                .body("[0].'translations'.'ja'", containsString("メキシコ"))
                .body("[0].'translations'.'it'", containsString("Messico"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_532_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/ax?" + 
                    "fields=uM4y8gnqRb&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_533_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/beijing?fields=ti58UoUk")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_534_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/departement%20de%20mayotte?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Mayotte"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".yt"))
                .body("[0].'alpha2Code'", containsString("YT"))
                .body("[0].'alpha3Code'", containsString("MYT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("262"))
                .body("[0].'capital'", containsString("Mamoudzou"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("YT", "Department of Mayotte", "Département de Mayotte"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(212645.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-12.83333333))
                .body("[0].'latlng'[1]", numberMatches(45.16666666))
                .body("[0].'demonym'", containsString("French"))
                .body("[0].'area'", nullValue())
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Mayotte"))
                .body("[0].'numericCode'", containsString("175"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Mayotte"))
                .body("[0].'translations'.'es'", containsString("Mayotte"))
                .body("[0].'translations'.'fr'", containsString("Mayotte"))
                .body("[0].'translations'.'ja'", containsString("マヨット"))
                .body("[0].'translations'.'it'", containsString("Mayotte"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_535_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/department%20of%20mayotte?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Mayotte"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".yt"))
                .body("[0].'alpha2Code'", containsString("YT"))
                .body("[0].'alpha3Code'", containsString("MYT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("262"))
                .body("[0].'capital'", containsString("Mamoudzou"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("YT", "Department of Mayotte", "Département de Mayotte"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(212645.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-12.83333333))
                .body("[0].'latlng'[1]", numberMatches(45.16666666))
                .body("[0].'demonym'", containsString("French"))
                .body("[0].'area'", nullValue())
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Mayotte"))
                .body("[0].'numericCode'", containsString("175"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Mayotte"))
                .body("[0].'translations'.'es'", containsString("Mayotte"))
                .body("[0].'translations'.'fr'", containsString("Mayotte"))
                .body("[0].'translations'.'ja'", containsString("マヨット"))
                .body("[0].'translations'.'it'", containsString("Mayotte"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_536_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/pg?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Papua New Guinea"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".pg"))
                .body("[0].'alpha2Code'", containsString("PG"))
                .body("[0].'alpha3Code'", containsString("PNG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("675"))
                .body("[0].'capital'", containsString("Port Moresby"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("PG", "Independent State of Papua New Guinea", "Independen Stet bilong Papua Niugini"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Melanesia"))
                .body("[0].'population'", numberMatches(7398500.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-6.0))
                .body("[0].'latlng'[1]", numberMatches(147.0))
                .body("[0].'demonym'", containsString("Papua New Guinean"))
                .body("[0].'area'", numberMatches(462840.0))
                .body("[0].'gini'", numberMatches(50.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+10:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("IDN"))
                .body("[0].'nativeName'", containsString("Papua Niugini"))
                .body("[0].'numericCode'", containsString("598"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("PGK"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Papua-Neuguinea"))
                .body("[0].'translations'.'es'", containsString("Papúa Nueva Guinea"))
                .body("[0].'translations'.'fr'", containsString("Papouasie-Nouvelle-Guinée"))
                .body("[0].'translations'.'ja'", containsString("パプアニューギニア"))
                .body("[0].'translations'.'it'", containsString("Papua Nuova Guinea"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_537_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/ph?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Philippines"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ph"))
                .body("[0].'alpha2Code'", containsString("PH"))
                .body("[0].'alpha3Code'", containsString("PHL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("63"))
                .body("[0].'capital'", containsString("Manila"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("PH", "Republic of the Philippines", "Repúblika ng Pilipinas"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("South-Eastern Asia"))
                .body("[0].'population'", numberMatches(1.0192E8))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(13.0))
                .body("[0].'latlng'[1]", numberMatches(122.0))
                .body("[0].'demonym'", containsString("Filipino"))
                .body("[0].'area'", numberMatches(342353.0))
                .body("[0].'gini'", numberMatches(43.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Pilipinas"))
                .body("[0].'numericCode'", containsString("608"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("PHP"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Philippinen"))
                .body("[0].'translations'.'es'", containsString("Filipinas"))
                .body("[0].'translations'.'fr'", containsString("Philippines"))
                .body("[0].'translations'.'ja'", containsString("フィリピン"))
                .body("[0].'translations'.'it'", containsString("Filippine"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_538_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/377")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Monaco"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mc"))
                .body("[0].'alpha2Code'", containsString("MC"))
                .body("[0].'alpha3Code'", containsString("MCO"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("377"))
                .body("[0].'capital'", containsString("Monaco"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("MC", "Principality of Monaco", "Principauté de Monaco"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(37800.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(43.73333333))
                .body("[0].'latlng'[1]", numberMatches(7.4))
                .body("[0].'demonym'", containsString("Monegasque"))
                .body("[0].'area'", numberMatches(2.02))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("FRA"))
                .body("[0].'nativeName'", containsString("Monaco"))
                .body("[0].'numericCode'", containsString("492"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Monaco"))
                .body("[0].'translations'.'es'", containsString("Mónaco"))
                .body("[0].'translations'.'fr'", containsString("Monaco"))
                .body("[0].'translations'.'ja'", containsString("モナコ"))
                .body("[0].'translations'.'it'", containsString("Principato di Monaco"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_539_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/596?fields=mr")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_540_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/isle%20of%20man?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Isle of Man"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".im"))
                .body("[0].'alpha2Code'", containsString("IM"))
                .body("[0].'alpha3Code'", containsString("IMN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("44"))
                .body("[0].'capital'", containsString("Douglas"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("IM", "Ellan Vannin", "Mann", "Mannin"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(84497.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(54.25))
                .body("[0].'latlng'[1]", numberMatches(-4.5))
                .body("[0].'demonym'", containsString("Manx"))
                .body("[0].'area'", numberMatches(572.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+00:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Isle of Man"))
                .body("[0].'numericCode'", containsString("833"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("GBP"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "gv"))
                .body("[0].'translations'.'de'", containsString("Insel Man"))
                .body("[0].'translations'.'es'", containsString("Isla de Man"))
                .body("[0].'translations'.'fr'", containsString("Île de Man"))
                .body("[0].'translations'.'ja'", containsString("マン島"))
                .body("[0].'translations'.'it'", containsString("Isola di Man"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_541_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/63")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Philippines"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ph"))
                .body("[0].'alpha2Code'", containsString("PH"))
                .body("[0].'alpha3Code'", containsString("PHL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("63"))
                .body("[0].'capital'", containsString("Manila"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("PH", "Republic of the Philippines", "Repúblika ng Pilipinas"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("South-Eastern Asia"))
                .body("[0].'population'", numberMatches(1.0192E8))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(13.0))
                .body("[0].'latlng'[1]", numberMatches(122.0))
                .body("[0].'demonym'", containsString("Filipino"))
                .body("[0].'area'", numberMatches(342353.0))
                .body("[0].'gini'", numberMatches(43.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Pilipinas"))
                .body("[0].'numericCode'", containsString("608"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("PHP"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Philippinen"))
                .body("[0].'translations'.'es'", containsString("Filipinas"))
                .body("[0].'translations'.'fr'", containsString("Philippines"))
                .body("[0].'translations'.'ja'", containsString("フィリピン"))
                .body("[0].'translations'.'it'", containsString("Filippine"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_542_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/belgrade")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Serbia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".rs"))
                .body("[0].'alpha2Code'", containsString("RS"))
                .body("[0].'alpha3Code'", containsString("SRB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("381"))
                .body("[0].'capital'", containsString("Belgrade"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("RS", "Srbija", "Republic of Serbia", "Република Србија", "Republika Srbija"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(7114393.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(44.0))
                .body("[0].'latlng'[1]", numberMatches(21.0))
                .body("[0].'demonym'", containsString("Serbian"))
                .body("[0].'area'", numberMatches(88361.0))
                .body("[0].'gini'", numberMatches(27.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(8))
                .body("[0].'borders'", hasItems("BIH", "BGR", "HRV", "HUN", "KOS", "MKD", "MNE", "ROU"))
                .body("[0].'nativeName'", containsString("Србија"))
                .body("[0].'numericCode'", containsString("688"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("RSD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("sr"))
                .body("[0].'translations'.'de'", containsString("Serbien"))
                .body("[0].'translations'.'es'", containsString("Serbia"))
                .body("[0].'translations'.'fr'", containsString("Serbie"))
                .body("[0].'translations'.'ja'", containsString("セルビア"))
                .body("[0].'translations'.'it'", containsString("Serbia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_543_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/belmopan")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Belize"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bz"))
                .body("[0].'alpha2Code'", containsString("BZ"))
                .body("[0].'alpha3Code'", containsString("BLZ"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("501"))
                .body("[0].'capital'", containsString("Belmopan"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("BZ"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Central America"))
                .body("[0].'population'", numberMatches(368310.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(17.25))
                .body("[0].'latlng'[1]", numberMatches(-88.75))
                .body("[0].'demonym'", containsString("Belizean"))
                .body("[0].'area'", numberMatches(22966.0))
                .body("[0].'gini'", numberMatches(53.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-06:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("GTM", "MEX"))
                .body("[0].'nativeName'", containsString("Belize"))
                .body("[0].'numericCode'", containsString("084"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BZD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "es"))
                .body("[0].'translations'.'de'", containsString("Belize"))
                .body("[0].'translations'.'es'", containsString("Belice"))
                .body("[0].'translations'.'fr'", containsString("Belize"))
                .body("[0].'translations'.'ja'", containsString("ベリーズ"))
                .body("[0].'translations'.'it'", containsString("Belize"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_544_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/bucharest?fields=_EM_11246_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_545_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/athens")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Greece"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gr"))
                .body("[0].'alpha2Code'", containsString("GR"))
                .body("[0].'alpha3Code'", containsString("GRC"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("30"))
                .body("[0].'capital'", containsString("Athens"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("GR", "Elláda", "Hellenic Republic", "Ελληνική Δημοκρατία"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(1.0846979E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(39.0))
                .body("[0].'latlng'[1]", numberMatches(22.0))
                .body("[0].'demonym'", containsString("Greek"))
                .body("[0].'area'", numberMatches(131990.0))
                .body("[0].'gini'", numberMatches(34.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("ALB", "BGR", "TUR", "MKD"))
                .body("[0].'nativeName'", containsString("Ελλάδα"))
                .body("[0].'numericCode'", containsString("300"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("el"))
                .body("[0].'translations'.'de'", containsString("Griechenland"))
                .body("[0].'translations'.'es'", containsString("Grecia"))
                .body("[0].'translations'.'fr'", containsString("Grèce"))
                .body("[0].'translations'.'ja'", containsString("ギリシャ"))
                .body("[0].'translations'.'it'", containsString("Grecia"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_546_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/92")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Pakistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".pk"))
                .body("[0].'alpha2Code'", containsString("PK"))
                .body("[0].'alpha3Code'", containsString("PAK"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("92"))
                .body("[0].'capital'", containsString("Islamabad"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("PK", "Pākistān", "Islamic Republic of Pakistan", "Islāmī Jumhūriya'eh Pākistān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(1.90668E8))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(30.0))
                .body("[0].'latlng'[1]", numberMatches(70.0))
                .body("[0].'demonym'", containsString("Pakistani"))
                .body("[0].'area'", numberMatches(881912.0))
                .body("[0].'gini'", numberMatches(30.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+05:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("AFG", "CHN", "IND", "IRN"))
                .body("[0].'nativeName'", containsString("Pakistan"))
                .body("[0].'numericCode'", containsString("586"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("PKR"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "ur"))
                .body("[0].'translations'.'de'", containsString("Pakistan"))
                .body("[0].'translations'.'es'", containsString("Pakistán"))
                .body("[0].'translations'.'fr'", containsString("Pakistan"))
                .body("[0].'translations'.'ja'", containsString("パキスタン"))
                .body("[0].'translations'.'it'", containsString("Pakistan"))
                .body("[0].'relevance'", containsString("2"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_547_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/douglas?fields=V")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_548_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/nihon?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Japan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".jp"))
                .body("[0].'alpha2Code'", containsString("JP"))
                .body("[0].'alpha3Code'", containsString("JPN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("81"))
                .body("[0].'capital'", containsString("Tokyo"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("JP", "Nippon", "Nihon"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Eastern Asia"))
                .body("[0].'population'", numberMatches(1.26865E8))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(36.0))
                .body("[0].'latlng'[1]", numberMatches(138.0))
                .body("[0].'demonym'", containsString("Japanese"))
                .body("[0].'area'", numberMatches(377930.0))
                .body("[0].'gini'", numberMatches(38.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+09:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("日本"))
                .body("[0].'numericCode'", containsString("392"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("JPY"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ja"))
                .body("[0].'translations'.'de'", containsString("Japan"))
                .body("[0].'translations'.'es'", containsString("Japón"))
                .body("[0].'translations'.'fr'", containsString("Japon"))
                .body("[0].'translations'.'ja'", containsString("日本"))
                .body("[0].'translations'.'it'", containsString("Giappone"))
                .body("[0].'relevance'", containsString("2.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_549_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/nijar?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Niger"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ne"))
                .body("[0].'alpha2Code'", containsString("NE"))
                .body("[0].'alpha3Code'", containsString("NER"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("227"))
                .body("[0].'capital'", containsString("Niamey"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("NE", "Nijar", "Republic of Niger", "République du Niger"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(1.9899E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(16.0))
                .body("[0].'latlng'[1]", numberMatches(8.0))
                .body("[0].'demonym'", containsString("Nigerien"))
                .body("[0].'area'", numberMatches(1267000.0))
                .body("[0].'gini'", numberMatches(34.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(7))
                .body("[0].'borders'", hasItems("DZA", "BEN", "BFA", "TCD", "LBY", "MLI", "NGA"))
                .body("[0].'nativeName'", containsString("Niger"))
                .body("[0].'numericCode'", containsString("562"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XOF"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Niger"))
                .body("[0].'translations'.'es'", containsString("Níger"))
                .body("[0].'translations'.'fr'", containsString("Niger"))
                .body("[0].'translations'.'ja'", containsString("ニジェール"))
                .body("[0].'translations'.'it'", containsString("Niger"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_550_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/saint%20john's")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Antigua and Barbuda"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ag"))
                .body("[0].'alpha2Code'", containsString("AG"))
                .body("[0].'alpha3Code'", containsString("ATG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Saint John's"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("AG"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(86295.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(17.05))
                .body("[0].'latlng'[1]", numberMatches(-61.8))
                .body("[0].'demonym'", containsString("Antiguan, Barbudan"))
                .body("[0].'area'", numberMatches(442.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Antigua and Barbuda"))
                .body("[0].'numericCode'", containsString("028"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XCD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Antigua und Barbuda"))
                .body("[0].'translations'.'es'", containsString("Antigua y Barbuda"))
                .body("[0].'translations'.'fr'", containsString("Antigua-et-Barbuda"))
                .body("[0].'translations'.'ja'", containsString("アンティグア・バーブーダ"))
                .body("[0].'translations'.'it'", containsString("Antigua e Barbuda"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_551_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/saint-denis")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Réunion"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".re"))
                .body("[0].'alpha2Code'", containsString("RE"))
                .body("[0].'alpha3Code'", containsString("REU"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("262"))
                .body("[0].'capital'", containsString("Saint-Denis"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("RE", "Reunion"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(840974.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-21.15))
                .body("[0].'latlng'[1]", numberMatches(55.5))
                .body("[0].'demonym'", containsString("French"))
                .body("[0].'area'", nullValue())
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("La Réunion"))
                .body("[0].'numericCode'", containsString("638"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Réunion"))
                .body("[0].'translations'.'es'", containsString("Reunión"))
                .body("[0].'translations'.'fr'", containsString("Réunion"))
                .body("[0].'translations'.'ja'", containsString("レユニオン"))
                .body("[0].'translations'.'it'", containsString("Riunione"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_552_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/bangui?fields=QYfZM")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_553_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/lesotho?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Lesotho"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ls"))
                .body("[0].'alpha2Code'", containsString("LS"))
                .body("[0].'alpha3Code'", containsString("LSO"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("266"))
                .body("[0].'capital'", containsString("Maseru"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("LS", "Kingdom of Lesotho", "Muso oa Lesotho"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Southern Africa"))
                .body("[0].'population'", numberMatches(2135000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-29.5))
                .body("[0].'latlng'[1]", numberMatches(28.5))
                .body("[0].'demonym'", containsString("Mosotho"))
                .body("[0].'area'", numberMatches(30355.0))
                .body("[0].'gini'", numberMatches(52.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("ZAF"))
                .body("[0].'nativeName'", containsString("Lesotho"))
                .body("[0].'numericCode'", containsString("426"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'", hasItems("LSL", "ZAR"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "st"))
                .body("[0].'translations'.'de'", containsString("Lesotho"))
                .body("[0].'translations'.'es'", containsString("Lesotho"))
                .body("[0].'translations'.'fr'", containsString("Lesotho"))
                .body("[0].'translations'.'ja'", containsString("レソト"))
                .body("[0].'translations'.'it'", containsString("Lesotho"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_554_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/san%20jose")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Costa Rica"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cr"))
                .body("[0].'alpha2Code'", containsString("CR"))
                .body("[0].'alpha3Code'", containsString("CRI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("506"))
                .body("[0].'capital'", containsString("San José"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("CR", "Republic of Costa Rica", "República de Costa Rica"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Central America"))
                .body("[0].'population'", numberMatches(4773130.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(10.0))
                .body("[0].'latlng'[1]", numberMatches(-84.0))
                .body("[0].'demonym'", containsString("Costa Rican"))
                .body("[0].'area'", numberMatches(51100.0))
                .body("[0].'gini'", numberMatches(50.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-06:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("NIC", "PAN"))
                .body("[0].'nativeName'", containsString("Costa Rica"))
                .body("[0].'numericCode'", containsString("188"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("CRC"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("es"))
                .body("[0].'translations'.'de'", containsString("Costa Rica"))
                .body("[0].'translations'.'es'", containsString("Costa Rica"))
                .body("[0].'translations'.'fr'", containsString("Costa Rica"))
                .body("[0].'translations'.'ja'", containsString("コスタリカ"))
                .body("[0].'translations'.'it'", containsString("Costa Rica"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_555_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/buenos%20aires?fields=dan2HwP10wukvfb")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_556_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/cairo?fields=name")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Egypt"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_557_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/canberra?fields=name")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Australia"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_558_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/76")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Kazakhstan"))
                .body("[0].'topLevelDomain'.size()", equalTo(2))
                .body("[0].'topLevelDomain'", hasItems(".kz", ".қаз"))
                .body("[0].'alpha2Code'", containsString("KZ"))
                .body("[0].'alpha3Code'", containsString("KAZ"))
                .body("[0].'callingCodes'.size()", equalTo(2))
                .body("[0].'callingCodes'", hasItems("76", "77"))
                .body("[0].'capital'", containsString("Astana"))
                .body("[0].'altSpellings'.size()", equalTo(8))
                .body("[0].'altSpellings'", hasItems("KZ", "Qazaqstan", "Казахстан", "Republic of Kazakhstan", "Қазақстан Республикасы", "Qazaqstan Respublïkası", "Республика Казахстан", "Respublika Kazakhstan"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Central Asia"))
                .body("[0].'population'", numberMatches(1.75412E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(48.0))
                .body("[0].'latlng'[1]", numberMatches(68.0))
                .body("[0].'demonym'", containsString("Kazakhstani"))
                .body("[0].'area'", numberMatches(2724900.0))
                .body("[0].'gini'", numberMatches(29.0))
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC+05:00", "UTC+06:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("CHN", "KGZ", "RUS", "TKM", "UZB"))
                .body("[0].'nativeName'", containsString("Қазақстан"))
                .body("[0].'numericCode'", containsString("398"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("KZT"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("kk", "ru"))
                .body("[0].'translations'.'de'", containsString("Kasachstan"))
                .body("[0].'translations'.'es'", containsString("Kazajistán"))
                .body("[0].'translations'.'fr'", containsString("Kazakhstan"))
                .body("[0].'translations'.'ja'", containsString("カザフスタン"))
                .body("[0].'translations'.'it'", containsString("Kazakistan"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_559_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/lang/thA?fields=_EM_11507_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_560_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/mx?" + 
                    "fields=_EM_11541_XYZ_&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_561_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/iranian")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Iran (Islamic Republic of)"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ir"))
                .body("[0].'alpha2Code'", containsString("IR"))
                .body("[0].'alpha3Code'", containsString("IRN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("98"))
                .body("[0].'capital'", containsString("Tehran"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("IR", "Islamic Republic of Iran", "Jomhuri-ye Eslāmi-ye Irān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(7.93699E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(32.0))
                .body("[0].'latlng'[1]", numberMatches(53.0))
                .body("[0].'demonym'", containsString("Iranian"))
                .body("[0].'area'", numberMatches(1648195.0))
                .body("[0].'gini'", numberMatches(38.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:30"))
                .body("[0].'borders'.size()", equalTo(7))
                .body("[0].'borders'", hasItems("AFG", "ARM", "AZE", "IRQ", "PAK", "TUR", "TKM"))
                .body("[0].'nativeName'", containsString("ایران"))
                .body("[0].'numericCode'", containsString("364"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("IRR"))
                .body("[0].'currencies'[0].'name'", containsString("Iranian rial"))
                .body("[0].'currencies'[0].'symbol'", containsString("﷼"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("fa"))
                .body("[0].'languages'[0].'iso639_2'", containsString("fas"))
                .body("[0].'languages'[0].'name'", containsString("Persian (Farsi)"))
                .body("[0].'languages'[0].'nativeName'", containsString("فارسی"))
                .body("[0].'translations'.'de'", containsString("Iran"))
                .body("[0].'translations'.'es'", containsString("Iran"))
                .body("[0].'translations'.'fr'", containsString("Iran"))
                .body("[0].'translations'.'ja'", containsString("イラン・イスラム共和国"))
                .body("[0].'translations'.'it'", nullValue())
                .body("[0].'translations'.'br'", containsString("Irã"))
                .body("[0].'translations'.'pt'", containsString("Irão"))
                .body("[0].'translations'.'nl'", containsString("Iran"))
                .body("[0].'translations'.'hr'", containsString("Iran"))
                .body("[0].'translations'.'fa'", containsString("ایران"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/irn.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("IRI"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_562_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/bt?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Bhutan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bt"))
                .body("[0].'alpha2Code'", containsString("BT"))
                .body("[0].'alpha3Code'", containsString("BTN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("975"))
                .body("[0].'capital'", containsString("Thimphu"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("BT", "Kingdom of Bhutan"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(763920.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(27.5))
                .body("[0].'latlng'[1]", numberMatches(90.5))
                .body("[0].'demonym'", containsString("Bhutanese"))
                .body("[0].'area'", numberMatches(38394.0))
                .body("[0].'gini'", numberMatches(38.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+06:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("CHN", "IND"))
                .body("[0].'nativeName'", containsString("ʼbrug-yul"))
                .body("[0].'numericCode'", containsString("064"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'", hasItems("BTN", "INR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("dz"))
                .body("[0].'translations'.'de'", containsString("Bhutan"))
                .body("[0].'translations'.'es'", containsString("Bután"))
                .body("[0].'translations'.'fr'", containsString("Bhoutan"))
                .body("[0].'translations'.'ja'", containsString("ブータン"))
                .body("[0].'translations'.'it'", containsString("Bhutan"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_563_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/81")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Japan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".jp"))
                .body("[0].'alpha2Code'", containsString("JP"))
                .body("[0].'alpha3Code'", containsString("JPN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("81"))
                .body("[0].'capital'", containsString("Tokyo"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("JP", "Nippon", "Nihon"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Eastern Asia"))
                .body("[0].'population'", numberMatches(1.26865E8))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(36.0))
                .body("[0].'latlng'[1]", numberMatches(138.0))
                .body("[0].'demonym'", containsString("Japanese"))
                .body("[0].'area'", numberMatches(377930.0))
                .body("[0].'gini'", numberMatches(38.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+09:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("日本"))
                .body("[0].'numericCode'", containsString("392"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("JPY"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ja"))
                .body("[0].'translations'.'de'", containsString("Japan"))
                .body("[0].'translations'.'es'", containsString("Japón"))
                .body("[0].'translations'.'fr'", containsString("Japon"))
                .body("[0].'translations'.'ja'", containsString("日本"))
                .body("[0].'translations'.'it'", containsString("Giappone"))
                .body("[0].'relevance'", containsString("2.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_564_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/850")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("North Korea"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".kp"))
                .body("[0].'alpha2Code'", containsString("KP"))
                .body("[0].'alpha3Code'", containsString("PRK"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("850"))
                .body("[0].'capital'", containsString("Pyongyang"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("KP", "Democratic People's Republic of Korea", "조선민주주의인민공화국", "Chosŏn Minjujuŭi Inmin Konghwaguk"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Eastern Asia"))
                .body("[0].'population'", numberMatches(2.5155E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(40.0))
                .body("[0].'latlng'[1]", numberMatches(127.0))
                .body("[0].'demonym'", containsString("North Korean"))
                .body("[0].'area'", numberMatches(120538.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+09:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("CHN", "KOR", "RUS"))
                .body("[0].'nativeName'", containsString("북한"))
                .body("[0].'numericCode'", containsString("408"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("KPW"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ko"))
                .body("[0].'translations'.'de'", containsString("Nordkorea"))
                .body("[0].'translations'.'es'", containsString("Corea del Norte"))
                .body("[0].'translations'.'fr'", containsString("Corée du Nord"))
                .body("[0].'translations'.'ja'", containsString("朝鮮民主主義人民共和国"))
                .body("[0].'translations'.'it'", containsString("Corea del Nord"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_565_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/ulan%20bator")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Mongolia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mn"))
                .body("[0].'alpha2Code'", containsString("MN"))
                .body("[0].'alpha3Code'", containsString("MNG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("976"))
                .body("[0].'capital'", containsString("Ulan Bator"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("MN"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Eastern Asia"))
                .body("[0].'population'", numberMatches(3031099.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(46.0))
                .body("[0].'latlng'[1]", numberMatches(105.0))
                .body("[0].'demonym'", containsString("Mongolian"))
                .body("[0].'area'", numberMatches(1564110.0))
                .body("[0].'gini'", numberMatches(36.5))
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC+07:00", "UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("CHN", "RUS"))
                .body("[0].'nativeName'", containsString("Монгол улс"))
                .body("[0].'numericCode'", containsString("496"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MNT"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("mn"))
                .body("[0].'translations'.'de'", containsString("Mongolei"))
                .body("[0].'translations'.'es'", containsString("Mongolia"))
                .body("[0].'translations'.'fr'", containsString("Mongolie"))
                .body("[0].'translations'.'ja'", containsString("モンゴル"))
                .body("[0].'translations'.'it'", containsString("Mongolia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_566_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/egyptian?fields=mpJeC0o0RsAkiO")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_567_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/248")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Seychelles"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sc"))
                .body("[0].'alpha2Code'", containsString("SC"))
                .body("[0].'alpha3Code'", containsString("SYC"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("248"))
                .body("[0].'capital'", containsString("Victoria"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("SC", "Republic of Seychelles", "Repiblik Sesel", "République des Seychelles"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(91400.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-4.58333333))
                .body("[0].'latlng'[1]", numberMatches(55.66666666))
                .body("[0].'demonym'", containsString("Seychellois"))
                .body("[0].'area'", numberMatches(452.0))
                .body("[0].'gini'", numberMatches(65.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Seychelles"))
                .body("[0].'numericCode'", containsString("690"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("SCR"))
                .body("[0].'currencies'[0].'name'", containsString("Seychellois rupee"))
                .body("[0].'currencies'[0].'symbol'", containsString("₨"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("fr"))
                .body("[0].'languages'[0].'iso639_2'", containsString("fra"))
                .body("[0].'languages'[0].'name'", containsString("French"))
                .body("[0].'languages'[0].'nativeName'", containsString("français"))
                .body("[0].'languages'[1].'iso639_1'", containsString("en"))
                .body("[0].'languages'[1].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[1].'name'", containsString("English"))
                .body("[0].'languages'[1].'nativeName'", containsString("English"))
                .body("[0].'translations'.'de'", containsString("Seychellen"))
                .body("[0].'translations'.'es'", containsString("Seychelles"))
                .body("[0].'translations'.'fr'", containsString("Seychelles"))
                .body("[0].'translations'.'ja'", containsString("セーシェル"))
                .body("[0].'translations'.'it'", containsString("Seychelles"))
                .body("[0].'translations'.'br'", containsString("Seicheles"))
                .body("[0].'translations'.'pt'", containsString("Seicheles"))
                .body("[0].'translations'.'nl'", containsString("Seychellen"))
                .body("[0].'translations'.'hr'", containsString("Sejšeli"))
                .body("[0].'translations'.'fa'", containsString("سیشل"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/syc.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[0].'cioc'", containsString("SEY"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_568_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/Polar?fields=_EM_11613_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_569_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/italian?fields=_EM_11621_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_570_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/za?" + 
                    "fields=8N0eqcpOoJi&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(7))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 4 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_571_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/tashkent?fields=0Zvx%3CnVz")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_572_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/doha?fields=V")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_573_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/dublin?fields=VW")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_574_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/lima?fields=keRXEf1mW0jsz0")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_575_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/schweiz")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Switzerland"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ch"))
                .body("[0].'alpha2Code'", containsString("CH"))
                .body("[0].'alpha3Code'", containsString("CHE"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("41"))
                .body("[0].'capital'", containsString("Bern"))
                .body("[0].'altSpellings'.size()", equalTo(6))
                .body("[0].'altSpellings'", hasItems("CH", "Swiss Confederation", "Schweiz", "Suisse", "Svizzera", "Svizra"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(8341600.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(47.0))
                .body("[0].'latlng'[1]", numberMatches(8.0))
                .body("[0].'demonym'", containsString("Swiss"))
                .body("[0].'area'", numberMatches(41284.0))
                .body("[0].'gini'", numberMatches(33.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("AUT", "FRA", "ITA", "LIE", "DEU"))
                .body("[0].'nativeName'", containsString("Schweiz"))
                .body("[0].'numericCode'", containsString("756"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("CHF"))
                .body("[0].'currencies'[0].'name'", containsString("Swiss franc"))
                .body("[0].'currencies'[0].'symbol'", containsString("Fr"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'[0].'iso639_1'", containsString("de"))
                .body("[0].'languages'[0].'iso639_2'", containsString("deu"))
                .body("[0].'languages'[0].'name'", containsString("German"))
                .body("[0].'languages'[0].'nativeName'", containsString("Deutsch"))
                .body("[0].'languages'[1].'iso639_1'", containsString("fr"))
                .body("[0].'languages'[1].'iso639_2'", containsString("fra"))
                .body("[0].'languages'[1].'name'", containsString("French"))
                .body("[0].'languages'[1].'nativeName'", containsString("français"))
                .body("[0].'languages'[2].'iso639_1'", containsString("it"))
                .body("[0].'languages'[2].'iso639_2'", containsString("ita"))
                .body("[0].'languages'[2].'name'", containsString("Italian"))
                .body("[0].'languages'[2].'nativeName'", containsString("Italiano"))
                .body("[0].'translations'.'de'", containsString("Schweiz"))
                .body("[0].'translations'.'es'", containsString("Suiza"))
                .body("[0].'translations'.'fr'", containsString("Suisse"))
                .body("[0].'translations'.'ja'", containsString("スイス"))
                .body("[0].'translations'.'it'", containsString("Svizzera"))
                .body("[0].'translations'.'br'", containsString("Suíça"))
                .body("[0].'translations'.'pt'", containsString("Suíça"))
                .body("[0].'translations'.'nl'", containsString("Zwitserland"))
                .body("[0].'translations'.'hr'", containsString("Švicarska"))
                .body("[0].'translations'.'fa'", containsString("سوئیس"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/che.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("EFTA"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("European Free Trade Association"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("SUI"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_576_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/sd")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Sudan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sd"))
                .body("[0].'alpha2Code'", containsString("SD"))
                .body("[0].'alpha3Code'", containsString("SDN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("249"))
                .body("[0].'capital'", containsString("Khartoum"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("SD", "Republic of the Sudan", "Jumhūrīyat as-Sūdān"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Northern Africa"))
                .body("[0].'population'", numberMatches(3.95987E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(15.0))
                .body("[0].'latlng'[1]", numberMatches(30.0))
                .body("[0].'demonym'", containsString("Sudanese"))
                .body("[0].'area'", numberMatches(1886068.0))
                .body("[0].'gini'", numberMatches(35.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(7))
                .body("[0].'borders'", hasItems("CAF", "TCD", "EGY", "ERI", "ETH", "LBY", "SSD"))
                .body("[0].'nativeName'", containsString("السودان"))
                .body("[0].'numericCode'", containsString("729"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("SDG"))
                .body("[0].'currencies'[0].'name'", containsString("Sudanese pound"))
                .body("[0].'currencies'[0].'symbol'", containsString("ج.س."))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("ar"))
                .body("[0].'languages'[0].'iso639_2'", containsString("ara"))
                .body("[0].'languages'[0].'name'", containsString("Arabic"))
                .body("[0].'languages'[0].'nativeName'", containsString("العربية"))
                .body("[0].'languages'[1].'iso639_1'", containsString("en"))
                .body("[0].'languages'[1].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[1].'name'", containsString("English"))
                .body("[0].'languages'[1].'nativeName'", containsString("English"))
                .body("[0].'translations'.'de'", containsString("Sudan"))
                .body("[0].'translations'.'es'", containsString("Sudán"))
                .body("[0].'translations'.'fr'", containsString("Soudan"))
                .body("[0].'translations'.'ja'", containsString("スーダン"))
                .body("[0].'translations'.'it'", containsString("Sudan"))
                .body("[0].'translations'.'br'", containsString("Sudão"))
                .body("[0].'translations'.'pt'", containsString("Sudão"))
                .body("[0].'translations'.'nl'", containsString("Soedan"))
                .body("[0].'translations'.'hr'", containsString("Sudan"))
                .body("[0].'translations'.'fa'", containsString("سودان"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/sdn.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(2))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[0].'regionalBlocs'[1].'acronym'", containsString("AL"))
                .body("[0].'regionalBlocs'[1].'name'", containsString("Arab League"))
                .body("[0].'regionalBlocs'[1].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[1].'otherNames'.size()", equalTo(3))
                .body("[0].'regionalBlocs'[1].'otherNames'", hasItems("جامعة الدول العربية", "Jāmiʻat ad-Duwal al-ʻArabīyah", "League of Arab States"))
                .body("[0].'cioc'", containsString("SUD"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_577_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/370?fields=TqbXv5MhE9")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_578_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/fo?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("Norfolk Island"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".nf"))
                .body("[0].'alpha2Code'", containsString("NF"))
                .body("[0].'alpha3Code'", containsString("NFK"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("672"))
                .body("[0].'capital'", containsString("Kingston"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("NF", "Territory of Norfolk Island", "Teratri of Norf'k Ailen"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Australia and New Zealand"))
                .body("[0].'population'", numberMatches(2302.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-29.03333333))
                .body("[0].'latlng'[1]", numberMatches(167.95))
                .body("[0].'demonym'", containsString("Norfolk Islander"))
                .body("[0].'area'", numberMatches(36.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+11:30"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Norfolk Island"))
                .body("[0].'numericCode'", containsString("574"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AUD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Norfolkinsel"))
                .body("[0].'translations'.'es'", containsString("Isla de Norfolk"))
                .body("[0].'translations'.'fr'", containsString("Île de Norfolk"))
                .body("[0].'translations'.'ja'", containsString("ノーフォーク島"))
                .body("[0].'translations'.'it'", containsString("Isola Norfolk"))
                .body("[0].'relevance'", containsString("0.5"))
                .body("[1].'name'", containsString("Faroe Islands"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".fo"))
                .body("[1].'alpha2Code'", containsString("FO"))
                .body("[1].'alpha3Code'", containsString("FRO"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("298"))
                .body("[1].'capital'", containsString("Tórshavn"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("FO", "Føroyar", "Færøerne"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Northern Europe"))
                .body("[1].'population'", numberMatches(48846.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(62.0))
                .body("[1].'latlng'[1]", numberMatches(-7.0))
                .body("[1].'demonym'", containsString("Faroese"))
                .body("[1].'area'", numberMatches(1393.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+00:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Føroyar"))
                .body("[1].'numericCode'", containsString("234"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("DKK"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("fo"))
                .body("[1].'translations'.'de'", containsString("Färöer-Inseln"))
                .body("[1].'translations'.'es'", containsString("Islas Faroe"))
                .body("[1].'translations'.'fr'", containsString("Îles Féroé"))
                .body("[1].'translations'.'ja'", containsString("フェロー諸島"))
                .body("[1].'translations'.'it'", containsString("Isole Far Oer"))
                .body("[1].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_579_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/senegal?fields=HZ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_580_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/serbia?fields=HZ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_581_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/380")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Ukraine"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ua"))
                .body("[0].'alpha2Code'", containsString("UA"))
                .body("[0].'alpha3Code'", containsString("UKR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("380"))
                .body("[0].'capital'", containsString("Kiev"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("UA", "Ukrayina"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(4.2692393E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(49.0))
                .body("[0].'latlng'[1]", numberMatches(32.0))
                .body("[0].'demonym'", containsString("Ukrainian"))
                .body("[0].'area'", numberMatches(603700.0))
                .body("[0].'gini'", numberMatches(26.4))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(7))
                .body("[0].'borders'", hasItems("BLR", "HUN", "MDA", "POL", "ROU", "RUS", "SVK"))
                .body("[0].'nativeName'", containsString("Україна"))
                .body("[0].'numericCode'", containsString("804"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("UAH"))
                .body("[0].'currencies'[0].'name'", containsString("Ukrainian hryvnia"))
                .body("[0].'currencies'[0].'symbol'", containsString("₴"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("uk"))
                .body("[0].'languages'[0].'iso639_2'", containsString("ukr"))
                .body("[0].'languages'[0].'name'", containsString("Ukrainian"))
                .body("[0].'languages'[0].'nativeName'", containsString("Українська"))
                .body("[0].'translations'.'de'", containsString("Ukraine"))
                .body("[0].'translations'.'es'", containsString("Ucrania"))
                .body("[0].'translations'.'fr'", containsString("Ukraine"))
                .body("[0].'translations'.'ja'", containsString("ウクライナ"))
                .body("[0].'translations'.'it'", containsString("Ucraina"))
                .body("[0].'translations'.'br'", containsString("Ucrânia"))
                .body("[0].'translations'.'pt'", containsString("Ucrânia"))
                .body("[0].'translations'.'nl'", containsString("Oekraïne"))
                .body("[0].'translations'.'hr'", containsString("Ukrajina"))
                .body("[0].'translations'.'fa'", containsString("وکراین"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/ukr.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("UKR"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_582_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/381?fields=mpY")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_583_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/guinea-bissauan?fields=5HH1Pu748JrH")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_584_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/tegucigalpa")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Honduras"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".hn"))
                .body("[0].'alpha2Code'", containsString("HN"))
                .body("[0].'alpha3Code'", containsString("HND"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("504"))
                .body("[0].'capital'", containsString("Tegucigalpa"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("HN", "Republic of Honduras", "República de Honduras"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Central America"))
                .body("[0].'population'", numberMatches(8725111.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(15.0))
                .body("[0].'latlng'[1]", numberMatches(-86.5))
                .body("[0].'demonym'", containsString("Honduran"))
                .body("[0].'area'", numberMatches(112492.0))
                .body("[0].'gini'", numberMatches(57.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-06:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("GTM", "SLV", "NIC"))
                .body("[0].'nativeName'", containsString("Honduras"))
                .body("[0].'numericCode'", containsString("340"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("HNL"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("es"))
                .body("[0].'translations'.'de'", containsString("Honduras"))
                .body("[0].'translations'.'es'", containsString("Honduras"))
                .body("[0].'translations'.'fr'", containsString("Honduras"))
                .body("[0].'translations'.'ja'", containsString("ホンジュラス"))
                .body("[0].'translations'.'it'", containsString("Honduras"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_585_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/the%20valley")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Anguilla"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ai"))
                .body("[0].'alpha2Code'", containsString("AI"))
                .body("[0].'alpha3Code'", containsString("AIA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("The Valley"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("AI"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(13452.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(18.25))
                .body("[0].'latlng'[1]", numberMatches(-63.16666666))
                .body("[0].'demonym'", containsString("Anguillian"))
                .body("[0].'area'", numberMatches(91.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Anguilla"))
                .body("[0].'numericCode'", containsString("660"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XCD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Anguilla"))
                .body("[0].'translations'.'es'", containsString("Anguilla"))
                .body("[0].'translations'.'fr'", containsString("Anguilla"))
                .body("[0].'translations'.'ja'", containsString("アンギラ"))
                .body("[0].'translations'.'it'", containsString("Anguilla"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_586_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/gs?" + 
                    "fields=18FLB4jIqxig&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_587_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/pyongyang?fields=QYfZK")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_588_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/quito?fields=QYfXK")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_589_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/Polar?fields=_EM_12002_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_590_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/vatican?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Holy See"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".va"))
                .body("[0].'alpha2Code'", containsString("VA"))
                .body("[0].'alpha3Code'", containsString("VAT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("379"))
                .body("[0].'capital'", containsString("Rome"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("Sancta Sedes", "Vatican", "The Vatican"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(451.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(41.9))
                .body("[0].'latlng'[1]", numberMatches(12.45))
                .body("[0].'demonym'", containsString(""))
                .body("[0].'area'", numberMatches(0.44))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("ITA"))
                .body("[0].'nativeName'", containsString("Sancta Sedes"))
                .body("[0].'numericCode'", nullValue())
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(4))
                .body("[0].'languages'", hasItems("la", "it", "fr", "de"))
                .body("[0].'translations'.'de'", containsString("Heiliger Stuhl"))
                .body("[0].'translations'.'es'", containsString("Santa Sede"))
                .body("[0].'translations'.'fr'", containsString("voir Saint"))
                .body("[0].'translations'.'ja'", containsString("聖座"))
                .body("[0].'translations'.'it'", containsString("Santa Sede"))
                .body("[0].'relevance'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_591_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/avarua")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Cook Islands"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ck"))
                .body("[0].'alpha2Code'", containsString("CK"))
                .body("[0].'alpha3Code'", containsString("COK"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("682"))
                .body("[0].'capital'", containsString("Avarua"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("CK", "Kūki 'Āirani"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Polynesia"))
                .body("[0].'population'", numberMatches(14974.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-21.23333333))
                .body("[0].'latlng'[1]", numberMatches(-159.76666666))
                .body("[0].'demonym'", containsString("Cook Islander"))
                .body("[0].'area'", numberMatches(236.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-10:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Cook Islands"))
                .body("[0].'numericCode'", containsString("184"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("NZD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Cookinseln"))
                .body("[0].'translations'.'es'", containsString("Islas Cook"))
                .body("[0].'translations'.'fr'", containsString("Îles Cook"))
                .body("[0].'translations'.'ja'", containsString("クック諸島"))
                .body("[0].'translations'.'it'", containsString("Isole Cook"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_592_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/383?fields=LhL")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_593_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/385?fields=LhL")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_594_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/honduran?fields=_EM_12084_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_595_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/palau?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Palau"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".pw"))
                .body("[0].'alpha2Code'", containsString("PW"))
                .body("[0].'alpha3Code'", containsString("PLW"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("680"))
                .body("[0].'capital'", containsString("Ngerulmud"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("PW", "Republic of Palau", "Beluu er a Belau"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Micronesia"))
                .body("[0].'population'", numberMatches(20901.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(7.5))
                .body("[0].'latlng'[1]", numberMatches(134.5))
                .body("[0].'demonym'", containsString("Palauan"))
                .body("[0].'area'", numberMatches(459.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+09:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Palau"))
                .body("[0].'numericCode'", containsString("585"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Palau"))
                .body("[0].'translations'.'es'", containsString("Palau"))
                .body("[0].'translations'.'fr'", containsString("Palaos"))
                .body("[0].'translations'.'ja'", containsString("パラオ"))
                .body("[0].'translations'.'it'", containsString("Palau"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_596_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/234")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Nigeria"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ng"))
                .body("[0].'alpha2Code'", containsString("NG"))
                .body("[0].'alpha3Code'", containsString("NGA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("234"))
                .body("[0].'capital'", containsString("Abuja"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("NG", "Nijeriya", "Naíjíríà", "Federal Republic of Nigeria"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(1.82202E8))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(10.0))
                .body("[0].'latlng'[1]", numberMatches(8.0))
                .body("[0].'demonym'", containsString("Nigerian"))
                .body("[0].'area'", numberMatches(923768.0))
                .body("[0].'gini'", numberMatches(48.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("BEN", "CMR", "TCD", "NER"))
                .body("[0].'nativeName'", containsString("Nigeria"))
                .body("[0].'numericCode'", containsString("566"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("NGN"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Nigeria"))
                .body("[0].'translations'.'es'", containsString("Nigeria"))
                .body("[0].'translations'.'fr'", containsString("Nigéria"))
                .body("[0].'translations'.'ja'", containsString("ナイジェリア"))
                .body("[0].'translations'.'it'", containsString("Nigeria"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_597_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/EEU?fields=_EM_12121_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_598_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/swatini?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Swaziland"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sz"))
                .body("[0].'alpha2Code'", containsString("SZ"))
                .body("[0].'alpha3Code'", containsString("SWZ"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("268"))
                .body("[0].'capital'", containsString("Lobamba"))
                .body("[0].'altSpellings'.size()", equalTo(6))
                .body("[0].'altSpellings'", hasItems("SZ", "weSwatini", "Swatini", "Ngwane", "Kingdom of Swaziland", "Umbuso waseSwatini"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Southern Africa"))
                .body("[0].'population'", numberMatches(1119375.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-26.5))
                .body("[0].'latlng'[1]", numberMatches(31.5))
                .body("[0].'demonym'", containsString("Swazi"))
                .body("[0].'area'", numberMatches(17364.0))
                .body("[0].'gini'", numberMatches(51.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("MOZ", "ZAF"))
                .body("[0].'nativeName'", containsString("Swaziland"))
                .body("[0].'numericCode'", containsString("748"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("SZL"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "ss"))
                .body("[0].'translations'.'de'", containsString("Swasiland"))
                .body("[0].'translations'.'es'", containsString("Suazilandia"))
                .body("[0].'translations'.'fr'", containsString("Swaziland"))
                .body("[0].'translations'.'ja'", containsString("スワジランド"))
                .body("[0].'translations'.'it'", containsString("Swaziland"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_599_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/swaziland?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Swaziland"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sz"))
                .body("[0].'alpha2Code'", containsString("SZ"))
                .body("[0].'alpha3Code'", containsString("SWZ"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("268"))
                .body("[0].'capital'", containsString("Lobamba"))
                .body("[0].'altSpellings'.size()", equalTo(6))
                .body("[0].'altSpellings'", hasItems("SZ", "weSwatini", "Swatini", "Ngwane", "Kingdom of Swaziland", "Umbuso waseSwatini"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Southern Africa"))
                .body("[0].'population'", numberMatches(1119375.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-26.5))
                .body("[0].'latlng'[1]", numberMatches(31.5))
                .body("[0].'demonym'", containsString("Swazi"))
                .body("[0].'area'", numberMatches(17364.0))
                .body("[0].'gini'", numberMatches(51.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("MOZ", "ZAF"))
                .body("[0].'nativeName'", containsString("Swaziland"))
                .body("[0].'numericCode'", containsString("748"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("SZL"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "ss"))
                .body("[0].'translations'.'de'", containsString("Swasiland"))
                .body("[0].'translations'.'es'", containsString("Suazilandia"))
                .body("[0].'translations'.'fr'", containsString("Swaziland"))
                .body("[0].'translations'.'ja'", containsString("スワジランド"))
                .body("[0].'translations'.'it'", containsString("Swaziland"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_600_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/gt?" + 
                    "fields=18FLB4jIqxig&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_601_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/stanley")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Falkland Islands"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".fk"))
                .body("[0].'alpha2Code'", containsString("FK"))
                .body("[0].'alpha3Code'", containsString("FLK"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("500"))
                .body("[0].'capital'", containsString("Stanley"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("FK", "Islas Malvinas"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(3000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-51.75))
                .body("[0].'latlng'[1]", numberMatches(-59.0))
                .body("[0].'demonym'", containsString("Falkland Islander"))
                .body("[0].'area'", numberMatches(12173.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Falkland Islands"))
                .body("[0].'numericCode'", containsString("238"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("FKP"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Falklandinseln"))
                .body("[0].'translations'.'es'", containsString("Islas Malvinas"))
                .body("[0].'translations'.'fr'", containsString("Îles Malouines"))
                .body("[0].'translations'.'ja'", containsString("フォークランド（マルビナス）諸島"))
                .body("[0].'translations'.'it'", containsString("Isole Falkland o Isole Malvine"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_602_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/fiji%20ganarajya?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Fiji"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".fj"))
                .body("[0].'alpha2Code'", containsString("FJ"))
                .body("[0].'alpha3Code'", containsString("FJI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("679"))
                .body("[0].'capital'", containsString("Suva"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("FJ", "Viti", "Republic of Fiji", "Matanitu ko Viti", "Fijī Gaṇarājya"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Melanesia"))
                .body("[0].'population'", numberMatches(859178.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-18.0))
                .body("[0].'latlng'[1]", numberMatches(175.0))
                .body("[0].'demonym'", containsString("Fijian"))
                .body("[0].'area'", numberMatches(18272.0))
                .body("[0].'gini'", numberMatches(42.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+12:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Fiji"))
                .body("[0].'numericCode'", containsString("242"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("FJD"))
                .body("[0].'languages'.size()", equalTo(4))
                .body("[0].'languages'", hasItems("en", "fj", "hi", "ur"))
                .body("[0].'translations'.'de'", containsString("Fidschi"))
                .body("[0].'translations'.'es'", containsString("Fiyi"))
                .body("[0].'translations'.'fr'", containsString("Fidji"))
                .body("[0].'translations'.'ja'", containsString("フィジー"))
                .body("[0].'translations'.'it'", containsString("Figi"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_603_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/teta%20volivia?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Bolivia (Plurinational State of)"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bo"))
                .body("[0].'alpha2Code'", containsString("BO"))
                .body("[0].'alpha3Code'", containsString("BOL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("591"))
                .body("[0].'capital'", containsString("Sucre"))
                .body("[0].'altSpellings'.size()", equalTo(8))
                .body("[0].'altSpellings'", hasItems("BO", "Buliwya", "Wuliwya", "Plurinational State of Bolivia", "Estado Plurinacional de Bolivia", "Buliwya Mamallaqta", "Wuliwya Suyu", "Tetã Volívia"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(1.0985059E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-17.0))
                .body("[0].'latlng'[1]", numberMatches(-65.0))
                .body("[0].'demonym'", containsString("Bolivian"))
                .body("[0].'area'", numberMatches(1098581.0))
                .body("[0].'gini'", numberMatches(56.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("ARG", "BRA", "CHL", "PRY", "PER"))
                .body("[0].'nativeName'", containsString("Bolivia"))
                .body("[0].'numericCode'", containsString("068"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("BOB"))
                .body("[0].'currencies'[0].'name'", containsString("Bolivian boliviano"))
                .body("[0].'currencies'[0].'symbol'", containsString("Bs."))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'[0].'iso639_1'", containsString("es"))
                .body("[0].'languages'[0].'iso639_2'", containsString("spa"))
                .body("[0].'languages'[0].'name'", containsString("Spanish"))
                .body("[0].'languages'[0].'nativeName'", containsString("Español"))
                .body("[0].'languages'[1].'iso639_1'", containsString("ay"))
                .body("[0].'languages'[1].'iso639_2'", containsString("aym"))
                .body("[0].'languages'[1].'name'", containsString("Aymara"))
                .body("[0].'languages'[1].'nativeName'", containsString("aymar aru"))
                .body("[0].'languages'[2].'iso639_1'", containsString("qu"))
                .body("[0].'languages'[2].'iso639_2'", containsString("que"))
                .body("[0].'languages'[2].'name'", containsString("Quechua"))
                .body("[0].'languages'[2].'nativeName'", containsString("Runa Simi"))
                .body("[0].'translations'.'de'", containsString("Bolivien"))
                .body("[0].'translations'.'es'", containsString("Bolivia"))
                .body("[0].'translations'.'fr'", containsString("Bolivie"))
                .body("[0].'translations'.'ja'", containsString("ボリビア多民族国"))
                .body("[0].'translations'.'it'", containsString("Bolivia"))
                .body("[0].'translations'.'br'", containsString("Bolívia"))
                .body("[0].'translations'.'pt'", containsString("Bolívia"))
                .body("[0].'translations'.'nl'", containsString("Bolivia"))
                .body("[0].'translations'.'hr'", containsString("Bolivija"))
                .body("[0].'translations'.'fa'", containsString("بولیوی"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/bol.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("USAN"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Union of South American Nations"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(3))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'", hasItems("UNASUR", "UNASUL", "UZAN"))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(4))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("Unión de Naciones Suramericanas", "União de Nações Sul-Americanas", "Unie van Zuid-Amerikaanse Naties", "South American Union"))
                .body("[0].'cioc'", containsString("BOL"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_604_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/tf?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("French Southern Territories"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".tf"))
                .body("[0].'alpha2Code'", containsString("TF"))
                .body("[0].'alpha3Code'", containsString("ATF"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("262"))
                .body("[0].'capital'", containsString("Port-aux-Français"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("TF"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Southern Africa"))
                .body("[0].'population'", numberMatches(140.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-49.25))
                .body("[0].'latlng'[1]", numberMatches(69.167))
                .body("[0].'demonym'", containsString("French"))
                .body("[0].'area'", numberMatches(7747.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+05:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Territoire des Terres australes et antarctiques françaises"))
                .body("[0].'numericCode'", containsString("260"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("EUR"))
                .body("[0].'currencies'[0].'name'", containsString("Euro"))
                .body("[0].'currencies'[0].'symbol'", containsString("€"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("fr"))
                .body("[0].'languages'[0].'iso639_2'", containsString("fra"))
                .body("[0].'languages'[0].'name'", containsString("French"))
                .body("[0].'languages'[0].'nativeName'", containsString("français"))
                .body("[0].'translations'.'de'", containsString("Französische Süd- und Antarktisgebiete"))
                .body("[0].'translations'.'es'", containsString("Tierras Australes y Antárticas Francesas"))
                .body("[0].'translations'.'fr'", containsString("Terres australes et antarctiques françaises"))
                .body("[0].'translations'.'ja'", containsString("フランス領南方・南極地域"))
                .body("[0].'translations'.'it'", containsString("Territori Francesi del Sud"))
                .body("[0].'translations'.'br'", containsString("Terras Austrais e Antárticas Francesas"))
                .body("[0].'translations'.'pt'", containsString("Terras Austrais e Antárticas Francesas"))
                .body("[0].'translations'.'nl'", containsString("Franse Gebieden in de zuidelijke Indische Oceaan"))
                .body("[0].'translations'.'hr'", containsString("Francuski južni i antarktički teritoriji"))
                .body("[0].'translations'.'fa'", containsString("سرزمین‌های جنوبی و جنوبگانی فرانسه"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/atf.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[0].'cioc'", containsString(""));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_605_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/bangkok")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Thailand"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".th"))
                .body("[0].'alpha2Code'", containsString("TH"))
                .body("[0].'alpha3Code'", containsString("THA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("66"))
                .body("[0].'capital'", containsString("Bangkok"))
                .body("[0].'altSpellings'.size()", equalTo(6))
                .body("[0].'altSpellings'", hasItems("TH", "Prathet", "Thai", "Kingdom of Thailand", "ราชอาณาจักรไทย", "Ratcha Anachak Thai"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("South-Eastern Asia"))
                .body("[0].'population'", numberMatches(6.5104E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(15.0))
                .body("[0].'latlng'[1]", numberMatches(100.0))
                .body("[0].'demonym'", containsString("Thai"))
                .body("[0].'area'", numberMatches(513120.0))
                .body("[0].'gini'", numberMatches(40.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+07:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("MMR", "KHM", "LAO", "MYS"))
                .body("[0].'nativeName'", containsString("ประเทศไทย"))
                .body("[0].'numericCode'", containsString("764"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("THB"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("th"))
                .body("[0].'translations'.'de'", containsString("Thailand"))
                .body("[0].'translations'.'es'", containsString("Tailandia"))
                .body("[0].'translations'.'fr'", containsString("Thaïlande"))
                .body("[0].'translations'.'ja'", containsString("タイ"))
                .body("[0].'translations'.'it'", containsString("Tailandia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_606_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/tg?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Togo"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".tg"))
                .body("[0].'alpha2Code'", containsString("TG"))
                .body("[0].'alpha3Code'", containsString("TGO"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("228"))
                .body("[0].'capital'", containsString("Lomé"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("TG", "Togolese", "Togolese Republic", "République Togolaise"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(7143000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(8.0))
                .body("[0].'latlng'[1]", numberMatches(1.16666666))
                .body("[0].'demonym'", containsString("Togolese"))
                .body("[0].'area'", numberMatches(56785.0))
                .body("[0].'gini'", numberMatches(34.4))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("BEN", "BFA", "GHA"))
                .body("[0].'nativeName'", containsString("Togo"))
                .body("[0].'numericCode'", containsString("768"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("XOF"))
                .body("[0].'currencies'[0].'name'", containsString("West African CFA franc"))
                .body("[0].'currencies'[0].'symbol'", containsString("Fr"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("fr"))
                .body("[0].'languages'[0].'iso639_2'", containsString("fra"))
                .body("[0].'languages'[0].'name'", containsString("French"))
                .body("[0].'languages'[0].'nativeName'", containsString("français"))
                .body("[0].'translations'.'de'", containsString("Togo"))
                .body("[0].'translations'.'es'", containsString("Togo"))
                .body("[0].'translations'.'fr'", containsString("Togo"))
                .body("[0].'translations'.'ja'", containsString("トーゴ"))
                .body("[0].'translations'.'it'", containsString("Togo"))
                .body("[0].'translations'.'br'", containsString("Togo"))
                .body("[0].'translations'.'pt'", containsString("Togo"))
                .body("[0].'translations'.'nl'", containsString("Togo"))
                .body("[0].'translations'.'hr'", containsString("Togo"))
                .body("[0].'translations'.'fa'", containsString("توگو"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/tgo.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[0].'cioc'", containsString("TOG"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_607_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/598?fields=LZi2rDjtdx")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_608_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/V?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(41))
                .body("[0].'name'", containsString("Bolivia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bo"))
                .body("[0].'alpha2Code'", containsString("BO"))
                .body("[0].'alpha3Code'", containsString("BOL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("591"))
                .body("[0].'capital'", containsString("Sucre"))
                .body("[0].'altSpellings'.size()", equalTo(8))
                .body("[0].'altSpellings'", hasItems("BO", "Buliwya", "Wuliwya", "Plurinational State of Bolivia", "Estado Plurinacional de Bolivia", "Buliwya Mamallaqta", "Wuliwya Suyu", "Tetã Volívia"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(1.1410651E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-17.0))
                .body("[0].'latlng'[1]", numberMatches(-65.0))
                .body("[0].'demonym'", containsString("Bolivian"))
                .body("[0].'area'", numberMatches(1098581.0))
                .body("[0].'gini'", numberMatches(56.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("ARG", "BRA", "CHL", "PRY", "PER"))
                .body("[0].'nativeName'", containsString("Bolivia"))
                .body("[0].'numericCode'", containsString("068"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'", hasItems("BOB", "BOV"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("es", "ay", "qu"))
                .body("[0].'translations'.'de'", containsString("Bolivien"))
                .body("[0].'translations'.'es'", containsString("Bolivia"))
                .body("[0].'translations'.'fr'", containsString("Bolivie"))
                .body("[0].'translations'.'ja'", containsString("ボリビア多民族国"))
                .body("[0].'translations'.'it'", containsString("Bolivia"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Bosnia and Herzegovina"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ba"))
                .body("[1].'alpha2Code'", containsString("BA"))
                .body("[1].'alpha3Code'", containsString("BIH"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("387"))
                .body("[1].'capital'", containsString("Sarajevo"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("BA", "Bosnia-Herzegovina", "Босна и Херцеговина"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Southern Europe"))
                .body("[1].'population'", numberMatches(3791622.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(44.0))
                .body("[1].'latlng'[1]", numberMatches(18.0))
                .body("[1].'demonym'", containsString("Bosnian, Herzegovinian"))
                .body("[1].'area'", numberMatches(51209.0))
                .body("[1].'gini'", numberMatches(36.2))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+01:00"))
                .body("[1].'borders'.size()", equalTo(3))
                .body("[1].'borders'", hasItems("HRV", "MNE", "SRB"))
                .body("[1].'nativeName'", containsString("Bosna i Hercegovina"))
                .body("[1].'numericCode'", containsString("070"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("BAM"))
                .body("[1].'languages'.size()", equalTo(3))
                .body("[1].'languages'", hasItems("bs", "hr", "sr"))
                .body("[1].'translations'.'de'", containsString("Bosnien und Herzegowina"))
                .body("[1].'translations'.'es'", containsString("Bosnia y Herzegovina"))
                .body("[1].'translations'.'fr'", containsString("Bosnie-Herzégovine"))
                .body("[1].'translations'.'ja'", containsString("ボスニア・ヘルツェゴビナ"))
                .body("[1].'translations'.'it'", containsString("Bosnia ed Erzegovina"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Bouvet Island"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".bv"))
                .body("[2].'alpha2Code'", containsString("BV"))
                .body("[2].'alpha3Code'", containsString("BVT"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("47"))
                .body("[2].'capital'", containsString(""))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("BV", "Bouvetøya", "Bouvet-øya"))
                .body("[2].'region'", containsString(""))
                .body("[2].'subregion'", containsString(""))
                .body("[2].'population'", numberMatches(0.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(-54.43333333))
                .body("[2].'latlng'[1]", numberMatches(3.4))
                .body("[2].'demonym'", containsString(""))
                .body("[2].'area'", numberMatches(49.0))
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(0))
                .body("[2].'nativeName'", containsString("Bouvetøya"))
                .body("[2].'numericCode'", containsString("074"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("NOK"))
                .body("[2].'languages'.size()", equalTo(0))
                .body("[2].'translations'.'de'", containsString("Bouvetinsel"))
                .body("[2].'translations'.'es'", containsString("Isla Bouvet"))
                .body("[2].'translations'.'fr'", containsString("Île Bouvet"))
                .body("[2].'translations'.'ja'", containsString("ブーベ島"))
                .body("[2].'translations'.'it'", containsString("Isola Bouvet"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 38 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_609_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/lusaka?fields=A")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_610_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/re?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(143))
                .body("[0].'name'", containsString("Bonaire"))
                .body("[0].'topLevelDomain'.size()", equalTo(2))
                .body("[0].'topLevelDomain'", hasItems(".an", ".nl"))
                .body("[0].'alpha2Code'", containsString("BQ"))
                .body("[0].'alpha3Code'", containsString("BES"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("599"))
                .body("[0].'capital'", containsString("Kralendijk"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("BQ", "Boneiru"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(17408.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(12.15))
                .body("[0].'latlng'[1]", numberMatches(-68.266667))
                .body("[0].'demonym'", containsString("Dutch"))
                .body("[0].'area'", numberMatches(294.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Bonaire"))
                .body("[0].'numericCode'", containsString("535"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("nl"))
                .body("[0].'translations'.'de'", nullValue())
                .body("[0].'translations'.'es'", nullValue())
                .body("[0].'translations'.'fr'", nullValue())
                .body("[0].'translations'.'ja'", nullValue())
                .body("[0].'translations'.'it'", nullValue())
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Central African Republic"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".cf"))
                .body("[1].'alpha2Code'", containsString("CF"))
                .body("[1].'alpha3Code'", containsString("CAF"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("236"))
                .body("[1].'capital'", containsString("Bangui"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("CF", "Central African Republic", "République centrafricaine"))
                .body("[1].'region'", containsString("Africa"))
                .body("[1].'subregion'", containsString("Middle Africa"))
                .body("[1].'population'", numberMatches(4900000.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(7.0))
                .body("[1].'latlng'[1]", numberMatches(21.0))
                .body("[1].'demonym'", containsString("Central African"))
                .body("[1].'area'", numberMatches(622984.0))
                .body("[1].'gini'", numberMatches(56.3))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+01:00"))
                .body("[1].'borders'.size()", equalTo(6))
                .body("[1].'borders'", hasItems("CMR", "TCD", "COD", "COG", "SSD", "SDN"))
                .body("[1].'nativeName'", containsString("Ködörösêse tî Bêafrîka"))
                .body("[1].'numericCode'", containsString("140"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("XAF"))
                .body("[1].'languages'.size()", equalTo(2))
                .body("[1].'languages'", hasItems("fr", "sg"))
                .body("[1].'translations'.'de'", containsString("Zentralafrikanische Republik"))
                .body("[1].'translations'.'es'", containsString("República Centroafricana"))
                .body("[1].'translations'.'fr'", containsString("République centrafricaine"))
                .body("[1].'translations'.'ja'", containsString("中央アフリカ共和国"))
                .body("[1].'translations'.'it'", containsString("Repubblica Centrafricana"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Republic of the Congo"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".cg"))
                .body("[2].'alpha2Code'", containsString("CG"))
                .body("[2].'alpha3Code'", containsString("COG"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("242"))
                .body("[2].'capital'", containsString("Brazzaville"))
                .body("[2].'altSpellings'.size()", equalTo(2))
                .body("[2].'altSpellings'", hasItems("CG", "Congo-Brazzaville"))
                .body("[2].'region'", containsString("Africa"))
                .body("[2].'subregion'", containsString("Middle Africa"))
                .body("[2].'population'", numberMatches(4620000.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(-1.0))
                .body("[2].'latlng'[1]", numberMatches(15.0))
                .body("[2].'demonym'", containsString("Congolese"))
                .body("[2].'area'", numberMatches(342000.0))
                .body("[2].'gini'", numberMatches(47.3))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(5))
                .body("[2].'borders'", hasItems("AGO", "CMR", "CAF", "COD", "GAB"))
                .body("[2].'nativeName'", containsString("République du Congo"))
                .body("[2].'numericCode'", containsString("178"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("XAF"))
                .body("[2].'languages'.size()", equalTo(2))
                .body("[2].'languages'", hasItems("fr", "ln"))
                .body("[2].'translations'.'de'", containsString("Kongo"))
                .body("[2].'translations'.'es'", containsString("Congo"))
                .body("[2].'translations'.'fr'", containsString("Congo"))
                .body("[2].'translations'.'ja'", containsString("コンゴ共和国"))
                .body("[2].'translations'.'it'", containsString("Congo"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 140 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_611_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/taiwanese?fields=R")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_612_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/malo%20saʻoloto%20tutoʻatasi%20o%20samoa?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Samoa"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ws"))
                .body("[0].'alpha2Code'", containsString("WS"))
                .body("[0].'alpha3Code'", containsString("WSM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("685"))
                .body("[0].'capital'", containsString("Apia"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("WS", "Independent State of Samoa", "Malo Saʻoloto Tutoʻatasi o Sāmoa"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Polynesia"))
                .body("[0].'population'", numberMatches(187820.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-13.58333333))
                .body("[0].'latlng'[1]", numberMatches(-172.33333333))
                .body("[0].'demonym'", containsString("Samoan"))
                .body("[0].'area'", numberMatches(2842.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+13:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Samoa"))
                .body("[0].'numericCode'", containsString("882"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("WST"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("sm", "en"))
                .body("[0].'translations'.'de'", containsString("Samoa"))
                .body("[0].'translations'.'es'", containsString("Samoa"))
                .body("[0].'translations'.'fr'", containsString("Samoa"))
                .body("[0].'translations'.'ja'", containsString("サモア"))
                .body("[0].'translations'.'it'", containsString("Samoa"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_613_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/240")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Equatorial Guinea"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gq"))
                .body("[0].'alpha2Code'", containsString("GQ"))
                .body("[0].'alpha3Code'", containsString("GNQ"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("240"))
                .body("[0].'capital'", containsString("Malabo"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("GQ", "Republic of Equatorial Guinea", "República de Guinea Ecuatorial", "République de Guinée équatoriale", "República da Guiné Equatorial"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Middle Africa"))
                .body("[0].'population'", numberMatches(1430000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(2.0))
                .body("[0].'latlng'[1]", numberMatches(10.0))
                .body("[0].'demonym'", containsString("Equatorial Guinean"))
                .body("[0].'area'", numberMatches(28051.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("CMR", "GAB"))
                .body("[0].'nativeName'", containsString("Guinea Ecuatorial"))
                .body("[0].'numericCode'", containsString("226"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XAF"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("es", "fr"))
                .body("[0].'translations'.'de'", containsString("Äquatorial-Guinea"))
                .body("[0].'translations'.'es'", containsString("Guinea Ecuatorial"))
                .body("[0].'translations'.'fr'", containsString("Guinée-Équatoriale"))
                .body("[0].'translations'.'ja'", containsString("赤道ギニア"))
                .body("[0].'translations'.'it'", containsString("Guinea Equatoriale"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_614_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/241")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Gabon"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ga"))
                .body("[0].'alpha2Code'", containsString("GA"))
                .body("[0].'alpha3Code'", containsString("GAB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("241"))
                .body("[0].'capital'", containsString("Libreville"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("GA", "Gabonese Republic", "République Gabonaise"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Middle Africa"))
                .body("[0].'population'", numberMatches(1725000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-1.0))
                .body("[0].'latlng'[1]", numberMatches(11.75))
                .body("[0].'demonym'", containsString("Gabonese"))
                .body("[0].'area'", numberMatches(267668.0))
                .body("[0].'gini'", numberMatches(41.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("CMR", "COG", "GNQ"))
                .body("[0].'nativeName'", containsString("Gabon"))
                .body("[0].'numericCode'", containsString("266"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XAF"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Gabun"))
                .body("[0].'translations'.'es'", containsString("Gabón"))
                .body("[0].'translations'.'fr'", containsString("Gabon"))
                .body("[0].'translations'.'ja'", containsString("ガボン"))
                .body("[0].'translations'.'it'", containsString("Gabon"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_615_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/242")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Republic of the Congo"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cg"))
                .body("[0].'alpha2Code'", containsString("CG"))
                .body("[0].'alpha3Code'", containsString("COG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("242"))
                .body("[0].'capital'", containsString("Brazzaville"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("CG", "Congo-Brazzaville"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Middle Africa"))
                .body("[0].'population'", numberMatches(4620000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-1.0))
                .body("[0].'latlng'[1]", numberMatches(15.0))
                .body("[0].'demonym'", containsString("Congolese"))
                .body("[0].'area'", numberMatches(342000.0))
                .body("[0].'gini'", numberMatches(47.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("AGO", "CMR", "CAF", "COD", "GAB"))
                .body("[0].'nativeName'", containsString("République du Congo"))
                .body("[0].'numericCode'", containsString("178"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XAF"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fr", "ln"))
                .body("[0].'translations'.'de'", containsString("Kongo"))
                .body("[0].'translations'.'es'", containsString("Congo"))
                .body("[0].'translations'.'fr'", containsString("Congo"))
                .body("[0].'translations'.'ja'", containsString("コンゴ共和国"))
                .body("[0].'translations'.'it'", containsString("Congo"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_616_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/apia")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Samoa"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ws"))
                .body("[0].'alpha2Code'", containsString("WS"))
                .body("[0].'alpha3Code'", containsString("WSM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("685"))
                .body("[0].'capital'", containsString("Apia"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("WS", "Independent State of Samoa", "Malo Saʻoloto Tutoʻatasi o Sāmoa"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Polynesia"))
                .body("[0].'population'", numberMatches(187820.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-13.58333333))
                .body("[0].'latlng'[1]", numberMatches(-172.33333333))
                .body("[0].'demonym'", containsString("Samoan"))
                .body("[0].'area'", numberMatches(2842.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+13:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Samoa"))
                .body("[0].'numericCode'", containsString("882"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("WST"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("sm", "en"))
                .body("[0].'translations'.'de'", containsString("Samoa"))
                .body("[0].'translations'.'es'", containsString("Samoa"))
                .body("[0].'translations'.'fr'", containsString("Samoa"))
                .body("[0].'translations'.'ja'", containsString("サモア"))
                .body("[0].'translations'.'it'", containsString("Samoa"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_617_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/ashgabat")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Turkmenistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".tm"))
                .body("[0].'alpha2Code'", containsString("TM"))
                .body("[0].'alpha3Code'", containsString("TKM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("993"))
                .body("[0].'capital'", containsString("Ashgabat"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("TM"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Central Asia"))
                .body("[0].'population'", numberMatches(4751120.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(40.0))
                .body("[0].'latlng'[1]", numberMatches(60.0))
                .body("[0].'demonym'", containsString("Turkmen"))
                .body("[0].'area'", numberMatches(488100.0))
                .body("[0].'gini'", numberMatches(40.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+05:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("AFG", "IRN", "KAZ", "UZB"))
                .body("[0].'nativeName'", containsString("Türkmenistan"))
                .body("[0].'numericCode'", containsString("795"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("TMT"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("tk", "ru"))
                .body("[0].'translations'.'de'", containsString("Turkmenistan"))
                .body("[0].'translations'.'es'", containsString("Turkmenistán"))
                .body("[0].'translations'.'fr'", containsString("Turkménistan"))
                .body("[0].'translations'.'ja'", containsString("トルクメニスタン"))
                .body("[0].'translations'.'it'", containsString("Turkmenistan"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_618_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/asmara")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Eritrea"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".er"))
                .body("[0].'alpha2Code'", containsString("ER"))
                .body("[0].'alpha3Code'", containsString("ERI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("291"))
                .body("[0].'capital'", containsString("Asmara"))
                .body("[0].'altSpellings'.size()", equalTo(7))
                .body("[0].'altSpellings'", hasItems("ER", "State of Eritrea", "ሃገረ ኤርትራ", "Dawlat Iritriyá", "ʾErtrā", "Iritriyā", ""))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(5228000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(15.0))
                .body("[0].'latlng'[1]", numberMatches(39.0))
                .body("[0].'demonym'", containsString("Eritrean"))
                .body("[0].'area'", numberMatches(117600.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("DJI", "ETH", "SDN"))
                .body("[0].'nativeName'", containsString("ኤርትራ"))
                .body("[0].'numericCode'", containsString("232"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ERN"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("ti", "ar", "en"))
                .body("[0].'translations'.'de'", containsString("Eritrea"))
                .body("[0].'translations'.'es'", containsString("Eritrea"))
                .body("[0].'translations'.'fr'", containsString("Érythrée"))
                .body("[0].'translations'.'ja'", containsString("エリトリア"))
                .body("[0].'translations'.'it'", containsString("Eritrea"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_619_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/south%20african?fields=l0i")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_620_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/bahrain")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Bahrain"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bh"))
                .body("[0].'alpha2Code'", containsString("BH"))
                .body("[0].'alpha3Code'", containsString("BHR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("973"))
                .body("[0].'capital'", containsString("Manama"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("BH", "Kingdom of Bahrain", "Mamlakat al-Baḥrayn"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(1359800.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(26.0))
                .body("[0].'latlng'[1]", numberMatches(50.55))
                .body("[0].'demonym'", containsString("Bahraini"))
                .body("[0].'area'", numberMatches(765.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("‏البحرين"))
                .body("[0].'numericCode'", containsString("048"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BHD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Bahrain"))
                .body("[0].'translations'.'es'", containsString("Bahrein"))
                .body("[0].'translations'.'fr'", containsString("Bahreïn"))
                .body("[0].'translations'.'ja'", containsString("バーレーン"))
                .body("[0].'translations'.'it'", containsString("Bahrein"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_621_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/turkish?fields=_EM_12547_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_622_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/49")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Germany"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".de"))
                .body("[0].'alpha2Code'", containsString("DE"))
                .body("[0].'alpha3Code'", containsString("DEU"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("49"))
                .body("[0].'capital'", containsString("Berlin"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("DE", "Federal Republic of Germany", "Bundesrepublik Deutschland"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(8.10836E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(51.0))
                .body("[0].'latlng'[1]", numberMatches(9.0))
                .body("[0].'demonym'", containsString("German"))
                .body("[0].'area'", numberMatches(357114.0))
                .body("[0].'gini'", numberMatches(28.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(9))
                .body("[0].'borders'", hasItems("AUT", "BEL", "CZE", "DNK", "FRA", "LUX", "NLD", "POL", "CHE"))
                .body("[0].'nativeName'", containsString("Deutschland"))
                .body("[0].'numericCode'", containsString("276"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("de"))
                .body("[0].'translations'.'de'", containsString("Deutschland"))
                .body("[0].'translations'.'es'", containsString("Alemania"))
                .body("[0].'translations'.'fr'", containsString("Allemagne"))
                .body("[0].'translations'.'ja'", containsString("ドイツ"))
                .body("[0].'translations'.'it'", containsString("Germania"))
                .body("[0].'relevance'", containsString("3"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_623_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/501")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Belize"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bz"))
                .body("[0].'alpha2Code'", containsString("BZ"))
                .body("[0].'alpha3Code'", containsString("BLZ"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("501"))
                .body("[0].'capital'", containsString("Belmopan"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("BZ"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Central America"))
                .body("[0].'population'", numberMatches(368310.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(17.25))
                .body("[0].'latlng'[1]", numberMatches(-88.75))
                .body("[0].'demonym'", containsString("Belizean"))
                .body("[0].'area'", numberMatches(22966.0))
                .body("[0].'gini'", numberMatches(53.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-06:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("GTM", "MEX"))
                .body("[0].'nativeName'", containsString("Belize"))
                .body("[0].'numericCode'", containsString("084"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BZD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "es"))
                .body("[0].'translations'.'de'", containsString("Belize"))
                .body("[0].'translations'.'es'", containsString("Belice"))
                .body("[0].'translations'.'fr'", containsString("Belize"))
                .body("[0].'translations'.'ja'", containsString("ベリーズ"))
                .body("[0].'translations'.'it'", containsString("Belize"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_624_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/astana")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Kazakhstan"))
                .body("[0].'topLevelDomain'.size()", equalTo(2))
                .body("[0].'topLevelDomain'", hasItems(".kz", ".қаз"))
                .body("[0].'alpha2Code'", containsString("KZ"))
                .body("[0].'alpha3Code'", containsString("KAZ"))
                .body("[0].'callingCodes'.size()", equalTo(2))
                .body("[0].'callingCodes'", hasItems("76", "77"))
                .body("[0].'capital'", containsString("Astana"))
                .body("[0].'altSpellings'.size()", equalTo(8))
                .body("[0].'altSpellings'", hasItems("KZ", "Qazaqstan", "Казахстан", "Republic of Kazakhstan", "Қазақстан Республикасы", "Qazaqstan Respublïkası", "Республика Казахстан", "Respublika Kazakhstan"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Central Asia"))
                .body("[0].'population'", numberMatches(1.75412E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(48.0))
                .body("[0].'latlng'[1]", numberMatches(68.0))
                .body("[0].'demonym'", containsString("Kazakhstani"))
                .body("[0].'area'", numberMatches(2724900.0))
                .body("[0].'gini'", numberMatches(29.0))
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC+05:00", "UTC+06:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("CHN", "KGZ", "RUS", "TKM", "UZB"))
                .body("[0].'nativeName'", containsString("Қазақстан"))
                .body("[0].'numericCode'", containsString("398"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("KZT"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("kk", "ru"))
                .body("[0].'translations'.'de'", containsString("Kasachstan"))
                .body("[0].'translations'.'es'", containsString("Kazajistán"))
                .body("[0].'translations'.'fr'", containsString("Kazakhstan"))
                .body("[0].'translations'.'ja'", containsString("カザフスタン"))
                .body("[0].'translations'.'it'", containsString("Kazakistan"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_625_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/asuncion")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Paraguay"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".py"))
                .body("[0].'alpha2Code'", containsString("PY"))
                .body("[0].'alpha3Code'", containsString("PRY"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("595"))
                .body("[0].'capital'", containsString("Asunción"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("PY", "Republic of Paraguay", "República del Paraguay", "Tetã Paraguái"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(7003406.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-23.0))
                .body("[0].'latlng'[1]", numberMatches(-58.0))
                .body("[0].'demonym'", containsString("Paraguayan"))
                .body("[0].'area'", numberMatches(406752.0))
                .body("[0].'gini'", numberMatches(52.4))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("ARG", "BOL", "BRA"))
                .body("[0].'nativeName'", containsString("Paraguay"))
                .body("[0].'numericCode'", containsString("600"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("PYG"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("es", "gn"))
                .body("[0].'translations'.'de'", containsString("Paraguay"))
                .body("[0].'translations'.'es'", containsString("Paraguay"))
                .body("[0].'translations'.'fr'", containsString("Paraguay"))
                .body("[0].'translations'.'ja'", containsString("パラグアイ"))
                .body("[0].'translations'.'it'", containsString("Paraguay"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_626_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/malawi?" + 
                    "fields=_EM_12587_XYZ_&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_627_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/377?fields=_EM_4148_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_628_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/windhoek?fields=_EM_4441_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_629_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/republic%20of%20the%20maldives?" + 
                    "fields=08FLB4jIqxig&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_630_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/974")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Qatar"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".qa"))
                .body("[0].'alpha2Code'", containsString("QA"))
                .body("[0].'alpha3Code'", containsString("QAT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("974"))
                .body("[0].'capital'", containsString("Doha"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("QA", "State of Qatar", "Dawlat Qaṭar"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(2120129.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(25.5))
                .body("[0].'latlng'[1]", numberMatches(51.25))
                .body("[0].'demonym'", containsString("Qatari"))
                .body("[0].'area'", numberMatches(11586.0))
                .body("[0].'gini'", numberMatches(41.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("SAU"))
                .body("[0].'nativeName'", containsString("قطر"))
                .body("[0].'numericCode'", containsString("634"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("QAR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Katar"))
                .body("[0].'translations'.'es'", containsString("Catar"))
                .body("[0].'translations'.'fr'", containsString("Qatar"))
                .body("[0].'translations'.'ja'", containsString("カタール"))
                .body("[0].'translations'.'it'", containsString("Qatar"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_631_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/975")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Bhutan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bt"))
                .body("[0].'alpha2Code'", containsString("BT"))
                .body("[0].'alpha3Code'", containsString("BTN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("975"))
                .body("[0].'capital'", containsString("Thimphu"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("BT", "Kingdom of Bhutan"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(763920.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(27.5))
                .body("[0].'latlng'[1]", numberMatches(90.5))
                .body("[0].'demonym'", containsString("Bhutanese"))
                .body("[0].'area'", numberMatches(38394.0))
                .body("[0].'gini'", numberMatches(38.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+06:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("CHN", "IND"))
                .body("[0].'nativeName'", containsString("ʼbrug-yul"))
                .body("[0].'numericCode'", containsString("064"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'", hasItems("BTN", "INR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("dz"))
                .body("[0].'translations'.'de'", containsString("Bhutan"))
                .body("[0].'translations'.'es'", containsString("Bután"))
                .body("[0].'translations'.'fr'", containsString("Bhoutan"))
                .body("[0].'translations'.'ja'", containsString("ブータン"))
                .body("[0].'translations'.'it'", containsString("Bhutan"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_632_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/976")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Mongolia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mn"))
                .body("[0].'alpha2Code'", containsString("MN"))
                .body("[0].'alpha3Code'", containsString("MNG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("976"))
                .body("[0].'capital'", containsString("Ulan Bator"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("MN"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Eastern Asia"))
                .body("[0].'population'", numberMatches(3031099.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(46.0))
                .body("[0].'latlng'[1]", numberMatches(105.0))
                .body("[0].'demonym'", containsString("Mongolian"))
                .body("[0].'area'", numberMatches(1564110.0))
                .body("[0].'gini'", numberMatches(36.5))
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC+07:00", "UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("CHN", "RUS"))
                .body("[0].'nativeName'", containsString("Монгол улс"))
                .body("[0].'numericCode'", containsString("496"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MNT"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("mn"))
                .body("[0].'translations'.'de'", containsString("Mongolei"))
                .body("[0].'translations'.'es'", containsString("Mongolia"))
                .body("[0].'translations'.'fr'", containsString("Mongolie"))
                .body("[0].'translations'.'ja'", containsString("モンゴル"))
                .body("[0].'translations'.'it'", containsString("Mongolia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_633_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/baku")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Azerbaijan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".az"))
                .body("[0].'alpha2Code'", containsString("AZ"))
                .body("[0].'alpha3Code'", containsString("AZE"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("994"))
                .body("[0].'capital'", containsString("Baku"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("AZ", "Republic of Azerbaijan", "Azərbaycan Respublikası"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(9636300.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(40.5))
                .body("[0].'latlng'[1]", numberMatches(47.5))
                .body("[0].'demonym'", containsString("Azerbaijani"))
                .body("[0].'area'", numberMatches(86600.0))
                .body("[0].'gini'", numberMatches(33.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("ARM", "GEO", "IRN", "RUS", "TUR"))
                .body("[0].'nativeName'", containsString("Azərbaycan"))
                .body("[0].'numericCode'", containsString("031"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AZN"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("az"))
                .body("[0].'translations'.'de'", containsString("Aserbaidschan"))
                .body("[0].'translations'.'es'", containsString("Azerbaiyán"))
                .body("[0].'translations'.'fr'", containsString("Azerbaïdjan"))
                .body("[0].'translations'.'ja'", containsString("アゼルバイジャン"))
                .body("[0].'translations'.'it'", containsString("Azerbaijan"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_634_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/malaysia?" + 
                    "fields=_EM_12587_XYZ_&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_635_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/maldives?" + 
                    "fields=oZUMHaM&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_636_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/caracas?fields=QYfXM")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_637_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/north%20korean?fields=wmAC1lVN7aae6")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_638_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/mali?" + 
                    "fields=oZUMHaM&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_639_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/malo%20saʻoloto%20tutoʻatasi%20o%20samoa?" + 
                    "fields=oZUMHaM&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_640_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/london?fields=8GPkbzM8_Kc")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_641_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/ghanaian?fields=l0i")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_642_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/gibraltar?fields=l0i")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_643_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/myanmar?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Myanmar"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mm"))
                .body("[0].'alpha2Code'", containsString("MM"))
                .body("[0].'alpha3Code'", containsString("MMR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("95"))
                .body("[0].'capital'", containsString("Naypyidaw"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("MM", "Burma", "Republic of the Union of Myanmar", "Pyidaunzu Thanmăda Myăma Nainngandaw"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("South-Eastern Asia"))
                .body("[0].'population'", numberMatches(5.3897E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(22.0))
                .body("[0].'latlng'[1]", numberMatches(98.0))
                .body("[0].'demonym'", containsString("Burmese"))
                .body("[0].'area'", numberMatches(676578.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+06:30"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("BGD", "CHN", "IND", "LAO", "THA"))
                .body("[0].'nativeName'", containsString("Myanma"))
                .body("[0].'numericCode'", containsString("104"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MMK"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("my"))
                .body("[0].'translations'.'de'", containsString("Myanmar"))
                .body("[0].'translations'.'es'", containsString("Myanmar"))
                .body("[0].'translations'.'fr'", containsString("Myanmar"))
                .body("[0].'translations'.'ja'", containsString("ミャンマー"))
                .body("[0].'translations'.'it'", containsString("Birmania"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_644_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/port%20vila")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Vanuatu"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".vu"))
                .body("[0].'alpha2Code'", containsString("VU"))
                .body("[0].'alpha3Code'", containsString("VUT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("678"))
                .body("[0].'capital'", containsString("Port Vila"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("VU", "Republic of Vanuatu", "Ripablik blong Vanuatu", "République de Vanuatu"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Melanesia"))
                .body("[0].'population'", numberMatches(264652.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-16.0))
                .body("[0].'latlng'[1]", numberMatches(167.0))
                .body("[0].'demonym'", containsString("Ni-Vanuatu"))
                .body("[0].'area'", numberMatches(12189.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+11:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Vanuatu"))
                .body("[0].'numericCode'", containsString("548"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("VUV"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("bi", "en", "fr"))
                .body("[0].'translations'.'de'", containsString("Vanuatu"))
                .body("[0].'translations'.'es'", containsString("Vanuatu"))
                .body("[0].'translations'.'fr'", containsString("Vanuatu"))
                .body("[0].'translations'.'ja'", containsString("バヌアツ"))
                .body("[0].'translations'.'it'", containsString("Vanuatu"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_645_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/port-au-prince")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Haiti"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ht"))
                .body("[0].'alpha2Code'", containsString("HT"))
                .body("[0].'alpha3Code'", containsString("HTI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("509"))
                .body("[0].'capital'", containsString("Port-au-Prince"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("HT", "Republic of Haiti", "République d'Haïti", "Repiblik Ayiti"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(1.0911819E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(19.0))
                .body("[0].'latlng'[1]", numberMatches(-72.41666666))
                .body("[0].'demonym'", containsString("Haitian"))
                .body("[0].'area'", numberMatches(27750.0))
                .body("[0].'gini'", numberMatches(59.2))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-05:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("DOM"))
                .body("[0].'nativeName'", containsString("Haïti"))
                .body("[0].'numericCode'", containsString("332"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'", hasItems("HTG", "USD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fr", "ht"))
                .body("[0].'translations'.'de'", containsString("Haiti"))
                .body("[0].'translations'.'es'", containsString("Haiti"))
                .body("[0].'translations'.'fr'", containsString("Haïti"))
                .body("[0].'translations'.'ja'", containsString("ハイチ"))
                .body("[0].'translations'.'it'", containsString("Haiti"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_646_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/kuala%20lumpur?fields=0Ztx8nWx")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_647_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/pm")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Saint Pierre and Miquelon"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".pm"))
                .body("[0].'alpha2Code'", containsString("PM"))
                .body("[0].'alpha3Code'", containsString("SPM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("508"))
                .body("[0].'capital'", containsString("Saint-Pierre"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("PM", "Collectivité territoriale de Saint-Pierre-et-Miquelon"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Northern America"))
                .body("[0].'population'", numberMatches(6069.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(46.83333333))
                .body("[0].'latlng'[1]", numberMatches(-56.33333333))
                .body("[0].'demonym'", containsString("French"))
                .body("[0].'area'", numberMatches(242.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-03:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Saint-Pierre-et-Miquelon"))
                .body("[0].'numericCode'", containsString("666"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("EUR"))
                .body("[0].'currencies'[0].'name'", containsString("Euro"))
                .body("[0].'currencies'[0].'symbol'", containsString("€"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("fr"))
                .body("[0].'languages'[0].'iso639_2'", containsString("fra"))
                .body("[0].'languages'[0].'name'", containsString("French"))
                .body("[0].'languages'[0].'nativeName'", containsString("français"))
                .body("[0].'translations'.'de'", containsString("Saint-Pierre und Miquelon"))
                .body("[0].'translations'.'es'", containsString("San Pedro y Miquelón"))
                .body("[0].'translations'.'fr'", containsString("Saint-Pierre-et-Miquelon"))
                .body("[0].'translations'.'ja'", containsString("サンピエール島・ミクロン島"))
                .body("[0].'translations'.'it'", containsString("Saint-Pierre e Miquelon"))
                .body("[0].'translations'.'br'", containsString("Saint-Pierre e Miquelon"))
                .body("[0].'translations'.'pt'", containsString("São Pedro e Miquelon"))
                .body("[0].'translations'.'nl'", containsString("Saint Pierre en Miquelon"))
                .body("[0].'translations'.'hr'", containsString("Sveti Petar i Mikelon"))
                .body("[0].'translations'.'fa'", containsString("سن پیر و میکلن"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/spm.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString(""));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_648_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/pn?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("Albania"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".al"))
                .body("[0].'alpha2Code'", containsString("AL"))
                .body("[0].'alpha3Code'", containsString("ALB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("355"))
                .body("[0].'capital'", containsString("Tirana"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("AL", "Shqipëri", "Shqipëria", "Shqipnia"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(2886026.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(41.0))
                .body("[0].'latlng'[1]", numberMatches(20.0))
                .body("[0].'demonym'", containsString("Albanian"))
                .body("[0].'area'", numberMatches(28748.0))
                .body("[0].'gini'", numberMatches(34.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("MNE", "GRC", "MKD", "KOS"))
                .body("[0].'nativeName'", containsString("Shqipëria"))
                .body("[0].'numericCode'", containsString("008"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("ALL"))
                .body("[0].'currencies'[0].'name'", containsString("Albanian lek"))
                .body("[0].'currencies'[0].'symbol'", containsString("L"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("sq"))
                .body("[0].'languages'[0].'iso639_2'", containsString("sqi"))
                .body("[0].'languages'[0].'name'", containsString("Albanian"))
                .body("[0].'languages'[0].'nativeName'", containsString("Shqip"))
                .body("[0].'translations'.'de'", containsString("Albanien"))
                .body("[0].'translations'.'es'", containsString("Albania"))
                .body("[0].'translations'.'fr'", containsString("Albanie"))
                .body("[0].'translations'.'ja'", containsString("アルバニア"))
                .body("[0].'translations'.'it'", containsString("Albania"))
                .body("[0].'translations'.'br'", containsString("Albânia"))
                .body("[0].'translations'.'pt'", containsString("Albânia"))
                .body("[0].'translations'.'nl'", containsString("Albanië"))
                .body("[0].'translations'.'hr'", containsString("Albanija"))
                .body("[0].'translations'.'fa'", containsString("آلبانی"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/alb.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("CEFTA"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Central European Free Trade Agreement"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("ALB"))
                .body("[1].'name'", containsString("Pitcairn"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".pn"))
                .body("[1].'alpha2Code'", containsString("PN"))
                .body("[1].'alpha3Code'", containsString("PCN"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("64"))
                .body("[1].'capital'", containsString("Adamstown"))
                .body("[1].'altSpellings'.size()", equalTo(2))
                .body("[1].'altSpellings'", hasItems("PN", "Pitcairn Henderson Ducie and Oeno Islands"))
                .body("[1].'region'", containsString("Oceania"))
                .body("[1].'subregion'", containsString("Polynesia"))
                .body("[1].'population'", numberMatches(56.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-25.06666666))
                .body("[1].'latlng'[1]", numberMatches(-130.1))
                .body("[1].'demonym'", containsString("Pitcairn Islander"))
                .body("[1].'area'", numberMatches(47.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC-08:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Pitcairn Islands"))
                .body("[1].'numericCode'", containsString("612"))
                .body("[1].'currencies'.size()", equalTo(2))
                .body("[1].'currencies'[0].'code'", containsString("NZD"))
                .body("[1].'currencies'[0].'name'", containsString("New Zealand dollar"))
                .body("[1].'currencies'[0].'symbol'", containsString("$"))
                .body("[1].'currencies'[1].'code'", nullValue())
                .body("[1].'currencies'[1].'name'", containsString("Pitcairn Islands dollar"))
                .body("[1].'currencies'[1].'symbol'", containsString("$"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'[0].'iso639_1'", containsString("en"))
                .body("[1].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[1].'languages'[0].'name'", containsString("English"))
                .body("[1].'languages'[0].'nativeName'", containsString("English"))
                .body("[1].'translations'.'de'", containsString("Pitcairn"))
                .body("[1].'translations'.'es'", containsString("Islas Pitcairn"))
                .body("[1].'translations'.'fr'", containsString("Îles Pitcairn"))
                .body("[1].'translations'.'ja'", containsString("ピトケアン"))
                .body("[1].'translations'.'it'", containsString("Isole Pitcairn"))
                .body("[1].'translations'.'br'", containsString("Ilhas Pitcairn"))
                .body("[1].'translations'.'pt'", containsString("Ilhas Picárnia"))
                .body("[1].'translations'.'nl'", containsString("Pitcairneilanden"))
                .body("[1].'translations'.'hr'", containsString("Pitcairnovo otočje"))
                .body("[1].'translations'.'fa'", containsString("پیتکرن"))
                .body("[1].'flag'", containsString("https://restcountries.eu/data/pcn.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(0))
                .body("[1].'cioc'", containsString(""));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_649_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/republic%20of%20latvia?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Latvia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".lv"))
                .body("[0].'alpha2Code'", containsString("LV"))
                .body("[0].'alpha3Code'", containsString("LVA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("371"))
                .body("[0].'capital'", containsString("Riga"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("LV", "Republic of Latvia", "Latvijas Republika"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(1980700.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(57.0))
                .body("[0].'latlng'[1]", numberMatches(25.0))
                .body("[0].'demonym'", containsString("Latvian"))
                .body("[0].'area'", numberMatches(64559.0))
                .body("[0].'gini'", numberMatches(36.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("BLR", "EST", "LTU", "RUS"))
                .body("[0].'nativeName'", containsString("Latvija"))
                .body("[0].'numericCode'", containsString("428"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("lv"))
                .body("[0].'translations'.'de'", containsString("Lettland"))
                .body("[0].'translations'.'es'", containsString("Letonia"))
                .body("[0].'translations'.'fr'", containsString("Lettonie"))
                .body("[0].'translations'.'ja'", containsString("ラトビア"))
                .body("[0].'translations'.'it'", containsString("Lettonia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_650_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/998")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Uzbekistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".uz"))
                .body("[0].'alpha2Code'", containsString("UZ"))
                .body("[0].'alpha3Code'", containsString("UZB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("998"))
                .body("[0].'capital'", containsString("Tashkent"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("UZ", "Republic of Uzbekistan", "O‘zbekiston Respublikasi", "Ўзбекистон Республикаси"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Central Asia"))
                .body("[0].'population'", numberMatches(3.10225E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(41.0))
                .body("[0].'latlng'[1]", numberMatches(64.0))
                .body("[0].'demonym'", containsString("Uzbekistani"))
                .body("[0].'area'", numberMatches(447400.0))
                .body("[0].'gini'", numberMatches(36.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+05:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("AFG", "KAZ", "KGZ", "TJK", "TKM"))
                .body("[0].'nativeName'", containsString("O‘zbekiston"))
                .body("[0].'numericCode'", containsString("860"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("UZS"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("uz", "ru"))
                .body("[0].'translations'.'de'", containsString("Usbekistan"))
                .body("[0].'translations'.'es'", containsString("Uzbekistán"))
                .body("[0].'translations'.'fr'", containsString("Ouzbékistan"))
                .body("[0].'translations'.'ja'", containsString("ウズベキスタン"))
                .body("[0].'translations'.'it'", containsString("Uzbekistan"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_651_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/ad?" + 
                    "fields=Gl1h&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_652_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/421?fields=qlsvFIsNQk")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_653_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/nauru?" + 
                    "fields=alpha3Code&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha3Code'", containsString("NRU"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_654_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/216")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Tunisia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".tn"))
                .body("[0].'alpha2Code'", containsString("TN"))
                .body("[0].'alpha3Code'", containsString("TUN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("216"))
                .body("[0].'capital'", containsString("Tunis"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("TN", "Republic of Tunisia", "al-Jumhūriyyah at-Tūnisiyyah"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Northern Africa"))
                .body("[0].'population'", numberMatches(1.11544E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(34.0))
                .body("[0].'latlng'[1]", numberMatches(9.0))
                .body("[0].'demonym'", containsString("Tunisian"))
                .body("[0].'area'", numberMatches(163610.0))
                .body("[0].'gini'", numberMatches(41.4))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("DZA", "LBY"))
                .body("[0].'nativeName'", containsString("تونس"))
                .body("[0].'numericCode'", containsString("788"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("TND"))
                .body("[0].'currencies'[0].'name'", containsString("Tunisian dinar"))
                .body("[0].'currencies'[0].'symbol'", containsString("د.ت"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("ar"))
                .body("[0].'languages'[0].'iso639_2'", containsString("ara"))
                .body("[0].'languages'[0].'name'", containsString("Arabic"))
                .body("[0].'languages'[0].'nativeName'", containsString("العربية"))
                .body("[0].'translations'.'de'", containsString("Tunesien"))
                .body("[0].'translations'.'es'", containsString("Túnez"))
                .body("[0].'translations'.'fr'", containsString("Tunisie"))
                .body("[0].'translations'.'ja'", containsString("チュニジア"))
                .body("[0].'translations'.'it'", containsString("Tunisia"))
                .body("[0].'translations'.'br'", containsString("Tunísia"))
                .body("[0].'translations'.'pt'", containsString("Tunísia"))
                .body("[0].'translations'.'nl'", containsString("Tunesië"))
                .body("[0].'translations'.'hr'", containsString("Tunis"))
                .body("[0].'translations'.'fa'", containsString("تونس"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/tun.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(2))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[0].'regionalBlocs'[1].'acronym'", containsString("AL"))
                .body("[0].'regionalBlocs'[1].'name'", containsString("Arab League"))
                .body("[0].'regionalBlocs'[1].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[1].'otherNames'.size()", equalTo(3))
                .body("[0].'regionalBlocs'[1].'otherNames'", hasItems("جامعة الدول العربية", "Jāmiʻat ad-Duwal al-ʻArabīyah", "League of Arab States"))
                .body("[0].'cioc'", containsString("TUN"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_655_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/218")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Libya"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ly"))
                .body("[0].'alpha2Code'", containsString("LY"))
                .body("[0].'alpha3Code'", containsString("LBY"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("218"))
                .body("[0].'capital'", containsString("Tripoli"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("LY", "State of Libya", "Dawlat Libya"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Northern Africa"))
                .body("[0].'population'", numberMatches(6385000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(25.0))
                .body("[0].'latlng'[1]", numberMatches(17.0))
                .body("[0].'demonym'", containsString("Libyan"))
                .body("[0].'area'", numberMatches(1759540.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("DZA", "TCD", "EGY", "NER", "SDN", "TUN"))
                .body("[0].'nativeName'", containsString("‏ليبيا"))
                .body("[0].'numericCode'", containsString("434"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("LYD"))
                .body("[0].'currencies'[0].'name'", containsString("Libyan dinar"))
                .body("[0].'currencies'[0].'symbol'", containsString("ل.د"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("ar"))
                .body("[0].'languages'[0].'iso639_2'", containsString("ara"))
                .body("[0].'languages'[0].'name'", containsString("Arabic"))
                .body("[0].'languages'[0].'nativeName'", containsString("العربية"))
                .body("[0].'translations'.'de'", containsString("Libyen"))
                .body("[0].'translations'.'es'", containsString("Libia"))
                .body("[0].'translations'.'fr'", containsString("Libye"))
                .body("[0].'translations'.'ja'", containsString("リビア"))
                .body("[0].'translations'.'it'", containsString("Libia"))
                .body("[0].'translations'.'br'", containsString("Líbia"))
                .body("[0].'translations'.'pt'", containsString("Líbia"))
                .body("[0].'translations'.'nl'", containsString("Libië"))
                .body("[0].'translations'.'hr'", containsString("Libija"))
                .body("[0].'translations'.'fa'", containsString("لیبی"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/lby.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(2))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[0].'regionalBlocs'[1].'acronym'", containsString("AL"))
                .body("[0].'regionalBlocs'[1].'name'", containsString("Arab League"))
                .body("[0].'regionalBlocs'[1].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[1].'otherNames'.size()", equalTo(3))
                .body("[0].'regionalBlocs'[1].'otherNames'", hasItems("جامعة الدول العربية", "Jāmiʻat ad-Duwal al-ʻArabīyah", "League of Arab States"))
                .body("[0].'cioc'", containsString("LBA"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_656_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/havana?fields=_EM_4441_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_657_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/helsinki?fields=_EM_4441_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_658_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/fijian")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Fiji"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".fj"))
                .body("[0].'alpha2Code'", containsString("FJ"))
                .body("[0].'alpha3Code'", containsString("FJI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("679"))
                .body("[0].'capital'", containsString("Suva"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("FJ", "Viti", "Republic of Fiji", "Matanitu ko Viti", "Fijī Gaṇarājya"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Melanesia"))
                .body("[0].'population'", numberMatches(867000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-18.0))
                .body("[0].'latlng'[1]", numberMatches(175.0))
                .body("[0].'demonym'", containsString("Fijian"))
                .body("[0].'area'", numberMatches(18272.0))
                .body("[0].'gini'", numberMatches(42.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+12:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Fiji"))
                .body("[0].'numericCode'", containsString("242"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("FJD"))
                .body("[0].'currencies'[0].'name'", containsString("Fijian dollar"))
                .body("[0].'currencies'[0].'symbol'", containsString("$"))
                .body("[0].'languages'.size()", equalTo(4))
                .body("[0].'languages'[0].'iso639_1'", containsString("en"))
                .body("[0].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[0].'name'", containsString("English"))
                .body("[0].'languages'[0].'nativeName'", containsString("English"))
                .body("[0].'languages'[1].'iso639_1'", containsString("fj"))
                .body("[0].'languages'[1].'iso639_2'", containsString("fij"))
                .body("[0].'languages'[1].'name'", containsString("Fijian"))
                .body("[0].'languages'[1].'nativeName'", containsString("vosa Vakaviti"))
                .body("[0].'languages'[2].'iso639_1'", containsString("hi"))
                .body("[0].'languages'[2].'iso639_2'", containsString("hin"))
                .body("[0].'languages'[2].'name'", containsString("Hindi"))
                .body("[0].'languages'[2].'nativeName'", containsString("हिन्दी"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("[0].'translations'.'de'", containsString("Fidschi"))
                .body("[0].'translations'.'es'", containsString("Fiyi"))
                .body("[0].'translations'.'fr'", containsString("Fidji"))
                .body("[0].'translations'.'ja'", containsString("フィジー"))
                .body("[0].'translations'.'it'", containsString("Figi"))
                .body("[0].'translations'.'br'", containsString("Fiji"))
                .body("[0].'translations'.'pt'", containsString("Fiji"))
                .body("[0].'translations'.'nl'", containsString("Fiji"))
                .body("[0].'translations'.'hr'", containsString("Fiđi"))
                .body("[0].'translations'.'fa'", containsString("فیجی"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/fji.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("FIJ"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_659_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/honiara?fields=_EM_4441_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_660_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/jakarta?fields=H5s")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_661_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/jerusalem?fields=translations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'translations'.'br'", containsString("Israel"))
                .body("[0].'translations'.'pt'", containsString("Israel"))
                .body("[0].'translations'.'nl'", containsString("Israël"))
                .body("[0].'translations'.'hr'", containsString("Izrael"))
                .body("[0].'translations'.'fa'", containsString("اسرائیل"))
                .body("[0].'translations'.'de'", containsString("Israel"))
                .body("[0].'translations'.'es'", containsString("Israel"))
                .body("[0].'translations'.'fr'", containsString("Israël"))
                .body("[0].'translations'.'ja'", containsString("イスラエル"))
                .body("[0].'translations'.'it'", containsString("Israele"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_662_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/finnish?fields=_EM_7060_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_663_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/the%20vatican")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Holy See"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".va"))
                .body("[0].'alpha2Code'", containsString("VA"))
                .body("[0].'alpha3Code'", containsString("VAT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("379"))
                .body("[0].'capital'", containsString("Rome"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("Sancta Sedes", "Vatican", "The Vatican"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(451.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(41.9))
                .body("[0].'latlng'[1]", numberMatches(12.45))
                .body("[0].'demonym'", containsString(""))
                .body("[0].'area'", numberMatches(0.44))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("ITA"))
                .body("[0].'nativeName'", containsString("Sancta Sedes"))
                .body("[0].'numericCode'", nullValue())
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(4))
                .body("[0].'languages'", hasItems("la", "it", "fr", "de"))
                .body("[0].'translations'.'de'", containsString("Heiliger Stuhl"))
                .body("[0].'translations'.'es'", containsString("Santa Sede"))
                .body("[0].'translations'.'fr'", containsString("voir Saint"))
                .body("[0].'translations'.'ja'", containsString("聖座"))
                .body("[0].'translations'.'it'", containsString("Santa Sede"))
                .body("[0].'relevance'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_664_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/95")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Myanmar"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mm"))
                .body("[0].'alpha2Code'", containsString("MM"))
                .body("[0].'alpha3Code'", containsString("MMR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("95"))
                .body("[0].'capital'", containsString("Naypyidaw"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("MM", "Burma", "Republic of the Union of Myanmar", "Pyidaunzu Thanmăda Myăma Nainngandaw"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("South-Eastern Asia"))
                .body("[0].'population'", numberMatches(5.141942E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(22.0))
                .body("[0].'latlng'[1]", numberMatches(98.0))
                .body("[0].'demonym'", containsString("Burmese"))
                .body("[0].'area'", numberMatches(676578.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+06:30"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("BGD", "CHN", "IND", "LAO", "THA"))
                .body("[0].'nativeName'", containsString("Myanma"))
                .body("[0].'numericCode'", containsString("104"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("MMK"))
                .body("[0].'currencies'[0].'name'", containsString("Burmese kyat"))
                .body("[0].'currencies'[0].'symbol'", containsString("Ks"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("my"))
                .body("[0].'languages'[0].'iso639_2'", containsString("mya"))
                .body("[0].'languages'[0].'name'", containsString("Burmese"))
                .body("[0].'languages'[0].'nativeName'", containsString("ဗမာစာ"))
                .body("[0].'translations'.'de'", containsString("Myanmar"))
                .body("[0].'translations'.'es'", containsString("Myanmar"))
                .body("[0].'translations'.'fr'", containsString("Myanmar"))
                .body("[0].'translations'.'ja'", containsString("ミャンマー"))
                .body("[0].'translations'.'it'", containsString("Birmania"))
                .body("[0].'translations'.'br'", containsString("Myanmar"))
                .body("[0].'translations'.'pt'", containsString("Myanmar"))
                .body("[0].'translations'.'nl'", containsString("Myanmar"))
                .body("[0].'translations'.'hr'", containsString("Mijanmar"))
                .body("[0].'translations'.'fa'", containsString("میانمار"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/mmr.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("ASEAN"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Association of Southeast Asian Nations"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("MYA"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_665_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/french?fields=_EM_7060_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(6))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_666_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/dodoma?fields=0Ztx8nWv")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_667_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/brunei?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Brunei"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bn"))
                .body("[0].'alpha2Code'", containsString("BN"))
                .body("[0].'alpha3Code'", containsString("BRN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("673"))
                .body("[0].'capital'", containsString("Bandar Seri Begawan"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("BN", "Nation of Brunei", " the Abode of Peace"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("South-Eastern Asia"))
                .body("[0].'population'", numberMatches(393372.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(4.5))
                .body("[0].'latlng'[1]", numberMatches(114.66666666))
                .body("[0].'demonym'", containsString("Bruneian"))
                .body("[0].'area'", numberMatches(5765.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("MYS"))
                .body("[0].'nativeName'", containsString("Negara Brunei Darussalam"))
                .body("[0].'numericCode'", containsString("096"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BND"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ms"))
                .body("[0].'translations'.'de'", containsString("Brunei"))
                .body("[0].'translations'.'es'", containsString("Brunei"))
                .body("[0].'translations'.'fr'", containsString("Brunei"))
                .body("[0].'translations'.'ja'", containsString("ブルネイ・ダルサラーム"))
                .body("[0].'translations'.'it'", containsString("Brunei"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_668_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/bs?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("The Bahamas"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bs"))
                .body("[0].'alpha2Code'", containsString("BS"))
                .body("[0].'alpha3Code'", containsString("BHS"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Nassau"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("BS", "Commonwealth of the Bahamas"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(368390.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(24.25))
                .body("[0].'latlng'[1]", numberMatches(-76.0))
                .body("[0].'demonym'", containsString("Bahamian"))
                .body("[0].'area'", numberMatches(13943.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-05:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Bahamas"))
                .body("[0].'numericCode'", containsString("044"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BSD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Bahamas"))
                .body("[0].'translations'.'es'", containsString("Bahamas"))
                .body("[0].'translations'.'fr'", containsString("Bahamas"))
                .body("[0].'translations'.'ja'", containsString("バハマ"))
                .body("[0].'translations'.'it'", containsString("Bahamas"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_669_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/852")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Hong Kong"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".hk"))
                .body("[0].'alpha2Code'", containsString("HK"))
                .body("[0].'alpha3Code'", containsString("HKG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("852"))
                .body("[0].'capital'", containsString("City of Victoria"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("HK", "香港"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Eastern Asia"))
                .body("[0].'population'", numberMatches(7298600.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(22.25))
                .body("[0].'latlng'[1]", numberMatches(114.16666666))
                .body("[0].'demonym'", containsString("Chinese"))
                .body("[0].'area'", numberMatches(1104.0))
                .body("[0].'gini'", numberMatches(53.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("CHN"))
                .body("[0].'nativeName'", containsString("香港"))
                .body("[0].'numericCode'", containsString("344"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("HKD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "zh"))
                .body("[0].'translations'.'de'", containsString("Hong Kong"))
                .body("[0].'translations'.'es'", containsString("Hong Kong"))
                .body("[0].'translations'.'fr'", containsString("Hong Kong"))
                .body("[0].'translations'.'ja'", containsString("香港"))
                .body("[0].'translations'.'it'", containsString("Hong Kong"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_670_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/tunis")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Tunisia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".tn"))
                .body("[0].'alpha2Code'", containsString("TN"))
                .body("[0].'alpha3Code'", containsString("TUN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("216"))
                .body("[0].'capital'", containsString("Tunis"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("TN", "Republic of Tunisia", "al-Jumhūriyyah at-Tūnisiyyah"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Northern Africa"))
                .body("[0].'population'", numberMatches(1.0982754E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(34.0))
                .body("[0].'latlng'[1]", numberMatches(9.0))
                .body("[0].'demonym'", containsString("Tunisian"))
                .body("[0].'area'", numberMatches(163610.0))
                .body("[0].'gini'", numberMatches(41.4))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("DZA", "LBY"))
                .body("[0].'nativeName'", containsString("تونس"))
                .body("[0].'numericCode'", containsString("788"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("TND"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Tunesien"))
                .body("[0].'translations'.'es'", containsString("Túnez"))
                .body("[0].'translations'.'fr'", containsString("Tunisie"))
                .body("[0].'translations'.'ja'", containsString("チュニジア"))
                .body("[0].'translations'.'it'", containsString("Tunisia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_671_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/croatia?fields=Glh")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_672_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/cu?fields=Gjh")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(8))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 5 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_673_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/gabonese?fields=altSpellings")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("GA", "Gabonese Republic", "République Gabonaise"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_674_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/afganistan")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Afghanistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".af"))
                .body("[0].'alpha2Code'", containsString("AF"))
                .body("[0].'alpha3Code'", containsString("AFG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("93"))
                .body("[0].'capital'", containsString("Kabul"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("AF", "Afġānistān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(2.60231E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(33.0))
                .body("[0].'latlng'[1]", numberMatches(65.0))
                .body("[0].'demonym'", containsString("Afghan"))
                .body("[0].'area'", numberMatches(652230.0))
                .body("[0].'gini'", numberMatches(27.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:30"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("IRN", "PAK", "TKM", "UZB", "TJK", "CHN"))
                .body("[0].'nativeName'", containsString("افغانستان"))
                .body("[0].'numericCode'", containsString("004"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AFN"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("ps", "uz", "tk"))
                .body("[0].'translations'.'de'", containsString("Afghanistan"))
                .body("[0].'translations'.'es'", containsString("Afganistán"))
                .body("[0].'translations'.'fr'", containsString("Afghanistan"))
                .body("[0].'translations'.'ja'", containsString("アフガニスタン"))
                .body("[0].'translations'.'it'", containsString("Afghanistan"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_675_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/afghanistan?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Afghanistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".af"))
                .body("[0].'alpha2Code'", containsString("AF"))
                .body("[0].'alpha3Code'", containsString("AFG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("93"))
                .body("[0].'capital'", containsString("Kabul"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("AF", "Afġānistān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(2.60231E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(33.0))
                .body("[0].'latlng'[1]", numberMatches(65.0))
                .body("[0].'demonym'", containsString("Afghan"))
                .body("[0].'area'", numberMatches(652230.0))
                .body("[0].'gini'", numberMatches(27.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:30"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("IRN", "PAK", "TKM", "UZB", "TJK", "CHN"))
                .body("[0].'nativeName'", containsString("افغانستان"))
                .body("[0].'numericCode'", containsString("004"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AFN"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("ps", "uz", "tk"))
                .body("[0].'translations'.'de'", containsString("Afghanistan"))
                .body("[0].'translations'.'es'", containsString("Afganistán"))
                .body("[0].'translations'.'fr'", containsString("Afghanistan"))
                .body("[0].'translations'.'ja'", containsString("アフガニスタン"))
                .body("[0].'translations'.'it'", containsString("Afghanistan"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_676_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/ag?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Antigua and Barbuda"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ag"))
                .body("[0].'alpha2Code'", containsString("AG"))
                .body("[0].'alpha3Code'", containsString("ATG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Saint John's"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("AG"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(86295.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(17.05))
                .body("[0].'latlng'[1]", numberMatches(-61.8))
                .body("[0].'demonym'", containsString("Antiguan, Barbudan"))
                .body("[0].'area'", numberMatches(442.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Antigua and Barbuda"))
                .body("[0].'numericCode'", containsString("028"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XCD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Antigua und Barbuda"))
                .body("[0].'translations'.'es'", containsString("Antigua y Barbuda"))
                .body("[0].'translations'.'fr'", containsString("Antigua-et-Barbuda"))
                .body("[0].'translations'.'ja'", containsString("アンティグア・バーブーダ"))
                .body("[0].'translations'.'it'", containsString("Antigua e Barbuda"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_677_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/995?fields=LZi2rDjtdx")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_678_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/EEU?fields=_EM_13165_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_679_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/emirati?fields=_EM_7060_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_680_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/equatorial%20guinean?fields=_EM_7060_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_681_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/eritrean?fields=_EM_7060_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_682_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/gb?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("United Kingdom"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".uk"))
                .body("[0].'alpha2Code'", containsString("GB"))
                .body("[0].'alpha3Code'", containsString("GBR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("44"))
                .body("[0].'capital'", containsString("London"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("GB", "UK", "Great Britain"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(6.48E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(54.0))
                .body("[0].'latlng'[1]", numberMatches(-2.0))
                .body("[0].'demonym'", containsString("British"))
                .body("[0].'area'", numberMatches(242900.0))
                .body("[0].'gini'", numberMatches(34.0))
                .body("[0].'timezones'.size()", equalTo(9))
                .body("[0].'timezones'", hasItems("UTC-08:00", "UTC-05:00", "UTC-04:00", "UTC-03:00", "UTC-02:00", "UTC", "UTC+01:00", "UTC+02:00", "UTC+06:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("IRL"))
                .body("[0].'nativeName'", containsString("United Kingdom"))
                .body("[0].'numericCode'", containsString("826"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("GBP"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Vereinigtes Königreich"))
                .body("[0].'translations'.'es'", containsString("Reino Unido"))
                .body("[0].'translations'.'fr'", containsString("Royaume-Uni"))
                .body("[0].'translations'.'ja'", containsString("イギリス"))
                .body("[0].'translations'.'it'", containsString("Regno Unito"))
                .body("[0].'relevance'", containsString("2.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_683_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/gd?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(16))
                .body("[0].'name'", containsString("United Kingdom"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".uk"))
                .body("[0].'alpha2Code'", containsString("GB"))
                .body("[0].'alpha3Code'", containsString("GBR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("44"))
                .body("[0].'capital'", containsString("London"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("GB", "UK", "Great Britain"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(6.48E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(54.0))
                .body("[0].'latlng'[1]", numberMatches(-2.0))
                .body("[0].'demonym'", containsString("British"))
                .body("[0].'area'", numberMatches(242900.0))
                .body("[0].'gini'", numberMatches(34.0))
                .body("[0].'timezones'.size()", equalTo(9))
                .body("[0].'timezones'", hasItems("UTC-08:00", "UTC-05:00", "UTC-04:00", "UTC-03:00", "UTC-02:00", "UTC", "UTC+01:00", "UTC+02:00", "UTC+06:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("IRL"))
                .body("[0].'nativeName'", containsString("United Kingdom"))
                .body("[0].'numericCode'", containsString("826"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("GBP"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Vereinigtes Königreich"))
                .body("[0].'translations'.'es'", containsString("Reino Unido"))
                .body("[0].'translations'.'fr'", containsString("Royaume-Uni"))
                .body("[0].'translations'.'ja'", containsString("イギリス"))
                .body("[0].'translations'.'it'", containsString("Regno Unito"))
                .body("[0].'relevance'", containsString("2.5"))
                .body("[1].'name'", containsString("Bahrain"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".bh"))
                .body("[1].'alpha2Code'", containsString("BH"))
                .body("[1].'alpha3Code'", containsString("BHR"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("973"))
                .body("[1].'capital'", containsString("Manama"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("BH", "Kingdom of Bahrain", "Mamlakat al-Baḥrayn"))
                .body("[1].'region'", containsString("Asia"))
                .body("[1].'subregion'", containsString("Western Asia"))
                .body("[1].'population'", numberMatches(1359800.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(26.0))
                .body("[1].'latlng'[1]", numberMatches(50.55))
                .body("[1].'demonym'", containsString("Bahraini"))
                .body("[1].'area'", numberMatches(765.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+03:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("‏البحرين"))
                .body("[1].'numericCode'", containsString("048"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("BHD"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("ar"))
                .body("[1].'translations'.'de'", containsString("Bahrain"))
                .body("[1].'translations'.'es'", containsString("Bahrein"))
                .body("[1].'translations'.'fr'", containsString("Bahreïn"))
                .body("[1].'translations'.'ja'", containsString("バーレーン"))
                .body("[1].'translations'.'it'", containsString("Bahrein"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Belgium"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".be"))
                .body("[2].'alpha2Code'", containsString("BE"))
                .body("[2].'alpha3Code'", containsString("BEL"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("32"))
                .body("[2].'capital'", containsString("Brussels"))
                .body("[2].'altSpellings'.size()", equalTo(9))
                .body("[2].'altSpellings'", hasItems("BE", "België", "Belgie", "Belgien", "Belgique", "Kingdom of Belgium", "Koninkrijk België", "Royaume de Belgique", "Königreich Belgien"))
                .body("[2].'region'", containsString("Europe"))
                .body("[2].'subregion'", containsString("Western Europe"))
                .body("[2].'population'", numberMatches(1.124833E7))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(50.83333333))
                .body("[2].'latlng'[1]", numberMatches(4.0))
                .body("[2].'demonym'", containsString("Belgian"))
                .body("[2].'area'", numberMatches(30528.0))
                .body("[2].'gini'", numberMatches(33.0))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(4))
                .body("[2].'borders'", hasItems("FRA", "DEU", "LUX", "NLD"))
                .body("[2].'nativeName'", containsString("België"))
                .body("[2].'numericCode'", containsString("056"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("EUR"))
                .body("[2].'languages'.size()", equalTo(3))
                .body("[2].'languages'", hasItems("nl", "fr", "de"))
                .body("[2].'translations'.'de'", containsString("Belgien"))
                .body("[2].'translations'.'es'", containsString("Bélgica"))
                .body("[2].'translations'.'fr'", containsString("Belgique"))
                .body("[2].'translations'.'ja'", containsString("ベルギー"))
                .body("[2].'translations'.'it'", containsString("Belgio"))
                .body("[2].'relevance'", containsString("1.5"))
                ; // Skipping assertions on the remaining 13 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_684_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/ge?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Georgia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ge"))
                .body("[0].'alpha2Code'", containsString("GE"))
                .body("[0].'alpha3Code'", containsString("GEO"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("995"))
                .body("[0].'capital'", containsString("Tbilisi"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("GE", "Sakartvelo"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(3729500.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(42.0))
                .body("[0].'latlng'[1]", numberMatches(43.5))
                .body("[0].'demonym'", containsString("Georgian"))
                .body("[0].'area'", numberMatches(69700.0))
                .body("[0].'gini'", numberMatches(41.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-05:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("ARM", "AZE", "RUS", "TUR"))
                .body("[0].'nativeName'", containsString("საქართველო"))
                .body("[0].'numericCode'", containsString("268"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("GEL"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ka"))
                .body("[0].'translations'.'de'", containsString("Georgien"))
                .body("[0].'translations'.'es'", containsString("Georgia"))
                .body("[0].'translations'.'fr'", containsString("Géorgie"))
                .body("[0].'translations'.'ja'", containsString("グルジア"))
                .body("[0].'translations'.'it'", containsString("Georgia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_685_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/georgia?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Georgia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ge"))
                .body("[0].'alpha2Code'", containsString("GE"))
                .body("[0].'alpha3Code'", containsString("GEO"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("995"))
                .body("[0].'capital'", containsString("Tbilisi"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("GE", "Sakartvelo"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(3729500.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(42.0))
                .body("[0].'latlng'[1]", numberMatches(43.5))
                .body("[0].'demonym'", containsString("Georgian"))
                .body("[0].'area'", numberMatches(69700.0))
                .body("[0].'gini'", numberMatches(41.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-05:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("ARM", "AZE", "RUS", "TUR"))
                .body("[0].'nativeName'", containsString("საქართველო"))
                .body("[0].'numericCode'", containsString("268"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("GEL"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ka"))
                .body("[0].'translations'.'de'", containsString("Georgien"))
                .body("[0].'translations'.'es'", containsString("Georgia"))
                .body("[0].'translations'.'fr'", containsString("Géorgie"))
                .body("[0].'translations'.'ja'", containsString("グルジア"))
                .body("[0].'translations'.'it'", containsString("Georgia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_686_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/niamey")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Niger"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ne"))
                .body("[0].'alpha2Code'", containsString("NE"))
                .body("[0].'alpha3Code'", containsString("NER"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("227"))
                .body("[0].'capital'", containsString("Niamey"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("NE", "Nijar", "Republic of Niger", "République du Niger"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(1.9899E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(16.0))
                .body("[0].'latlng'[1]", numberMatches(8.0))
                .body("[0].'demonym'", containsString("Nigerien"))
                .body("[0].'area'", numberMatches(1267000.0))
                .body("[0].'gini'", numberMatches(34.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(7))
                .body("[0].'borders'", hasItems("DZA", "BEN", "BFA", "TCD", "LBY", "MLI", "NGA"))
                .body("[0].'nativeName'", containsString("Niger"))
                .body("[0].'numericCode'", containsString("562"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XOF"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Niger"))
                .body("[0].'translations'.'es'", containsString("Níger"))
                .body("[0].'translations'.'fr'", containsString("Niger"))
                .body("[0].'translations'.'ja'", containsString("ニジェール"))
                .body("[0].'translations'.'it'", containsString("Niger"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_687_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/republic%20of%20tajikistan?" + 
                    "fields=18FLB4jIqxig&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_688_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/republic%20of%20the%20gambia?" + 
                    "fields=18FLB4jIqxig&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_689_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/chisinau?fields=j")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_690_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/cockburn%20town?fields=j")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_691_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/o")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(112))
                .body("[0].'name'", containsString("American Samoa"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".as"))
                .body("[0].'alpha2Code'", containsString("AS"))
                .body("[0].'alpha3Code'", containsString("ASM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Pago Pago"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("AS", "Amerika Sāmoa", "Amelika Sāmoa", "Sāmoa Amelika"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Polynesia"))
                .body("[0].'population'", numberMatches(55519.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-14.33333333))
                .body("[0].'latlng'[1]", numberMatches(-170.0))
                .body("[0].'demonym'", containsString("American Samoan"))
                .body("[0].'area'", numberMatches(199.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-11:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("American Samoa"))
                .body("[0].'numericCode'", containsString("016"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "sm"))
                .body("[0].'translations'.'de'", containsString("Amerikanisch-Samoa"))
                .body("[0].'translations'.'es'", containsString("Samoa Americana"))
                .body("[0].'translations'.'fr'", containsString("Samoa américaines"))
                .body("[0].'translations'.'ja'", containsString("アメリカ領サモア"))
                .body("[0].'translations'.'it'", containsString("Samoa Americane"))
                .body("[0].'relevance'", containsString("0.5"))
                .body("[1].'name'", containsString("Andorra"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ad"))
                .body("[1].'alpha2Code'", containsString("AD"))
                .body("[1].'alpha3Code'", containsString("AND"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("376"))
                .body("[1].'capital'", containsString("Andorra la Vella"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("AD", "Principality of Andorra", "Principat d'Andorra"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Southern Europe"))
                .body("[1].'population'", numberMatches(76949.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(42.5))
                .body("[1].'latlng'[1]", numberMatches(1.5))
                .body("[1].'demonym'", containsString("Andorran"))
                .body("[1].'area'", numberMatches(468.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+01:00"))
                .body("[1].'borders'.size()", equalTo(2))
                .body("[1].'borders'", hasItems("FRA", "ESP"))
                .body("[1].'nativeName'", containsString("Andorra"))
                .body("[1].'numericCode'", containsString("020"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("EUR"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("ca"))
                .body("[1].'translations'.'de'", containsString("Andorra"))
                .body("[1].'translations'.'es'", containsString("Andorra"))
                .body("[1].'translations'.'fr'", containsString("Andorre"))
                .body("[1].'translations'.'ja'", containsString("アンドラ"))
                .body("[1].'translations'.'it'", containsString("Andorra"))
                .body("[1].'relevance'", containsString("0.5"))
                .body("[2].'name'", containsString("Antigua and Barbuda"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".ag"))
                .body("[2].'alpha2Code'", containsString("AG"))
                .body("[2].'alpha3Code'", containsString("ATG"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("1"))
                .body("[2].'capital'", containsString("Saint John's"))
                .body("[2].'altSpellings'.size()", equalTo(1))
                .body("[2].'altSpellings'", hasItems("AG"))
                .body("[2].'region'", containsString("Americas"))
                .body("[2].'subregion'", containsString("Caribbean"))
                .body("[2].'population'", numberMatches(86295.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(17.05))
                .body("[2].'latlng'[1]", numberMatches(-61.8))
                .body("[2].'demonym'", containsString("Antiguan, Barbudan"))
                .body("[2].'area'", numberMatches(442.0))
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC-04:00"))
                .body("[2].'borders'.size()", equalTo(0))
                .body("[2].'nativeName'", containsString("Antigua and Barbuda"))
                .body("[2].'numericCode'", containsString("028"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("XCD"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("en"))
                .body("[2].'translations'.'de'", containsString("Antigua und Barbuda"))
                .body("[2].'translations'.'es'", containsString("Antigua y Barbuda"))
                .body("[2].'translations'.'fr'", containsString("Antigua-et-Barbuda"))
                .body("[2].'translations'.'ja'", containsString("アンティグア・バーブーダ"))
                .body("[2].'translations'.'it'", containsString("Antigua e Barbuda"))
                .body("[2].'relevance'", containsString("0.5"))
                ; // Skipping assertions on the remaining 109 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_692_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/taipei")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Taiwan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".tw"))
                .body("[0].'alpha2Code'", containsString("TW"))
                .body("[0].'alpha3Code'", containsString("TWN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("886"))
                .body("[0].'capital'", containsString("Taipei"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("TW", "Táiwān", "Republic of China", "中華民國", "Zhōnghuá Mínguó"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Eastern Asia"))
                .body("[0].'population'", numberMatches(2.3461708E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(23.5))
                .body("[0].'latlng'[1]", numberMatches(121.0))
                .body("[0].'demonym'", containsString("Taiwanese"))
                .body("[0].'area'", numberMatches(36193.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("臺灣"))
                .body("[0].'numericCode'", containsString("158"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("TWD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("zh"))
                .body("[0].'translations'.'de'", containsString("Taiwan"))
                .body("[0].'translations'.'es'", containsString("Taiwán"))
                .body("[0].'translations'.'fr'", containsString("Taïwan"))
                .body("[0].'translations'.'ja'", containsString("台湾（台湾省/中華民国）"))
                .body("[0].'translations'.'it'", containsString("Taiwan"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_693_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/213?fields=23uj")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_694_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/tashkent")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Uzbekistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".uz"))
                .body("[0].'alpha2Code'", containsString("UZ"))
                .body("[0].'alpha3Code'", containsString("UZB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("998"))
                .body("[0].'capital'", containsString("Tashkent"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("UZ", "Republic of Uzbekistan", "O‘zbekiston Respublikasi", "Ўзбекистон Республикаси"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Central Asia"))
                .body("[0].'population'", numberMatches(3.10225E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(41.0))
                .body("[0].'latlng'[1]", numberMatches(64.0))
                .body("[0].'demonym'", containsString("Uzbekistani"))
                .body("[0].'area'", numberMatches(447400.0))
                .body("[0].'gini'", numberMatches(36.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+05:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("AFG", "KAZ", "KGZ", "TJK", "TKM"))
                .body("[0].'nativeName'", containsString("O‘zbekiston"))
                .body("[0].'numericCode'", containsString("860"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("UZS"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("uz", "ru"))
                .body("[0].'translations'.'de'", containsString("Usbekistan"))
                .body("[0].'translations'.'es'", containsString("Uzbekistán"))
                .body("[0].'translations'.'fr'", containsString("Ouzbékistan"))
                .body("[0].'translations'.'ja'", containsString("ウズベキスタン"))
                .body("[0].'translations'.'it'", containsString("Uzbekistan"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_695_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/354")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Iceland"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".is"))
                .body("[0].'alpha2Code'", containsString("IS"))
                .body("[0].'alpha3Code'", containsString("ISL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("354"))
                .body("[0].'capital'", containsString("Reykjavík"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("IS", "Island", "Republic of Iceland", "Lýðveldið Ísland"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(330610.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(65.0))
                .body("[0].'latlng'[1]", numberMatches(-18.0))
                .body("[0].'demonym'", containsString("Icelander"))
                .body("[0].'area'", numberMatches(103000.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Ísland"))
                .body("[0].'numericCode'", containsString("352"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ISK"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("is"))
                .body("[0].'translations'.'de'", containsString("Island"))
                .body("[0].'translations'.'es'", containsString("Islandia"))
                .body("[0].'translations'.'fr'", containsString("Islande"))
                .body("[0].'translations'.'ja'", containsString("アイスランド"))
                .body("[0].'translations'.'it'", containsString("Islanda"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_696_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/355")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Albania"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".al"))
                .body("[0].'alpha2Code'", containsString("AL"))
                .body("[0].'alpha3Code'", containsString("ALB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("355"))
                .body("[0].'capital'", containsString("Tirana"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("AL", "Shqipëri", "Shqipëria", "Shqipnia"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(2893005.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(41.0))
                .body("[0].'latlng'[1]", numberMatches(20.0))
                .body("[0].'demonym'", containsString("Albanian"))
                .body("[0].'area'", numberMatches(28748.0))
                .body("[0].'gini'", numberMatches(34.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("MNE", "GRC", "MKD", "KOS"))
                .body("[0].'nativeName'", containsString("Shqipëria"))
                .body("[0].'numericCode'", containsString("008"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ALL"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("sq"))
                .body("[0].'translations'.'de'", containsString("Albanien"))
                .body("[0].'translations'.'es'", containsString("Albania"))
                .body("[0].'translations'.'fr'", containsString("Albanie"))
                .body("[0].'translations'.'ja'", containsString("アルバニア"))
                .body("[0].'translations'.'it'", containsString("Albania"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_697_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/356")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Malta"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mt"))
                .body("[0].'alpha2Code'", containsString("MT"))
                .body("[0].'alpha3Code'", containsString("MLT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("356"))
                .body("[0].'capital'", containsString("Valletta"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("MT", "Republic of Malta", "Repubblika ta' Malta"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(445426.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(35.83333333))
                .body("[0].'latlng'[1]", numberMatches(14.58333333))
                .body("[0].'demonym'", containsString("Maltese"))
                .body("[0].'area'", numberMatches(316.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Malta"))
                .body("[0].'numericCode'", containsString("470"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("mt", "en"))
                .body("[0].'translations'.'de'", containsString("Malta"))
                .body("[0].'translations'.'es'", containsString("Malta"))
                .body("[0].'translations'.'fr'", containsString("Malte"))
                .body("[0].'translations'.'ja'", containsString("マルタ"))
                .body("[0].'translations'.'it'", containsString("Malta"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_698_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/республика%20беларусь?" + 
                    "fields=callingCodes&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("375"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_699_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/cuban?fields=BBoQmXuY")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_700_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/hu?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Hungary"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".hu"))
                .body("[0].'alpha2Code'", containsString("HU"))
                .body("[0].'alpha3Code'", containsString("HUN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("36"))
                .body("[0].'capital'", containsString("Budapest"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("HU"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(9849000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(47.0))
                .body("[0].'latlng'[1]", numberMatches(20.0))
                .body("[0].'demonym'", containsString("Hungarian"))
                .body("[0].'area'", numberMatches(93028.0))
                .body("[0].'gini'", numberMatches(31.2))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(7))
                .body("[0].'borders'", hasItems("AUT", "HRV", "ROU", "SRB", "SVK", "SVN", "UKR"))
                .body("[0].'nativeName'", containsString("Magyarország"))
                .body("[0].'numericCode'", containsString("348"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("HUF"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("hu"))
                .body("[0].'translations'.'de'", containsString("Ungarn"))
                .body("[0].'translations'.'es'", containsString("Hungría"))
                .body("[0].'translations'.'fr'", containsString("Hongrie"))
                .body("[0].'translations'.'ja'", containsString("ハンガリー"))
                .body("[0].'translations'.'it'", containsString("Ungheria"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_701_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/hungary?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Hungary"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".hu"))
                .body("[0].'alpha2Code'", containsString("HU"))
                .body("[0].'alpha3Code'", containsString("HUN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("36"))
                .body("[0].'capital'", containsString("Budapest"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("HU"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(9849000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(47.0))
                .body("[0].'latlng'[1]", numberMatches(20.0))
                .body("[0].'demonym'", containsString("Hungarian"))
                .body("[0].'area'", numberMatches(93028.0))
                .body("[0].'gini'", numberMatches(31.2))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(7))
                .body("[0].'borders'", hasItems("AUT", "HRV", "ROU", "SRB", "SVK", "SVN", "UKR"))
                .body("[0].'nativeName'", containsString("Magyarország"))
                .body("[0].'numericCode'", containsString("348"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("HUF"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("hu"))
                .body("[0].'translations'.'de'", containsString("Ungarn"))
                .body("[0].'translations'.'es'", containsString("Hungría"))
                .body("[0].'translations'.'fr'", containsString("Hongrie"))
                .body("[0].'translations'.'ja'", containsString("ハンガリー"))
                .body("[0].'translations'.'it'", containsString("Ungheria"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_702_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/244")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Angola"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ao"))
                .body("[0].'alpha2Code'", containsString("AO"))
                .body("[0].'alpha3Code'", containsString("AGO"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("244"))
                .body("[0].'capital'", containsString("Luanda"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("AO", "República de Angola", "ʁɛpublika de an'ɡɔla"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Middle Africa"))
                .body("[0].'population'", numberMatches(2.4383301E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-12.5))
                .body("[0].'latlng'[1]", numberMatches(18.5))
                .body("[0].'demonym'", containsString("Angolan"))
                .body("[0].'area'", numberMatches(1246700.0))
                .body("[0].'gini'", numberMatches(58.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("COG", "COD", "ZMB", "NAM"))
                .body("[0].'nativeName'", containsString("Angola"))
                .body("[0].'numericCode'", containsString("024"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AOA"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("pt"))
                .body("[0].'translations'.'de'", containsString("Angola"))
                .body("[0].'translations'.'es'", containsString("Angola"))
                .body("[0].'translations'.'fr'", containsString("Angola"))
                .body("[0].'translations'.'ja'", containsString("アンゴラ"))
                .body("[0].'translations'.'it'", containsString("Angola"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_703_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/sudan?" + 
                    "fields=Glh&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_704_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/962?fields=mpY")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_705_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/lefatshe%20la%20botswana?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Botswana"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bw"))
                .body("[0].'alpha2Code'", containsString("BW"))
                .body("[0].'alpha3Code'", containsString("BWA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("267"))
                .body("[0].'capital'", containsString("Gaborone"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("BW", "Republic of Botswana", "Lefatshe la Botswana"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Southern Africa"))
                .body("[0].'population'", numberMatches(2070984.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-22.0))
                .body("[0].'latlng'[1]", numberMatches(24.0))
                .body("[0].'demonym'", containsString("Motswana"))
                .body("[0].'area'", numberMatches(582000.0))
                .body("[0].'gini'", numberMatches(61.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("NAM", "ZAF", "ZMB", "ZWE"))
                .body("[0].'nativeName'", containsString("Botswana"))
                .body("[0].'numericCode'", containsString("072"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BWP"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "tn"))
                .body("[0].'translations'.'de'", containsString("Botswana"))
                .body("[0].'translations'.'es'", containsString("Botswana"))
                .body("[0].'translations'.'fr'", containsString("Botswana"))
                .body("[0].'translations'.'ja'", containsString("ボツワナ"))
                .body("[0].'translations'.'it'", containsString("Botswana"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_706_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/nassau")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("The Bahamas"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bs"))
                .body("[0].'alpha2Code'", containsString("BS"))
                .body("[0].'alpha3Code'", containsString("BHS"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Nassau"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("BS", "Commonwealth of the Bahamas"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(368390.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(24.25))
                .body("[0].'latlng'[1]", numberMatches(-76.0))
                .body("[0].'demonym'", containsString("Bahamian"))
                .body("[0].'area'", numberMatches(13943.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-05:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Bahamas"))
                .body("[0].'numericCode'", containsString("044"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BSD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Bahamas"))
                .body("[0].'translations'.'es'", containsString("Bahamas"))
                .body("[0].'translations'.'fr'", containsString("Bahamas"))
                .body("[0].'translations'.'ja'", containsString("バハマ"))
                .body("[0].'translations'.'it'", containsString("Bahamas"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_707_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/new%20delhi")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("India"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".in"))
                .body("[0].'alpha2Code'", containsString("IN"))
                .body("[0].'alpha3Code'", containsString("IND"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("91"))
                .body("[0].'capital'", containsString("New Delhi"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("IN", "Bhārat", "Republic of India", "Bharat Ganrajya"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(1.27584E9))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(20.0))
                .body("[0].'latlng'[1]", numberMatches(77.0))
                .body("[0].'demonym'", containsString("Indian"))
                .body("[0].'area'", numberMatches(3287590.0))
                .body("[0].'gini'", numberMatches(33.4))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+05:30"))
                .body("[0].'borders'.size()", equalTo(8))
                .body("[0].'borders'", hasItems("AFG", "BGD", "BTN", "MMR", "CHN", "NPL", "PAK", "LKA"))
                .body("[0].'nativeName'", containsString("भारत"))
                .body("[0].'numericCode'", containsString("356"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("INR"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("hi", "en"))
                .body("[0].'translations'.'de'", containsString("Indien"))
                .body("[0].'translations'.'es'", containsString("India"))
                .body("[0].'translations'.'fr'", containsString("Inde"))
                .body("[0].'translations'.'ja'", containsString("インド"))
                .body("[0].'translations'.'it'", containsString("India"))
                .body("[0].'relevance'", containsString("3"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_708_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/colombia")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Colombia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".co"))
                .body("[0].'alpha2Code'", containsString("CO"))
                .body("[0].'alpha3Code'", containsString("COL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("57"))
                .body("[0].'capital'", containsString("Bogotá"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("CO", "Republic of Colombia", "República de Colombia"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(4.82666E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(4.0))
                .body("[0].'latlng'[1]", numberMatches(-72.0))
                .body("[0].'demonym'", containsString("Colombian"))
                .body("[0].'area'", numberMatches(1141748.0))
                .body("[0].'gini'", numberMatches(55.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-05:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("BRA", "ECU", "PAN", "PER", "VEN"))
                .body("[0].'nativeName'", containsString("Colombia"))
                .body("[0].'numericCode'", containsString("170"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("COP"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("es"))
                .body("[0].'translations'.'de'", containsString("Kolumbien"))
                .body("[0].'translations'.'es'", containsString("Colombia"))
                .body("[0].'translations'.'fr'", containsString("Colombie"))
                .body("[0].'translations'.'ja'", containsString("コロンビア"))
                .body("[0].'translations'.'it'", containsString("Colombia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_709_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/ashgabat?fields=_EM_13613_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_710_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/asmara?fields=_EM_13613_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_711_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/micronesian?fields=_EM_4167_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_712_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/mongolian?fields=topLevelDomain")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mn"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_713_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/macau?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Macau"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mo"))
                .body("[0].'alpha2Code'", containsString("MO"))
                .body("[0].'alpha3Code'", containsString("MAC"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("853"))
                .body("[0].'capital'", containsString(""))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("MO", "澳门", "Macao Special Administrative Region of the People's Republic of China", "中華人民共和國澳門特別行政區", "Região Administrativa Especial de Macau da República Popular da China"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Eastern Asia"))
                .body("[0].'population'", numberMatches(642900.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(22.16666666))
                .body("[0].'latlng'[1]", numberMatches(113.55))
                .body("[0].'demonym'", containsString("Chinese"))
                .body("[0].'area'", numberMatches(30.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("CHN"))
                .body("[0].'nativeName'", containsString("澳門"))
                .body("[0].'numericCode'", containsString("446"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MOP"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("zh", "pt"))
                .body("[0].'translations'.'de'", containsString("Macao"))
                .body("[0].'translations'.'es'", containsString("Macao"))
                .body("[0].'translations'.'fr'", containsString("Macao"))
                .body("[0].'translations'.'ja'", containsString("マカオ"))
                .body("[0].'translations'.'it'", containsString("Macao"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_714_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/malawi?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Malawi"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mw"))
                .body("[0].'alpha2Code'", containsString("MW"))
                .body("[0].'alpha3Code'", containsString("MWI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("265"))
                .body("[0].'capital'", containsString("Lilongwe"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("MW", "Republic of Malawi"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(1.6310431E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-13.5))
                .body("[0].'latlng'[1]", numberMatches(34.0))
                .body("[0].'demonym'", containsString("Malawian"))
                .body("[0].'area'", numberMatches(118484.0))
                .body("[0].'gini'", numberMatches(39.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("MOZ", "TZA", "ZMB"))
                .body("[0].'nativeName'", containsString("Malawi"))
                .body("[0].'numericCode'", containsString("454"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MWK"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "ny"))
                .body("[0].'translations'.'de'", containsString("Malawi"))
                .body("[0].'translations'.'es'", containsString("Malawi"))
                .body("[0].'translations'.'fr'", containsString("Malawi"))
                .body("[0].'translations'.'ja'", containsString("マラウイ"))
                .body("[0].'translations'.'it'", containsString("Malawi"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_715_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/motswana?fields=altSpellings")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("BW", "Republic of Botswana", "Lefatshe la Botswana"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_716_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/malabo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Equatorial Guinea"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gq"))
                .body("[0].'alpha2Code'", containsString("GQ"))
                .body("[0].'alpha3Code'", containsString("GNQ"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("240"))
                .body("[0].'capital'", containsString("Malabo"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("GQ", "Republic of Equatorial Guinea", "República de Guinea Ecuatorial", "République de Guinée équatoriale", "República da Guiné Equatorial"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Middle Africa"))
                .body("[0].'population'", numberMatches(1430000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(2.0))
                .body("[0].'latlng'[1]", numberMatches(10.0))
                .body("[0].'demonym'", containsString("Equatorial Guinean"))
                .body("[0].'area'", numberMatches(28051.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("CMR", "GAB"))
                .body("[0].'nativeName'", containsString("Guinea Ecuatorial"))
                .body("[0].'numericCode'", containsString("226"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XAF"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("es", "fr"))
                .body("[0].'translations'.'de'", containsString("Äquatorial-Guinea"))
                .body("[0].'translations'.'es'", containsString("Guinea Ecuatorial"))
                .body("[0].'translations'.'fr'", containsString("Guinée-Équatoriale"))
                .body("[0].'translations'.'ja'", containsString("赤道ギニア"))
                .body("[0].'translations'.'it'", containsString("Guinea Equatoriale"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_717_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/al?" + 
                    "fields=_EM_15895_XYZ_&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_718_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/togolese?fields=R")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_719_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/bailliage%20de%20jerri?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Jersey"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".je"))
                .body("[0].'alpha2Code'", containsString("JE"))
                .body("[0].'alpha3Code'", containsString("JEY"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("44"))
                .body("[0].'capital'", containsString("Saint Helier"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("JE", "Bailiwick of Jersey", "Bailliage de Jersey", "Bailliage dé Jèrri"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(99000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(49.25))
                .body("[0].'latlng'[1]", numberMatches(-2.16666666))
                .body("[0].'demonym'", containsString("Channel Islander"))
                .body("[0].'area'", numberMatches(116.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Jersey"))
                .body("[0].'numericCode'", containsString("832"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("GBP"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "fr"))
                .body("[0].'translations'.'de'", containsString("Jersey"))
                .body("[0].'translations'.'es'", containsString("Jersey"))
                .body("[0].'translations'.'fr'", containsString("Jersey"))
                .body("[0].'translations'.'ja'", containsString("ジャージー"))
                .body("[0].'translations'.'it'", containsString("Isola di Jersey"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_720_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/south%20sudan?" + 
                    "fields=aftyQ&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_721_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/Polar?fields=_EM_13792_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_722_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/barbadian")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Barbados"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bb"))
                .body("[0].'alpha2Code'", containsString("BB"))
                .body("[0].'alpha3Code'", containsString("BRB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Bridgetown"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("BB"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(285000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(13.16666666))
                .body("[0].'latlng'[1]", numberMatches(-59.53333333))
                .body("[0].'demonym'", containsString("Barbadian"))
                .body("[0].'area'", numberMatches(430.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Barbados"))
                .body("[0].'numericCode'", containsString("052"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("BBD"))
                .body("[0].'currencies'[0].'name'", containsString("Barbadian dollar"))
                .body("[0].'currencies'[0].'symbol'", containsString("$"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("en"))
                .body("[0].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[0].'name'", containsString("English"))
                .body("[0].'languages'[0].'nativeName'", containsString("English"))
                .body("[0].'translations'.'de'", containsString("Barbados"))
                .body("[0].'translations'.'es'", containsString("Barbados"))
                .body("[0].'translations'.'fr'", containsString("Barbade"))
                .body("[0].'translations'.'ja'", containsString("バルバドス"))
                .body("[0].'translations'.'it'", containsString("Barbados"))
                .body("[0].'translations'.'br'", containsString("Barbados"))
                .body("[0].'translations'.'pt'", containsString("Barbados"))
                .body("[0].'translations'.'nl'", containsString("Barbados"))
                .body("[0].'translations'.'hr'", containsString("Barbados"))
                .body("[0].'translations'.'fa'", containsString("باربادوس"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/brb.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("CARICOM"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Caribbean Community"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(3))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("Comunidad del Caribe", "Communauté Caribéenne", "Caribische Gemeenschap"))
                .body("[0].'cioc'", containsString("BAR"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_723_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/bailliage%20de%20jersey?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Jersey"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".je"))
                .body("[0].'alpha2Code'", containsString("JE"))
                .body("[0].'alpha3Code'", containsString("JEY"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("44"))
                .body("[0].'capital'", containsString("Saint Helier"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("JE", "Bailiwick of Jersey", "Bailliage de Jersey", "Bailliage dé Jèrri"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(99000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(49.25))
                .body("[0].'latlng'[1]", numberMatches(-2.16666666))
                .body("[0].'demonym'", containsString("Channel Islander"))
                .body("[0].'area'", numberMatches(116.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Jersey"))
                .body("[0].'numericCode'", containsString("832"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("GBP"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "fr"))
                .body("[0].'translations'.'de'", containsString("Jersey"))
                .body("[0].'translations'.'es'", containsString("Jersey"))
                .body("[0].'translations'.'fr'", containsString("Jersey"))
                .body("[0].'translations'.'ja'", containsString("ジャージー"))
                .body("[0].'translations'.'it'", containsString("Isola di Jersey"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_724_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/beluu%20er%20a%20belau?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Palau"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".pw"))
                .body("[0].'alpha2Code'", containsString("PW"))
                .body("[0].'alpha3Code'", containsString("PLW"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("680"))
                .body("[0].'capital'", containsString("Ngerulmud"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("PW", "Republic of Palau", "Beluu er a Belau"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Micronesia"))
                .body("[0].'population'", numberMatches(20901.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(7.5))
                .body("[0].'latlng'[1]", numberMatches(134.5))
                .body("[0].'demonym'", containsString("Palauan"))
                .body("[0].'area'", numberMatches(459.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+09:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Palau"))
                .body("[0].'numericCode'", containsString("585"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Palau"))
                .body("[0].'translations'.'es'", containsString("Palau"))
                .body("[0].'translations'.'fr'", containsString("Palaos"))
                .body("[0].'translations'.'ja'", containsString("パラオ"))
                .body("[0].'translations'.'it'", containsString("Palau"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_725_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/bharat%20ganrajya?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("India"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".in"))
                .body("[0].'alpha2Code'", containsString("IN"))
                .body("[0].'alpha3Code'", containsString("IND"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("91"))
                .body("[0].'capital'", containsString("New Delhi"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("IN", "Bhārat", "Republic of India", "Bharat Ganrajya"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(1.27584E9))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(20.0))
                .body("[0].'latlng'[1]", numberMatches(77.0))
                .body("[0].'demonym'", containsString("Indian"))
                .body("[0].'area'", numberMatches(3287590.0))
                .body("[0].'gini'", numberMatches(33.4))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+05:30"))
                .body("[0].'borders'.size()", equalTo(8))
                .body("[0].'borders'", hasItems("AFG", "BGD", "BTN", "MMR", "CHN", "NPL", "PAK", "LKA"))
                .body("[0].'nativeName'", containsString("भारत"))
                .body("[0].'numericCode'", containsString("356"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("INR"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("hi", "en"))
                .body("[0].'translations'.'de'", containsString("Indien"))
                .body("[0].'translations'.'es'", containsString("India"))
                .body("[0].'translations'.'fr'", containsString("Inde"))
                .body("[0].'translations'.'ja'", containsString("インド"))
                .body("[0].'translations'.'it'", containsString("India"))
                .body("[0].'relevance'", containsString("3"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_726_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/bolivarian%20republic%20of%20venezuela?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Venezuela"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ve"))
                .body("[0].'alpha2Code'", containsString("VE"))
                .body("[0].'alpha3Code'", containsString("VEN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("58"))
                .body("[0].'capital'", containsString("Caracas"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("VE", "Bolivarian Republic of Venezuela", "República Bolivariana de Venezuela"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(3.0620404E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(8.0))
                .body("[0].'latlng'[1]", numberMatches(-66.0))
                .body("[0].'demonym'", containsString("Venezuelan"))
                .body("[0].'area'", numberMatches(916445.0))
                .body("[0].'gini'", numberMatches(44.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:30"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("BRA", "COL", "GUY"))
                .body("[0].'nativeName'", containsString("Venezuela"))
                .body("[0].'numericCode'", containsString("862"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("VEF"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("es"))
                .body("[0].'translations'.'de'", containsString("Venezuela"))
                .body("[0].'translations'.'es'", containsString("Venezuela"))
                .body("[0].'translations'.'fr'", containsString("Venezuela"))
                .body("[0].'translations'.'ja'", containsString("ベネズエラ・ボリバル共和国"))
                .body("[0].'translations'.'it'", containsString("Venezuela"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_727_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/591")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Bolivia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bo"))
                .body("[0].'alpha2Code'", containsString("BO"))
                .body("[0].'alpha3Code'", containsString("BOL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("591"))
                .body("[0].'capital'", containsString("Sucre"))
                .body("[0].'altSpellings'.size()", equalTo(8))
                .body("[0].'altSpellings'", hasItems("BO", "Buliwya", "Wuliwya", "Plurinational State of Bolivia", "Estado Plurinacional de Bolivia", "Buliwya Mamallaqta", "Wuliwya Suyu", "Tetã Volívia"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(1.1410651E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-17.0))
                .body("[0].'latlng'[1]", numberMatches(-65.0))
                .body("[0].'demonym'", containsString("Bolivian"))
                .body("[0].'area'", numberMatches(1098581.0))
                .body("[0].'gini'", numberMatches(56.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("ARG", "BRA", "CHL", "PRY", "PER"))
                .body("[0].'nativeName'", containsString("Bolivia"))
                .body("[0].'numericCode'", containsString("068"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'", hasItems("BOB", "BOV"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("es", "ay", "qu"))
                .body("[0].'translations'.'de'", containsString("Bolivien"))
                .body("[0].'translations'.'es'", containsString("Bolivia"))
                .body("[0].'translations'.'fr'", containsString("Bolivie"))
                .body("[0].'translations'.'ja'", containsString("ボリビア多民族国"))
                .body("[0].'translations'.'it'", containsString("Bolivia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_728_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/cuba")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Cuba"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cu"))
                .body("[0].'alpha2Code'", containsString("CU"))
                .body("[0].'alpha3Code'", containsString("CUB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("53"))
                .body("[0].'capital'", containsString("Havana"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("CU", "Republic of Cuba", "República de Cuba"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(1.1239004E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(21.5))
                .body("[0].'latlng'[1]", numberMatches(-80.0))
                .body("[0].'demonym'", containsString("Cuban"))
                .body("[0].'area'", numberMatches(109884.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-05:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Cuba"))
                .body("[0].'numericCode'", containsString("192"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'[0].'code'", containsString("CUC"))
                .body("[0].'currencies'[0].'name'", containsString("Cuban convertible peso"))
                .body("[0].'currencies'[0].'symbol'", containsString("$"))
                .body("[0].'currencies'[1].'code'", containsString("CUP"))
                .body("[0].'currencies'[1].'name'", containsString("Cuban peso"))
                .body("[0].'currencies'[1].'symbol'", containsString("$"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("es"))
                .body("[0].'languages'[0].'iso639_2'", containsString("spa"))
                .body("[0].'languages'[0].'name'", containsString("Spanish"))
                .body("[0].'languages'[0].'nativeName'", containsString("Español"))
                .body("[0].'translations'.'de'", containsString("Kuba"))
                .body("[0].'translations'.'es'", containsString("Cuba"))
                .body("[0].'translations'.'fr'", containsString("Cuba"))
                .body("[0].'translations'.'ja'", containsString("キューバ"))
                .body("[0].'translations'.'it'", containsString("Cuba"))
                .body("[0].'translations'.'br'", containsString("Cuba"))
                .body("[0].'translations'.'pt'", containsString("Cuba"))
                .body("[0].'translations'.'nl'", containsString("Cuba"))
                .body("[0].'translations'.'hr'", containsString("Kuba"))
                .body("[0].'translations'.'fa'", containsString("کوبا"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/cub.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("CUB"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_729_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/east%20timorese?fields=mpJeC0o0RsAkiO")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_730_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/ecuadorean?fields=mpJeC0o0RsAkiO")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_731_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/592")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Guyana"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gy"))
                .body("[0].'alpha2Code'", containsString("GY"))
                .body("[0].'alpha3Code'", containsString("GUY"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("592"))
                .body("[0].'capital'", containsString("Georgetown"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("GY", "Co-operative Republic of Guyana"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(746900.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(5.0))
                .body("[0].'latlng'[1]", numberMatches(-59.0))
                .body("[0].'demonym'", containsString("Guyanese"))
                .body("[0].'area'", numberMatches(214969.0))
                .body("[0].'gini'", numberMatches(44.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("BRA", "SUR", "VEN"))
                .body("[0].'nativeName'", containsString("Guyana"))
                .body("[0].'numericCode'", containsString("328"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("GYD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Guyana"))
                .body("[0].'translations'.'es'", containsString("Guyana"))
                .body("[0].'translations'.'fr'", containsString("Guyane"))
                .body("[0].'translations'.'ja'", containsString("ガイアナ"))
                .body("[0].'translations'.'it'", containsString("Guyana"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_732_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/593")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Ecuador"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ec"))
                .body("[0].'alpha2Code'", containsString("EC"))
                .body("[0].'alpha3Code'", containsString("ECU"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("593"))
                .body("[0].'capital'", containsString("Quito"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("EC", "Republic of Ecuador", "República del Ecuador"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(1.60275E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-2.0))
                .body("[0].'latlng'[1]", numberMatches(-77.5))
                .body("[0].'demonym'", containsString("Ecuadorean"))
                .body("[0].'area'", numberMatches(276841.0))
                .body("[0].'gini'", numberMatches(49.3))
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC-06:00", "UTC-05:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("COL", "PER"))
                .body("[0].'nativeName'", containsString("Ecuador"))
                .body("[0].'numericCode'", containsString("218"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("es"))
                .body("[0].'translations'.'de'", containsString("Ecuador"))
                .body("[0].'translations'.'es'", containsString("Ecuador"))
                .body("[0].'translations'.'fr'", containsString("Équateur"))
                .body("[0].'translations'.'ja'", containsString("エクアドル"))
                .body("[0].'translations'.'it'", containsString("Ecuador"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_733_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/595")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Paraguay"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".py"))
                .body("[0].'alpha2Code'", containsString("PY"))
                .body("[0].'alpha3Code'", containsString("PRY"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("595"))
                .body("[0].'capital'", containsString("Asunción"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("PY", "Republic of Paraguay", "República del Paraguay", "Tetã Paraguái"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(7003406.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-23.0))
                .body("[0].'latlng'[1]", numberMatches(-58.0))
                .body("[0].'demonym'", containsString("Paraguayan"))
                .body("[0].'area'", numberMatches(406752.0))
                .body("[0].'gini'", numberMatches(52.4))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("ARG", "BOL", "BRA"))
                .body("[0].'nativeName'", containsString("Paraguay"))
                .body("[0].'numericCode'", containsString("600"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("PYG"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("es", "gn"))
                .body("[0].'translations'.'de'", containsString("Paraguay"))
                .body("[0].'translations'.'es'", containsString("Paraguay"))
                .body("[0].'translations'.'fr'", containsString("Paraguay"))
                .body("[0].'translations'.'ja'", containsString("パラグアイ"))
                .body("[0].'translations'.'it'", containsString("Paraguay"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_734_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/596")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Martinique"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mq"))
                .body("[0].'alpha2Code'", containsString("MQ"))
                .body("[0].'alpha3Code'", containsString("MTQ"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("596"))
                .body("[0].'capital'", containsString("Fort-de-France"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("MQ"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(381326.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(14.666667))
                .body("[0].'latlng'[1]", numberMatches(-61.0))
                .body("[0].'demonym'", containsString("French"))
                .body("[0].'area'", nullValue())
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Martinique"))
                .body("[0].'numericCode'", containsString("474"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Martinique"))
                .body("[0].'translations'.'es'", containsString("Martinica"))
                .body("[0].'translations'.'fr'", containsString("Martinique"))
                .body("[0].'translations'.'ja'", containsString("マルティニーク"))
                .body("[0].'translations'.'it'", containsString("Martinica"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_735_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/naoero?" + 
                    "fields=_EM_13874_XYZ_&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_736_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/356?fields=_EM_4148_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_737_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/manama?fields=_EM_13879_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_738_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/jm?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Jamaica"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".jm"))
                .body("[0].'alpha2Code'", containsString("JM"))
                .body("[0].'alpha3Code'", containsString("JAM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Kingston"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("JM"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(2717991.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(18.25))
                .body("[0].'latlng'[1]", numberMatches(-77.5))
                .body("[0].'demonym'", containsString("Jamaican"))
                .body("[0].'area'", numberMatches(10991.0))
                .body("[0].'gini'", numberMatches(45.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-05:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Jamaica"))
                .body("[0].'numericCode'", containsString("388"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("JMD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Jamaika"))
                .body("[0].'translations'.'es'", containsString("Jamaica"))
                .body("[0].'translations'.'fr'", containsString("Jamaïque"))
                .body("[0].'translations'.'ja'", containsString("ジャマイカ"))
                .body("[0].'translations'.'it'", containsString("Giamaica"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_739_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/nc?" + 
                    "fields=alpha3Code&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha3Code'", containsString("NCL"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_740_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/ne?" + 
                    "fields=alpha3Code&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha3Code'", containsString("NER"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_741_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/nederland?" + 
                    "fields=alpha3Code&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha3Code'", containsString("NLD"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_742_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/afghan?fields=_EM_7060_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_743_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/fiji")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Fiji"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".fj"))
                .body("[0].'alpha2Code'", containsString("FJ"))
                .body("[0].'alpha3Code'", containsString("FJI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("679"))
                .body("[0].'capital'", containsString("Suva"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("FJ", "Viti", "Republic of Fiji", "Matanitu ko Viti", "Fijī Gaṇarājya"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Melanesia"))
                .body("[0].'population'", numberMatches(859178.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-18.0))
                .body("[0].'latlng'[1]", numberMatches(175.0))
                .body("[0].'demonym'", containsString("Fijian"))
                .body("[0].'area'", numberMatches(18272.0))
                .body("[0].'gini'", numberMatches(42.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+12:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Fiji"))
                .body("[0].'numericCode'", containsString("242"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("FJD"))
                .body("[0].'languages'.size()", equalTo(4))
                .body("[0].'languages'", hasItems("en", "fj", "hi", "ur"))
                .body("[0].'translations'.'de'", containsString("Fidschi"))
                .body("[0].'translations'.'es'", containsString("Fiyi"))
                .body("[0].'translations'.'fr'", containsString("Fidji"))
                .body("[0].'translations'.'ja'", containsString("フィジー"))
                .body("[0].'translations'.'it'", containsString("Figi"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_744_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/tN")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Guam"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gu"))
                .body("[0].'alpha2Code'", containsString("GU"))
                .body("[0].'alpha3Code'", containsString("GUM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Hagåtña"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("GU", "Guåhån"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Micronesia"))
                .body("[0].'population'", numberMatches(159358.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(13.46666666))
                .body("[0].'latlng'[1]", numberMatches(144.78333333))
                .body("[0].'demonym'", containsString("Guamanian"))
                .body("[0].'area'", numberMatches(549.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+10:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Guam"))
                .body("[0].'numericCode'", containsString("316"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("en", "ch", "es"))
                .body("[0].'translations'.'de'", containsString("Guam"))
                .body("[0].'translations'.'es'", containsString("Guam"))
                .body("[0].'translations'.'fr'", containsString("Guam"))
                .body("[0].'translations'.'ja'", containsString("グアム"))
                .body("[0].'translations'.'it'", containsString("Guam"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_745_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/thai?fields=R")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_746_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/san%20jose?fields=QYfZM")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_747_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/amelika%20samoa?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("American Samoa"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".as"))
                .body("[0].'alpha2Code'", containsString("AS"))
                .body("[0].'alpha3Code'", containsString("ASM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Pago Pago"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("AS", "Amerika Sāmoa", "Amelika Sāmoa", "Sāmoa Amelika"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Polynesia"))
                .body("[0].'population'", numberMatches(55519.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-14.33333333))
                .body("[0].'latlng'[1]", numberMatches(-170.0))
                .body("[0].'demonym'", containsString("American Samoan"))
                .body("[0].'area'", numberMatches(199.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-11:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("American Samoa"))
                .body("[0].'numericCode'", containsString("016"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "sm"))
                .body("[0].'translations'.'de'", containsString("Amerikanisch-Samoa"))
                .body("[0].'translations'.'es'", containsString("Samoa Americana"))
                .body("[0].'translations'.'fr'", containsString("Samoa américaines"))
                .body("[0].'translations'.'ja'", containsString("アメリカ領サモア"))
                .body("[0].'translations'.'it'", containsString("Samoa Americane"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_748_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/faroese?fields=tDSk")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_749_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/597")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Suriname"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sr"))
                .body("[0].'alpha2Code'", containsString("SR"))
                .body("[0].'alpha3Code'", containsString("SUR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("597"))
                .body("[0].'capital'", containsString("Paramaribo"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("SR", "Sarnam", "Sranangron", "Republic of Suriname", "Republiek Suriname"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(534189.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(4.0))
                .body("[0].'latlng'[1]", numberMatches(-56.0))
                .body("[0].'demonym'", containsString("Surinamer"))
                .body("[0].'area'", numberMatches(163820.0))
                .body("[0].'gini'", numberMatches(52.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-03:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("BRA", "GUF", "FRA", "GUY"))
                .body("[0].'nativeName'", containsString("Suriname"))
                .body("[0].'numericCode'", containsString("740"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("SRD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("nl"))
                .body("[0].'translations'.'de'", containsString("Suriname"))
                .body("[0].'translations'.'es'", containsString("Surinam"))
                .body("[0].'translations'.'fr'", containsString("Surinam"))
                .body("[0].'translations'.'ja'", containsString("スリナム"))
                .body("[0].'translations'.'it'", containsString("Suriname"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_750_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/599")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("Bonaire"))
                .body("[0].'topLevelDomain'.size()", equalTo(2))
                .body("[0].'topLevelDomain'", hasItems(".an", ".nl"))
                .body("[0].'alpha2Code'", containsString("BQ"))
                .body("[0].'alpha3Code'", containsString("BES"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("599"))
                .body("[0].'capital'", containsString("Kralendijk"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("BQ", "Boneiru"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(17408.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(12.15))
                .body("[0].'latlng'[1]", numberMatches(-68.266667))
                .body("[0].'demonym'", containsString("Dutch"))
                .body("[0].'area'", numberMatches(294.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Bonaire"))
                .body("[0].'numericCode'", containsString("535"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("nl"))
                .body("[0].'translations'.'de'", nullValue())
                .body("[0].'translations'.'es'", nullValue())
                .body("[0].'translations'.'fr'", nullValue())
                .body("[0].'translations'.'ja'", nullValue())
                .body("[0].'translations'.'it'", nullValue())
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Curaçao"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".cw"))
                .body("[1].'alpha2Code'", containsString("CW"))
                .body("[1].'alpha3Code'", containsString("CUW"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("599"))
                .body("[1].'capital'", containsString("Willemstad"))
                .body("[1].'altSpellings'.size()", equalTo(6))
                .body("[1].'altSpellings'", hasItems("CW", "Curacao", "Kòrsou", "Country of Curaçao", "Land Curaçao", "Pais Kòrsou"))
                .body("[1].'region'", containsString("Americas"))
                .body("[1].'subregion'", containsString("Caribbean"))
                .body("[1].'population'", numberMatches(154843.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(12.116667))
                .body("[1].'latlng'[1]", numberMatches(-68.933333))
                .body("[1].'demonym'", containsString("Dutch"))
                .body("[1].'area'", numberMatches(444.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC-04:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Curaçao"))
                .body("[1].'numericCode'", containsString("531"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("ANG"))
                .body("[1].'languages'.size()", equalTo(3))
                .body("[1].'languages'", hasItems("nl", "pa", "en"))
                .body("[1].'translations'.'de'", nullValue())
                .body("[1].'translations'.'es'", nullValue())
                .body("[1].'translations'.'fr'", nullValue())
                .body("[1].'translations'.'ja'", nullValue())
                .body("[1].'translations'.'it'", nullValue())
                .body("[1].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_751_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/31?fields=mpY")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_752_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/lb?" + 
                    "fields=Glh&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_753_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/lc?" + 
                    "fields=Glh&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_754_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/jp?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Japan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".jp"))
                .body("[0].'alpha2Code'", containsString("JP"))
                .body("[0].'alpha3Code'", containsString("JPN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("81"))
                .body("[0].'capital'", containsString("Tokyo"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("JP", "Nippon", "Nihon"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Eastern Asia"))
                .body("[0].'population'", numberMatches(1.26865E8))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(36.0))
                .body("[0].'latlng'[1]", numberMatches(138.0))
                .body("[0].'demonym'", containsString("Japanese"))
                .body("[0].'area'", numberMatches(377930.0))
                .body("[0].'gini'", numberMatches(38.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+09:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("日本"))
                .body("[0].'numericCode'", containsString("392"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("JPY"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ja"))
                .body("[0].'translations'.'de'", containsString("Japan"))
                .body("[0].'translations'.'es'", containsString("Japón"))
                .body("[0].'translations'.'fr'", containsString("Japon"))
                .body("[0].'translations'.'ja'", containsString("日本"))
                .body("[0].'translations'.'it'", containsString("Giappone"))
                .body("[0].'relevance'", containsString("2.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_755_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/48")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Poland"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".pl"))
                .body("[0].'alpha2Code'", containsString("PL"))
                .body("[0].'alpha3Code'", containsString("POL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("48"))
                .body("[0].'capital'", containsString("Warsaw"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("PL", "Republic of Poland", "Rzeczpospolita Polska"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(3.8484E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(52.0))
                .body("[0].'latlng'[1]", numberMatches(20.0))
                .body("[0].'demonym'", containsString("Polish"))
                .body("[0].'area'", numberMatches(312679.0))
                .body("[0].'gini'", numberMatches(34.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(7))
                .body("[0].'borders'", hasItems("BLR", "CZE", "DEU", "LTU", "RUS", "SVK", "UKR"))
                .body("[0].'nativeName'", containsString("Polska"))
                .body("[0].'numericCode'", containsString("616"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("PLN"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("pl"))
                .body("[0].'translations'.'de'", containsString("Polen"))
                .body("[0].'translations'.'es'", containsString("Polonia"))
                .body("[0].'translations'.'fr'", containsString("Pologne"))
                .body("[0].'translations'.'ja'", containsString("ポーランド"))
                .body("[0].'translations'.'it'", containsString("Polonia"))
                .body("[0].'relevance'", containsString("1.25"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_756_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/u")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(72))
                .body("[0].'name'", containsString("Afghanistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".af"))
                .body("[0].'alpha2Code'", containsString("AF"))
                .body("[0].'alpha3Code'", containsString("AFG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("93"))
                .body("[0].'capital'", containsString("Kabul"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("AF", "Afġānistān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(2.60231E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(33.0))
                .body("[0].'latlng'[1]", numberMatches(65.0))
                .body("[0].'demonym'", containsString("Afghan"))
                .body("[0].'area'", numberMatches(652230.0))
                .body("[0].'gini'", numberMatches(27.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:30"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("IRN", "PAK", "TKM", "UZB", "TJK", "CHN"))
                .body("[0].'nativeName'", containsString("افغانستان"))
                .body("[0].'numericCode'", containsString("004"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AFN"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("ps", "uz", "tk"))
                .body("[0].'translations'.'de'", containsString("Afghanistan"))
                .body("[0].'translations'.'es'", containsString("Afganistán"))
                .body("[0].'translations'.'fr'", containsString("Afghanistan"))
                .body("[0].'translations'.'ja'", containsString("アフガニスタン"))
                .body("[0].'translations'.'it'", containsString("Afghanistan"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Angola"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ao"))
                .body("[1].'alpha2Code'", containsString("AO"))
                .body("[1].'alpha3Code'", containsString("AGO"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("244"))
                .body("[1].'capital'", containsString("Luanda"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("AO", "República de Angola", "ʁɛpublika de an'ɡɔla"))
                .body("[1].'region'", containsString("Africa"))
                .body("[1].'subregion'", containsString("Middle Africa"))
                .body("[1].'population'", numberMatches(2.4383301E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-12.5))
                .body("[1].'latlng'[1]", numberMatches(18.5))
                .body("[1].'demonym'", containsString("Angolan"))
                .body("[1].'area'", numberMatches(1246700.0))
                .body("[1].'gini'", numberMatches(58.6))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+01:00"))
                .body("[1].'borders'.size()", equalTo(4))
                .body("[1].'borders'", hasItems("COG", "COD", "ZMB", "NAM"))
                .body("[1].'nativeName'", containsString("Angola"))
                .body("[1].'numericCode'", containsString("024"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("AOA"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("pt"))
                .body("[1].'translations'.'de'", containsString("Angola"))
                .body("[1].'translations'.'es'", containsString("Angola"))
                .body("[1].'translations'.'fr'", containsString("Angola"))
                .body("[1].'translations'.'ja'", containsString("アンゴラ"))
                .body("[1].'translations'.'it'", containsString("Angola"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Argentina"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".ar"))
                .body("[2].'alpha2Code'", containsString("AR"))
                .body("[2].'alpha3Code'", containsString("ARG"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("54"))
                .body("[2].'capital'", containsString("Buenos Aires"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("AR", "Argentine Republic", "República Argentina"))
                .body("[2].'region'", containsString("Americas"))
                .body("[2].'subregion'", containsString("South America"))
                .body("[2].'population'", numberMatches(4.3131966E7))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(-34.0))
                .body("[2].'latlng'[1]", numberMatches(-64.0))
                .body("[2].'demonym'", containsString("Argentinean"))
                .body("[2].'area'", numberMatches(2780400.0))
                .body("[2].'gini'", numberMatches(44.5))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC-03:00"))
                .body("[2].'borders'.size()", equalTo(5))
                .body("[2].'borders'", hasItems("BOL", "BRA", "CHL", "PRY", "URY"))
                .body("[2].'nativeName'", containsString("Argentina"))
                .body("[2].'numericCode'", containsString("032"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("ARS"))
                .body("[2].'languages'.size()", equalTo(2))
                .body("[2].'languages'", hasItems("es", "gn"))
                .body("[2].'translations'.'de'", containsString("Argentinien"))
                .body("[2].'translations'.'es'", containsString("Argentina"))
                .body("[2].'translations'.'fr'", containsString("Argentine"))
                .body("[2].'translations'.'ja'", containsString("アルゼンチン"))
                .body("[2].'translations'.'it'", containsString("Argentina"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 69 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_757_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/852")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Hong Kong"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".hk"))
                .body("[0].'alpha2Code'", containsString("HK"))
                .body("[0].'alpha3Code'", containsString("HKG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("852"))
                .body("[0].'capital'", containsString("City of Victoria"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("HK", "香港"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Eastern Asia"))
                .body("[0].'population'", numberMatches(7324300.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(22.25))
                .body("[0].'latlng'[1]", numberMatches(114.16666666))
                .body("[0].'demonym'", containsString("Chinese"))
                .body("[0].'area'", numberMatches(1104.0))
                .body("[0].'gini'", numberMatches(53.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("CHN"))
                .body("[0].'nativeName'", containsString("香港"))
                .body("[0].'numericCode'", containsString("344"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("HKD"))
                .body("[0].'currencies'[0].'name'", containsString("Hong Kong dollar"))
                .body("[0].'currencies'[0].'symbol'", containsString("$"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("en"))
                .body("[0].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[0].'name'", containsString("English"))
                .body("[0].'languages'[0].'nativeName'", containsString("English"))
                .body("[0].'languages'[1].'iso639_1'", containsString("zh"))
                .body("[0].'languages'[1].'iso639_2'", containsString("zho"))
                .body("[0].'languages'[1].'name'", containsString("Chinese"))
                .body("[0].'languages'[1].'nativeName'", containsString("中文 (Zhōngwén)"))
                .body("[0].'translations'.'de'", containsString("Hong Kong"))
                .body("[0].'translations'.'es'", containsString("Hong Kong"))
                .body("[0].'translations'.'fr'", containsString("Hong Kong"))
                .body("[0].'translations'.'ja'", containsString("香港"))
                .body("[0].'translations'.'it'", containsString("Hong Kong"))
                .body("[0].'translations'.'br'", containsString("Hong Kong"))
                .body("[0].'translations'.'pt'", containsString("Hong Kong"))
                .body("[0].'translations'.'nl'", containsString("Hongkong"))
                .body("[0].'translations'.'hr'", containsString("Hong Kong"))
                .body("[0].'translations'.'fa'", containsString("هنگ‌کنگ"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/hkg.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("HKG"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_758_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/683")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Niue"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".nu"))
                .body("[0].'alpha2Code'", containsString("NU"))
                .body("[0].'alpha3Code'", containsString("NIU"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("683"))
                .body("[0].'capital'", containsString("Alofi"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("NU"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Polynesia"))
                .body("[0].'population'", numberMatches(1613.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-19.03333333))
                .body("[0].'latlng'[1]", numberMatches(-169.86666666))
                .body("[0].'demonym'", containsString("Niuean"))
                .body("[0].'area'", numberMatches(260.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-11:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Niuē"))
                .body("[0].'numericCode'", containsString("570"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("NZD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Niue"))
                .body("[0].'translations'.'es'", containsString("Niue"))
                .body("[0].'translations'.'fr'", containsString("Niue"))
                .body("[0].'translations'.'ja'", containsString("ニウエ"))
                .body("[0].'translations'.'it'", containsString("Niue"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_759_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/41?fields=zTO7qZpjjY")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_760_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/la?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Laos"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".la"))
                .body("[0].'alpha2Code'", containsString("LA"))
                .body("[0].'alpha3Code'", containsString("LAO"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("856"))
                .body("[0].'capital'", containsString("Vientiane"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("LA", "Lao", "Lao People's Democratic Republic", "Sathalanalat Paxathipatai Paxaxon Lao"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("South-Eastern Asia"))
                .body("[0].'population'", numberMatches(6802000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(18.0))
                .body("[0].'latlng'[1]", numberMatches(105.0))
                .body("[0].'demonym'", containsString("Laotian"))
                .body("[0].'area'", numberMatches(236800.0))
                .body("[0].'gini'", numberMatches(36.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+07:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("MMR", "KHM", "CHN", "THA", "VNM"))
                .body("[0].'nativeName'", containsString("ສປປລາວ"))
                .body("[0].'numericCode'", containsString("418"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("LAK"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("lo"))
                .body("[0].'translations'.'de'", containsString("Laos"))
                .body("[0].'translations'.'es'", containsString("Laos"))
                .body("[0].'translations'.'fr'", containsString("Laos"))
                .body("[0].'translations'.'ja'", containsString("ラオス人民民主共和国"))
                .body("[0].'translations'.'it'", containsString("Laos"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_761_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/land%20curacao?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Curaçao"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cw"))
                .body("[0].'alpha2Code'", containsString("CW"))
                .body("[0].'alpha3Code'", containsString("CUW"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("599"))
                .body("[0].'capital'", containsString("Willemstad"))
                .body("[0].'altSpellings'.size()", equalTo(6))
                .body("[0].'altSpellings'", hasItems("CW", "Curacao", "Kòrsou", "Country of Curaçao", "Land Curaçao", "Pais Kòrsou"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(154843.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(12.116667))
                .body("[0].'latlng'[1]", numberMatches(-68.933333))
                .body("[0].'demonym'", containsString("Dutch"))
                .body("[0].'area'", numberMatches(444.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Curaçao"))
                .body("[0].'numericCode'", containsString("531"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ANG"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("nl", "pa", "en"))
                .body("[0].'translations'.'de'", nullValue())
                .body("[0].'translations'.'es'", nullValue())
                .body("[0].'translations'.'fr'", nullValue())
                .body("[0].'translations'.'ja'", nullValue())
                .body("[0].'translations'.'it'", nullValue())
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_762_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/lao?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Laos"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".la"))
                .body("[0].'alpha2Code'", containsString("LA"))
                .body("[0].'alpha3Code'", containsString("LAO"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("856"))
                .body("[0].'capital'", containsString("Vientiane"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("LA", "Lao", "Lao People's Democratic Republic", "Sathalanalat Paxathipatai Paxaxon Lao"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("South-Eastern Asia"))
                .body("[0].'population'", numberMatches(6802000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(18.0))
                .body("[0].'latlng'[1]", numberMatches(105.0))
                .body("[0].'demonym'", containsString("Laotian"))
                .body("[0].'area'", numberMatches(236800.0))
                .body("[0].'gini'", numberMatches(36.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+07:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("MMR", "KHM", "CHN", "THA", "VNM"))
                .body("[0].'nativeName'", containsString("ສປປລາວ"))
                .body("[0].'numericCode'", containsString("418"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("LAK"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("lo"))
                .body("[0].'translations'.'de'", containsString("Laos"))
                .body("[0].'translations'.'es'", containsString("Laos"))
                .body("[0].'translations'.'fr'", containsString("Laos"))
                .body("[0].'translations'.'ja'", containsString("ラオス人民民主共和国"))
                .body("[0].'translations'.'it'", containsString("Laos"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_763_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/lebanon?" + 
                    "fields=Glh&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_764_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/lesotho?" + 
                    "fields=Glh&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_765_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/lao%20people's%20democratic%20republic?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Laos"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".la"))
                .body("[0].'alpha2Code'", containsString("LA"))
                .body("[0].'alpha3Code'", containsString("LAO"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("856"))
                .body("[0].'capital'", containsString("Vientiane"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("LA", "Lao", "Lao People's Democratic Republic", "Sathalanalat Paxathipatai Paxaxon Lao"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("South-Eastern Asia"))
                .body("[0].'population'", numberMatches(6802000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(18.0))
                .body("[0].'latlng'[1]", numberMatches(105.0))
                .body("[0].'demonym'", containsString("Laotian"))
                .body("[0].'area'", numberMatches(236800.0))
                .body("[0].'gini'", numberMatches(36.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+07:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("MMR", "KHM", "CHN", "THA", "VNM"))
                .body("[0].'nativeName'", containsString("ສປປລາວ"))
                .body("[0].'numericCode'", containsString("418"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("LAK"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("lo"))
                .body("[0].'translations'.'de'", containsString("Laos"))
                .body("[0].'translations'.'es'", containsString("Laos"))
                .body("[0].'translations'.'fr'", containsString("Laos"))
                .body("[0].'translations'.'ja'", containsString("ラオス人民民主共和国"))
                .body("[0].'translations'.'it'", containsString("Laos"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_766_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/latvijas%20republika?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Latvia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".lv"))
                .body("[0].'alpha2Code'", containsString("LV"))
                .body("[0].'alpha3Code'", containsString("LVA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("371"))
                .body("[0].'capital'", containsString("Riga"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("LV", "Republic of Latvia", "Latvijas Republika"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(1980700.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(57.0))
                .body("[0].'latlng'[1]", numberMatches(25.0))
                .body("[0].'demonym'", containsString("Latvian"))
                .body("[0].'area'", numberMatches(64559.0))
                .body("[0].'gini'", numberMatches(36.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("BLR", "EST", "LTU", "RUS"))
                .body("[0].'nativeName'", containsString("Latvija"))
                .body("[0].'numericCode'", containsString("428"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("lv"))
                .body("[0].'translations'.'de'", containsString("Lettland"))
                .body("[0].'translations'.'es'", containsString("Letonia"))
                .body("[0].'translations'.'fr'", containsString("Lettonie"))
                .body("[0].'translations'.'ja'", containsString("ラトビア"))
                .body("[0].'translations'.'it'", containsString("Lettonia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_767_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/lb?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'name'", containsString("Albania"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".al"))
                .body("[0].'alpha2Code'", containsString("AL"))
                .body("[0].'alpha3Code'", containsString("ALB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("355"))
                .body("[0].'capital'", containsString("Tirana"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("AL", "Shqipëri", "Shqipëria", "Shqipnia"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(2893005.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(41.0))
                .body("[0].'latlng'[1]", numberMatches(20.0))
                .body("[0].'demonym'", containsString("Albanian"))
                .body("[0].'area'", numberMatches(28748.0))
                .body("[0].'gini'", numberMatches(34.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("MNE", "GRC", "MKD", "KOS"))
                .body("[0].'nativeName'", containsString("Shqipëria"))
                .body("[0].'numericCode'", containsString("008"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ALL"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("sq"))
                .body("[0].'translations'.'de'", containsString("Albanien"))
                .body("[0].'translations'.'es'", containsString("Albania"))
                .body("[0].'translations'.'fr'", containsString("Albanie"))
                .body("[0].'translations'.'ja'", containsString("アルバニア"))
                .body("[0].'translations'.'it'", containsString("Albania"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Svalbard and Jan Mayen"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".sj"))
                .body("[1].'alpha2Code'", containsString("SJ"))
                .body("[1].'alpha3Code'", containsString("SJM"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("47"))
                .body("[1].'capital'", containsString("Longyearbyen"))
                .body("[1].'altSpellings'.size()", equalTo(2))
                .body("[1].'altSpellings'", hasItems("SJ", "Svalbard and Jan Mayen Islands"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Northern Europe"))
                .body("[1].'population'", numberMatches(2562.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(78.0))
                .body("[1].'latlng'[1]", numberMatches(20.0))
                .body("[1].'demonym'", containsString("Norwegian"))
                .body("[1].'area'", nullValue())
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+01:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Svalbard og Jan Mayen"))
                .body("[1].'numericCode'", containsString("744"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("NOK"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("no"))
                .body("[1].'translations'.'de'", containsString("Svalbard und Jan Mayen"))
                .body("[1].'translations'.'es'", containsString("Islas Svalbard y Jan Mayen"))
                .body("[1].'translations'.'fr'", containsString("Svalbard et Jan Mayen"))
                .body("[1].'translations'.'ja'", containsString("スヴァールバル諸島およびヤンマイエン島"))
                .body("[1].'translations'.'it'", containsString("Svalbard e Jan Mayen"))
                .body("[1].'relevance'", containsString("0.5"))
                .body("[2].'name'", containsString("Lebanon"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".lb"))
                .body("[2].'alpha2Code'", containsString("LB"))
                .body("[2].'alpha3Code'", containsString("LBN"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("961"))
                .body("[2].'capital'", containsString("Beirut"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("LB", "Lebanese Republic", "Al-Jumhūrīyah Al-Libnānīyah"))
                .body("[2].'region'", containsString("Asia"))
                .body("[2].'subregion'", containsString("Western Asia"))
                .body("[2].'population'", numberMatches(4104000.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(33.83333333))
                .body("[2].'latlng'[1]", numberMatches(35.83333333))
                .body("[2].'demonym'", containsString("Lebanese"))
                .body("[2].'area'", numberMatches(10452.0))
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+02:00"))
                .body("[2].'borders'.size()", equalTo(2))
                .body("[2].'borders'", hasItems("ISR", "SYR"))
                .body("[2].'nativeName'", containsString("لبنان"))
                .body("[2].'numericCode'", containsString("422"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("LBP"))
                .body("[2].'languages'.size()", equalTo(2))
                .body("[2].'languages'", hasItems("ar", "fr"))
                .body("[2].'translations'.'de'", containsString("Libanon"))
                .body("[2].'translations'.'es'", containsString("Líbano"))
                .body("[2].'translations'.'fr'", containsString("Liban"))
                .body("[2].'translations'.'ja'", containsString("レバノン"))
                .body("[2].'translations'.'it'", containsString("Libano"))
                .body("[2].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_768_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/li?" + 
                    "fields=%3Fld&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_769_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/liberia?" + 
                    "fields=%3Fld&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_770_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/libya?" + 
                    "fields=%3Fld&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_771_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/250")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Rwanda"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".rw"))
                .body("[0].'alpha2Code'", containsString("RW"))
                .body("[0].'alpha3Code'", containsString("RWA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("250"))
                .body("[0].'capital'", containsString("Kigali"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("RW", "Republic of Rwanda", "Repubulika y'u Rwanda", "République du Rwanda"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(1.1553188E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-2.0))
                .body("[0].'latlng'[1]", numberMatches(30.0))
                .body("[0].'demonym'", containsString("Rwandan"))
                .body("[0].'area'", numberMatches(26338.0))
                .body("[0].'gini'", numberMatches(50.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("BDI", "COD", "TZA", "UGA"))
                .body("[0].'nativeName'", containsString("Rwanda"))
                .body("[0].'numericCode'", containsString("646"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("RWF"))
                .body("[0].'currencies'[0].'name'", containsString("Rwandan franc"))
                .body("[0].'currencies'[0].'symbol'", containsString("Fr"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'[0].'iso639_1'", containsString("rw"))
                .body("[0].'languages'[0].'iso639_2'", containsString("kin"))
                .body("[0].'languages'[0].'name'", containsString("Kinyarwanda"))
                .body("[0].'languages'[0].'nativeName'", containsString("Ikinyarwanda"))
                .body("[0].'languages'[1].'iso639_1'", containsString("en"))
                .body("[0].'languages'[1].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[1].'name'", containsString("English"))
                .body("[0].'languages'[1].'nativeName'", containsString("English"))
                .body("[0].'languages'[2].'iso639_1'", containsString("fr"))
                .body("[0].'languages'[2].'iso639_2'", containsString("fra"))
                .body("[0].'languages'[2].'name'", containsString("French"))
                .body("[0].'languages'[2].'nativeName'", containsString("français"))
                .body("[0].'translations'.'de'", containsString("Ruanda"))
                .body("[0].'translations'.'es'", containsString("Ruanda"))
                .body("[0].'translations'.'fr'", containsString("Rwanda"))
                .body("[0].'translations'.'ja'", containsString("ルワンダ"))
                .body("[0].'translations'.'it'", containsString("Ruanda"))
                .body("[0].'translations'.'br'", containsString("Ruanda"))
                .body("[0].'translations'.'pt'", containsString("Ruanda"))
                .body("[0].'translations'.'nl'", containsString("Rwanda"))
                .body("[0].'translations'.'hr'", containsString("Ruanda"))
                .body("[0].'translations'.'fa'", containsString("رواندا"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/rwa.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[0].'cioc'", containsString("RWA"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_772_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/lr?fields=_EM_14395_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_773_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/my?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Malaysia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".my"))
                .body("[0].'alpha2Code'", containsString("MY"))
                .body("[0].'alpha3Code'", containsString("MYS"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("60"))
                .body("[0].'capital'", containsString("Kuala Lumpur"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("MY"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("South-Eastern Asia"))
                .body("[0].'population'", numberMatches(3.06788E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(2.5))
                .body("[0].'latlng'[1]", numberMatches(112.5))
                .body("[0].'demonym'", containsString("Malaysian"))
                .body("[0].'area'", numberMatches(330803.0))
                .body("[0].'gini'", numberMatches(46.2))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("BRN", "IDN", "THA"))
                .body("[0].'nativeName'", containsString("Malaysia"))
                .body("[0].'numericCode'", containsString("458"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MYR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ms"))
                .body("[0].'translations'.'de'", containsString("Malaysia"))
                .body("[0].'translations'.'es'", containsString("Malasia"))
                .body("[0].'translations'.'fr'", containsString("Malaisie"))
                .body("[0].'translations'.'ja'", containsString("マレーシア"))
                .body("[0].'translations'.'it'", containsString("Malesia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_774_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/mz?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Mozambique"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mz"))
                .body("[0].'alpha2Code'", containsString("MZ"))
                .body("[0].'alpha3Code'", containsString("MOZ"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("258"))
                .body("[0].'capital'", containsString("Maputo"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("MZ", "Republic of Mozambique", "República de Moçambique"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(2.5727911E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-18.25))
                .body("[0].'latlng'[1]", numberMatches(35.0))
                .body("[0].'demonym'", containsString("Mozambican"))
                .body("[0].'area'", numberMatches(801590.0))
                .body("[0].'gini'", numberMatches(45.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("MWI", "ZAF", "SWZ", "TZA", "ZMB", "ZWE"))
                .body("[0].'nativeName'", containsString("Moçambique"))
                .body("[0].'numericCode'", containsString("508"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MZN"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("pt"))
                .body("[0].'translations'.'de'", containsString("Mosambik"))
                .body("[0].'translations'.'es'", containsString("Mozambique"))
                .body("[0].'translations'.'fr'", containsString("Mozambique"))
                .body("[0].'translations'.'ja'", containsString("モザンビーク"))
                .body("[0].'translations'.'it'", containsString("Mozambico"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_775_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/dili")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("East Timor"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".tl"))
                .body("[0].'alpha2Code'", containsString("TL"))
                .body("[0].'alpha3Code'", containsString("TLS"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("670"))
                .body("[0].'capital'", containsString("Dili"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("TL", "East Timor", "Democratic Republic of Timor-Leste", "República Democrática de Timor-Leste", "Repúblika Demokrátika Timór-Leste"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("South-Eastern Asia"))
                .body("[0].'population'", numberMatches(1212107.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-8.83333333))
                .body("[0].'latlng'[1]", numberMatches(125.91666666))
                .body("[0].'demonym'", containsString("East Timorese"))
                .body("[0].'area'", numberMatches(14874.0))
                .body("[0].'gini'", numberMatches(31.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+09:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("IDN"))
                .body("[0].'nativeName'", containsString("Timor-Leste"))
                .body("[0].'numericCode'", containsString("626"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("pt"))
                .body("[0].'translations'.'de'", containsString("Timor-Leste"))
                .body("[0].'translations'.'es'", containsString("Timor Oriental"))
                .body("[0].'translations'.'fr'", containsString("Timor oriental"))
                .body("[0].'translations'.'ja'", containsString("東ティモール"))
                .body("[0].'translations'.'it'", containsString("Timor Est"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_776_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/djibouti")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Djibouti"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".dj"))
                .body("[0].'alpha2Code'", containsString("DJ"))
                .body("[0].'alpha3Code'", containsString("DJI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("253"))
                .body("[0].'capital'", containsString("Djibouti"))
                .body("[0].'altSpellings'.size()", equalTo(7))
                .body("[0].'altSpellings'", hasItems("DJ", "Jabuuti", "Gabuuti", "Republic of Djibouti", "République de Djibouti", "Gabuutih Ummuuno", "Jamhuuriyadda Jabuuti"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(888000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(11.5))
                .body("[0].'latlng'[1]", numberMatches(43.0))
                .body("[0].'demonym'", containsString("Djibouti"))
                .body("[0].'area'", numberMatches(23200.0))
                .body("[0].'gini'", numberMatches(40.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("ERI", "ETH", "SOM"))
                .body("[0].'nativeName'", containsString("Djibouti"))
                .body("[0].'numericCode'", containsString("262"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("DJF"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fr", "ar"))
                .body("[0].'translations'.'de'", containsString("Dschibuti"))
                .body("[0].'translations'.'es'", containsString("Yibuti"))
                .body("[0].'translations'.'fr'", containsString("Djibouti"))
                .body("[0].'translations'.'ja'", containsString("ジブチ"))
                .body("[0].'translations'.'it'", containsString("Gibuti"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_777_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/dodoma")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Tanzania"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".tz"))
                .body("[0].'alpha2Code'", containsString("TZ"))
                .body("[0].'alpha3Code'", containsString("TZA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("255"))
                .body("[0].'capital'", containsString("Dodoma"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("TZ", "United Republic of Tanzania", "Jamhuri ya Muungano wa Tanzania"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(5.347E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-6.0))
                .body("[0].'latlng'[1]", numberMatches(35.0))
                .body("[0].'demonym'", containsString("Tanzanian"))
                .body("[0].'area'", numberMatches(945087.0))
                .body("[0].'gini'", numberMatches(37.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(8))
                .body("[0].'borders'", hasItems("BDI", "COD", "KEN", "MWI", "MOZ", "RWA", "UGA", "ZMB"))
                .body("[0].'nativeName'", containsString("Tanzania"))
                .body("[0].'numericCode'", containsString("834"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("TZS"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("sw", "en"))
                .body("[0].'translations'.'de'", containsString("Tansania"))
                .body("[0].'translations'.'es'", containsString("Tanzania"))
                .body("[0].'translations'.'fr'", containsString("Tanzanie"))
                .body("[0].'translations'.'ja'", containsString("タンザニア"))
                .body("[0].'translations'.'it'", containsString("Tanzania"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_778_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/36?fields=TqbXv5MhE9")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_779_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/luxembourg")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Luxembourg"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".lu"))
                .body("[0].'alpha2Code'", containsString("LU"))
                .body("[0].'alpha3Code'", containsString("LUX"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("352"))
                .body("[0].'capital'", containsString("Luxembourg"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("LU", "Grand Duchy of Luxembourg", "Grand-Duché de Luxembourg", "Großherzogtum Luxemburg", "Groussherzogtum Lëtzebuerg"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(562958.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(49.75))
                .body("[0].'latlng'[1]", numberMatches(6.16666666))
                .body("[0].'demonym'", containsString("Luxembourger"))
                .body("[0].'area'", numberMatches(2586.0))
                .body("[0].'gini'", numberMatches(30.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("BEL", "FRA", "DEU"))
                .body("[0].'nativeName'", containsString("Luxembourg"))
                .body("[0].'numericCode'", containsString("442"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("fr", "de", "lb"))
                .body("[0].'translations'.'de'", containsString("Luxemburg"))
                .body("[0].'translations'.'es'", containsString("Luxemburgo"))
                .body("[0].'translations'.'fr'", containsString("Luxembourg"))
                .body("[0].'translations'.'ja'", containsString("ルクセンブルク"))
                .body("[0].'translations'.'it'", containsString("Lussemburgo"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_780_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/majuro")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Marshall Islands"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mh"))
                .body("[0].'alpha2Code'", containsString("MH"))
                .body("[0].'alpha3Code'", containsString("MHL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("692"))
                .body("[0].'capital'", containsString("Majuro"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("MH", "Republic of the Marshall Islands", "Aolepān Aorōkin M̧ajeļ"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Micronesia"))
                .body("[0].'population'", numberMatches(56086.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(9.0))
                .body("[0].'latlng'[1]", numberMatches(168.0))
                .body("[0].'demonym'", containsString("Marshallese"))
                .body("[0].'area'", numberMatches(181.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+12:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("M̧ajeļ"))
                .body("[0].'numericCode'", containsString("584"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "mh"))
                .body("[0].'translations'.'de'", containsString("Marshallinseln"))
                .body("[0].'translations'.'es'", containsString("Islas Marshall"))
                .body("[0].'translations'.'fr'", containsString("Îles Marshall"))
                .body("[0].'translations'.'ja'", containsString("マーシャル諸島"))
                .body("[0].'translations'.'it'", containsString("Isole Marshall"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_781_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/turkmenistan?fields=_EM_3794_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_782_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/tuvalu?" + 
                    "fields=callingCodes&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("688"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_783_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/namibia?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Namibia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".na"))
                .body("[0].'alpha2Code'", containsString("NA"))
                .body("[0].'alpha3Code'", containsString("NAM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("264"))
                .body("[0].'capital'", containsString("Windhoek"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("NA", "Namibië", "Republic of Namibia"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Southern Africa"))
                .body("[0].'population'", numberMatches(2280700.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-22.0))
                .body("[0].'latlng'[1]", numberMatches(17.0))
                .body("[0].'demonym'", containsString("Namibian"))
                .body("[0].'area'", numberMatches(825615.0))
                .body("[0].'gini'", numberMatches(63.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("AGO", "BWA", "ZAF", "ZMB"))
                .body("[0].'nativeName'", containsString("Namibia"))
                .body("[0].'numericCode'", containsString("516"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'", hasItems("NAD", "ZAR"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "af"))
                .body("[0].'translations'.'de'", containsString("Namibia"))
                .body("[0].'translations'.'es'", containsString("Namibia"))
                .body("[0].'translations'.'fr'", containsString("Namibie"))
                .body("[0].'translations'.'ja'", containsString("ナミビア"))
                .body("[0].'translations'.'it'", containsString("Namibia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_784_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/namibie?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Namibia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".na"))
                .body("[0].'alpha2Code'", containsString("NA"))
                .body("[0].'alpha3Code'", containsString("NAM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("264"))
                .body("[0].'capital'", containsString("Windhoek"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("NA", "Namibië", "Republic of Namibia"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Southern Africa"))
                .body("[0].'population'", numberMatches(2280700.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-22.0))
                .body("[0].'latlng'[1]", numberMatches(17.0))
                .body("[0].'demonym'", containsString("Namibian"))
                .body("[0].'area'", numberMatches(825615.0))
                .body("[0].'gini'", numberMatches(63.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("AGO", "BWA", "ZAF", "ZMB"))
                .body("[0].'nativeName'", containsString("Namibia"))
                .body("[0].'numericCode'", containsString("516"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'", hasItems("NAD", "ZAR"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "af"))
                .body("[0].'translations'.'de'", containsString("Namibia"))
                .body("[0].'translations'.'es'", containsString("Namibia"))
                .body("[0].'translations'.'fr'", containsString("Namibie"))
                .body("[0].'translations'.'ja'", containsString("ナミビア"))
                .body("[0].'translations'.'it'", containsString("Namibia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_785_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/tw?" + 
                    "fields=callingCodes&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("886"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_786_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/new%20delhi?fields=0Ztx8nW5v")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_787_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/uzbekistani")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Uzbekistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".uz"))
                .body("[0].'alpha2Code'", containsString("UZ"))
                .body("[0].'alpha3Code'", containsString("UZB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("998"))
                .body("[0].'capital'", containsString("Tashkent"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("UZ", "Republic of Uzbekistan", "O‘zbekiston Respublikasi", "Ўзбекистон Республикаси"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Central Asia"))
                .body("[0].'population'", numberMatches(3.15764E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(41.0))
                .body("[0].'latlng'[1]", numberMatches(64.0))
                .body("[0].'demonym'", containsString("Uzbekistani"))
                .body("[0].'area'", numberMatches(447400.0))
                .body("[0].'gini'", numberMatches(36.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+05:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("AFG", "KAZ", "KGZ", "TJK", "TKM"))
                .body("[0].'nativeName'", containsString("O‘zbekiston"))
                .body("[0].'numericCode'", containsString("860"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("UZS"))
                .body("[0].'currencies'[0].'name'", containsString("Uzbekistani so'm"))
                .body("[0].'currencies'[0].'symbol'", nullValue())
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("uz"))
                .body("[0].'languages'[0].'iso639_2'", containsString("uzb"))
                .body("[0].'languages'[0].'name'", containsString("Uzbek"))
                .body("[0].'languages'[0].'nativeName'", containsString("Oʻzbek"))
                .body("[0].'languages'[1].'iso639_1'", containsString("ru"))
                .body("[0].'languages'[1].'iso639_2'", containsString("rus"))
                .body("[0].'languages'[1].'name'", containsString("Russian"))
                .body("[0].'languages'[1].'nativeName'", containsString("Русский"))
                .body("[0].'translations'.'de'", containsString("Usbekistan"))
                .body("[0].'translations'.'es'", containsString("Uzbekistán"))
                .body("[0].'translations'.'fr'", containsString("Ouzbékistan"))
                .body("[0].'translations'.'ja'", containsString("ウズベキスタン"))
                .body("[0].'translations'.'it'", containsString("Uzbekistan"))
                .body("[0].'translations'.'br'", containsString("Uzbequistão"))
                .body("[0].'translations'.'pt'", containsString("Usbequistão"))
                .body("[0].'translations'.'nl'", containsString("Oezbekistan"))
                .body("[0].'translations'.'hr'", containsString("Uzbekistan"))
                .body("[0].'translations'.'fa'", containsString("ازبکستان"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/uzb.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("UZB"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_788_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/bm?fields=_EM_3794_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_789_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/bn?" + 
                    "fields=_EM_3794_XYZ_&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_790_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/371?fields=TqbXv5MhE9")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_791_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/373?fields=_EM_14611_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_792_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/374?fields=_EM_U4611_XYU_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_793_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/vienna?fields=TJW1r0FWiQxgzdY")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_794_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/virgin%20islander?fields=rRLavV5zdC_awHp")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_795_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/wallis%20and%20futuna%20islander?fields=rRLavV5zdC_awH")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_796_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/yemeni?fields=rRLavV5zdC_awH")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_797_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/zambian?fields=rRLavV5zdC_awH")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_798_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/nc?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("New Caledonia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".nc"))
                .body("[0].'alpha2Code'", containsString("NC"))
                .body("[0].'alpha3Code'", containsString("NCL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("687"))
                .body("[0].'capital'", containsString("Nouméa"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("NC"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Melanesia"))
                .body("[0].'population'", numberMatches(268767.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-21.5))
                .body("[0].'latlng'[1]", numberMatches(165.5))
                .body("[0].'demonym'", containsString("New Caledonian"))
                .body("[0].'area'", numberMatches(18575.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+11:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Nouvelle-Calédonie"))
                .body("[0].'numericCode'", containsString("540"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XPF"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Neukaledonien"))
                .body("[0].'translations'.'es'", containsString("Nueva Caledonia"))
                .body("[0].'translations'.'fr'", containsString("Nouvelle-Calédonie"))
                .body("[0].'translations'.'ja'", containsString("ニューカレドニア"))
                .body("[0].'translations'.'it'", containsString("Nuova Caledonia"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_799_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/ne?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Niger"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ne"))
                .body("[0].'alpha2Code'", containsString("NE"))
                .body("[0].'alpha3Code'", containsString("NER"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("227"))
                .body("[0].'capital'", containsString("Niamey"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("NE", "Nijar", "Republic of Niger", "République du Niger"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(1.9899E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(16.0))
                .body("[0].'latlng'[1]", numberMatches(8.0))
                .body("[0].'demonym'", containsString("Nigerien"))
                .body("[0].'area'", numberMatches(1267000.0))
                .body("[0].'gini'", numberMatches(34.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(7))
                .body("[0].'borders'", hasItems("DZA", "BEN", "BFA", "TCD", "LBY", "MLI", "NGA"))
                .body("[0].'nativeName'", containsString("Niger"))
                .body("[0].'numericCode'", containsString("562"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XOF"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Niger"))
                .body("[0].'translations'.'es'", containsString("Níger"))
                .body("[0].'translations'.'fr'", containsString("Niger"))
                .body("[0].'translations'.'ja'", containsString("ニジェール"))
                .body("[0].'translations'.'it'", containsString("Niger"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_800_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/nepal?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Nepal"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".np"))
                .body("[0].'alpha2Code'", containsString("NP"))
                .body("[0].'alpha3Code'", containsString("NPL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("977"))
                .body("[0].'capital'", containsString("Kathmandu"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("NP", "Federal Democratic Republic of Nepal", "Loktāntrik Ganatantra Nepāl"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(2.8037904E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(28.0))
                .body("[0].'latlng'[1]", numberMatches(84.0))
                .body("[0].'demonym'", containsString("Nepalese"))
                .body("[0].'area'", numberMatches(147181.0))
                .body("[0].'gini'", numberMatches(32.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+05:45"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("CHN", "IND"))
                .body("[0].'nativeName'", containsString("नेपाल"))
                .body("[0].'numericCode'", containsString("524"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("NPR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ne"))
                .body("[0].'translations'.'de'", containsString("Népal"))
                .body("[0].'translations'.'es'", containsString("Nepal"))
                .body("[0].'translations'.'fr'", containsString("Népal"))
                .body("[0].'translations'.'ja'", containsString("ネパール"))
                .body("[0].'translations'.'it'", containsString("Nepal"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_801_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/netherlands?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Netherlands"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".nl"))
                .body("[0].'alpha2Code'", containsString("NL"))
                .body("[0].'alpha3Code'", containsString("NLD"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("31"))
                .body("[0].'capital'", containsString("Amsterdam"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("NL", "Holland", "Nederland"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(1.6916E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(52.5))
                .body("[0].'latlng'[1]", numberMatches(5.75))
                .body("[0].'demonym'", containsString("Dutch"))
                .body("[0].'area'", numberMatches(41850.0))
                .body("[0].'gini'", numberMatches(30.9))
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC-04:00", "UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("BEL", "DEU"))
                .body("[0].'nativeName'", containsString("Nederland"))
                .body("[0].'numericCode'", containsString("528"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("nl"))
                .body("[0].'translations'.'de'", containsString("Niederlande"))
                .body("[0].'translations'.'es'", containsString("Países Bajos"))
                .body("[0].'translations'.'fr'", containsString("Pays-Bas"))
                .body("[0].'translations'.'ja'", containsString("オランダ"))
                .body("[0].'translations'.'it'", containsString("Paesi Bassi"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_802_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/new%20caledonia?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("New Caledonia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".nc"))
                .body("[0].'alpha2Code'", containsString("NC"))
                .body("[0].'alpha3Code'", containsString("NCL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("687"))
                .body("[0].'capital'", containsString("Nouméa"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("NC"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Melanesia"))
                .body("[0].'population'", numberMatches(268767.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-21.5))
                .body("[0].'latlng'[1]", numberMatches(165.5))
                .body("[0].'demonym'", containsString("New Caledonian"))
                .body("[0].'area'", numberMatches(18575.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+11:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Nouvelle-Calédonie"))
                .body("[0].'numericCode'", containsString("540"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XPF"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Neukaledonien"))
                .body("[0].'translations'.'es'", containsString("Nueva Caledonia"))
                .body("[0].'translations'.'fr'", containsString("Nouvelle-Calédonie"))
                .body("[0].'translations'.'ja'", containsString("ニューカレドニア"))
                .body("[0].'translations'.'it'", containsString("Nuova Caledonia"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_803_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/lS")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("Belgium"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".be"))
                .body("[0].'alpha2Code'", containsString("BE"))
                .body("[0].'alpha3Code'", containsString("BEL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("32"))
                .body("[0].'capital'", containsString("Brussels"))
                .body("[0].'altSpellings'.size()", equalTo(9))
                .body("[0].'altSpellings'", hasItems("BE", "België", "Belgie", "Belgien", "Belgique", "Kingdom of Belgium", "Koninkrijk België", "Royaume de Belgique", "Königreich Belgien"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(1.124833E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(50.83333333))
                .body("[0].'latlng'[1]", numberMatches(4.0))
                .body("[0].'demonym'", containsString("Belgian"))
                .body("[0].'area'", numberMatches(30528.0))
                .body("[0].'gini'", numberMatches(33.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("FRA", "DEU", "LUX", "NLD"))
                .body("[0].'nativeName'", containsString("België"))
                .body("[0].'numericCode'", containsString("056"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("nl", "fr", "de"))
                .body("[0].'translations'.'de'", containsString("Belgien"))
                .body("[0].'translations'.'es'", containsString("Bélgica"))
                .body("[0].'translations'.'fr'", containsString("Belgique"))
                .body("[0].'translations'.'ja'", containsString("ベルギー"))
                .body("[0].'translations'.'it'", containsString("Belgio"))
                .body("[0].'relevance'", containsString("1.5"))
                .body("[1].'name'", containsString("Finland"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".fi"))
                .body("[1].'alpha2Code'", containsString("FI"))
                .body("[1].'alpha3Code'", containsString("FIN"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("358"))
                .body("[1].'capital'", containsString("Helsinki"))
                .body("[1].'altSpellings'.size()", equalTo(5))
                .body("[1].'altSpellings'", hasItems("FI", "Suomi", "Republic of Finland", "Suomen tasavalta", "Republiken Finland"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Northern Europe"))
                .body("[1].'population'", numberMatches(5485215.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(64.0))
                .body("[1].'latlng'[1]", numberMatches(26.0))
                .body("[1].'demonym'", containsString("Finnish"))
                .body("[1].'area'", numberMatches(338424.0))
                .body("[1].'gini'", numberMatches(26.9))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+02:00"))
                .body("[1].'borders'.size()", equalTo(3))
                .body("[1].'borders'", hasItems("NOR", "SWE", "RUS"))
                .body("[1].'nativeName'", containsString("Suomi"))
                .body("[1].'numericCode'", containsString("246"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("EUR"))
                .body("[1].'languages'.size()", equalTo(2))
                .body("[1].'languages'", hasItems("fi", "sv"))
                .body("[1].'translations'.'de'", containsString("Finnland"))
                .body("[1].'translations'.'es'", containsString("Finlandia"))
                .body("[1].'translations'.'fr'", containsString("Finlande"))
                .body("[1].'translations'.'ja'", containsString("フィンランド"))
                .body("[1].'translations'.'it'", containsString("Finlandia"))
                .body("[1].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_804_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/iceland?fields=Glh")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_805_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/id?fields=Ulh")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(6))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_806_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/593?fields=mpY")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_807_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/bamako?fields=QYfZM")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_808_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/de?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(65))
                .body("[0].'name'", containsString("Bangladesh"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bd"))
                .body("[0].'alpha2Code'", containsString("BD"))
                .body("[0].'alpha3Code'", containsString("BGD"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("880"))
                .body("[0].'capital'", containsString("Dhaka"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("BD", "People's Republic of Bangladesh", "Gônôprôjatôntri Bangladesh"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(1.58875E8))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(24.0))
                .body("[0].'latlng'[1]", numberMatches(90.0))
                .body("[0].'demonym'", containsString("Bangladeshi"))
                .body("[0].'area'", numberMatches(147570.0))
                .body("[0].'gini'", numberMatches(32.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+06:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("MMR", "IND"))
                .body("[0].'nativeName'", containsString("Bangladesh"))
                .body("[0].'numericCode'", containsString("050"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BDT"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("bn"))
                .body("[0].'translations'.'de'", containsString("Bangladesch"))
                .body("[0].'translations'.'es'", containsString("Bangladesh"))
                .body("[0].'translations'.'fr'", containsString("Bangladesh"))
                .body("[0].'translations'.'ja'", containsString("バングラデシュ"))
                .body("[0].'translations'.'it'", containsString("Bangladesh"))
                .body("[0].'relevance'", containsString("2"))
                .body("[1].'name'", containsString("Cape Verde"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".cv"))
                .body("[1].'alpha2Code'", containsString("CV"))
                .body("[1].'alpha3Code'", containsString("CPV"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("238"))
                .body("[1].'capital'", containsString("Praia"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("CV", "Republic of Cabo Verde", "República de Cabo Verde"))
                .body("[1].'region'", containsString("Africa"))
                .body("[1].'subregion'", containsString("Western Africa"))
                .body("[1].'population'", numberMatches(524833.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(16.0))
                .body("[1].'latlng'[1]", numberMatches(-24.0))
                .body("[1].'demonym'", containsString("Cape Verdian"))
                .body("[1].'area'", numberMatches(4033.0))
                .body("[1].'gini'", numberMatches(50.5))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC-01:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Cabo Verde"))
                .body("[1].'numericCode'", containsString("132"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("CVE"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("pt"))
                .body("[1].'translations'.'de'", containsString("Kap Verde"))
                .body("[1].'translations'.'es'", containsString("Cabo Verde"))
                .body("[1].'translations'.'fr'", containsString("Cap Vert"))
                .body("[1].'translations'.'ja'", containsString("カーボベルデ"))
                .body("[1].'translations'.'it'", containsString("Capo Verde"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Democratic Republic of the Congo"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".cd"))
                .body("[2].'alpha2Code'", containsString("CD"))
                .body("[2].'alpha3Code'", containsString("COD"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("243"))
                .body("[2].'capital'", containsString("Kinshasa"))
                .body("[2].'altSpellings'.size()", equalTo(4))
                .body("[2].'altSpellings'", hasItems("CD", "DR Congo", "Congo-Kinshasa", "DRC"))
                .body("[2].'region'", containsString("Africa"))
                .body("[2].'subregion'", containsString("Middle Africa"))
                .body("[2].'population'", numberMatches(7.7267E7))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(0.0))
                .body("[2].'latlng'[1]", numberMatches(25.0))
                .body("[2].'demonym'", containsString("Congolese"))
                .body("[2].'area'", numberMatches(2344858.0))
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(2))
                .body("[2].'timezones'", hasItems("UTC+01:00", "UTC+02:00"))
                .body("[2].'borders'.size()", equalTo(9))
                .body("[2].'borders'", hasItems("AGO", "BDI", "CAF", "COG", "RWA", "SSD", "TZA", "UGA", "ZMB"))
                .body("[2].'nativeName'", containsString("République démocratique du Congo"))
                .body("[2].'numericCode'", containsString("180"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("CDF"))
                .body("[2].'languages'.size()", equalTo(5))
                .body("[2].'languages'", hasItems("fr", "ln", "kg", "sw", "lu"))
                .body("[2].'translations'.'de'", containsString("Kongo (Dem. Rep.)"))
                .body("[2].'translations'.'es'", containsString("Congo (Rep. Dem.)"))
                .body("[2].'translations'.'fr'", containsString("Congo (Rép. dém.)"))
                .body("[2].'translations'.'ja'", containsString("コンゴ民主共和国"))
                .body("[2].'translations'.'it'", containsString("Congo (Rep. Dem.)"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 62 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_809_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/colombia")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Colombia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".co"))
                .body("[0].'alpha2Code'", containsString("CO"))
                .body("[0].'alpha3Code'", containsString("COL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("57"))
                .body("[0].'capital'", containsString("Bogotá"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("CO", "Republic of Colombia", "República de Colombia"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(4.8759958E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(4.0))
                .body("[0].'latlng'[1]", numberMatches(-72.0))
                .body("[0].'demonym'", containsString("Colombian"))
                .body("[0].'area'", numberMatches(1141748.0))
                .body("[0].'gini'", numberMatches(55.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-05:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("BRA", "ECU", "PAN", "PER", "VEN"))
                .body("[0].'nativeName'", containsString("Colombia"))
                .body("[0].'numericCode'", containsString("170"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("COP"))
                .body("[0].'currencies'[0].'name'", containsString("Colombian peso"))
                .body("[0].'currencies'[0].'symbol'", containsString("$"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("es"))
                .body("[0].'languages'[0].'iso639_2'", containsString("spa"))
                .body("[0].'languages'[0].'name'", containsString("Spanish"))
                .body("[0].'languages'[0].'nativeName'", containsString("Español"))
                .body("[0].'translations'.'de'", containsString("Kolumbien"))
                .body("[0].'translations'.'es'", containsString("Colombia"))
                .body("[0].'translations'.'fr'", containsString("Colombie"))
                .body("[0].'translations'.'ja'", containsString("コロンビア"))
                .body("[0].'translations'.'it'", containsString("Colombia"))
                .body("[0].'translations'.'br'", containsString("Colômbia"))
                .body("[0].'translations'.'pt'", containsString("Colômbia"))
                .body("[0].'translations'.'nl'", containsString("Colombia"))
                .body("[0].'translations'.'hr'", containsString("Kolumbija"))
                .body("[0].'translations'.'fa'", containsString("کلمبیا"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/col.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(2))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("PA"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Pacific Alliance"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("Alianza del Pacífico"))
                .body("[0].'regionalBlocs'[1].'acronym'", containsString("USAN"))
                .body("[0].'regionalBlocs'[1].'name'", containsString("Union of South American Nations"))
                .body("[0].'regionalBlocs'[1].'otherAcronyms'.size()", equalTo(3))
                .body("[0].'regionalBlocs'[1].'otherAcronyms'", hasItems("UNASUR", "UNASUL", "UZAN"))
                .body("[0].'regionalBlocs'[1].'otherNames'.size()", equalTo(4))
                .body("[0].'regionalBlocs'[1].'otherNames'", hasItems("Unión de Naciones Suramericanas", "União de Nações Sul-Americanas", "Unie van Zuid-Amerikaanse Naties", "South American Union"))
                .body("[0].'cioc'", containsString("COL"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_810_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/comoros")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Comoros"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".km"))
                .body("[0].'alpha2Code'", containsString("KM"))
                .body("[0].'alpha3Code'", containsString("COM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("269"))
                .body("[0].'capital'", containsString("Moroni"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("KM", "Union of the Comoros", "Union des Comores", "Udzima wa Komori", "al-Ittiḥād al-Qumurī"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(806153.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-12.16666666))
                .body("[0].'latlng'[1]", numberMatches(44.25))
                .body("[0].'demonym'", containsString("Comoran"))
                .body("[0].'area'", numberMatches(1862.0))
                .body("[0].'gini'", numberMatches(64.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Komori"))
                .body("[0].'numericCode'", containsString("174"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("KMF"))
                .body("[0].'currencies'[0].'name'", containsString("Comorian franc"))
                .body("[0].'currencies'[0].'symbol'", containsString("Fr"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("ar"))
                .body("[0].'languages'[0].'iso639_2'", containsString("ara"))
                .body("[0].'languages'[0].'name'", containsString("Arabic"))
                .body("[0].'languages'[0].'nativeName'", containsString("العربية"))
                .body("[0].'languages'[1].'iso639_1'", containsString("fr"))
                .body("[0].'languages'[1].'iso639_2'", containsString("fra"))
                .body("[0].'languages'[1].'name'", containsString("French"))
                .body("[0].'languages'[1].'nativeName'", containsString("français"))
                .body("[0].'translations'.'de'", containsString("Union der Komoren"))
                .body("[0].'translations'.'es'", containsString("Comoras"))
                .body("[0].'translations'.'fr'", containsString("Comores"))
                .body("[0].'translations'.'ja'", containsString("コモロ"))
                .body("[0].'translations'.'it'", containsString("Comore"))
                .body("[0].'translations'.'br'", containsString("Comores"))
                .body("[0].'translations'.'pt'", containsString("Comores"))
                .body("[0].'translations'.'nl'", containsString("Comoren"))
                .body("[0].'translations'.'hr'", containsString("Komori"))
                .body("[0].'translations'.'fa'", containsString("کومور"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/com.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(2))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[0].'regionalBlocs'[1].'acronym'", containsString("AL"))
                .body("[0].'regionalBlocs'[1].'name'", containsString("Arab League"))
                .body("[0].'regionalBlocs'[1].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[1].'otherNames'.size()", equalTo(3))
                .body("[0].'regionalBlocs'[1].'otherNames'", hasItems("جامعة الدول العربية", "Jāmiʻat ad-Duwal al-ʻArabīyah", "League of Arab States"))
                .body("[0].'cioc'", containsString("COM"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_811_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/congo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("Congo"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cg"))
                .body("[0].'alpha2Code'", containsString("CG"))
                .body("[0].'alpha3Code'", containsString("COG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("242"))
                .body("[0].'capital'", containsString("Brazzaville"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("CG", "Congo-Brazzaville"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Middle Africa"))
                .body("[0].'population'", numberMatches(4741000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-1.0))
                .body("[0].'latlng'[1]", numberMatches(15.0))
                .body("[0].'demonym'", containsString("Congolese"))
                .body("[0].'area'", numberMatches(342000.0))
                .body("[0].'gini'", numberMatches(47.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("AGO", "CMR", "CAF", "COD", "GAB"))
                .body("[0].'nativeName'", containsString("République du Congo"))
                .body("[0].'numericCode'", containsString("178"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("XAF"))
                .body("[0].'currencies'[0].'name'", containsString("Central African CFA franc"))
                .body("[0].'currencies'[0].'symbol'", containsString("Fr"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("fr"))
                .body("[0].'languages'[0].'iso639_2'", containsString("fra"))
                .body("[0].'languages'[0].'name'", containsString("French"))
                .body("[0].'languages'[0].'nativeName'", containsString("français"))
                .body("[0].'languages'[1].'iso639_1'", containsString("ln"))
                .body("[0].'languages'[1].'iso639_2'", containsString("lin"))
                .body("[0].'languages'[1].'name'", containsString("Lingala"))
                .body("[0].'languages'[1].'nativeName'", containsString("Lingála"))
                .body("[0].'translations'.'de'", containsString("Kongo"))
                .body("[0].'translations'.'es'", containsString("Congo"))
                .body("[0].'translations'.'fr'", containsString("Congo"))
                .body("[0].'translations'.'ja'", containsString("コンゴ共和国"))
                .body("[0].'translations'.'it'", containsString("Congo"))
                .body("[0].'translations'.'br'", containsString("Congo"))
                .body("[0].'translations'.'pt'", containsString("Congo"))
                .body("[0].'translations'.'nl'", containsString("Congo [Republiek]"))
                .body("[0].'translations'.'hr'", containsString("Kongo"))
                .body("[0].'translations'.'fa'", containsString("کنگو"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/cog.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[0].'cioc'", containsString("CGO"))
                .body("[1].'name'", containsString("Congo (Democratic Republic of the)"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".cd"))
                .body("[1].'alpha2Code'", containsString("CD"))
                .body("[1].'alpha3Code'", containsString("COD"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("243"))
                .body("[1].'capital'", containsString("Kinshasa"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("CD", "DR Congo", "Congo-Kinshasa", "DRC"))
                .body("[1].'region'", containsString("Africa"))
                .body("[1].'subregion'", containsString("Middle Africa"))
                .body("[1].'population'", numberMatches(8.5026E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(0.0))
                .body("[1].'latlng'[1]", numberMatches(25.0))
                .body("[1].'demonym'", containsString("Congolese"))
                .body("[1].'area'", numberMatches(2344858.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(2))
                .body("[1].'timezones'", hasItems("UTC+01:00", "UTC+02:00"))
                .body("[1].'borders'.size()", equalTo(9))
                .body("[1].'borders'", hasItems("AGO", "BDI", "CAF", "COG", "RWA", "SSD", "TZA", "UGA", "ZMB"))
                .body("[1].'nativeName'", containsString("République démocratique du Congo"))
                .body("[1].'numericCode'", containsString("180"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("CDF"))
                .body("[1].'currencies'[0].'name'", containsString("Congolese franc"))
                .body("[1].'currencies'[0].'symbol'", containsString("Fr"))
                .body("[1].'languages'.size()", equalTo(5))
                .body("[1].'languages'[0].'iso639_1'", containsString("fr"))
                .body("[1].'languages'[0].'iso639_2'", containsString("fra"))
                .body("[1].'languages'[0].'name'", containsString("French"))
                .body("[1].'languages'[0].'nativeName'", containsString("français"))
                .body("[1].'languages'[1].'iso639_1'", containsString("ln"))
                .body("[1].'languages'[1].'iso639_2'", containsString("lin"))
                .body("[1].'languages'[1].'name'", containsString("Lingala"))
                .body("[1].'languages'[1].'nativeName'", containsString("Lingála"))
                .body("[1].'languages'[2].'iso639_1'", containsString("kg"))
                .body("[1].'languages'[2].'iso639_2'", containsString("kon"))
                .body("[1].'languages'[2].'name'", containsString("Kongo"))
                .body("[1].'languages'[2].'nativeName'", containsString("Kikongo"))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("[1].'translations'.'de'", containsString("Kongo (Dem. Rep.)"))
                .body("[1].'translations'.'es'", containsString("Congo (Rep. Dem.)"))
                .body("[1].'translations'.'fr'", containsString("Congo (Rép. dém.)"))
                .body("[1].'translations'.'ja'", containsString("コンゴ民主共和国"))
                .body("[1].'translations'.'it'", containsString("Congo (Rep. Dem.)"))
                .body("[1].'translations'.'br'", containsString("RD Congo"))
                .body("[1].'translations'.'pt'", containsString("RD Congo"))
                .body("[1].'translations'.'nl'", containsString("Congo [DRC]"))
                .body("[1].'translations'.'hr'", containsString("Kongo, Demokratska Republika"))
                .body("[1].'translations'.'fa'", containsString("جمهوری کنگو"))
                .body("[1].'flag'", containsString("https://restcountries.eu/data/cod.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[1].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[1].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[1].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[1].'cioc'", containsString("COD"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_812_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/993?fields=23uj")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_813_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/IB")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'name'", containsString("Djibouti"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".dj"))
                .body("[0].'alpha2Code'", containsString("DJ"))
                .body("[0].'alpha3Code'", containsString("DJI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("253"))
                .body("[0].'capital'", containsString("Djibouti"))
                .body("[0].'altSpellings'.size()", equalTo(7))
                .body("[0].'altSpellings'", hasItems("DJ", "Jabuuti", "Gabuuti", "Republic of Djibouti", "République de Djibouti", "Gabuutih Ummuuno", "Jamhuuriyadda Jabuuti"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(900000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(11.5))
                .body("[0].'latlng'[1]", numberMatches(43.0))
                .body("[0].'demonym'", containsString("Djibouti"))
                .body("[0].'area'", numberMatches(23200.0))
                .body("[0].'gini'", numberMatches(40.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("ERI", "ETH", "SOM"))
                .body("[0].'nativeName'", containsString("Djibouti"))
                .body("[0].'numericCode'", containsString("262"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("DJF"))
                .body("[0].'currencies'[0].'name'", containsString("Djiboutian franc"))
                .body("[0].'currencies'[0].'symbol'", containsString("Fr"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("fr"))
                .body("[0].'languages'[0].'iso639_2'", containsString("fra"))
                .body("[0].'languages'[0].'name'", containsString("French"))
                .body("[0].'languages'[0].'nativeName'", containsString("français"))
                .body("[0].'languages'[1].'iso639_1'", containsString("ar"))
                .body("[0].'languages'[1].'iso639_2'", containsString("ara"))
                .body("[0].'languages'[1].'name'", containsString("Arabic"))
                .body("[0].'languages'[1].'nativeName'", containsString("العربية"))
                .body("[0].'translations'.'de'", containsString("Dschibuti"))
                .body("[0].'translations'.'es'", containsString("Yibuti"))
                .body("[0].'translations'.'fr'", containsString("Djibouti"))
                .body("[0].'translations'.'ja'", containsString("ジブチ"))
                .body("[0].'translations'.'it'", containsString("Gibuti"))
                .body("[0].'translations'.'br'", containsString("Djibuti"))
                .body("[0].'translations'.'pt'", containsString("Djibuti"))
                .body("[0].'translations'.'nl'", containsString("Djibouti"))
                .body("[0].'translations'.'hr'", containsString("Džibuti"))
                .body("[0].'translations'.'fa'", containsString("جیبوتی"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/dji.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(2))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[0].'regionalBlocs'[1].'acronym'", containsString("AL"))
                .body("[0].'regionalBlocs'[1].'name'", containsString("Arab League"))
                .body("[0].'regionalBlocs'[1].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[1].'otherNames'.size()", equalTo(3))
                .body("[0].'regionalBlocs'[1].'otherNames'", hasItems("جامعة الدول العربية", "Jāmiʻat ad-Duwal al-ʻArabīyah", "League of Arab States"))
                .body("[0].'cioc'", containsString("DJI"))
                .body("[1].'name'", containsString("Gabon"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ga"))
                .body("[1].'alpha2Code'", containsString("GA"))
                .body("[1].'alpha3Code'", containsString("GAB"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("241"))
                .body("[1].'capital'", containsString("Libreville"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("GA", "Gabonese Republic", "République Gabonaise"))
                .body("[1].'region'", containsString("Africa"))
                .body("[1].'subregion'", containsString("Middle Africa"))
                .body("[1].'population'", numberMatches(1802278.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-1.0))
                .body("[1].'latlng'[1]", numberMatches(11.75))
                .body("[1].'demonym'", containsString("Gabonese"))
                .body("[1].'area'", numberMatches(267668.0))
                .body("[1].'gini'", numberMatches(41.5))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+01:00"))
                .body("[1].'borders'.size()", equalTo(3))
                .body("[1].'borders'", hasItems("CMR", "COG", "GNQ"))
                .body("[1].'nativeName'", containsString("Gabon"))
                .body("[1].'numericCode'", containsString("266"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("XAF"))
                .body("[1].'currencies'[0].'name'", containsString("Central African CFA franc"))
                .body("[1].'currencies'[0].'symbol'", containsString("Fr"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'[0].'iso639_1'", containsString("fr"))
                .body("[1].'languages'[0].'iso639_2'", containsString("fra"))
                .body("[1].'languages'[0].'name'", containsString("French"))
                .body("[1].'languages'[0].'nativeName'", containsString("français"))
                .body("[1].'translations'.'de'", containsString("Gabun"))
                .body("[1].'translations'.'es'", containsString("Gabón"))
                .body("[1].'translations'.'fr'", containsString("Gabon"))
                .body("[1].'translations'.'ja'", containsString("ガボン"))
                .body("[1].'translations'.'it'", containsString("Gabon"))
                .body("[1].'translations'.'br'", containsString("Gabão"))
                .body("[1].'translations'.'pt'", containsString("Gabão"))
                .body("[1].'translations'.'nl'", containsString("Gabon"))
                .body("[1].'translations'.'hr'", containsString("Gabon"))
                .body("[1].'translations'.'fa'", containsString("گابن"))
                .body("[1].'flag'", containsString("https://restcountries.eu/data/gab.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[1].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[1].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[1].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[1].'cioc'", containsString("GAB"))
                .body("[2].'name'", containsString("Gibraltar"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".gi"))
                .body("[2].'alpha2Code'", containsString("GI"))
                .body("[2].'alpha3Code'", containsString("GIB"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("350"))
                .body("[2].'capital'", containsString("Gibraltar"))
                .body("[2].'altSpellings'.size()", equalTo(1))
                .body("[2].'altSpellings'", hasItems("GI"))
                .body("[2].'region'", containsString("Europe"))
                .body("[2].'subregion'", containsString("Southern Europe"))
                .body("[2].'population'", numberMatches(33140.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(36.13333333))
                .body("[2].'latlng'[1]", numberMatches(-5.35))
                .body("[2].'demonym'", containsString("Gibraltar"))
                .body("[2].'area'", numberMatches(6.0))
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(1))
                .body("[2].'borders'", hasItems("ESP"))
                .body("[2].'nativeName'", containsString("Gibraltar"))
                .body("[2].'numericCode'", containsString("292"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'[0].'code'", containsString("GIP"))
                .body("[2].'currencies'[0].'name'", containsString("Gibraltar pound"))
                .body("[2].'currencies'[0].'symbol'", containsString("£"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'[0].'iso639_1'", containsString("en"))
                .body("[2].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[2].'languages'[0].'name'", containsString("English"))
                .body("[2].'languages'[0].'nativeName'", containsString("English"))
                .body("[2].'translations'.'de'", containsString("Gibraltar"))
                .body("[2].'translations'.'es'", containsString("Gibraltar"))
                .body("[2].'translations'.'fr'", containsString("Gibraltar"))
                .body("[2].'translations'.'ja'", containsString("ジブラルタル"))
                .body("[2].'translations'.'it'", containsString("Gibilterra"))
                .body("[2].'translations'.'br'", containsString("Gibraltar"))
                .body("[2].'translations'.'pt'", containsString("Gibraltar"))
                .body("[2].'translations'.'nl'", containsString("Gibraltar"))
                .body("[2].'translations'.'hr'", containsString("Gibraltar"))
                .body("[2].'translations'.'fa'", containsString("جبل‌طارق"))
                .body("[2].'flag'", containsString("https://restcountries.eu/data/gib.svg"))
                .body("[2].'regionalBlocs'.size()", equalTo(1))
                .body("[2].'regionalBlocs'[0].'acronym'", containsString("EU"))
                .body("[2].'regionalBlocs'[0].'name'", containsString("European Union"))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[2].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[2].'cioc'", containsString(""))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_814_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/uy?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Uruguay"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".uy"))
                .body("[0].'alpha2Code'", containsString("UY"))
                .body("[0].'alpha3Code'", containsString("URY"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("598"))
                .body("[0].'capital'", containsString("Montevideo"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("UY", "Oriental Republic of Uruguay", "República Oriental del Uruguay"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(3415866.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-33.0))
                .body("[0].'latlng'[1]", numberMatches(-56.0))
                .body("[0].'demonym'", containsString("Uruguayan"))
                .body("[0].'area'", numberMatches(181034.0))
                .body("[0].'gini'", numberMatches(39.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-03:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("ARG", "BRA"))
                .body("[0].'nativeName'", containsString("Uruguay"))
                .body("[0].'numericCode'", containsString("858"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'", hasItems("UYI", "UYU"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("es"))
                .body("[0].'translations'.'de'", containsString("Uruguay"))
                .body("[0].'translations'.'es'", containsString("Uruguay"))
                .body("[0].'translations'.'fr'", containsString("Uruguay"))
                .body("[0].'translations'.'ja'", containsString("ウルグアイ"))
                .body("[0].'translations'.'it'", containsString("Uruguay"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_815_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/90")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Turkey"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".tr"))
                .body("[0].'alpha2Code'", containsString("TR"))
                .body("[0].'alpha3Code'", containsString("TUR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("90"))
                .body("[0].'capital'", containsString("Ankara"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("TR", "Turkiye", "Republic of Turkey", "Türkiye Cumhuriyeti"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(7.7695904E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(39.0))
                .body("[0].'latlng'[1]", numberMatches(35.0))
                .body("[0].'demonym'", containsString("Turkish"))
                .body("[0].'area'", numberMatches(783562.0))
                .body("[0].'gini'", numberMatches(39.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(8))
                .body("[0].'borders'", hasItems("ARM", "AZE", "BGR", "GEO", "GRC", "IRN", "IRQ", "SYR"))
                .body("[0].'nativeName'", containsString("Türkiye"))
                .body("[0].'numericCode'", containsString("792"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("TRY"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("tr"))
                .body("[0].'translations'.'de'", containsString("Türkei"))
                .body("[0].'translations'.'es'", containsString("Turquía"))
                .body("[0].'translations'.'fr'", containsString("Turquie"))
                .body("[0].'translations'.'ja'", containsString("トルコ"))
                .body("[0].'translations'.'it'", containsString("Turchia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_816_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/91")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("India"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".in"))
                .body("[0].'alpha2Code'", containsString("IN"))
                .body("[0].'alpha3Code'", containsString("IND"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("91"))
                .body("[0].'capital'", containsString("New Delhi"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("IN", "Bhārat", "Republic of India", "Bharat Ganrajya"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(1.27584E9))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(20.0))
                .body("[0].'latlng'[1]", numberMatches(77.0))
                .body("[0].'demonym'", containsString("Indian"))
                .body("[0].'area'", numberMatches(3287590.0))
                .body("[0].'gini'", numberMatches(33.4))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+05:30"))
                .body("[0].'borders'.size()", equalTo(8))
                .body("[0].'borders'", hasItems("AFG", "BGD", "BTN", "MMR", "CHN", "NPL", "PAK", "LKA"))
                .body("[0].'nativeName'", containsString("भारत"))
                .body("[0].'numericCode'", containsString("356"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("INR"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("hi", "en"))
                .body("[0].'translations'.'de'", containsString("Indien"))
                .body("[0].'translations'.'es'", containsString("India"))
                .body("[0].'translations'.'fr'", containsString("Inde"))
                .body("[0].'translations'.'ja'", containsString("インド"))
                .body("[0].'translations'.'it'", containsString("India"))
                .body("[0].'relevance'", containsString("3"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_817_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/congo-kinshasa")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Congo (Democratic Republic of the)"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cd"))
                .body("[0].'alpha2Code'", containsString("CD"))
                .body("[0].'alpha3Code'", containsString("COD"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("243"))
                .body("[0].'capital'", containsString("Kinshasa"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("CD", "DR Congo", "Congo-Kinshasa", "DRC"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Middle Africa"))
                .body("[0].'population'", numberMatches(8.5026E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(0.0))
                .body("[0].'latlng'[1]", numberMatches(25.0))
                .body("[0].'demonym'", containsString("Congolese"))
                .body("[0].'area'", numberMatches(2344858.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC+01:00", "UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(9))
                .body("[0].'borders'", hasItems("AGO", "BDI", "CAF", "COG", "RWA", "SSD", "TZA", "UGA", "ZMB"))
                .body("[0].'nativeName'", containsString("République démocratique du Congo"))
                .body("[0].'numericCode'", containsString("180"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("CDF"))
                .body("[0].'currencies'[0].'name'", containsString("Congolese franc"))
                .body("[0].'currencies'[0].'symbol'", containsString("Fr"))
                .body("[0].'languages'.size()", equalTo(5))
                .body("[0].'languages'[0].'iso639_1'", containsString("fr"))
                .body("[0].'languages'[0].'iso639_2'", containsString("fra"))
                .body("[0].'languages'[0].'name'", containsString("French"))
                .body("[0].'languages'[0].'nativeName'", containsString("français"))
                .body("[0].'languages'[1].'iso639_1'", containsString("ln"))
                .body("[0].'languages'[1].'iso639_2'", containsString("lin"))
                .body("[0].'languages'[1].'name'", containsString("Lingala"))
                .body("[0].'languages'[1].'nativeName'", containsString("Lingála"))
                .body("[0].'languages'[2].'iso639_1'", containsString("kg"))
                .body("[0].'languages'[2].'iso639_2'", containsString("kon"))
                .body("[0].'languages'[2].'name'", containsString("Kongo"))
                .body("[0].'languages'[2].'nativeName'", containsString("Kikongo"))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("[0].'translations'.'de'", containsString("Kongo (Dem. Rep.)"))
                .body("[0].'translations'.'es'", containsString("Congo (Rep. Dem.)"))
                .body("[0].'translations'.'fr'", containsString("Congo (Rép. dém.)"))
                .body("[0].'translations'.'ja'", containsString("コンゴ民主共和国"))
                .body("[0].'translations'.'it'", containsString("Congo (Rep. Dem.)"))
                .body("[0].'translations'.'br'", containsString("RD Congo"))
                .body("[0].'translations'.'pt'", containsString("RD Congo"))
                .body("[0].'translations'.'nl'", containsString("Congo [DRC]"))
                .body("[0].'translations'.'hr'", containsString("Kongo, Demokratska Republika"))
                .body("[0].'translations'.'fa'", containsString("جمهوری کنگو"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/cod.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[0].'cioc'", containsString("COD"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_818_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/cook%20islands")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Cook Islands"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ck"))
                .body("[0].'alpha2Code'", containsString("CK"))
                .body("[0].'alpha3Code'", containsString("COK"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("682"))
                .body("[0].'capital'", containsString("Avarua"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("CK", "Kūki 'Āirani"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Polynesia"))
                .body("[0].'population'", numberMatches(18100.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-21.23333333))
                .body("[0].'latlng'[1]", numberMatches(-159.76666666))
                .body("[0].'demonym'", containsString("Cook Islander"))
                .body("[0].'area'", numberMatches(236.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-10:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Cook Islands"))
                .body("[0].'numericCode'", containsString("184"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'[0].'code'", containsString("NZD"))
                .body("[0].'currencies'[0].'name'", containsString("New Zealand dollar"))
                .body("[0].'currencies'[0].'symbol'", containsString("$"))
                .body("[0].'currencies'[1].'code'", containsString("CKD"))
                .body("[0].'currencies'[1].'name'", containsString("Cook Islands dollar"))
                .body("[0].'currencies'[1].'symbol'", containsString("$"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("en"))
                .body("[0].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[0].'name'", containsString("English"))
                .body("[0].'languages'[0].'nativeName'", containsString("English"))
                .body("[0].'translations'.'de'", containsString("Cookinseln"))
                .body("[0].'translations'.'es'", containsString("Islas Cook"))
                .body("[0].'translations'.'fr'", containsString("Îles Cook"))
                .body("[0].'translations'.'ja'", containsString("クック諸島"))
                .body("[0].'translations'.'it'", containsString("Isole Cook"))
                .body("[0].'translations'.'br'", containsString("Ilhas Cook"))
                .body("[0].'translations'.'pt'", containsString("Ilhas Cook"))
                .body("[0].'translations'.'nl'", containsString("Cookeilanden"))
                .body("[0].'translations'.'hr'", containsString("Cookovo Otočje"))
                .body("[0].'translations'.'fa'", containsString("جزایر کوک"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/cok.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("COK"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_819_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/costa%20rica?fields=_EM_3794_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_820_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/cote%20d'ivoire?fields=_EM_3794_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_821_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/lu")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'name'", containsString("Luxembourg"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".lu"))
                .body("[0].'alpha2Code'", containsString("LU"))
                .body("[0].'alpha3Code'", containsString("LUX"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("352"))
                .body("[0].'capital'", containsString("Luxembourg"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("LU", "Grand Duchy of Luxembourg", "Grand-Duché de Luxembourg", "Großherzogtum Luxemburg", "Groussherzogtum Lëtzebuerg"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(562958.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(49.75))
                .body("[0].'latlng'[1]", numberMatches(6.16666666))
                .body("[0].'demonym'", containsString("Luxembourger"))
                .body("[0].'area'", numberMatches(2586.0))
                .body("[0].'gini'", numberMatches(30.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("BEL", "FRA", "DEU"))
                .body("[0].'nativeName'", containsString("Luxembourg"))
                .body("[0].'numericCode'", containsString("442"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("fr", "de", "lb"))
                .body("[0].'translations'.'de'", containsString("Luxemburg"))
                .body("[0].'translations'.'es'", containsString("Luxemburgo"))
                .body("[0].'translations'.'fr'", containsString("Luxembourg"))
                .body("[0].'translations'.'ja'", containsString("ルクセンブルク"))
                .body("[0].'translations'.'it'", containsString("Lussemburgo"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Saint Lucia"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".lc"))
                .body("[1].'alpha2Code'", containsString("LC"))
                .body("[1].'alpha3Code'", containsString("LCA"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("1"))
                .body("[1].'capital'", containsString("Castries"))
                .body("[1].'altSpellings'.size()", equalTo(1))
                .body("[1].'altSpellings'", hasItems("LC"))
                .body("[1].'region'", containsString("Americas"))
                .body("[1].'subregion'", containsString("Caribbean"))
                .body("[1].'population'", numberMatches(185000.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(13.88333333))
                .body("[1].'latlng'[1]", numberMatches(-60.96666666))
                .body("[1].'demonym'", containsString("Saint Lucian"))
                .body("[1].'area'", numberMatches(616.0))
                .body("[1].'gini'", numberMatches(42.6))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC-04:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Saint Lucia"))
                .body("[1].'numericCode'", containsString("662"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("XCD"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("en"))
                .body("[1].'translations'.'de'", containsString("Saint Lucia"))
                .body("[1].'translations'.'es'", containsString("Santa Lucía"))
                .body("[1].'translations'.'fr'", containsString("Saint-Lucie"))
                .body("[1].'translations'.'ja'", containsString("セントルシア"))
                .body("[1].'translations'.'it'", containsString("Santa Lucia"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Tuvalu"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".tv"))
                .body("[2].'alpha2Code'", containsString("TV"))
                .body("[2].'alpha3Code'", containsString("TUV"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("688"))
                .body("[2].'capital'", containsString("Funafuti"))
                .body("[2].'altSpellings'.size()", equalTo(1))
                .body("[2].'altSpellings'", hasItems("TV"))
                .body("[2].'region'", containsString("Oceania"))
                .body("[2].'subregion'", containsString("Polynesia"))
                .body("[2].'population'", numberMatches(10640.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(-8.0))
                .body("[2].'latlng'[1]", numberMatches(178.0))
                .body("[2].'demonym'", containsString("Tuvaluan"))
                .body("[2].'area'", numberMatches(26.0))
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+12:00"))
                .body("[2].'borders'.size()", equalTo(0))
                .body("[2].'nativeName'", containsString("Tuvalu"))
                .body("[2].'numericCode'", containsString("798"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("AUD"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("en"))
                .body("[2].'translations'.'de'", containsString("Tuvalu"))
                .body("[2].'translations'.'es'", containsString("Tuvalu"))
                .body("[2].'translations'.'fr'", containsString("Tuvalu"))
                .body("[2].'translations'.'ja'", containsString("ツバル"))
                .body("[2].'translations'.'it'", containsString("Tuvalu"))
                .body("[2].'relevance'", containsString("0.5"))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_822_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/luxembourg")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Luxembourg"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".lu"))
                .body("[0].'alpha2Code'", containsString("LU"))
                .body("[0].'alpha3Code'", containsString("LUX"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("352"))
                .body("[0].'capital'", containsString("Luxembourg"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("LU", "Grand Duchy of Luxembourg", "Grand-Duché de Luxembourg", "Großherzogtum Luxemburg", "Groussherzogtum Lëtzebuerg"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(562958.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(49.75))
                .body("[0].'latlng'[1]", numberMatches(6.16666666))
                .body("[0].'demonym'", containsString("Luxembourger"))
                .body("[0].'area'", numberMatches(2586.0))
                .body("[0].'gini'", numberMatches(30.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("BEL", "FRA", "DEU"))
                .body("[0].'nativeName'", containsString("Luxembourg"))
                .body("[0].'numericCode'", containsString("442"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("fr", "de", "lb"))
                .body("[0].'translations'.'de'", containsString("Luxemburg"))
                .body("[0].'translations'.'es'", containsString("Luxemburgo"))
                .body("[0].'translations'.'fr'", containsString("Luxembourg"))
                .body("[0].'translations'.'ja'", containsString("ルクセンブルク"))
                .body("[0].'translations'.'it'", containsString("Lussemburgo"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_823_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/lv")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'name'", containsString("El Salvador"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sv"))
                .body("[0].'alpha2Code'", containsString("SV"))
                .body("[0].'alpha3Code'", containsString("SLV"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("503"))
                .body("[0].'capital'", containsString("San Salvador"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("SV", "Republic of El Salvador", "República de El Salvador"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Central America"))
                .body("[0].'population'", numberMatches(6401240.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(13.83333333))
                .body("[0].'latlng'[1]", numberMatches(-88.91666666))
                .body("[0].'demonym'", containsString("Salvadoran"))
                .body("[0].'area'", numberMatches(21041.0))
                .body("[0].'gini'", numberMatches(48.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-06:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("GTM", "HND"))
                .body("[0].'nativeName'", containsString("El Salvador"))
                .body("[0].'numericCode'", containsString("222"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'", hasItems("SVC", "USD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("es"))
                .body("[0].'translations'.'de'", containsString("El Salvador"))
                .body("[0].'translations'.'es'", containsString("El Salvador"))
                .body("[0].'translations'.'fr'", containsString("Salvador"))
                .body("[0].'translations'.'ja'", containsString("エルサルバドル"))
                .body("[0].'translations'.'it'", containsString("El Salvador"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Falkland Islands"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".fk"))
                .body("[1].'alpha2Code'", containsString("FK"))
                .body("[1].'alpha3Code'", containsString("FLK"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("500"))
                .body("[1].'capital'", containsString("Stanley"))
                .body("[1].'altSpellings'.size()", equalTo(2))
                .body("[1].'altSpellings'", hasItems("FK", "Islas Malvinas"))
                .body("[1].'region'", containsString("Americas"))
                .body("[1].'subregion'", containsString("South America"))
                .body("[1].'population'", numberMatches(3000.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-51.75))
                .body("[1].'latlng'[1]", numberMatches(-59.0))
                .body("[1].'demonym'", containsString("Falkland Islander"))
                .body("[1].'area'", numberMatches(12173.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC-04:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Falkland Islands"))
                .body("[1].'numericCode'", containsString("238"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("FKP"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("en"))
                .body("[1].'translations'.'de'", containsString("Falklandinseln"))
                .body("[1].'translations'.'es'", containsString("Islas Malvinas"))
                .body("[1].'translations'.'fr'", containsString("Îles Malouines"))
                .body("[1].'translations'.'ja'", containsString("フォークランド（マルビナス）諸島"))
                .body("[1].'translations'.'it'", containsString("Isole Falkland o Isole Malvine"))
                .body("[1].'relevance'", containsString("0.5"))
                .body("[2].'name'", containsString("Latvia"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".lv"))
                .body("[2].'alpha2Code'", containsString("LV"))
                .body("[2].'alpha3Code'", containsString("LVA"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("371"))
                .body("[2].'capital'", containsString("Riga"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("LV", "Republic of Latvia", "Latvijas Republika"))
                .body("[2].'region'", containsString("Europe"))
                .body("[2].'subregion'", containsString("Northern Europe"))
                .body("[2].'population'", numberMatches(1980700.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(57.0))
                .body("[2].'latlng'[1]", numberMatches(25.0))
                .body("[2].'demonym'", containsString("Latvian"))
                .body("[2].'area'", numberMatches(64559.0))
                .body("[2].'gini'", numberMatches(36.6))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+02:00"))
                .body("[2].'borders'.size()", equalTo(4))
                .body("[2].'borders'", hasItems("BLR", "EST", "LTU", "RUS"))
                .body("[2].'nativeName'", containsString("Latvija"))
                .body("[2].'numericCode'", containsString("428"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("EUR"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("lv"))
                .body("[2].'translations'.'de'", containsString("Lettland"))
                .body("[2].'translations'.'es'", containsString("Letonia"))
                .body("[2].'translations'.'fr'", containsString("Lettonie"))
                .body("[2].'translations'.'ja'", containsString("ラトビア"))
                .body("[2].'translations'.'it'", containsString("Lettonia"))
                .body("[2].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_824_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/french%20southern%20territories?" + 
                    "fields=18FLB4jIqxig&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_825_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/furstentum%20liechtenstein?" + 
                    "fields=18FLB4jIqxig&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_826_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/guatemalan?fields=5HH1Pu748JrH")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_827_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/ly")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(6))
                .body("[0].'name'", containsString("United States Minor Outlying Islands"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".us"))
                .body("[0].'alpha2Code'", containsString("UM"))
                .body("[0].'alpha3Code'", containsString("UMI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString(""))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("UM"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Northern America"))
                .body("[0].'population'", numberMatches(300.0))
                .body("[0].'latlng'.size()", equalTo(0))
                .body("[0].'demonym'", containsString("American"))
                .body("[0].'area'", nullValue())
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(3))
                .body("[0].'timezones'", hasItems("UTC-11:00", "UTC-10:00", "UTC+12:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("United States Minor Outlying Islands"))
                .body("[0].'numericCode'", containsString("581"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Kleinere Inselbesitzungen der Vereinigten Staaten"))
                .body("[0].'translations'.'es'", containsString("Islas Ultramarinas Menores de Estados Unidos"))
                .body("[0].'translations'.'fr'", containsString("Îles mineures éloignées des États-Unis"))
                .body("[0].'translations'.'ja'", containsString("合衆国領有小離島"))
                .body("[0].'translations'.'it'", containsString("Isole minori esterne degli Stati Uniti d'America"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("French Polynesia"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".pf"))
                .body("[1].'alpha2Code'", containsString("PF"))
                .body("[1].'alpha3Code'", containsString("PYF"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("689"))
                .body("[1].'capital'", containsString("Papeetē"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("PF", "Polynésie française", "French Polynesia", "Pōrīnetia Farāni"))
                .body("[1].'region'", containsString("Oceania"))
                .body("[1].'subregion'", containsString("Polynesia"))
                .body("[1].'population'", numberMatches(268270.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-15.0))
                .body("[1].'latlng'[1]", numberMatches(-140.0))
                .body("[1].'demonym'", containsString("French Polynesian"))
                .body("[1].'area'", numberMatches(4167.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(3))
                .body("[1].'timezones'", hasItems("UTC-10:00", "UTC-09:30", "UTC-09:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Polynésie française"))
                .body("[1].'numericCode'", containsString("258"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("XPF"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("fr"))
                .body("[1].'translations'.'de'", containsString("Französisch-Polynesien"))
                .body("[1].'translations'.'es'", containsString("Polinesia Francesa"))
                .body("[1].'translations'.'fr'", containsString("Polynésie française"))
                .body("[1].'translations'.'ja'", containsString("フランス領ポリネシア"))
                .body("[1].'translations'.'it'", containsString("Polinesia Francese"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Holy See"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".va"))
                .body("[2].'alpha2Code'", containsString("VA"))
                .body("[2].'alpha3Code'", containsString("VAT"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("379"))
                .body("[2].'capital'", containsString("Rome"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("Sancta Sedes", "Vatican", "The Vatican"))
                .body("[2].'region'", containsString("Europe"))
                .body("[2].'subregion'", containsString("Southern Europe"))
                .body("[2].'population'", numberMatches(451.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(41.9))
                .body("[2].'latlng'[1]", numberMatches(12.45))
                .body("[2].'demonym'", containsString(""))
                .body("[2].'area'", numberMatches(0.44))
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(1))
                .body("[2].'borders'", hasItems("ITA"))
                .body("[2].'nativeName'", containsString("Sancta Sedes"))
                .body("[2].'numericCode'", nullValue())
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("EUR"))
                .body("[2].'languages'.size()", equalTo(4))
                .body("[2].'languages'", hasItems("la", "it", "fr", "de"))
                .body("[2].'translations'.'de'", containsString("Heiliger Stuhl"))
                .body("[2].'translations'.'es'", containsString("Santa Sede"))
                .body("[2].'translations'.'fr'", containsString("voir Saint"))
                .body("[2].'translations'.'ja'", containsString("聖座"))
                .body("[2].'translations'.'it'", containsString("Santa Sede"))
                .body("[2].'relevance'", nullValue())
                ; // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_828_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/mexican?fields=_EM_14894_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_829_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/ar?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Argentina"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ar"))
                .body("[0].'alpha2Code'", containsString("AR"))
                .body("[0].'alpha3Code'", containsString("ARG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("54"))
                .body("[0].'capital'", containsString("Buenos Aires"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("AR", "Argentine Republic", "República Argentina"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(4.3131966E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-34.0))
                .body("[0].'latlng'[1]", numberMatches(-64.0))
                .body("[0].'demonym'", containsString("Argentinean"))
                .body("[0].'area'", numberMatches(2780400.0))
                .body("[0].'gini'", numberMatches(44.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-03:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("BOL", "BRA", "CHL", "PRY", "URY"))
                .body("[0].'nativeName'", containsString("Argentina"))
                .body("[0].'numericCode'", containsString("032"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ARS"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("es", "gn"))
                .body("[0].'translations'.'de'", containsString("Argentinien"))
                .body("[0].'translations'.'es'", containsString("Argentina"))
                .body("[0].'translations'.'fr'", containsString("Argentine"))
                .body("[0].'translations'.'ja'", containsString("アルゼンチン"))
                .body("[0].'translations'.'it'", containsString("Argentina"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_830_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/armenia?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Armenia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".am"))
                .body("[0].'alpha2Code'", containsString("AM"))
                .body("[0].'alpha3Code'", containsString("ARM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("374"))
                .body("[0].'capital'", containsString("Yerevan"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("AM", "Hayastan", "Republic of Armenia", "Հայաստանի Հանրապետություն"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(3006800.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(40.0))
                .body("[0].'latlng'[1]", numberMatches(45.0))
                .body("[0].'demonym'", containsString("Armenian"))
                .body("[0].'area'", numberMatches(29743.0))
                .body("[0].'gini'", numberMatches(30.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("AZE", "GEO", "IRN", "TUR"))
                .body("[0].'nativeName'", containsString("Հայաստան"))
                .body("[0].'numericCode'", containsString("051"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AMD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("hy", "ru"))
                .body("[0].'translations'.'de'", containsString("Armenien"))
                .body("[0].'translations'.'es'", containsString("Armenia"))
                .body("[0].'translations'.'fr'", containsString("Arménie"))
                .body("[0].'translations'.'ja'", containsString("アルメニア"))
                .body("[0].'translations'.'it'", containsString("Armenia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_831_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/argentina?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Argentina"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ar"))
                .body("[0].'alpha2Code'", containsString("AR"))
                .body("[0].'alpha3Code'", containsString("ARG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("54"))
                .body("[0].'capital'", containsString("Buenos Aires"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("AR", "Argentine Republic", "República Argentina"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(4.3131966E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-34.0))
                .body("[0].'latlng'[1]", numberMatches(-64.0))
                .body("[0].'demonym'", containsString("Argentinean"))
                .body("[0].'area'", numberMatches(2780400.0))
                .body("[0].'gini'", numberMatches(44.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-03:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("BOL", "BRA", "CHL", "PRY", "URY"))
                .body("[0].'nativeName'", containsString("Argentina"))
                .body("[0].'numericCode'", containsString("032"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ARS"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("es", "gn"))
                .body("[0].'translations'.'de'", containsString("Argentinien"))
                .body("[0].'translations'.'es'", containsString("Argentina"))
                .body("[0].'translations'.'fr'", containsString("Argentine"))
                .body("[0].'translations'.'ja'", containsString("アルゼンチン"))
                .body("[0].'translations'.'it'", containsString("Argentina"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_832_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/aruba?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Aruba"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".aw"))
                .body("[0].'alpha2Code'", containsString("AW"))
                .body("[0].'alpha3Code'", containsString("ABW"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("297"))
                .body("[0].'capital'", containsString("Oranjestad"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("AW"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(107394.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(12.5))
                .body("[0].'latlng'[1]", numberMatches(-69.96666666))
                .body("[0].'demonym'", containsString("Aruban"))
                .body("[0].'area'", numberMatches(180.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Aruba"))
                .body("[0].'numericCode'", containsString("533"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AWG"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("nl", "pa"))
                .body("[0].'translations'.'de'", containsString("Aruba"))
                .body("[0].'translations'.'es'", containsString("Aruba"))
                .body("[0].'translations'.'fr'", containsString("Aruba"))
                .body("[0].'translations'.'ja'", containsString("アルバ"))
                .body("[0].'translations'.'it'", containsString("Aruba"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_833_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/american%20samoan")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("American Samoa"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".as"))
                .body("[0].'alpha2Code'", containsString("AS"))
                .body("[0].'alpha3Code'", containsString("ASM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Pago Pago"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("AS", "Amerika Sāmoa", "Amelika Sāmoa", "Sāmoa Amelika"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Polynesia"))
                .body("[0].'population'", numberMatches(57100.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-14.33333333))
                .body("[0].'latlng'[1]", numberMatches(-170.0))
                .body("[0].'demonym'", containsString("American Samoan"))
                .body("[0].'area'", numberMatches(199.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-11:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("American Samoa"))
                .body("[0].'numericCode'", containsString("016"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("USD"))
                .body("[0].'currencies'[0].'name'", containsString("United State Dollar"))
                .body("[0].'currencies'[0].'symbol'", containsString("$"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("en"))
                .body("[0].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[0].'name'", containsString("English"))
                .body("[0].'languages'[0].'nativeName'", containsString("English"))
                .body("[0].'languages'[1].'iso639_1'", containsString("sm"))
                .body("[0].'languages'[1].'iso639_2'", containsString("smo"))
                .body("[0].'languages'[1].'name'", containsString("Samoan"))
                .body("[0].'languages'[1].'nativeName'", containsString("gagana fa'a Samoa"))
                .body("[0].'translations'.'de'", containsString("Amerikanisch-Samoa"))
                .body("[0].'translations'.'es'", containsString("Samoa Americana"))
                .body("[0].'translations'.'fr'", containsString("Samoa américaines"))
                .body("[0].'translations'.'ja'", containsString("アメリカ領サモア"))
                .body("[0].'translations'.'it'", containsString("Samoa Americane"))
                .body("[0].'translations'.'br'", containsString("Samoa Americana"))
                .body("[0].'translations'.'pt'", containsString("Samoa Americana"))
                .body("[0].'translations'.'nl'", containsString("Amerikaans Samoa"))
                .body("[0].'translations'.'hr'", containsString("Američka Samoa"))
                .body("[0].'translations'.'fa'", containsString("ساموآی آمریکا"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/asm.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("ASA"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_834_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/færøerne?" + 
                    "fields=18FLB4jIqxig&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_835_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/føroyar?" + 
                    "fields=18FLB4jIqxig&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_836_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/252")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Somalia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".so"))
                .body("[0].'alpha2Code'", containsString("SO"))
                .body("[0].'alpha3Code'", containsString("SOM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("252"))
                .body("[0].'capital'", containsString("Mogadishu"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("SO", "aṣ-Ṣūmāl", "Federal Republic of Somalia", "Jamhuuriyadda Federaalka Soomaaliya", "Jumhūriyyat aṣ-Ṣūmāl al-Fiderāliyya"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(1.0787E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(10.0))
                .body("[0].'latlng'[1]", numberMatches(49.0))
                .body("[0].'demonym'", containsString("Somali"))
                .body("[0].'area'", numberMatches(637657.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("DJI", "ETH", "KEN"))
                .body("[0].'nativeName'", containsString("Soomaaliya"))
                .body("[0].'numericCode'", containsString("706"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("SOS"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("so", "ar"))
                .body("[0].'translations'.'de'", containsString("Somalia"))
                .body("[0].'translations'.'es'", containsString("Somalia"))
                .body("[0].'translations'.'fr'", containsString("Somalie"))
                .body("[0].'translations'.'ja'", containsString("ソマリア"))
                .body("[0].'translations'.'it'", containsString("Somalia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_837_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/229?fields=mpY")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_838_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/panama")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Panama"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".pa"))
                .body("[0].'alpha2Code'", containsString("PA"))
                .body("[0].'alpha3Code'", containsString("PAN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("507"))
                .body("[0].'capital'", containsString("Panama City"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("PA", "Republic of Panama", "República de Panamá"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Central America"))
                .body("[0].'population'", numberMatches(3764166.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(9.0))
                .body("[0].'latlng'[1]", numberMatches(-80.0))
                .body("[0].'demonym'", containsString("Panamanian"))
                .body("[0].'area'", numberMatches(75417.0))
                .body("[0].'gini'", numberMatches(51.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-05:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("COL", "CRI"))
                .body("[0].'nativeName'", containsString("Panamá"))
                .body("[0].'numericCode'", containsString("591"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'", hasItems("PAB", "USD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("es"))
                .body("[0].'translations'.'de'", containsString("Panama"))
                .body("[0].'translations'.'es'", containsString("Panamá"))
                .body("[0].'translations'.'fr'", containsString("Panama"))
                .body("[0].'translations'.'ja'", containsString("パナマ"))
                .body("[0].'translations'.'it'", containsString("Panama"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_839_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/paraguay")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Paraguay"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".py"))
                .body("[0].'alpha2Code'", containsString("PY"))
                .body("[0].'alpha3Code'", containsString("PRY"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("595"))
                .body("[0].'capital'", containsString("Asunción"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("PY", "Republic of Paraguay", "República del Paraguay", "Tetã Paraguái"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(7003406.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-23.0))
                .body("[0].'latlng'[1]", numberMatches(-58.0))
                .body("[0].'demonym'", containsString("Paraguayan"))
                .body("[0].'area'", numberMatches(406752.0))
                .body("[0].'gini'", numberMatches(52.4))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("ARG", "BOL", "BRA"))
                .body("[0].'nativeName'", containsString("Paraguay"))
                .body("[0].'numericCode'", containsString("600"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("PYG"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("es", "gn"))
                .body("[0].'translations'.'de'", containsString("Paraguay"))
                .body("[0].'translations'.'es'", containsString("Paraguay"))
                .body("[0].'translations'.'fr'", containsString("Paraguay"))
                .body("[0].'translations'.'ja'", containsString("パラグアイ"))
                .body("[0].'translations'.'it'", containsString("Paraguay"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_840_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/pe?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(14))
                .body("[0].'name'", containsString("Cape Verde"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cv"))
                .body("[0].'alpha2Code'", containsString("CV"))
                .body("[0].'alpha3Code'", containsString("CPV"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("238"))
                .body("[0].'capital'", containsString("Praia"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("CV", "Republic of Cabo Verde", "República de Cabo Verde"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(524833.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(16.0))
                .body("[0].'latlng'[1]", numberMatches(-24.0))
                .body("[0].'demonym'", containsString("Cape Verdian"))
                .body("[0].'area'", numberMatches(4033.0))
                .body("[0].'gini'", numberMatches(50.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-01:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Cabo Verde"))
                .body("[0].'numericCode'", containsString("132"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("CVE"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("pt"))
                .body("[0].'translations'.'de'", containsString("Kap Verde"))
                .body("[0].'translations'.'es'", containsString("Cabo Verde"))
                .body("[0].'translations'.'fr'", containsString("Cap Vert"))
                .body("[0].'translations'.'ja'", containsString("カーボベルデ"))
                .body("[0].'translations'.'it'", containsString("Capo Verde"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Guadeloupe"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".gp"))
                .body("[1].'alpha2Code'", containsString("GP"))
                .body("[1].'alpha3Code'", containsString("GLP"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("590"))
                .body("[1].'capital'", containsString("Basse-Terre"))
                .body("[1].'altSpellings'.size()", equalTo(2))
                .body("[1].'altSpellings'", hasItems("GP", "Gwadloup"))
                .body("[1].'region'", containsString("Americas"))
                .body("[1].'subregion'", containsString("Caribbean"))
                .body("[1].'population'", numberMatches(403750.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(16.25))
                .body("[1].'latlng'[1]", numberMatches(-61.583333))
                .body("[1].'demonym'", containsString("Guadeloupian"))
                .body("[1].'area'", nullValue())
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC-04:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Guadeloupe"))
                .body("[1].'numericCode'", containsString("312"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("EUR"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("fr"))
                .body("[1].'translations'.'de'", containsString("Guadeloupe"))
                .body("[1].'translations'.'es'", containsString("Guadalupe"))
                .body("[1].'translations'.'fr'", containsString("Guadeloupe"))
                .body("[1].'translations'.'ja'", containsString("グアドループ"))
                .body("[1].'translations'.'it'", containsString("Guadeloupa"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Peru"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".pe"))
                .body("[2].'alpha2Code'", containsString("PE"))
                .body("[2].'alpha3Code'", containsString("PER"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("51"))
                .body("[2].'capital'", containsString("Lima"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("PE", "Republic of Peru", " República del Perú"))
                .body("[2].'region'", containsString("Americas"))
                .body("[2].'subregion'", containsString("South America"))
                .body("[2].'population'", numberMatches(3.1151643E7))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(-10.0))
                .body("[2].'latlng'[1]", numberMatches(-76.0))
                .body("[2].'demonym'", containsString("Peruvian"))
                .body("[2].'area'", numberMatches(1285216.0))
                .body("[2].'gini'", numberMatches(48.1))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC-05:00"))
                .body("[2].'borders'.size()", equalTo(5))
                .body("[2].'borders'", hasItems("BOL", "BRA", "CHL", "COL", "ECU"))
                .body("[2].'nativeName'", containsString("Perú"))
                .body("[2].'numericCode'", containsString("604"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("PEN"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("es"))
                .body("[2].'translations'.'de'", containsString("Peru"))
                .body("[2].'translations'.'es'", containsString("Perú"))
                .body("[2].'translations'.'fr'", containsString("Pérou"))
                .body("[2].'translations'.'ja'", containsString("ペルー"))
                .body("[2].'translations'.'it'", containsString("Perù"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 11 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_841_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/al-jumhuriyyah%20al-yamaniyyah?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Yemen"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ye"))
                .body("[0].'alpha2Code'", containsString("YE"))
                .body("[0].'alpha3Code'", containsString("YEM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("967"))
                .body("[0].'capital'", containsString("Sana'a"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("YE", "Yemeni Republic", "al-Jumhūriyyah al-Yamaniyyah"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(2.5956E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(15.0))
                .body("[0].'latlng'[1]", numberMatches(48.0))
                .body("[0].'demonym'", containsString("Yemeni"))
                .body("[0].'area'", numberMatches(527968.0))
                .body("[0].'gini'", numberMatches(37.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("OMN", "SAU"))
                .body("[0].'nativeName'", containsString("اليَمَن"))
                .body("[0].'numericCode'", containsString("887"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("YER"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Jemen"))
                .body("[0].'translations'.'es'", containsString("Yemen"))
                .body("[0].'translations'.'fr'", containsString("Yémen"))
                .body("[0].'translations'.'ja'", containsString("イエメン"))
                .body("[0].'translations'.'it'", containsString("Yemen"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_842_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/380")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Ukraine"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ua"))
                .body("[0].'alpha2Code'", containsString("UA"))
                .body("[0].'alpha3Code'", containsString("UKR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("380"))
                .body("[0].'capital'", containsString("Kiev"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("UA", "Ukrayina"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(4.2836922E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(49.0))
                .body("[0].'latlng'[1]", numberMatches(32.0))
                .body("[0].'demonym'", containsString("Ukrainian"))
                .body("[0].'area'", numberMatches(603700.0))
                .body("[0].'gini'", numberMatches(26.4))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(7))
                .body("[0].'borders'", hasItems("BLR", "HUN", "MDA", "POL", "ROU", "RUS", "SVK"))
                .body("[0].'nativeName'", containsString("Україна"))
                .body("[0].'numericCode'", containsString("804"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("UAH"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("uk"))
                .body("[0].'translations'.'de'", containsString("Ukraine"))
                .body("[0].'translations'.'es'", containsString("Ucrania"))
                .body("[0].'translations'.'fr'", containsString("Ukraine"))
                .body("[0].'translations'.'ja'", containsString("ウクライナ"))
                .body("[0].'translations'.'it'", containsString("Ucraina"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_843_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/qa?" + 
                    "fields=B&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_844_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/qatar?" + 
                    "fields=H&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_845_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/235?fields=nnU")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_846_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/yaren?fields=0Ztx8nWv")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_847_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/al-jumhuriyyah%20al-ʾislamiyyah%20al-muritaniyyah?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Mauritania"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mr"))
                .body("[0].'alpha2Code'", containsString("MR"))
                .body("[0].'alpha3Code'", containsString("MRT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("222"))
                .body("[0].'capital'", containsString("Nouakchott"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("MR", "Islamic Republic of Mauritania", "al-Jumhūriyyah al-ʾIslāmiyyah al-Mūrītāniyyah"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(3631775.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(20.0))
                .body("[0].'latlng'[1]", numberMatches(-12.0))
                .body("[0].'demonym'", containsString("Mauritanian"))
                .body("[0].'area'", numberMatches(1030700.0))
                .body("[0].'gini'", numberMatches(40.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("DZA", "MLI", "SEN", "ESH"))
                .body("[0].'nativeName'", containsString("موريتانيا"))
                .body("[0].'numericCode'", containsString("478"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MRO"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Mauretanien"))
                .body("[0].'translations'.'es'", containsString("Mauritania"))
                .body("[0].'translations'.'fr'", containsString("Mauritanie"))
                .body("[0].'translations'.'ja'", containsString("モーリタニア"))
                .body("[0].'translations'.'it'", containsString("Mauritania"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_848_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/al-jumhuriyyah%20at-tunisiyyah?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Tunisia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".tn"))
                .body("[0].'alpha2Code'", containsString("TN"))
                .body("[0].'alpha3Code'", containsString("TUN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("216"))
                .body("[0].'capital'", containsString("Tunis"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("TN", "Republic of Tunisia", "al-Jumhūriyyah at-Tūnisiyyah"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Northern Africa"))
                .body("[0].'population'", numberMatches(1.0982754E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(34.0))
                .body("[0].'latlng'[1]", numberMatches(9.0))
                .body("[0].'demonym'", containsString("Tunisian"))
                .body("[0].'area'", numberMatches(163610.0))
                .body("[0].'gini'", numberMatches(41.4))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("DZA", "LBY"))
                .body("[0].'nativeName'", containsString("تونس"))
                .body("[0].'numericCode'", containsString("788"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("TND"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Tunesien"))
                .body("[0].'translations'.'es'", containsString("Túnez"))
                .body("[0].'translations'.'fr'", containsString("Tunisie"))
                .body("[0].'translations'.'ja'", containsString("チュニジア"))
                .body("[0].'translations'.'it'", containsString("Tunisia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_849_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/qazaqstan?" + 
                    "fields=L&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_850_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/sucre?fields=0Ztx8nVv")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_851_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/taipei?fields=0Ztx8nVz")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_852_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/swiss?fields=_EM_4167_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_853_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/gabon?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Gabon"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ga"))
                .body("[0].'alpha2Code'", containsString("GA"))
                .body("[0].'alpha3Code'", containsString("GAB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("241"))
                .body("[0].'capital'", containsString("Libreville"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("GA", "Gabonese Republic", "République Gabonaise"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Middle Africa"))
                .body("[0].'population'", numberMatches(1725000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-1.0))
                .body("[0].'latlng'[1]", numberMatches(11.75))
                .body("[0].'demonym'", containsString("Gabonese"))
                .body("[0].'area'", numberMatches(267668.0))
                .body("[0].'gini'", numberMatches(41.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("CMR", "COG", "GNQ"))
                .body("[0].'nativeName'", containsString("Gabon"))
                .body("[0].'numericCode'", containsString("266"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XAF"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Gabun"))
                .body("[0].'translations'.'es'", containsString("Gabón"))
                .body("[0].'translations'.'fr'", containsString("Gabon"))
                .body("[0].'translations'.'ja'", containsString("ガボン"))
                .body("[0].'translations'.'it'", containsString("Gabon"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_854_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/gabuuti?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Djibouti"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".dj"))
                .body("[0].'alpha2Code'", containsString("DJ"))
                .body("[0].'alpha3Code'", containsString("DJI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("253"))
                .body("[0].'capital'", containsString("Djibouti"))
                .body("[0].'altSpellings'.size()", equalTo(7))
                .body("[0].'altSpellings'", hasItems("DJ", "Jabuuti", "Gabuuti", "Republic of Djibouti", "République de Djibouti", "Gabuutih Ummuuno", "Jamhuuriyadda Jabuuti"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(888000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(11.5))
                .body("[0].'latlng'[1]", numberMatches(43.0))
                .body("[0].'demonym'", containsString("Djibouti"))
                .body("[0].'area'", numberMatches(23200.0))
                .body("[0].'gini'", numberMatches(40.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("ERI", "ETH", "SOM"))
                .body("[0].'nativeName'", containsString("Djibouti"))
                .body("[0].'numericCode'", containsString("262"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("DJF"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fr", "ar"))
                .body("[0].'translations'.'de'", containsString("Dschibuti"))
                .body("[0].'translations'.'es'", containsString("Yibuti"))
                .body("[0].'translations'.'fr'", containsString("Djibouti"))
                .body("[0].'translations'.'ja'", containsString("ジブチ"))
                .body("[0].'translations'.'it'", containsString("Gibuti"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_855_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/236?fields=nnU")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_856_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/tehran?fields=3eMTW94")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_857_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/bharat")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("India"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".in"))
                .body("[0].'alpha2Code'", containsString("IN"))
                .body("[0].'alpha3Code'", containsString("IND"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("91"))
                .body("[0].'capital'", containsString("New Delhi"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("IN", "Bhārat", "Republic of India", "Bharat Ganrajya"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(1.29521E9))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(20.0))
                .body("[0].'latlng'[1]", numberMatches(77.0))
                .body("[0].'demonym'", containsString("Indian"))
                .body("[0].'area'", numberMatches(3287590.0))
                .body("[0].'gini'", numberMatches(33.4))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+05:30"))
                .body("[0].'borders'.size()", equalTo(8))
                .body("[0].'borders'", hasItems("AFG", "BGD", "BTN", "MMR", "CHN", "NPL", "PAK", "LKA"))
                .body("[0].'nativeName'", containsString("भारत"))
                .body("[0].'numericCode'", containsString("356"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("INR"))
                .body("[0].'currencies'[0].'name'", containsString("Indian rupee"))
                .body("[0].'currencies'[0].'symbol'", containsString("₹"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("hi"))
                .body("[0].'languages'[0].'iso639_2'", containsString("hin"))
                .body("[0].'languages'[0].'name'", containsString("Hindi"))
                .body("[0].'languages'[0].'nativeName'", containsString("हिन्दी"))
                .body("[0].'languages'[1].'iso639_1'", containsString("en"))
                .body("[0].'languages'[1].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[1].'name'", containsString("English"))
                .body("[0].'languages'[1].'nativeName'", containsString("English"))
                .body("[0].'translations'.'de'", containsString("Indien"))
                .body("[0].'translations'.'es'", containsString("India"))
                .body("[0].'translations'.'fr'", containsString("Inde"))
                .body("[0].'translations'.'ja'", containsString("インド"))
                .body("[0].'translations'.'it'", containsString("India"))
                .body("[0].'translations'.'br'", containsString("Índia"))
                .body("[0].'translations'.'pt'", containsString("Índia"))
                .body("[0].'translations'.'nl'", containsString("India"))
                .body("[0].'translations'.'hr'", containsString("Indija"))
                .body("[0].'translations'.'fa'", containsString("هند"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/ind.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("SAARC"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("South Asian Association for Regional Cooperation"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("IND"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_858_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/bhutan")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Bhutan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bt"))
                .body("[0].'alpha2Code'", containsString("BT"))
                .body("[0].'alpha3Code'", containsString("BTN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("975"))
                .body("[0].'capital'", containsString("Thimphu"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("BT", "Kingdom of Bhutan"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(775620.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(27.5))
                .body("[0].'latlng'[1]", numberMatches(90.5))
                .body("[0].'demonym'", containsString("Bhutanese"))
                .body("[0].'area'", numberMatches(38394.0))
                .body("[0].'gini'", numberMatches(38.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+06:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("CHN", "IND"))
                .body("[0].'nativeName'", containsString("ʼbrug-yul"))
                .body("[0].'numericCode'", containsString("064"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'[0].'code'", containsString("BTN"))
                .body("[0].'currencies'[0].'name'", containsString("Bhutanese ngultrum"))
                .body("[0].'currencies'[0].'symbol'", containsString("Nu."))
                .body("[0].'currencies'[1].'code'", containsString("INR"))
                .body("[0].'currencies'[1].'name'", containsString("Indian rupee"))
                .body("[0].'currencies'[1].'symbol'", containsString("₹"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("dz"))
                .body("[0].'languages'[0].'iso639_2'", containsString("dzo"))
                .body("[0].'languages'[0].'name'", containsString("Dzongkha"))
                .body("[0].'languages'[0].'nativeName'", containsString("རྫོང་ཁ"))
                .body("[0].'translations'.'de'", containsString("Bhutan"))
                .body("[0].'translations'.'es'", containsString("Bután"))
                .body("[0].'translations'.'fr'", containsString("Bhoutan"))
                .body("[0].'translations'.'ja'", containsString("ブータン"))
                .body("[0].'translations'.'it'", containsString("Bhutan"))
                .body("[0].'translations'.'br'", containsString("Butão"))
                .body("[0].'translations'.'pt'", containsString("Butão"))
                .body("[0].'translations'.'nl'", containsString("Bhutan"))
                .body("[0].'translations'.'hr'", containsString("Butan"))
                .body("[0].'translations'.'fa'", containsString("بوتان"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/btn.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("SAARC"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("South Asian Association for Regional Cooperation"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("BHU"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_859_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/noumea")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("New Caledonia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".nc"))
                .body("[0].'alpha2Code'", containsString("NC"))
                .body("[0].'alpha3Code'", containsString("NCL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("687"))
                .body("[0].'capital'", containsString("Nouméa"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("NC"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Melanesia"))
                .body("[0].'population'", numberMatches(268767.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-21.5))
                .body("[0].'latlng'[1]", numberMatches(165.5))
                .body("[0].'demonym'", containsString("New Caledonian"))
                .body("[0].'area'", numberMatches(18575.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+11:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Nouvelle-Calédonie"))
                .body("[0].'numericCode'", containsString("540"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XPF"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Neukaledonien"))
                .body("[0].'translations'.'es'", containsString("Nueva Caledonia"))
                .body("[0].'translations'.'fr'", containsString("Nouvelle-Calédonie"))
                .body("[0].'translations'.'ja'", containsString("ニューカレドニア"))
                .body("[0].'translations'.'it'", containsString("Nuova Caledonia"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_860_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/nuku'alofa")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Tonga"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".to"))
                .body("[0].'alpha2Code'", containsString("TO"))
                .body("[0].'alpha3Code'", containsString("TON"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("676"))
                .body("[0].'capital'", containsString("Nuku'alofa"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("TO"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Polynesia"))
                .body("[0].'population'", numberMatches(103252.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-20.0))
                .body("[0].'latlng'[1]", numberMatches(-175.0))
                .body("[0].'demonym'", containsString("Tongan"))
                .body("[0].'area'", numberMatches(747.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+13:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Tonga"))
                .body("[0].'numericCode'", containsString("776"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("TOP"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "to"))
                .body("[0].'translations'.'de'", containsString("Tonga"))
                .body("[0].'translations'.'es'", containsString("Tonga"))
                .body("[0].'translations'.'fr'", containsString("Tonga"))
                .body("[0].'translations'.'ja'", containsString("トンガ"))
                .body("[0].'translations'.'it'", containsString("Tonga"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_861_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/nuuk")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Greenland"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gl"))
                .body("[0].'alpha2Code'", containsString("GL"))
                .body("[0].'alpha3Code'", containsString("GRL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("299"))
                .body("[0].'capital'", containsString("Nuuk"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("GL", "Grønland"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Northern America"))
                .body("[0].'population'", numberMatches(56114.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(72.0))
                .body("[0].'latlng'[1]", numberMatches(-40.0))
                .body("[0].'demonym'", containsString("Greenlandic"))
                .body("[0].'area'", numberMatches(2166086.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(4))
                .body("[0].'timezones'", hasItems("UTC-04:00", "UTC-03:00", "UTC-01:00", "UTC+00:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Kalaallit Nunaat"))
                .body("[0].'numericCode'", containsString("304"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("DKK"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("kl"))
                .body("[0].'translations'.'de'", containsString("Grönland"))
                .body("[0].'translations'.'es'", containsString("Groenlandia"))
                .body("[0].'translations'.'fr'", containsString("Groenland"))
                .body("[0].'translations'.'ja'", containsString("グリーンランド"))
                .body("[0].'translations'.'it'", containsString("Groenlandia"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_862_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/254?fields=%3C6uo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_863_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/conakry?fields=QYfZM")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_864_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/dakar?fields=_EM_15253_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_865_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/tl")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("United States Minor Outlying Islands"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".us"))
                .body("[0].'alpha2Code'", containsString("UM"))
                .body("[0].'alpha3Code'", containsString("UMI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString(""))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("UM"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Northern America"))
                .body("[0].'population'", numberMatches(300.0))
                .body("[0].'latlng'.size()", equalTo(0))
                .body("[0].'demonym'", containsString("American"))
                .body("[0].'area'", nullValue())
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(3))
                .body("[0].'timezones'", hasItems("UTC-11:00", "UTC-10:00", "UTC+12:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("United States Minor Outlying Islands"))
                .body("[0].'numericCode'", containsString("581"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Kleinere Inselbesitzungen der Vereinigten Staaten"))
                .body("[0].'translations'.'es'", containsString("Islas Ultramarinas Menores de Estados Unidos"))
                .body("[0].'translations'.'fr'", containsString("Îles mineures éloignées des États-Unis"))
                .body("[0].'translations'.'ja'", containsString("合衆国領有小離島"))
                .body("[0].'translations'.'it'", containsString("Isole minori esterne degli Stati Uniti d'America"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("East Timor"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".tl"))
                .body("[1].'alpha2Code'", containsString("TL"))
                .body("[1].'alpha3Code'", containsString("TLS"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("670"))
                .body("[1].'capital'", containsString("Dili"))
                .body("[1].'altSpellings'.size()", equalTo(5))
                .body("[1].'altSpellings'", hasItems("TL", "East Timor", "Democratic Republic of Timor-Leste", "República Democrática de Timor-Leste", "Repúblika Demokrátika Timór-Leste"))
                .body("[1].'region'", containsString("Asia"))
                .body("[1].'subregion'", containsString("South-Eastern Asia"))
                .body("[1].'population'", numberMatches(1212107.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-8.83333333))
                .body("[1].'latlng'[1]", numberMatches(125.91666666))
                .body("[1].'demonym'", containsString("East Timorese"))
                .body("[1].'area'", numberMatches(14874.0))
                .body("[1].'gini'", numberMatches(31.9))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+09:00"))
                .body("[1].'borders'.size()", equalTo(1))
                .body("[1].'borders'", hasItems("IDN"))
                .body("[1].'nativeName'", containsString("Timor-Leste"))
                .body("[1].'numericCode'", containsString("626"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("USD"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("pt"))
                .body("[1].'translations'.'de'", containsString("Timor-Leste"))
                .body("[1].'translations'.'es'", containsString("Timor Oriental"))
                .body("[1].'translations'.'fr'", containsString("Timor oriental"))
                .body("[1].'translations'.'ja'", containsString("東ティモール"))
                .body("[1].'translations'.'it'", containsString("Timor Est"))
                .body("[1].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_866_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/tm?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'name'", containsString("Christmas Island"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cx"))
                .body("[0].'alpha2Code'", containsString("CX"))
                .body("[0].'alpha3Code'", containsString("CXR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("61"))
                .body("[0].'capital'", containsString("Flying Fish Cove"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("CX", "Territory of Christmas Island"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Australia and New Zealand"))
                .body("[0].'population'", numberMatches(2072.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-10.5))
                .body("[0].'latlng'[1]", numberMatches(105.66666666))
                .body("[0].'demonym'", containsString("Christmas Island"))
                .body("[0].'area'", numberMatches(135.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+07:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Christmas Island"))
                .body("[0].'numericCode'", containsString("162"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AUD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Weihnachtsinsel"))
                .body("[0].'translations'.'es'", containsString("Isla de Navidad"))
                .body("[0].'translations'.'fr'", containsString("Île Christmas"))
                .body("[0].'translations'.'ja'", containsString("クリスマス島"))
                .body("[0].'translations'.'it'", containsString("Isola di Natale"))
                .body("[0].'relevance'", containsString("0.5"))
                .body("[1].'name'", containsString("Mayotte"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".yt"))
                .body("[1].'alpha2Code'", containsString("YT"))
                .body("[1].'alpha3Code'", containsString("MYT"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("262"))
                .body("[1].'capital'", containsString("Mamoudzou"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("YT", "Department of Mayotte", "Département de Mayotte"))
                .body("[1].'region'", containsString("Africa"))
                .body("[1].'subregion'", containsString("Eastern Africa"))
                .body("[1].'population'", numberMatches(212645.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-12.83333333))
                .body("[1].'latlng'[1]", numberMatches(45.16666666))
                .body("[1].'demonym'", containsString("French"))
                .body("[1].'area'", nullValue())
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+03:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Mayotte"))
                .body("[1].'numericCode'", containsString("175"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("EUR"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("fr"))
                .body("[1].'translations'.'de'", containsString("Mayotte"))
                .body("[1].'translations'.'es'", containsString("Mayotte"))
                .body("[1].'translations'.'fr'", containsString("Mayotte"))
                .body("[1].'translations'.'ja'", containsString("マヨット"))
                .body("[1].'translations'.'it'", containsString("Mayotte"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Turkmenistan"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".tm"))
                .body("[2].'alpha2Code'", containsString("TM"))
                .body("[2].'alpha3Code'", containsString("TKM"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("993"))
                .body("[2].'capital'", containsString("Ashgabat"))
                .body("[2].'altSpellings'.size()", equalTo(1))
                .body("[2].'altSpellings'", hasItems("TM"))
                .body("[2].'region'", containsString("Asia"))
                .body("[2].'subregion'", containsString("Central Asia"))
                .body("[2].'population'", numberMatches(4751120.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(40.0))
                .body("[2].'latlng'[1]", numberMatches(60.0))
                .body("[2].'demonym'", containsString("Turkmen"))
                .body("[2].'area'", numberMatches(488100.0))
                .body("[2].'gini'", numberMatches(40.8))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+05:00"))
                .body("[2].'borders'.size()", equalTo(4))
                .body("[2].'borders'", hasItems("AFG", "IRN", "KAZ", "UZB"))
                .body("[2].'nativeName'", containsString("Türkmenistan"))
                .body("[2].'numericCode'", containsString("795"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("TMT"))
                .body("[2].'languages'.size()", equalTo(2))
                .body("[2].'languages'", hasItems("tk", "ru"))
                .body("[2].'translations'.'de'", containsString("Turkmenistan"))
                .body("[2].'translations'.'es'", containsString("Turkmenistán"))
                .body("[2].'translations'.'fr'", containsString("Turkménistan"))
                .body("[2].'translations'.'ja'", containsString("トルクメニスタン"))
                .body("[2].'translations'.'it'", containsString("Turkmenistan"))
                .body("[2].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_867_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/tn?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Tunisia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".tn"))
                .body("[0].'alpha2Code'", containsString("TN"))
                .body("[0].'alpha3Code'", containsString("TUN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("216"))
                .body("[0].'capital'", containsString("Tunis"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("TN", "Republic of Tunisia", "al-Jumhūriyyah at-Tūnisiyyah"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Northern Africa"))
                .body("[0].'population'", numberMatches(1.0982754E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(34.0))
                .body("[0].'latlng'[1]", numberMatches(9.0))
                .body("[0].'demonym'", containsString("Tunisian"))
                .body("[0].'area'", numberMatches(163610.0))
                .body("[0].'gini'", numberMatches(41.4))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("DZA", "LBY"))
                .body("[0].'nativeName'", containsString("تونس"))
                .body("[0].'numericCode'", containsString("788"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("TND"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Tunesien"))
                .body("[0].'translations'.'es'", containsString("Túnez"))
                .body("[0].'translations'.'fr'", containsString("Tunisie"))
                .body("[0].'translations'.'ja'", containsString("チュニジア"))
                .body("[0].'translations'.'it'", containsString("Tunisia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_868_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/tanzanian?fields=R")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_869_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/EEU?fields=_EM_15303_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_870_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/danmark?" + 
                    "fields=V5YY&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_871_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/dawlat%20libya?" + 
                    "fields=V%3EAY&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_872_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/dawlat%20qatar?" + 
                    "fields=V%3EAY&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_873_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/355")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Albania"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".al"))
                .body("[0].'alpha2Code'", containsString("AL"))
                .body("[0].'alpha3Code'", containsString("ALB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("355"))
                .body("[0].'capital'", containsString("Tirana"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("AL", "Shqipëri", "Shqipëria", "Shqipnia"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(2886026.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(41.0))
                .body("[0].'latlng'[1]", numberMatches(20.0))
                .body("[0].'demonym'", containsString("Albanian"))
                .body("[0].'area'", numberMatches(28748.0))
                .body("[0].'gini'", numberMatches(34.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("MNE", "GRC", "MKD", "KOS"))
                .body("[0].'nativeName'", containsString("Shqipëria"))
                .body("[0].'numericCode'", containsString("008"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("ALL"))
                .body("[0].'currencies'[0].'name'", containsString("Albanian lek"))
                .body("[0].'currencies'[0].'symbol'", containsString("L"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("sq"))
                .body("[0].'languages'[0].'iso639_2'", containsString("sqi"))
                .body("[0].'languages'[0].'name'", containsString("Albanian"))
                .body("[0].'languages'[0].'nativeName'", containsString("Shqip"))
                .body("[0].'translations'.'de'", containsString("Albanien"))
                .body("[0].'translations'.'es'", containsString("Albania"))
                .body("[0].'translations'.'fr'", containsString("Albanie"))
                .body("[0].'translations'.'ja'", containsString("アルバニア"))
                .body("[0].'translations'.'it'", containsString("Albania"))
                .body("[0].'translations'.'br'", containsString("Albânia"))
                .body("[0].'translations'.'pt'", containsString("Albânia"))
                .body("[0].'translations'.'nl'", containsString("Albanië"))
                .body("[0].'translations'.'hr'", containsString("Albanija"))
                .body("[0].'translations'.'fa'", containsString("آلبانی"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/alb.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("CEFTA"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Central European Free Trade Agreement"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("ALB"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_874_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/358?fields=_EM_4148_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_875_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/bhutanese?fields=rtY")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_876_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/damascus")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Syria"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sy"))
                .body("[0].'alpha2Code'", containsString("SY"))
                .body("[0].'alpha3Code'", containsString("SYR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("963"))
                .body("[0].'capital'", containsString("Damascus"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("SY", "Syrian Arab Republic", "Al-Jumhūrīyah Al-ʻArabīyah As-Sūrīyah"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(2.3339517E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(35.0))
                .body("[0].'latlng'[1]", numberMatches(38.0))
                .body("[0].'demonym'", containsString("Syrian"))
                .body("[0].'area'", numberMatches(185180.0))
                .body("[0].'gini'", numberMatches(35.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("IRQ", "ISR", "JOR", "LBN", "TUR"))
                .body("[0].'nativeName'", containsString("سوريا"))
                .body("[0].'numericCode'", containsString("760"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("SYP"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Syrien"))
                .body("[0].'translations'.'es'", containsString("Siria"))
                .body("[0].'translations'.'fr'", containsString("Syrie"))
                .body("[0].'translations'.'ja'", containsString("シリア・アラブ共和国"))
                .body("[0].'translations'.'it'", containsString("Siria"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_877_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/philippines?" + 
                    "fields=Glh&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_878_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/guamanian?fields=5HH1Pu748Jr")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_879_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/kiribati?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Kiribati"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ki"))
                .body("[0].'alpha2Code'", containsString("KI"))
                .body("[0].'alpha3Code'", containsString("KIR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("686"))
                .body("[0].'capital'", containsString("South Tarawa"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("KI", "Republic of Kiribati", "Ribaberiki Kiribati"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Micronesia"))
                .body("[0].'population'", numberMatches(106461.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(1.41666666))
                .body("[0].'latlng'[1]", numberMatches(173.0))
                .body("[0].'demonym'", containsString("I-Kiribati"))
                .body("[0].'area'", numberMatches(811.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(3))
                .body("[0].'timezones'", hasItems("UTC+12:00", "UTC+13:00", "UTC+14:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Kiribati"))
                .body("[0].'numericCode'", containsString("296"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AUD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Kiribati"))
                .body("[0].'translations'.'es'", containsString("Kiribati"))
                .body("[0].'translations'.'fr'", containsString("Kiribati"))
                .body("[0].'translations'.'ja'", containsString("キリバス"))
                .body("[0].'translations'.'it'", containsString("Kiribati"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_880_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/km?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("Turkmenistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".tm"))
                .body("[0].'alpha2Code'", containsString("TM"))
                .body("[0].'alpha3Code'", containsString("TKM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("993"))
                .body("[0].'capital'", containsString("Ashgabat"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("TM"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Central Asia"))
                .body("[0].'population'", numberMatches(4751120.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(40.0))
                .body("[0].'latlng'[1]", numberMatches(60.0))
                .body("[0].'demonym'", containsString("Turkmen"))
                .body("[0].'area'", numberMatches(488100.0))
                .body("[0].'gini'", numberMatches(40.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+05:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("AFG", "IRN", "KAZ", "UZB"))
                .body("[0].'nativeName'", containsString("Türkmenistan"))
                .body("[0].'numericCode'", containsString("795"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("TMT"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("tk", "ru"))
                .body("[0].'translations'.'de'", containsString("Turkmenistan"))
                .body("[0].'translations'.'es'", containsString("Turkmenistán"))
                .body("[0].'translations'.'fr'", containsString("Turkménistan"))
                .body("[0].'translations'.'ja'", containsString("トルクメニスタン"))
                .body("[0].'translations'.'it'", containsString("Turkmenistan"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Comoros"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".km"))
                .body("[1].'alpha2Code'", containsString("KM"))
                .body("[1].'alpha3Code'", containsString("COM"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("269"))
                .body("[1].'capital'", containsString("Moroni"))
                .body("[1].'altSpellings'.size()", equalTo(5))
                .body("[1].'altSpellings'", hasItems("KM", "Union of the Comoros", "Union des Comores", "Udzima wa Komori", "al-Ittiḥād al-Qumurī"))
                .body("[1].'region'", containsString("Africa"))
                .body("[1].'subregion'", containsString("Eastern Africa"))
                .body("[1].'population'", numberMatches(784745.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-12.16666666))
                .body("[1].'latlng'[1]", numberMatches(44.25))
                .body("[1].'demonym'", containsString("Comoran"))
                .body("[1].'area'", numberMatches(1862.0))
                .body("[1].'gini'", numberMatches(64.3))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+03:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Komori"))
                .body("[1].'numericCode'", containsString("174"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("KMF"))
                .body("[1].'languages'.size()", equalTo(2))
                .body("[1].'languages'", hasItems("ar", "fr"))
                .body("[1].'translations'.'de'", containsString("Union der Komoren"))
                .body("[1].'translations'.'es'", containsString("Comoras"))
                .body("[1].'translations'.'fr'", containsString("Comores"))
                .body("[1].'translations'.'ja'", containsString("コモロ"))
                .body("[1].'translations'.'it'", containsString("Comore"))
                .body("[1].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_881_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/996")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Kyrgyzstan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".kg"))
                .body("[0].'alpha2Code'", containsString("KG"))
                .body("[0].'alpha3Code'", containsString("KGZ"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("996"))
                .body("[0].'capital'", containsString("Bishkek"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("KG", "Киргизия", "Kyrgyz Republic", "Кыргыз Республикасы", "Kyrgyz Respublikasy"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Central Asia"))
                .body("[0].'population'", numberMatches(5944400.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(41.0))
                .body("[0].'latlng'[1]", numberMatches(75.0))
                .body("[0].'demonym'", containsString("Kirghiz"))
                .body("[0].'area'", numberMatches(199951.0))
                .body("[0].'gini'", numberMatches(36.2))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+06:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("CHN", "KAZ", "TJK", "UZB"))
                .body("[0].'nativeName'", containsString("Кыргызстан"))
                .body("[0].'numericCode'", containsString("417"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("KGS"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("ky", "ru"))
                .body("[0].'translations'.'de'", containsString("Kirgisistan"))
                .body("[0].'translations'.'es'", containsString("Kirguizistán"))
                .body("[0].'translations'.'fr'", containsString("Kirghizistan"))
                .body("[0].'translations'.'ja'", containsString("キルギス"))
                .body("[0].'translations'.'it'", containsString("Kirghizistan"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_882_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/1")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(27))
                .body("[0].'name'", containsString("American Samoa"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".as"))
                .body("[0].'alpha2Code'", containsString("AS"))
                .body("[0].'alpha3Code'", containsString("ASM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Pago Pago"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("AS", "Amerika Sāmoa", "Amelika Sāmoa", "Sāmoa Amelika"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Polynesia"))
                .body("[0].'population'", numberMatches(55519.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-14.33333333))
                .body("[0].'latlng'[1]", numberMatches(-170.0))
                .body("[0].'demonym'", containsString("American Samoan"))
                .body("[0].'area'", numberMatches(199.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-11:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("American Samoa"))
                .body("[0].'numericCode'", containsString("016"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "sm"))
                .body("[0].'translations'.'de'", containsString("Amerikanisch-Samoa"))
                .body("[0].'translations'.'es'", containsString("Samoa Americana"))
                .body("[0].'translations'.'fr'", containsString("Samoa américaines"))
                .body("[0].'translations'.'ja'", containsString("アメリカ領サモア"))
                .body("[0].'translations'.'it'", containsString("Samoa Americane"))
                .body("[0].'relevance'", containsString("0.5"))
                .body("[1].'name'", containsString("Anguilla"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ai"))
                .body("[1].'alpha2Code'", containsString("AI"))
                .body("[1].'alpha3Code'", containsString("AIA"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("1"))
                .body("[1].'capital'", containsString("The Valley"))
                .body("[1].'altSpellings'.size()", equalTo(1))
                .body("[1].'altSpellings'", hasItems("AI"))
                .body("[1].'region'", containsString("Americas"))
                .body("[1].'subregion'", containsString("Caribbean"))
                .body("[1].'population'", numberMatches(13452.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(18.25))
                .body("[1].'latlng'[1]", numberMatches(-63.16666666))
                .body("[1].'demonym'", containsString("Anguillian"))
                .body("[1].'area'", numberMatches(91.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC-04:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Anguilla"))
                .body("[1].'numericCode'", containsString("660"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("XCD"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("en"))
                .body("[1].'translations'.'de'", containsString("Anguilla"))
                .body("[1].'translations'.'es'", containsString("Anguilla"))
                .body("[1].'translations'.'fr'", containsString("Anguilla"))
                .body("[1].'translations'.'ja'", containsString("アンギラ"))
                .body("[1].'translations'.'it'", containsString("Anguilla"))
                .body("[1].'relevance'", containsString("0.5"))
                .body("[2].'name'", containsString("Antigua and Barbuda"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".ag"))
                .body("[2].'alpha2Code'", containsString("AG"))
                .body("[2].'alpha3Code'", containsString("ATG"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("1"))
                .body("[2].'capital'", containsString("Saint John's"))
                .body("[2].'altSpellings'.size()", equalTo(1))
                .body("[2].'altSpellings'", hasItems("AG"))
                .body("[2].'region'", containsString("Americas"))
                .body("[2].'subregion'", containsString("Caribbean"))
                .body("[2].'population'", numberMatches(86295.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(17.05))
                .body("[2].'latlng'[1]", numberMatches(-61.8))
                .body("[2].'demonym'", containsString("Antiguan, Barbudan"))
                .body("[2].'area'", numberMatches(442.0))
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC-04:00"))
                .body("[2].'borders'.size()", equalTo(0))
                .body("[2].'nativeName'", containsString("Antigua and Barbuda"))
                .body("[2].'numericCode'", containsString("028"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("XCD"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("en"))
                .body("[2].'translations'.'de'", containsString("Antigua und Barbuda"))
                .body("[2].'translations'.'es'", containsString("Antigua y Barbuda"))
                .body("[2].'translations'.'fr'", containsString("Antigua-et-Barbuda"))
                .body("[2].'translations'.'ja'", containsString("アンティグア・バーブーダ"))
                .body("[2].'translations'.'it'", containsString("Antigua e Barbuda"))
                .body("[2].'relevance'", containsString("0.5"))
                ; // Skipping assertions on the remaining 24 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_883_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/pitcairn?" + 
                    "fields=Glh&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_884_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/pk?" + 
                    "fields=Glh&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_885_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/pl?" + 
                    "fields=Glh&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(8))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 5 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_886_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/moscow?fields=7jMkvKPn")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_887_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/muscat?fields=7jMkvKPn")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_888_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/guinean?fields=5HH3Qh748JrH")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_889_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/guyana?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Guyana"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gy"))
                .body("[0].'alpha2Code'", containsString("GY"))
                .body("[0].'alpha3Code'", containsString("GUY"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("592"))
                .body("[0].'capital'", containsString("Georgetown"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("GY", "Co-operative Republic of Guyana"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(746900.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(5.0))
                .body("[0].'latlng'[1]", numberMatches(-59.0))
                .body("[0].'demonym'", containsString("Guyanese"))
                .body("[0].'area'", numberMatches(214969.0))
                .body("[0].'gini'", numberMatches(44.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("BRA", "SUR", "VEN"))
                .body("[0].'nativeName'", containsString("Guyana"))
                .body("[0].'numericCode'", containsString("328"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("GYD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Guyana"))
                .body("[0].'translations'.'es'", containsString("Guyana"))
                .body("[0].'translations'.'fr'", containsString("Guyane"))
                .body("[0].'translations'.'ja'", containsString("ガイアナ"))
                .body("[0].'translations'.'it'", containsString("Guyana"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_890_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/guadeloupian?fields=_EM_15538_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_891_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/590")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'name'", containsString("Guadeloupe"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gp"))
                .body("[0].'alpha2Code'", containsString("GP"))
                .body("[0].'alpha3Code'", containsString("GLP"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("590"))
                .body("[0].'capital'", containsString("Basse-Terre"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("GP", "Gwadloup"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(403750.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(16.25))
                .body("[0].'latlng'[1]", numberMatches(-61.583333))
                .body("[0].'demonym'", containsString("Guadeloupian"))
                .body("[0].'area'", nullValue())
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Guadeloupe"))
                .body("[0].'numericCode'", containsString("312"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Guadeloupe"))
                .body("[0].'translations'.'es'", containsString("Guadalupe"))
                .body("[0].'translations'.'fr'", containsString("Guadeloupe"))
                .body("[0].'translations'.'ja'", containsString("グアドループ"))
                .body("[0].'translations'.'it'", containsString("Guadeloupa"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Saint Barthélemy"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".bl"))
                .body("[1].'alpha2Code'", containsString("BL"))
                .body("[1].'alpha3Code'", containsString("BLM"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("590"))
                .body("[1].'capital'", containsString("Gustavia"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("BL", "St. Barthelemy", "Collectivity of Saint Barthélemy", "Collectivité de Saint-Barthélemy"))
                .body("[1].'region'", containsString("Americas"))
                .body("[1].'subregion'", containsString("Caribbean"))
                .body("[1].'population'", numberMatches(9269.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(18.5))
                .body("[1].'latlng'[1]", numberMatches(-63.41666666))
                .body("[1].'demonym'", containsString("Saint Barthélemy Islander"))
                .body("[1].'area'", numberMatches(21.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC-04:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Saint-Barthélemy"))
                .body("[1].'numericCode'", containsString("652"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("EUR"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("fr"))
                .body("[1].'translations'.'de'", containsString("Saint-Barthélemy"))
                .body("[1].'translations'.'es'", containsString("San Bartolomé"))
                .body("[1].'translations'.'fr'", containsString("Saint-Barthélemy"))
                .body("[1].'translations'.'ja'", containsString("サン・バルテルミー"))
                .body("[1].'translations'.'it'", containsString("Antille Francesi"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Saint Martin"))
                .body("[2].'topLevelDomain'.size()", equalTo(3))
                .body("[2].'topLevelDomain'", hasItems(".mf", ".fr", ".gp"))
                .body("[2].'alpha2Code'", containsString("MF"))
                .body("[2].'alpha3Code'", containsString("MAF"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("590"))
                .body("[2].'capital'", containsString("Marigot"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("MF", "Collectivity of Saint Martin", "Collectivité de Saint-Martin"))
                .body("[2].'region'", containsString("Americas"))
                .body("[2].'subregion'", containsString("Caribbean"))
                .body("[2].'population'", numberMatches(36979.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(18.08333333))
                .body("[2].'latlng'[1]", numberMatches(-63.95))
                .body("[2].'demonym'", containsString("Saint Martin Islander"))
                .body("[2].'area'", numberMatches(53.0))
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC-04:00"))
                .body("[2].'borders'.size()", equalTo(2))
                .body("[2].'borders'", hasItems("SXM", "NLD"))
                .body("[2].'nativeName'", containsString("Saint-Martin"))
                .body("[2].'numericCode'", containsString("663"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("EUR"))
                .body("[2].'languages'.size()", equalTo(3))
                .body("[2].'languages'", hasItems("en", "fr", "nl"))
                .body("[2].'translations'.'de'", containsString("Saint Martin"))
                .body("[2].'translations'.'es'", containsString("Saint Martin"))
                .body("[2].'translations'.'fr'", containsString("Saint-Martin"))
                .body("[2].'translations'.'ja'", containsString("サン・マルタン（フランス領）"))
                .body("[2].'translations'.'it'", containsString("Saint Martin"))
                .body("[2].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_892_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/solomon%20islander?fields=tAWU")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_893_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/be")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(9))
                .body("[0].'name'", containsString("Belarus"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".by"))
                .body("[0].'alpha2Code'", containsString("BY"))
                .body("[0].'alpha3Code'", containsString("BLR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("375"))
                .body("[0].'capital'", containsString("Minsk"))
                .body("[0].'altSpellings'.size()", equalTo(7))
                .body("[0].'altSpellings'", hasItems("BY", "Bielaruś", "Republic of Belarus", "Белоруссия", "Республика Беларусь", "Belorussiya", "Respublika Belarus’"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(9498700.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(53.0))
                .body("[0].'latlng'[1]", numberMatches(28.0))
                .body("[0].'demonym'", containsString("Belarusian"))
                .body("[0].'area'", numberMatches(207600.0))
                .body("[0].'gini'", numberMatches(26.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("LVA", "LTU", "POL", "RUS", "UKR"))
                .body("[0].'nativeName'", containsString("Белару́сь"))
                .body("[0].'numericCode'", containsString("112"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'[0].'code'", containsString("BYN"))
                .body("[0].'currencies'[0].'name'", containsString("New Belarusian ruble"))
                .body("[0].'currencies'[0].'symbol'", containsString("Br"))
                .body("[0].'currencies'[1].'code'", containsString("BYR"))
                .body("[0].'currencies'[1].'name'", containsString("Old Belarusian ruble"))
                .body("[0].'currencies'[1].'symbol'", containsString("Br"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("be"))
                .body("[0].'languages'[0].'iso639_2'", containsString("bel"))
                .body("[0].'languages'[0].'name'", containsString("Belarusian"))
                .body("[0].'languages'[0].'nativeName'", containsString("беларуская мова"))
                .body("[0].'languages'[1].'iso639_1'", containsString("ru"))
                .body("[0].'languages'[1].'iso639_2'", containsString("rus"))
                .body("[0].'languages'[1].'name'", containsString("Russian"))
                .body("[0].'languages'[1].'nativeName'", containsString("Русский"))
                .body("[0].'translations'.'de'", containsString("Weißrussland"))
                .body("[0].'translations'.'es'", containsString("Bielorrusia"))
                .body("[0].'translations'.'fr'", containsString("Biélorussie"))
                .body("[0].'translations'.'ja'", containsString("ベラルーシ"))
                .body("[0].'translations'.'it'", containsString("Bielorussia"))
                .body("[0].'translations'.'br'", containsString("Bielorrússia"))
                .body("[0].'translations'.'pt'", containsString("Bielorrússia"))
                .body("[0].'translations'.'nl'", containsString("Wit-Rusland"))
                .body("[0].'translations'.'hr'", containsString("Bjelorusija"))
                .body("[0].'translations'.'fa'", containsString("بلاروس"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/blr.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("EEU"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Eurasian Economic Union"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'", hasItems("EAEU"))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("BLR"))
                .body("[1].'name'", containsString("Belgium"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".be"))
                .body("[1].'alpha2Code'", containsString("BE"))
                .body("[1].'alpha3Code'", containsString("BEL"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("32"))
                .body("[1].'capital'", containsString("Brussels"))
                .body("[1].'altSpellings'.size()", equalTo(9))
                .body("[1].'altSpellings'", hasItems("BE", "België", "Belgie", "Belgien", "Belgique", "Kingdom of Belgium", "Koninkrijk België", "Royaume de Belgique", "Königreich Belgien"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Western Europe"))
                .body("[1].'population'", numberMatches(1.1319511E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(50.83333333))
                .body("[1].'latlng'[1]", numberMatches(4.0))
                .body("[1].'demonym'", containsString("Belgian"))
                .body("[1].'area'", numberMatches(30528.0))
                .body("[1].'gini'", numberMatches(33.0))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+01:00"))
                .body("[1].'borders'.size()", equalTo(4))
                .body("[1].'borders'", hasItems("FRA", "DEU", "LUX", "NLD"))
                .body("[1].'nativeName'", containsString("België"))
                .body("[1].'numericCode'", containsString("056"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("EUR"))
                .body("[1].'currencies'[0].'name'", containsString("Euro"))
                .body("[1].'currencies'[0].'symbol'", containsString("€"))
                .body("[1].'languages'.size()", equalTo(3))
                .body("[1].'languages'[0].'iso639_1'", containsString("nl"))
                .body("[1].'languages'[0].'iso639_2'", containsString("nld"))
                .body("[1].'languages'[0].'name'", containsString("Dutch"))
                .body("[1].'languages'[0].'nativeName'", containsString("Nederlands"))
                .body("[1].'languages'[1].'iso639_1'", containsString("fr"))
                .body("[1].'languages'[1].'iso639_2'", containsString("fra"))
                .body("[1].'languages'[1].'name'", containsString("French"))
                .body("[1].'languages'[1].'nativeName'", containsString("français"))
                .body("[1].'languages'[2].'iso639_1'", containsString("de"))
                .body("[1].'languages'[2].'iso639_2'", containsString("deu"))
                .body("[1].'languages'[2].'name'", containsString("German"))
                .body("[1].'languages'[2].'nativeName'", containsString("Deutsch"))
                .body("[1].'translations'.'de'", containsString("Belgien"))
                .body("[1].'translations'.'es'", containsString("Bélgica"))
                .body("[1].'translations'.'fr'", containsString("Belgique"))
                .body("[1].'translations'.'ja'", containsString("ベルギー"))
                .body("[1].'translations'.'it'", containsString("Belgio"))
                .body("[1].'translations'.'br'", containsString("Bélgica"))
                .body("[1].'translations'.'pt'", containsString("Bélgica"))
                .body("[1].'translations'.'nl'", containsString("België"))
                .body("[1].'translations'.'hr'", containsString("Belgija"))
                .body("[1].'translations'.'fa'", containsString("بلژیک"))
                .body("[1].'flag'", containsString("https://restcountries.eu/data/bel.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[0].'acronym'", containsString("EU"))
                .body("[1].'regionalBlocs'[0].'name'", containsString("European Union"))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[1].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[1].'cioc'", containsString("BEL"))
                .body("[2].'name'", containsString("Belize"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".bz"))
                .body("[2].'alpha2Code'", containsString("BZ"))
                .body("[2].'alpha3Code'", containsString("BLZ"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("501"))
                .body("[2].'capital'", containsString("Belmopan"))
                .body("[2].'altSpellings'.size()", equalTo(1))
                .body("[2].'altSpellings'", hasItems("BZ"))
                .body("[2].'region'", containsString("Americas"))
                .body("[2].'subregion'", containsString("Central America"))
                .body("[2].'population'", numberMatches(370300.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(17.25))
                .body("[2].'latlng'[1]", numberMatches(-88.75))
                .body("[2].'demonym'", containsString("Belizean"))
                .body("[2].'area'", numberMatches(22966.0))
                .body("[2].'gini'", numberMatches(53.1))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC-06:00"))
                .body("[2].'borders'.size()", equalTo(2))
                .body("[2].'borders'", hasItems("GTM", "MEX"))
                .body("[2].'nativeName'", containsString("Belize"))
                .body("[2].'numericCode'", containsString("084"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'[0].'code'", containsString("BZD"))
                .body("[2].'currencies'[0].'name'", containsString("Belize dollar"))
                .body("[2].'currencies'[0].'symbol'", containsString("$"))
                .body("[2].'languages'.size()", equalTo(2))
                .body("[2].'languages'[0].'iso639_1'", containsString("en"))
                .body("[2].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[2].'languages'[0].'name'", containsString("English"))
                .body("[2].'languages'[0].'nativeName'", containsString("English"))
                .body("[2].'languages'[1].'iso639_1'", containsString("es"))
                .body("[2].'languages'[1].'iso639_2'", containsString("spa"))
                .body("[2].'languages'[1].'name'", containsString("Spanish"))
                .body("[2].'languages'[1].'nativeName'", containsString("Español"))
                .body("[2].'translations'.'de'", containsString("Belize"))
                .body("[2].'translations'.'es'", containsString("Belice"))
                .body("[2].'translations'.'fr'", containsString("Belize"))
                .body("[2].'translations'.'ja'", containsString("ベリーズ"))
                .body("[2].'translations'.'it'", containsString("Belize"))
                .body("[2].'translations'.'br'", containsString("Belize"))
                .body("[2].'translations'.'pt'", containsString("Belize"))
                .body("[2].'translations'.'nl'", containsString("Belize"))
                .body("[2].'translations'.'hr'", containsString("Belize"))
                .body("[2].'translations'.'fa'", containsString("بلیز"))
                .body("[2].'flag'", containsString("https://restcountries.eu/data/blz.svg"))
                .body("[2].'regionalBlocs'.size()", equalTo(2))
                .body("[2].'regionalBlocs'[0].'acronym'", containsString("CARICOM"))
                .body("[2].'regionalBlocs'[0].'name'", containsString("Caribbean Community"))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[2].'regionalBlocs'[0].'otherNames'.size()", equalTo(3))
                .body("[2].'regionalBlocs'[0].'otherNames'", hasItems("Comunidad del Caribe", "Communauté Caribéenne", "Caribische Gemeenschap"))
                .body("[2].'regionalBlocs'[1].'acronym'", containsString("CAIS"))
                .body("[2].'regionalBlocs'[1].'name'", containsString("Central American Integration System"))
                .body("[2].'regionalBlocs'[1].'otherAcronyms'.size()", equalTo(1))
                .body("[2].'regionalBlocs'[1].'otherAcronyms'", hasItems("SICA"))
                .body("[2].'regionalBlocs'[1].'otherNames'.size()", equalTo(1))
                .body("[2].'regionalBlocs'[1].'otherNames'", hasItems("Sistema de la Integración Centroamericana,"))
                .body("[2].'cioc'", containsString("BIZ"))
                ; // Skipping assertions on the remaining 6 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_894_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/wuliwya?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Bolivia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bo"))
                .body("[0].'alpha2Code'", containsString("BO"))
                .body("[0].'alpha3Code'", containsString("BOL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("591"))
                .body("[0].'capital'", containsString("Sucre"))
                .body("[0].'altSpellings'.size()", equalTo(8))
                .body("[0].'altSpellings'", hasItems("BO", "Buliwya", "Wuliwya", "Plurinational State of Bolivia", "Estado Plurinacional de Bolivia", "Buliwya Mamallaqta", "Wuliwya Suyu", "Tetã Volívia"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(1.1410651E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-17.0))
                .body("[0].'latlng'[1]", numberMatches(-65.0))
                .body("[0].'demonym'", containsString("Bolivian"))
                .body("[0].'area'", numberMatches(1098581.0))
                .body("[0].'gini'", numberMatches(56.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("ARG", "BRA", "CHL", "PRY", "PER"))
                .body("[0].'nativeName'", containsString("Bolivia"))
                .body("[0].'numericCode'", containsString("068"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'", hasItems("BOB", "BOV"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("es", "ay", "qu"))
                .body("[0].'translations'.'de'", containsString("Bolivien"))
                .body("[0].'translations'.'es'", containsString("Bolivia"))
                .body("[0].'translations'.'fr'", containsString("Bolivie"))
                .body("[0].'translations'.'ja'", containsString("ボリビア多民族国"))
                .body("[0].'translations'.'it'", containsString("Bolivia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_895_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/wuliwya%20suyu?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Bolivia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bo"))
                .body("[0].'alpha2Code'", containsString("BO"))
                .body("[0].'alpha3Code'", containsString("BOL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("591"))
                .body("[0].'capital'", containsString("Sucre"))
                .body("[0].'altSpellings'.size()", equalTo(8))
                .body("[0].'altSpellings'", hasItems("BO", "Buliwya", "Wuliwya", "Plurinational State of Bolivia", "Estado Plurinacional de Bolivia", "Buliwya Mamallaqta", "Wuliwya Suyu", "Tetã Volívia"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(1.1410651E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-17.0))
                .body("[0].'latlng'[1]", numberMatches(-65.0))
                .body("[0].'demonym'", containsString("Bolivian"))
                .body("[0].'area'", numberMatches(1098581.0))
                .body("[0].'gini'", numberMatches(56.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("ARG", "BRA", "CHL", "PRY", "PER"))
                .body("[0].'nativeName'", containsString("Bolivia"))
                .body("[0].'numericCode'", containsString("068"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'", hasItems("BOB", "BOV"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("es", "ay", "qu"))
                .body("[0].'translations'.'de'", containsString("Bolivien"))
                .body("[0].'translations'.'es'", containsString("Bolivia"))
                .body("[0].'translations'.'fr'", containsString("Bolivie"))
                .body("[0].'translations'.'ja'", containsString("ボリビア多民族国"))
                .body("[0].'translations'.'it'", containsString("Bolivia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_896_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/xk?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Republic of Kosovo"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(""))
                .body("[0].'alpha2Code'", containsString("XK"))
                .body("[0].'alpha3Code'", containsString("KOS"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("383"))
                .body("[0].'capital'", containsString("Pristina"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("XK", "Република Косово"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(1733842.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(42.666667))
                .body("[0].'latlng'[1]", numberMatches(21.166667))
                .body("[0].'demonym'", containsString("Kosovar"))
                .body("[0].'area'", numberMatches(10908.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("ALB", "MKD", "MNE", "SRB"))
                .body("[0].'nativeName'", containsString("Republika e Kosovës"))
                .body("[0].'numericCode'", containsString("780"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("sq", "sr"))
                .body("[0].'translations'.'de'", nullValue())
                .body("[0].'translations'.'es'", containsString("Kosovo"))
                .body("[0].'translations'.'fr'", nullValue())
                .body("[0].'translations'.'ja'", nullValue())
                .body("[0].'translations'.'it'", nullValue())
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_897_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/yemen?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Yemen"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ye"))
                .body("[0].'alpha2Code'", containsString("YE"))
                .body("[0].'alpha3Code'", containsString("YEM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("967"))
                .body("[0].'capital'", containsString("Sana'a"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("YE", "Yemeni Republic", "al-Jumhūriyyah al-Yamaniyyah"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(2.5956E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(15.0))
                .body("[0].'latlng'[1]", numberMatches(48.0))
                .body("[0].'demonym'", containsString("Yemeni"))
                .body("[0].'area'", numberMatches(527968.0))
                .body("[0].'gini'", numberMatches(37.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("OMN", "SAU"))
                .body("[0].'nativeName'", containsString("اليَمَن"))
                .body("[0].'numericCode'", containsString("887"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("YER"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Jemen"))
                .body("[0].'translations'.'es'", containsString("Yemen"))
                .body("[0].'translations'.'fr'", containsString("Yémen"))
                .body("[0].'translations'.'ja'", containsString("イエメン"))
                .body("[0].'translations'.'it'", containsString("Yemen"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_898_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/375")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Belarus"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".by"))
                .body("[0].'alpha2Code'", containsString("BY"))
                .body("[0].'alpha3Code'", containsString("BLR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("375"))
                .body("[0].'capital'", containsString("Minsk"))
                .body("[0].'altSpellings'.size()", equalTo(7))
                .body("[0].'altSpellings'", hasItems("BY", "Bielaruś", "Republic of Belarus", "Белоруссия", "Республика Беларусь", "Belorussiya", "Respublika Belarus’"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(9485300.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(53.0))
                .body("[0].'latlng'[1]", numberMatches(28.0))
                .body("[0].'demonym'", containsString("Belarusian"))
                .body("[0].'area'", numberMatches(207600.0))
                .body("[0].'gini'", numberMatches(26.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("LVA", "LTU", "POL", "RUS", "UKR"))
                .body("[0].'nativeName'", containsString("Белару́сь"))
                .body("[0].'numericCode'", containsString("112"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BYR"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("be", "ru"))
                .body("[0].'translations'.'de'", containsString("Weißrussland"))
                .body("[0].'translations'.'es'", containsString("Bielorrusia"))
                .body("[0].'translations'.'fr'", containsString("Biélorussie"))
                .body("[0].'translations'.'ja'", containsString("ベラルーシ"))
                .body("[0].'translations'.'it'", containsString("Bielorussia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_899_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/za?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("South Africa"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".za"))
                .body("[0].'alpha2Code'", containsString("ZA"))
                .body("[0].'alpha3Code'", containsString("ZAF"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("27"))
                .body("[0].'capital'", containsString("Pretoria"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("ZA", "RSA", "Suid-Afrika", "Republic of South Africa"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Southern Africa"))
                .body("[0].'population'", numberMatches(5.49569E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-29.0))
                .body("[0].'latlng'[1]", numberMatches(24.0))
                .body("[0].'demonym'", containsString("South African"))
                .body("[0].'area'", numberMatches(1221037.0))
                .body("[0].'gini'", numberMatches(63.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("BWA", "LSO", "MOZ", "NAM", "SWZ", "ZWE"))
                .body("[0].'nativeName'", containsString("South Africa"))
                .body("[0].'numericCode'", containsString("710"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ZAR"))
                .body("[0].'languages'.size()", equalTo(10))
                .body("[0].'languages'", hasItems("af", "en", "nr", "st", "ss", "tn", "ts", "ve", "xh", "zu"))
                .body("[0].'translations'.'de'", containsString("Republik Südafrika"))
                .body("[0].'translations'.'es'", containsString("República de Sudáfrica"))
                .body("[0].'translations'.'fr'", containsString("Afrique du Sud"))
                .body("[0].'translations'.'ja'", containsString("南アフリカ"))
                .body("[0].'translations'.'it'", containsString("Sud Africa"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_900_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/hayastan?" + 
                    "fields=e6MIBjUZ_aLE_&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_901_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/hk?" + 
                    "fields=_EM_15720_XYZ_&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_902_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/hm?" + 
                    "fields=_EM_15720_XYZ_&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_903_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/brussels?fields=0Ztx8nWv")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_904_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/229")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Benin"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bj"))
                .body("[0].'alpha2Code'", containsString("BJ"))
                .body("[0].'alpha3Code'", containsString("BEN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("229"))
                .body("[0].'capital'", containsString("Porto-Novo"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("BJ", "Republic of Benin", "République du Bénin"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(1.0315244E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(9.5))
                .body("[0].'latlng'[1]", numberMatches(2.25))
                .body("[0].'demonym'", containsString("Beninese"))
                .body("[0].'area'", numberMatches(112622.0))
                .body("[0].'gini'", numberMatches(38.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("BFA", "NER", "NGA", "TGO"))
                .body("[0].'nativeName'", containsString("Bénin"))
                .body("[0].'numericCode'", containsString("204"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XOF"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Benin"))
                .body("[0].'translations'.'es'", containsString("Benín"))
                .body("[0].'translations'.'fr'", containsString("Bénin"))
                .body("[0].'translations'.'ja'", containsString("ベナン"))
                .body("[0].'translations'.'it'", containsString("Benin"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_905_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/230")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Mauritius"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mu"))
                .body("[0].'alpha2Code'", containsString("MU"))
                .body("[0].'alpha3Code'", containsString("MUS"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("230"))
                .body("[0].'capital'", containsString("Port Louis"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("MU", "Republic of Mauritius", "République de Maurice"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(1261208.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-20.28333333))
                .body("[0].'latlng'[1]", numberMatches(57.55))
                .body("[0].'demonym'", containsString("Mauritian"))
                .body("[0].'area'", numberMatches(2040.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Maurice"))
                .body("[0].'numericCode'", containsString("480"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Mauritius"))
                .body("[0].'translations'.'es'", containsString("Mauricio"))
                .body("[0].'translations'.'fr'", containsString("Île Maurice"))
                .body("[0].'translations'.'ja'", containsString("モーリシャス"))
                .body("[0].'translations'.'it'", containsString("Mauritius"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_906_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/saudi%20arabian?fields=tDSk")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_907_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/senegalese?fields=tDSk")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_908_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/aaland?" + 
                    "fields=Glh&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_909_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/ae?" + 
                    "fields=Gl1h&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_910_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/british?fields=_EM_15839_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_911_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/bulgarian?fields=_EM_15839_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_912_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/burkinabe?fields=_EM_15839_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_913_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/moldova?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Moldova"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".md"))
                .body("[0].'alpha2Code'", containsString("MD"))
                .body("[0].'alpha3Code'", containsString("MDA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("373"))
                .body("[0].'capital'", containsString("Chișinău"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("MD", "Republic of Moldova", "Republica Moldova"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(3555200.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(47.0))
                .body("[0].'latlng'[1]", numberMatches(29.0))
                .body("[0].'demonym'", containsString("Moldovan"))
                .body("[0].'area'", numberMatches(33846.0))
                .body("[0].'gini'", numberMatches(33.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("ROU", "UKR"))
                .body("[0].'nativeName'", containsString("Moldova"))
                .body("[0].'numericCode'", containsString("498"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MDL"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ro"))
                .body("[0].'translations'.'de'", containsString("Moldawie"))
                .body("[0].'translations'.'es'", containsString("Moldavia"))
                .body("[0].'translations'.'fr'", containsString("Moldavie"))
                .body("[0].'translations'.'ja'", containsString("モルドバ共和国"))
                .body("[0].'translations'.'it'", containsString("Moldavia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_914_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/27")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("South Africa"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".za"))
                .body("[0].'alpha2Code'", containsString("ZA"))
                .body("[0].'alpha3Code'", containsString("ZAF"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("27"))
                .body("[0].'capital'", containsString("Pretoria"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("ZA", "RSA", "Suid-Afrika", "Republic of South Africa"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Southern Africa"))
                .body("[0].'population'", numberMatches(5.49569E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-29.0))
                .body("[0].'latlng'[1]", numberMatches(24.0))
                .body("[0].'demonym'", containsString("South African"))
                .body("[0].'area'", numberMatches(1221037.0))
                .body("[0].'gini'", numberMatches(63.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("BWA", "LSO", "MOZ", "NAM", "SWZ", "ZWE"))
                .body("[0].'nativeName'", containsString("South Africa"))
                .body("[0].'numericCode'", containsString("710"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ZAR"))
                .body("[0].'languages'.size()", equalTo(10))
                .body("[0].'languages'", hasItems("af", "en", "nr", "st", "ss", "tn", "ts", "ve", "xh", "zu"))
                .body("[0].'translations'.'de'", containsString("Republik Südafrika"))
                .body("[0].'translations'.'es'", containsString("República de Sudáfrica"))
                .body("[0].'translations'.'fr'", containsString("Afrique du Sud"))
                .body("[0].'translations'.'ja'", containsString("南アフリカ"))
                .body("[0].'translations'.'it'", containsString("Sud Africa"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_915_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/297")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Aruba"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".aw"))
                .body("[0].'alpha2Code'", containsString("AW"))
                .body("[0].'alpha3Code'", containsString("ABW"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("297"))
                .body("[0].'capital'", containsString("Oranjestad"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("AW"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(107394.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(12.5))
                .body("[0].'latlng'[1]", numberMatches(-69.96666666))
                .body("[0].'demonym'", containsString("Aruban"))
                .body("[0].'area'", numberMatches(180.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Aruba"))
                .body("[0].'numericCode'", containsString("533"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AWG"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("nl", "pa"))
                .body("[0].'translations'.'de'", containsString("Aruba"))
                .body("[0].'translations'.'es'", containsString("Aruba"))
                .body("[0].'translations'.'fr'", containsString("Aruba"))
                .body("[0].'translations'.'ja'", containsString("アルバ"))
                .body("[0].'translations'.'it'", containsString("Aruba"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_916_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/afghanistan?" + 
                    "fields=altSpellings&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("AF", "Afġānistān"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_917_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/mongolia?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Mongolia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mn"))
                .body("[0].'alpha2Code'", containsString("MN"))
                .body("[0].'alpha3Code'", containsString("MNG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("976"))
                .body("[0].'capital'", containsString("Ulan Bator"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("MN"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Eastern Asia"))
                .body("[0].'population'", numberMatches(3031099.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(46.0))
                .body("[0].'latlng'[1]", numberMatches(105.0))
                .body("[0].'demonym'", containsString("Mongolian"))
                .body("[0].'area'", numberMatches(1564110.0))
                .body("[0].'gini'", numberMatches(36.5))
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC+07:00", "UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("CHN", "RUS"))
                .body("[0].'nativeName'", containsString("Монгол улс"))
                .body("[0].'numericCode'", containsString("496"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MNT"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("mn"))
                .body("[0].'translations'.'de'", containsString("Mongolei"))
                .body("[0].'translations'.'es'", containsString("Mongolia"))
                .body("[0].'translations'.'fr'", containsString("Mongolie"))
                .body("[0].'translations'.'ja'", containsString("モンゴル"))
                .body("[0].'translations'.'it'", containsString("Mongolia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_918_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/montenegro?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Montenegro"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".me"))
                .body("[0].'alpha2Code'", containsString("ME"))
                .body("[0].'alpha3Code'", containsString("MNE"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("382"))
                .body("[0].'capital'", containsString("Podgorica"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("ME", "Crna Gora"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(621207.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(42.5))
                .body("[0].'latlng'[1]", numberMatches(19.3))
                .body("[0].'demonym'", containsString("Montenegrin"))
                .body("[0].'area'", numberMatches(13812.0))
                .body("[0].'gini'", numberMatches(30.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("ALB", "BIH", "HRV", "KOS", "SRB"))
                .body("[0].'nativeName'", containsString("Црна Гора"))
                .body("[0].'numericCode'", containsString("499"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(4))
                .body("[0].'languages'", hasItems("sr", "bs", "sq", "hr"))
                .body("[0].'translations'.'de'", containsString("Montenegro"))
                .body("[0].'translations'.'es'", containsString("Montenegro"))
                .body("[0].'translations'.'fr'", containsString("Monténégro"))
                .body("[0].'translations'.'ja'", containsString("モンテネグロ"))
                .body("[0].'translations'.'it'", containsString("Montenegro"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_919_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/montserrat?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Montserrat"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ms"))
                .body("[0].'alpha2Code'", containsString("MS"))
                .body("[0].'alpha3Code'", containsString("MSR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Plymouth"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("MS"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(4922.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(16.75))
                .body("[0].'latlng'[1]", numberMatches(-62.2))
                .body("[0].'demonym'", containsString("Montserratian"))
                .body("[0].'area'", numberMatches(102.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Montserrat"))
                .body("[0].'numericCode'", containsString("500"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XCD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Montserrat"))
                .body("[0].'translations'.'es'", containsString("Montserrat"))
                .body("[0].'translations'.'fr'", containsString("Montserrat"))
                .body("[0].'translations'.'ja'", containsString("モントセラト"))
                .body("[0].'translations'.'it'", containsString("Montserrat"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_920_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/morocco?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Morocco"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ma"))
                .body("[0].'alpha2Code'", containsString("MA"))
                .body("[0].'alpha3Code'", containsString("MAR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("212"))
                .body("[0].'capital'", containsString("Rabat"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("MA", "Kingdom of Morocco", "Al-Mamlakah al-Maġribiyah"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Northern Africa"))
                .body("[0].'population'", numberMatches(3.3337529E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(32.0))
                .body("[0].'latlng'[1]", numberMatches(-5.0))
                .body("[0].'demonym'", containsString("Moroccan"))
                .body("[0].'area'", numberMatches(446550.0))
                .body("[0].'gini'", numberMatches(40.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("DZA", "ESH", "ESP"))
                .body("[0].'nativeName'", containsString("المغرب"))
                .body("[0].'numericCode'", containsString("504"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MAD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Marokko"))
                .body("[0].'translations'.'es'", containsString("Marruecos"))
                .body("[0].'translations'.'fr'", containsString("Maroc"))
                .body("[0].'translations'.'ja'", containsString("モロッコ"))
                .body("[0].'translations'.'it'", containsString("Marocco"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_921_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/52?fields=_EM_4148_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_922_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/mp?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Northern Mariana Islands"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mp"))
                .body("[0].'alpha2Code'", containsString("MP"))
                .body("[0].'alpha3Code'", containsString("MNP"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Saipan"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("MP", "Commonwealth of the Northern Mariana Islands", "Sankattan Siha Na Islas Mariånas"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Micronesia"))
                .body("[0].'population'", numberMatches(53883.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(15.2))
                .body("[0].'latlng'[1]", numberMatches(145.75))
                .body("[0].'demonym'", containsString("American"))
                .body("[0].'area'", numberMatches(464.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+10:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Northern Mariana Islands"))
                .body("[0].'numericCode'", containsString("580"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "ch"))
                .body("[0].'translations'.'de'", containsString("Nördliche Marianen"))
                .body("[0].'translations'.'es'", containsString("Islas Marianas del Norte"))
                .body("[0].'translations'.'fr'", containsString("Îles Mariannes du Nord"))
                .body("[0].'translations'.'ja'", containsString("北マリアナ諸島"))
                .body("[0].'translations'.'it'", containsString("Isole Marianne Settentrionali"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_923_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/mq?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Martinique"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mq"))
                .body("[0].'alpha2Code'", containsString("MQ"))
                .body("[0].'alpha3Code'", containsString("MTQ"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("596"))
                .body("[0].'capital'", containsString("Fort-de-France"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("MQ"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(381326.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(14.666667))
                .body("[0].'latlng'[1]", numberMatches(-61.0))
                .body("[0].'demonym'", containsString("French"))
                .body("[0].'area'", nullValue())
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Martinique"))
                .body("[0].'numericCode'", containsString("474"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Martinique"))
                .body("[0].'translations'.'es'", containsString("Martinica"))
                .body("[0].'translations'.'fr'", containsString("Martinique"))
                .body("[0].'translations'.'ja'", containsString("マルティニーク"))
                .body("[0].'translations'.'it'", containsString("Martinica"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_924_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/mr?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Mauritania"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mr"))
                .body("[0].'alpha2Code'", containsString("MR"))
                .body("[0].'alpha3Code'", containsString("MRT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("222"))
                .body("[0].'capital'", containsString("Nouakchott"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("MR", "Islamic Republic of Mauritania", "al-Jumhūriyyah al-ʾIslāmiyyah al-Mūrītāniyyah"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(3631775.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(20.0))
                .body("[0].'latlng'[1]", numberMatches(-12.0))
                .body("[0].'demonym'", containsString("Mauritanian"))
                .body("[0].'area'", numberMatches(1030700.0))
                .body("[0].'gini'", numberMatches(40.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("DZA", "MLI", "SEN", "ESH"))
                .body("[0].'nativeName'", containsString("موريتانيا"))
                .body("[0].'numericCode'", containsString("478"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MRO"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Mauretanien"))
                .body("[0].'translations'.'es'", containsString("Mauritania"))
                .body("[0].'translations'.'fr'", containsString("Mauritanie"))
                .body("[0].'translations'.'ja'", containsString("モーリタニア"))
                .body("[0].'translations'.'it'", containsString("Mauritania"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_925_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/royaume%20de%20belgique?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Belgium"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".be"))
                .body("[0].'alpha2Code'", containsString("BE"))
                .body("[0].'alpha3Code'", containsString("BEL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("32"))
                .body("[0].'capital'", containsString("Brussels"))
                .body("[0].'altSpellings'.size()", equalTo(9))
                .body("[0].'altSpellings'", hasItems("BE", "België", "Belgie", "Belgien", "Belgique", "Kingdom of Belgium", "Koninkrijk België", "Royaume de Belgique", "Königreich Belgien"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(1.124833E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(50.83333333))
                .body("[0].'latlng'[1]", numberMatches(4.0))
                .body("[0].'demonym'", containsString("Belgian"))
                .body("[0].'area'", numberMatches(30528.0))
                .body("[0].'gini'", numberMatches(33.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("FRA", "DEU", "LUX", "NLD"))
                .body("[0].'nativeName'", containsString("België"))
                .body("[0].'numericCode'", containsString("056"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("nl", "fr", "de"))
                .body("[0].'translations'.'de'", containsString("Belgien"))
                .body("[0].'translations'.'es'", containsString("Bélgica"))
                .body("[0].'translations'.'fr'", containsString("Belgique"))
                .body("[0].'translations'.'ja'", containsString("ベルギー"))
                .body("[0].'translations'.'it'", containsString("Belgio"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_926_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/papeete")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("French Polynesia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".pf"))
                .body("[0].'alpha2Code'", containsString("PF"))
                .body("[0].'alpha3Code'", containsString("PYF"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("689"))
                .body("[0].'capital'", containsString("Papeetē"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("PF", "Polynésie française", "French Polynesia", "Pōrīnetia Farāni"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Polynesia"))
                .body("[0].'population'", numberMatches(268270.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-15.0))
                .body("[0].'latlng'[1]", numberMatches(-140.0))
                .body("[0].'demonym'", containsString("French Polynesian"))
                .body("[0].'area'", numberMatches(4167.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(3))
                .body("[0].'timezones'", hasItems("UTC-10:00", "UTC-09:30", "UTC-09:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Polynésie française"))
                .body("[0].'numericCode'", containsString("258"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XPF"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Französisch-Polynesien"))
                .body("[0].'translations'.'es'", containsString("Polinesia Francesa"))
                .body("[0].'translations'.'fr'", containsString("Polynésie française"))
                .body("[0].'translations'.'ja'", containsString("フランス領ポリネシア"))
                .body("[0].'translations'.'it'", containsString("Polinesia Francese"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_927_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/paris")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("France"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".fr"))
                .body("[0].'alpha2Code'", containsString("FR"))
                .body("[0].'alpha3Code'", containsString("FRA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("33"))
                .body("[0].'capital'", containsString("Paris"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("FR", "French Republic", "République française"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(6.6186E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(46.0))
                .body("[0].'latlng'[1]", numberMatches(2.0))
                .body("[0].'demonym'", containsString("French"))
                .body("[0].'area'", numberMatches(640679.0))
                .body("[0].'gini'", numberMatches(32.7))
                .body("[0].'timezones'.size()", equalTo(12))
                .body("[0].'timezones'", hasItems("UTC-10:00", "UTC-09:30", "UTC-09:00", "UTC-08:00", "UTC-04:00", "UTC-03:00", "UTC+01:00", "UTC+03:00", "UTC+04:00", "UTC+05:00", "UTC+11:00", "UTC+12:00"))
                .body("[0].'borders'.size()", equalTo(8))
                .body("[0].'borders'", hasItems("AND", "BEL", "DEU", "ITA", "LUX", "MCO", "ESP", "CHE"))
                .body("[0].'nativeName'", containsString("France"))
                .body("[0].'numericCode'", containsString("250"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Frankreich"))
                .body("[0].'translations'.'es'", containsString("Francia"))
                .body("[0].'translations'.'fr'", containsString("France"))
                .body("[0].'translations'.'ja'", containsString("フランス"))
                .body("[0].'translations'.'it'", containsString("Francia"))
                .body("[0].'relevance'", containsString("2.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_928_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/ahvenanmaa?" + 
                    "fields=capital&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'capital'", containsString("Mariehamn"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_929_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/ai?" + 
                    "fields=_EM_15895_XYZ_&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(37))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 34 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_930_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/353?fields=callingCodes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("353"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_931_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/philipsburg")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Sint Maarten"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sx"))
                .body("[0].'alpha2Code'", containsString("SX"))
                .body("[0].'alpha3Code'", containsString("SXM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Philipsburg"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("SX"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(37429.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(18.033333))
                .body("[0].'latlng'[1]", numberMatches(-63.05))
                .body("[0].'demonym'", containsString("Dutch"))
                .body("[0].'area'", numberMatches(34.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("MAF"))
                .body("[0].'nativeName'", containsString("Sint Maarten"))
                .body("[0].'numericCode'", containsString("534"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ANG"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("nl", "en"))
                .body("[0].'translations'.'de'", nullValue())
                .body("[0].'translations'.'es'", nullValue())
                .body("[0].'translations'.'fr'", nullValue())
                .body("[0].'translations'.'ja'", nullValue())
                .body("[0].'translations'.'it'", nullValue())
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_932_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/podgorica")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Montenegro"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".me"))
                .body("[0].'alpha2Code'", containsString("ME"))
                .body("[0].'alpha3Code'", containsString("MNE"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("382"))
                .body("[0].'capital'", containsString("Podgorica"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("ME", "Crna Gora"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(621207.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(42.5))
                .body("[0].'latlng'[1]", numberMatches(19.3))
                .body("[0].'demonym'", containsString("Montenegrin"))
                .body("[0].'area'", numberMatches(13812.0))
                .body("[0].'gini'", numberMatches(30.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("ALB", "BIH", "HRV", "KOS", "SRB"))
                .body("[0].'nativeName'", containsString("Црна Гора"))
                .body("[0].'numericCode'", containsString("499"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(4))
                .body("[0].'languages'", hasItems("sr", "bs", "sq", "hr"))
                .body("[0].'translations'.'de'", containsString("Montenegro"))
                .body("[0].'translations'.'es'", containsString("Montenegro"))
                .body("[0].'translations'.'fr'", containsString("Monténégro"))
                .body("[0].'translations'.'ja'", containsString("モンテネグロ"))
                .body("[0].'translations'.'it'", containsString("Montenegro"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_933_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/port%20louis")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Mauritius"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mu"))
                .body("[0].'alpha2Code'", containsString("MU"))
                .body("[0].'alpha3Code'", containsString("MUS"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("230"))
                .body("[0].'capital'", containsString("Port Louis"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("MU", "Republic of Mauritius", "République de Maurice"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(1261208.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-20.28333333))
                .body("[0].'latlng'[1]", numberMatches(57.55))
                .body("[0].'demonym'", containsString("Mauritian"))
                .body("[0].'area'", numberMatches(2040.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Maurice"))
                .body("[0].'numericCode'", containsString("480"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Mauritius"))
                .body("[0].'translations'.'es'", containsString("Mauricio"))
                .body("[0].'translations'.'fr'", containsString("Île Maurice"))
                .body("[0].'translations'.'ja'", containsString("モーリシャス"))
                .body("[0].'translations'.'it'", containsString("Mauritius"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_934_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/port%20moresby")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Papua New Guinea"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".pg"))
                .body("[0].'alpha2Code'", containsString("PG"))
                .body("[0].'alpha3Code'", containsString("PNG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("675"))
                .body("[0].'capital'", containsString("Port Moresby"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("PG", "Independent State of Papua New Guinea", "Independen Stet bilong Papua Niugini"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Melanesia"))
                .body("[0].'population'", numberMatches(7398500.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-6.0))
                .body("[0].'latlng'[1]", numberMatches(147.0))
                .body("[0].'demonym'", containsString("Papua New Guinean"))
                .body("[0].'area'", numberMatches(462840.0))
                .body("[0].'gini'", numberMatches(50.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+10:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("IDN"))
                .body("[0].'nativeName'", containsString("Papua Niugini"))
                .body("[0].'numericCode'", containsString("598"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("PGK"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Papua-Neuguinea"))
                .body("[0].'translations'.'es'", containsString("Papúa Nueva Guinea"))
                .body("[0].'translations'.'fr'", containsString("Papouasie-Nouvelle-Guinée"))
                .body("[0].'translations'.'ja'", containsString("パプアニューギニア"))
                .body("[0].'translations'.'it'", containsString("Papua Nuova Guinea"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_935_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/port%20of%20spain")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Trinidad and Tobago"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".tt"))
                .body("[0].'alpha2Code'", containsString("TT"))
                .body("[0].'alpha3Code'", containsString("TTO"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Port of Spain"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("TT", "Republic of Trinidad and Tobago"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(1340557.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(11.0))
                .body("[0].'latlng'[1]", numberMatches(-61.0))
                .body("[0].'demonym'", containsString("Trinidadian"))
                .body("[0].'area'", numberMatches(5130.0))
                .body("[0].'gini'", numberMatches(40.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Trinidad and Tobago"))
                .body("[0].'numericCode'", containsString("780"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("TTD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Trinidad und Tobago"))
                .body("[0].'translations'.'es'", containsString("Trinidad y Tobago"))
                .body("[0].'translations'.'fr'", containsString("Trinité et Tobago"))
                .body("[0].'translations'.'ja'", containsString("トリニダード・トバゴ"))
                .body("[0].'translations'.'it'", containsString("Trinidad e Tobago"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_936_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/aland?" + 
                    "fields=_EM_15895_XYZ_&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_937_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/aland%20islands?" + 
                    "fields=capital&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'capital'", containsString("Mariehamn"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_938_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/albania?" + 
                    "fields=_EM_15895_XYZ_&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_939_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/cook%20islander?fields=_EM_4167_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_940_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/russian%20federation?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Russia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ru"))
                .body("[0].'alpha2Code'", containsString("RU"))
                .body("[0].'alpha3Code'", containsString("RUS"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("7"))
                .body("[0].'capital'", containsString("Moscow"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("RU", "Rossiya", "Russian Federation", "Российская Федерация", "Rossiyskaya Federatsiya"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(1.4655633E8))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(60.0))
                .body("[0].'latlng'[1]", numberMatches(100.0))
                .body("[0].'demonym'", containsString("Russian"))
                .body("[0].'area'", numberMatches(1.7124442E7))
                .body("[0].'gini'", numberMatches(40.1))
                .body("[0].'timezones'.size()", equalTo(9))
                .body("[0].'timezones'", hasItems("UTC+03:00", "UTC+04:00", "UTC+06:00", "UTC+07:00", "UTC+08:00", "UTC+09:00", "UTC+10:00", "UTC+11:00", "UTC+12:00"))
                .body("[0].'borders'.size()", equalTo(14))
                .body("[0].'borders'", hasItems("AZE", "BLR", "CHN", "EST", "FIN", "GEO", "KAZ", "PRK", "LVA", "LTU", "MNG", "NOR", "POL", "UKR"))
                .body("[0].'nativeName'", containsString("Россия"))
                .body("[0].'numericCode'", containsString("643"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("RUB"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ru"))
                .body("[0].'translations'.'de'", containsString("Russland"))
                .body("[0].'translations'.'es'", containsString("Rusia"))
                .body("[0].'translations'.'fr'", containsString("Russie"))
                .body("[0].'translations'.'ja'", containsString("ロシア連邦"))
                .body("[0].'translations'.'it'", containsString("Russia"))
                .body("[0].'relevance'", containsString("2.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_941_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/rzeczpospolita%20polska?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Poland"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".pl"))
                .body("[0].'alpha2Code'", containsString("PL"))
                .body("[0].'alpha3Code'", containsString("POL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("48"))
                .body("[0].'capital'", containsString("Warsaw"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("PL", "Republic of Poland", "Rzeczpospolita Polska"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(3.8484E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(52.0))
                .body("[0].'latlng'[1]", numberMatches(20.0))
                .body("[0].'demonym'", containsString("Polish"))
                .body("[0].'area'", numberMatches(312679.0))
                .body("[0].'gini'", numberMatches(34.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(7))
                .body("[0].'borders'", hasItems("BLR", "CZE", "DEU", "LTU", "RUS", "SVK", "UKR"))
                .body("[0].'nativeName'", containsString("Polska"))
                .body("[0].'numericCode'", containsString("616"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("PLN"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("pl"))
                .body("[0].'translations'.'de'", containsString("Polen"))
                .body("[0].'translations'.'es'", containsString("Polonia"))
                .body("[0].'translations'.'fr'", containsString("Pologne"))
                .body("[0].'translations'.'ja'", containsString("ポーランド"))
                .body("[0].'translations'.'it'", containsString("Polonia"))
                .body("[0].'relevance'", containsString("1.25"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_942_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/saint%20barthelemy?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Saint Barthélemy"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bl"))
                .body("[0].'alpha2Code'", containsString("BL"))
                .body("[0].'alpha3Code'", containsString("BLM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("590"))
                .body("[0].'capital'", containsString("Gustavia"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("BL", "St. Barthelemy", "Collectivity of Saint Barthélemy", "Collectivité de Saint-Barthélemy"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(9269.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(18.5))
                .body("[0].'latlng'[1]", numberMatches(-63.41666666))
                .body("[0].'demonym'", containsString("Saint Barthélemy Islander"))
                .body("[0].'area'", numberMatches(21.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Saint-Barthélemy"))
                .body("[0].'numericCode'", containsString("652"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Saint-Barthélemy"))
                .body("[0].'translations'.'es'", containsString("San Bartolomé"))
                .body("[0].'translations'.'fr'", containsString("Saint-Barthélemy"))
                .body("[0].'translations'.'ja'", containsString("サン・バルテルミー"))
                .body("[0].'translations'.'it'", containsString("Antille Francesi"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_943_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/saint%20kitts%20and%20nevis?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Saint Kitts and Nevis"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".kn"))
                .body("[0].'alpha2Code'", containsString("KN"))
                .body("[0].'alpha3Code'", containsString("KNA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Basseterre"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("KN", "Federation of Saint Christopher and Nevis"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(56000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(17.33333333))
                .body("[0].'latlng'[1]", numberMatches(-62.75))
                .body("[0].'demonym'", containsString("Kittian and Nevisian"))
                .body("[0].'area'", numberMatches(261.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Saint Kitts and Nevis"))
                .body("[0].'numericCode'", containsString("659"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XCD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("St. Kitts und Nevis"))
                .body("[0].'translations'.'es'", containsString("San Cristóbal y Nieves"))
                .body("[0].'translations'.'fr'", containsString("Saint-Christophe-et-Niévès"))
                .body("[0].'translations'.'ja'", containsString("セントクリストファー・ネイビス"))
                .body("[0].'translations'.'it'", containsString("Saint Kitts e Nevis"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_944_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/saint%20pierre%20and%20miquelon?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Saint Pierre and Miquelon"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".pm"))
                .body("[0].'alpha2Code'", containsString("PM"))
                .body("[0].'alpha3Code'", containsString("SPM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("508"))
                .body("[0].'capital'", containsString("Saint-Pierre"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("PM", "Collectivité territoriale de Saint-Pierre-et-Miquelon"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Northern America"))
                .body("[0].'population'", numberMatches(6069.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(46.83333333))
                .body("[0].'latlng'[1]", numberMatches(-56.33333333))
                .body("[0].'demonym'", containsString("French"))
                .body("[0].'area'", numberMatches(242.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-03:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Saint-Pierre-et-Miquelon"))
                .body("[0].'numericCode'", containsString("666"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Saint-Pierre und Miquelon"))
                .body("[0].'translations'.'es'", containsString("San Pedro y Miquelón"))
                .body("[0].'translations'.'fr'", containsString("Saint-Pierre-et-Miquelon"))
                .body("[0].'translations'.'ja'", containsString("サンピエール島・ミクロン島"))
                .body("[0].'translations'.'it'", containsString("Saint-Pierre e Miquelon"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_945_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/saint%20vincent%20and%20the%20grenadines?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Saint Vincent and the Grenadines"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".vc"))
                .body("[0].'alpha2Code'", containsString("VC"))
                .body("[0].'alpha3Code'", containsString("VCT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Kingstown"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("VC"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(109991.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(13.25))
                .body("[0].'latlng'[1]", numberMatches(-61.2))
                .body("[0].'demonym'", containsString("Saint Vincentian"))
                .body("[0].'area'", numberMatches(389.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Saint Vincent and the Grenadines"))
                .body("[0].'numericCode'", containsString("670"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XCD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Saint Vincent und die Grenadinen"))
                .body("[0].'translations'.'es'", containsString("San Vicente y Granadinas"))
                .body("[0].'translations'.'fr'", containsString("Saint-Vincent-et-les-Grenadines"))
                .body("[0].'translations'.'ja'", containsString("セントビンセントおよびグレナディーン諸島"))
                .body("[0].'translations'.'it'", containsString("Saint Vincent e Grenadine"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_946_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/tk?" + 
                    "fields=18FLB4dIqxiR&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_947_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/kralendijk")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Bonaire, Sint Eustatius and Saba"))
                .body("[0].'topLevelDomain'.size()", equalTo(2))
                .body("[0].'topLevelDomain'", hasItems(".an", ".nl"))
                .body("[0].'alpha2Code'", containsString("BQ"))
                .body("[0].'alpha3Code'", containsString("BES"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("599"))
                .body("[0].'capital'", containsString("Kralendijk"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("BQ", "Boneiru"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(17408.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(12.15))
                .body("[0].'latlng'[1]", numberMatches(-68.266667))
                .body("[0].'demonym'", containsString("Dutch"))
                .body("[0].'area'", numberMatches(294.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Bonaire"))
                .body("[0].'numericCode'", containsString("535"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("USD"))
                .body("[0].'currencies'[0].'name'", containsString("United States dollar"))
                .body("[0].'currencies'[0].'symbol'", containsString("$"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("nl"))
                .body("[0].'languages'[0].'iso639_2'", containsString("nld"))
                .body("[0].'languages'[0].'name'", containsString("Dutch"))
                .body("[0].'languages'[0].'nativeName'", containsString("Nederlands"))
                .body("[0].'translations'.'de'", containsString("Bonaire, Sint Eustatius und Saba"))
                .body("[0].'translations'.'es'", nullValue())
                .body("[0].'translations'.'fr'", containsString("Bonaire, Saint-Eustache et Saba"))
                .body("[0].'translations'.'ja'", nullValue())
                .body("[0].'translations'.'it'", containsString("Bonaire, Saint-Eustache e Saba"))
                .body("[0].'translations'.'br'", containsString("Bonaire"))
                .body("[0].'translations'.'pt'", containsString("Bonaire"))
                .body("[0].'translations'.'nl'", nullValue())
                .body("[0].'translations'.'hr'", nullValue())
                .body("[0].'translations'.'fa'", containsString("بونیر"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/bes.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_948_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/usvi?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Virgin Islands (U.S.)"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".vi"))
                .body("[0].'alpha2Code'", containsString("VI"))
                .body("[0].'alpha3Code'", containsString("VIR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Charlotte Amalie"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("VI", "USVI", "American Virgin Islands", "U.S. Virgin Islands"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(114743.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(18.34))
                .body("[0].'latlng'[1]", numberMatches(-64.93))
                .body("[0].'demonym'", containsString("Virgin Islander"))
                .body("[0].'area'", numberMatches(346.36))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Virgin Islands of the United States"))
                .body("[0].'numericCode'", containsString("850"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Amerikanische Jungferninseln"))
                .body("[0].'translations'.'es'", containsString("Islas Vírgenes de los Estados Unidos"))
                .body("[0].'translations'.'fr'", containsString("Îles Vierges des États-Unis"))
                .body("[0].'translations'.'ja'", containsString("アメリカ領ヴァージン諸島"))
                .body("[0].'translations'.'it'", containsString("Isole Vergini americane"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_949_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/224")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Guinea"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gn"))
                .body("[0].'alpha2Code'", containsString("GN"))
                .body("[0].'alpha3Code'", containsString("GIN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("224"))
                .body("[0].'capital'", containsString("Conakry"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("GN", "Republic of Guinea", "République de Guinée"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(1.0628972E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(11.0))
                .body("[0].'latlng'[1]", numberMatches(-10.0))
                .body("[0].'demonym'", containsString("Guinean"))
                .body("[0].'area'", numberMatches(245857.0))
                .body("[0].'gini'", numberMatches(39.4))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("CIV", "GNB", "LBR", "MLI", "SEN", "SLE"))
                .body("[0].'nativeName'", containsString("Guinée"))
                .body("[0].'numericCode'", containsString("324"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("GNF"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fr", "ff"))
                .body("[0].'translations'.'de'", containsString("Guinea"))
                .body("[0].'translations'.'es'", containsString("Guinea"))
                .body("[0].'translations'.'fr'", containsString("Guinée"))
                .body("[0].'translations'.'ja'", containsString("ギニア"))
                .body("[0].'translations'.'it'", containsString("Guinea"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_950_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/225")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Ivory Coast"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ci"))
                .body("[0].'alpha2Code'", containsString("CI"))
                .body("[0].'alpha3Code'", containsString("CIV"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("225"))
                .body("[0].'capital'", containsString("Yamoussoukro"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("CI", "Ivory Coast", "Republic of Côte d'Ivoire", "République de Côte d'Ivoire"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(2.2671331E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(8.0))
                .body("[0].'latlng'[1]", numberMatches(-5.0))
                .body("[0].'demonym'", containsString("Ivorian"))
                .body("[0].'area'", numberMatches(322463.0))
                .body("[0].'gini'", numberMatches(41.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("BFA", "GHA", "GIN", "LBR", "MLI"))
                .body("[0].'nativeName'", containsString("Côte d'Ivoire"))
                .body("[0].'numericCode'", containsString("384"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XOF"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Elfenbeinküste"))
                .body("[0].'translations'.'es'", containsString("Costa de Marfil"))
                .body("[0].'translations'.'fr'", containsString("Côte d'Ivoire"))
                .body("[0].'translations'.'ja'", containsString("コートジボワール"))
                .body("[0].'translations'.'it'", containsString("Costa D'Avorio"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_951_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/227")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Niger"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ne"))
                .body("[0].'alpha2Code'", containsString("NE"))
                .body("[0].'alpha3Code'", containsString("NER"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("227"))
                .body("[0].'capital'", containsString("Niamey"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("NE", "Nijar", "Republic of Niger", "République du Niger"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(1.9899E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(16.0))
                .body("[0].'latlng'[1]", numberMatches(8.0))
                .body("[0].'demonym'", containsString("Nigerien"))
                .body("[0].'area'", numberMatches(1267000.0))
                .body("[0].'gini'", numberMatches(34.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(7))
                .body("[0].'borders'", hasItems("DZA", "BEN", "BFA", "TCD", "LBY", "MLI", "NGA"))
                .body("[0].'nativeName'", containsString("Niger"))
                .body("[0].'numericCode'", containsString("562"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XOF"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Niger"))
                .body("[0].'translations'.'es'", containsString("Níger"))
                .body("[0].'translations'.'fr'", containsString("Niger"))
                .body("[0].'translations'.'ja'", containsString("ニジェール"))
                .body("[0].'translations'.'it'", containsString("Niger"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_952_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/paraguayan?fields=_EM_4167_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_953_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/sc?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'name'", containsString("Madagascar"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mg"))
                .body("[0].'alpha2Code'", containsString("MG"))
                .body("[0].'alpha3Code'", containsString("MDG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("261"))
                .body("[0].'capital'", containsString("Antananarivo"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("MG", "Republic of Madagascar", "Repoblikan'i Madagasikara", "République de Madagascar"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(2.2434363E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-20.0))
                .body("[0].'latlng'[1]", numberMatches(47.0))
                .body("[0].'demonym'", containsString("Malagasy"))
                .body("[0].'area'", numberMatches(587041.0))
                .body("[0].'gini'", numberMatches(44.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Madagasikara"))
                .body("[0].'numericCode'", containsString("450"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MGA"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fr", "mg"))
                .body("[0].'translations'.'de'", containsString("Madagaskar"))
                .body("[0].'translations'.'es'", containsString("Madagascar"))
                .body("[0].'translations'.'fr'", containsString("Madagascar"))
                .body("[0].'translations'.'ja'", containsString("マダガスカル"))
                .body("[0].'translations'.'it'", containsString("Madagascar"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Germany"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".de"))
                .body("[1].'alpha2Code'", containsString("DE"))
                .body("[1].'alpha3Code'", containsString("DEU"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("49"))
                .body("[1].'capital'", containsString("Berlin"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("DE", "Federal Republic of Germany", "Bundesrepublik Deutschland"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Western Europe"))
                .body("[1].'population'", numberMatches(8.10836E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(51.0))
                .body("[1].'latlng'[1]", numberMatches(9.0))
                .body("[1].'demonym'", containsString("German"))
                .body("[1].'area'", numberMatches(357114.0))
                .body("[1].'gini'", numberMatches(28.3))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+01:00"))
                .body("[1].'borders'.size()", equalTo(9))
                .body("[1].'borders'", hasItems("AUT", "BEL", "CZE", "DNK", "FRA", "LUX", "NLD", "POL", "CHE"))
                .body("[1].'nativeName'", containsString("Deutschland"))
                .body("[1].'numericCode'", containsString("276"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("EUR"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("de"))
                .body("[1].'translations'.'de'", containsString("Deutschland"))
                .body("[1].'translations'.'es'", containsString("Alemania"))
                .body("[1].'translations'.'fr'", containsString("Allemagne"))
                .body("[1].'translations'.'ja'", containsString("ドイツ"))
                .body("[1].'translations'.'it'", containsString("Germania"))
                .body("[1].'relevance'", containsString("3"))
                .body("[2].'name'", containsString("Seychelles"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".sc"))
                .body("[2].'alpha2Code'", containsString("SC"))
                .body("[2].'alpha3Code'", containsString("SYC"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("248"))
                .body("[2].'capital'", containsString("Victoria"))
                .body("[2].'altSpellings'.size()", equalTo(4))
                .body("[2].'altSpellings'", hasItems("SC", "Republic of Seychelles", "Repiblik Sesel", "République des Seychelles"))
                .body("[2].'region'", containsString("Africa"))
                .body("[2].'subregion'", containsString("Eastern Africa"))
                .body("[2].'population'", numberMatches(89949.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(-4.58333333))
                .body("[2].'latlng'[1]", numberMatches(55.66666666))
                .body("[2].'demonym'", containsString("Seychellois"))
                .body("[2].'area'", numberMatches(452.0))
                .body("[2].'gini'", numberMatches(65.8))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+04:00"))
                .body("[2].'borders'.size()", equalTo(0))
                .body("[2].'nativeName'", containsString("Seychelles"))
                .body("[2].'numericCode'", containsString("690"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("SCR"))
                .body("[2].'languages'.size()", equalTo(2))
                .body("[2].'languages'", hasItems("fr", "en"))
                .body("[2].'translations'.'de'", containsString("Seychellen"))
                .body("[2].'translations'.'es'", containsString("Seychelles"))
                .body("[2].'translations'.'fr'", containsString("Seychelles"))
                .body("[2].'translations'.'ja'", containsString("セーシェル"))
                .body("[2].'translations'.'it'", containsString("Seychelles"))
                .body("[2].'relevance'", containsString("0.5"))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_954_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/holy%20see?fields=k")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_955_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/schweiz?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Switzerland"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ch"))
                .body("[0].'alpha2Code'", containsString("CH"))
                .body("[0].'alpha3Code'", containsString("CHE"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("41"))
                .body("[0].'capital'", containsString("Bern"))
                .body("[0].'altSpellings'.size()", equalTo(6))
                .body("[0].'altSpellings'", hasItems("CH", "Swiss Confederation", "Schweiz", "Suisse", "Svizzera", "Svizra"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(8256000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(47.0))
                .body("[0].'latlng'[1]", numberMatches(8.0))
                .body("[0].'demonym'", containsString("Swiss"))
                .body("[0].'area'", numberMatches(41284.0))
                .body("[0].'gini'", numberMatches(33.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("AUT", "FRA", "ITA", "LIE", "DEU"))
                .body("[0].'nativeName'", containsString("Schweiz"))
                .body("[0].'numericCode'", containsString("756"))
                .body("[0].'currencies'.size()", equalTo(3))
                .body("[0].'currencies'", hasItems("CHE", "CHF", "CHW"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("de", "fr", "it"))
                .body("[0].'translations'.'de'", containsString("Schweiz"))
                .body("[0].'translations'.'es'", containsString("Suiza"))
                .body("[0].'translations'.'fr'", containsString("Suisse"))
                .body("[0].'translations'.'ja'", containsString("スイス"))
                .body("[0].'translations'.'it'", containsString("Svizzera"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_956_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/se?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Sweden"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".se"))
                .body("[0].'alpha2Code'", containsString("SE"))
                .body("[0].'alpha3Code'", containsString("SWE"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("46"))
                .body("[0].'capital'", containsString("Stockholm"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("SE", "Kingdom of Sweden", "Konungariket Sverige"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(9793172.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(62.0))
                .body("[0].'latlng'[1]", numberMatches(15.0))
                .body("[0].'demonym'", containsString("Swedish"))
                .body("[0].'area'", numberMatches(450295.0))
                .body("[0].'gini'", numberMatches(25.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("FIN", "NOR"))
                .body("[0].'nativeName'", containsString("Sverige"))
                .body("[0].'numericCode'", containsString("752"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("SEK"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("sv"))
                .body("[0].'translations'.'de'", containsString("Schweden"))
                .body("[0].'translations'.'es'", containsString("Suecia"))
                .body("[0].'translations'.'fr'", containsString("Suède"))
                .body("[0].'translations'.'ja'", containsString("スウェーデン"))
                .body("[0].'translations'.'it'", containsString("Svezia"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_957_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/hong%20kong?" + 
                    "fields=k&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_958_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/hr?" + 
                    "fields=m&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_959_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/hrvatska?" + 
                    "fields=m&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_960_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/ht?" + 
                    "fields=m&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_961_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/hu?" + 
                    "fields=m&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_962_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/hungary?" + 
                    "fields=m&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_963_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/brasilia?fields=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Brazil"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".br"))
                .body("[0].'alpha2Code'", containsString("BR"))
                .body("[0].'alpha3Code'", containsString("BRA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("55"))
                .body("[0].'capital'", containsString("Brasília"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("BR", "Brasil", "Federative Republic of Brazil", "República Federativa do Brasil"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(2.06135893E8))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-10.0))
                .body("[0].'latlng'[1]", numberMatches(-55.0))
                .body("[0].'demonym'", containsString("Brazilian"))
                .body("[0].'area'", numberMatches(8515767.0))
                .body("[0].'gini'", numberMatches(54.7))
                .body("[0].'timezones'.size()", equalTo(4))
                .body("[0].'timezones'", hasItems("UTC-05:00", "UTC-04:00", "UTC-03:00", "UTC-02:00"))
                .body("[0].'borders'.size()", equalTo(10))
                .body("[0].'borders'", hasItems("ARG", "BOL", "COL", "GUF", "GUY", "PRY", "PER", "SUR", "URY", "VEN"))
                .body("[0].'nativeName'", containsString("Brasil"))
                .body("[0].'numericCode'", containsString("076"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("BRL"))
                .body("[0].'currencies'[0].'name'", containsString("Brazilian real"))
                .body("[0].'currencies'[0].'symbol'", containsString("R$"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("pt"))
                .body("[0].'languages'[0].'iso639_2'", containsString("por"))
                .body("[0].'languages'[0].'name'", containsString("Portuguese"))
                .body("[0].'languages'[0].'nativeName'", containsString("Português"))
                .body("[0].'translations'.'de'", containsString("Brasilien"))
                .body("[0].'translations'.'es'", containsString("Brasil"))
                .body("[0].'translations'.'fr'", containsString("Brésil"))
                .body("[0].'translations'.'ja'", containsString("ブラジル"))
                .body("[0].'translations'.'it'", containsString("Brasile"))
                .body("[0].'translations'.'br'", containsString("Brasil"))
                .body("[0].'translations'.'pt'", containsString("Brasil"))
                .body("[0].'translations'.'nl'", containsString("Brazilië"))
                .body("[0].'translations'.'hr'", containsString("Brazil"))
                .body("[0].'translations'.'fa'", containsString("برزیل"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/bra.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("USAN"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Union of South American Nations"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(3))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'", hasItems("UNASUR", "UNASUL", "UZAN"))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(4))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("Unión de Naciones Suramericanas", "União de Nações Sul-Americanas", "Unie van Zuid-Amerikaanse Naties", "South American Union"))
                .body("[0].'cioc'", containsString("BRA"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_964_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/brazzaville?fields=X")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_965_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/bridgetown?fields=_EM_16251_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_966_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/seychelles?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Seychelles"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sc"))
                .body("[0].'alpha2Code'", containsString("SC"))
                .body("[0].'alpha3Code'", containsString("SYC"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("248"))
                .body("[0].'capital'", containsString("Victoria"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("SC", "Republic of Seychelles", "Repiblik Sesel", "République des Seychelles"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(89949.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-4.58333333))
                .body("[0].'latlng'[1]", numberMatches(55.66666666))
                .body("[0].'demonym'", containsString("Seychellois"))
                .body("[0].'area'", numberMatches(452.0))
                .body("[0].'gini'", numberMatches(65.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Seychelles"))
                .body("[0].'numericCode'", containsString("690"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("SCR"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fr", "en"))
                .body("[0].'translations'.'de'", containsString("Seychellen"))
                .body("[0].'translations'.'es'", containsString("Seychelles"))
                .body("[0].'translations'.'fr'", containsString("Seychelles"))
                .body("[0].'translations'.'ja'", containsString("セーシェル"))
                .body("[0].'translations'.'it'", containsString("Seychelles"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_967_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/sg?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Singapore"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sg"))
                .body("[0].'alpha2Code'", containsString("SG"))
                .body("[0].'alpha3Code'", containsString("SGP"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("65"))
                .body("[0].'capital'", containsString("Singapore"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("SG", "Singapura", "Republik Singapura", "新加坡共和国"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("South-Eastern Asia"))
                .body("[0].'population'", numberMatches(5469700.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(1.36666666))
                .body("[0].'latlng'[1]", numberMatches(103.8))
                .body("[0].'demonym'", containsString("Singaporean"))
                .body("[0].'area'", numberMatches(710.0))
                .body("[0].'gini'", numberMatches(48.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Singapore"))
                .body("[0].'numericCode'", containsString("702"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("SGD"))
                .body("[0].'languages'.size()", equalTo(4))
                .body("[0].'languages'", hasItems("en", "ms", "ta", "zh"))
                .body("[0].'translations'.'de'", containsString("Singapur"))
                .body("[0].'translations'.'es'", containsString("Singapur"))
                .body("[0].'translations'.'fr'", containsString("Singapour"))
                .body("[0].'translations'.'ja'", containsString("シンガポール"))
                .body("[0].'translations'.'it'", containsString("Singapore"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_968_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/sh?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(10))
                .body("[0].'name'", containsString("Bangladesh"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bd"))
                .body("[0].'alpha2Code'", containsString("BD"))
                .body("[0].'alpha3Code'", containsString("BGD"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("880"))
                .body("[0].'capital'", containsString("Dhaka"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("BD", "People's Republic of Bangladesh", "Gônôprôjatôntri Bangladesh"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(1.58875E8))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(24.0))
                .body("[0].'latlng'[1]", numberMatches(90.0))
                .body("[0].'demonym'", containsString("Bangladeshi"))
                .body("[0].'area'", numberMatches(147570.0))
                .body("[0].'gini'", numberMatches(32.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+06:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("MMR", "IND"))
                .body("[0].'nativeName'", containsString("Bangladesh"))
                .body("[0].'numericCode'", containsString("050"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BDT"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("bn"))
                .body("[0].'translations'.'de'", containsString("Bangladesch"))
                .body("[0].'translations'.'es'", containsString("Bangladesh"))
                .body("[0].'translations'.'fr'", containsString("Bangladesh"))
                .body("[0].'translations'.'ja'", containsString("バングラデシュ"))
                .body("[0].'translations'.'it'", containsString("Bangladesh"))
                .body("[0].'relevance'", containsString("2"))
                .body("[1].'name'", containsString("British Indian Ocean Territory"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".io"))
                .body("[1].'alpha2Code'", containsString("IO"))
                .body("[1].'alpha3Code'", containsString("IOT"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("246"))
                .body("[1].'capital'", containsString("Diego Garcia"))
                .body("[1].'altSpellings'.size()", equalTo(1))
                .body("[1].'altSpellings'", hasItems("IO"))
                .body("[1].'region'", containsString("Africa"))
                .body("[1].'subregion'", containsString("Eastern Africa"))
                .body("[1].'population'", numberMatches(3000.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-6.0))
                .body("[1].'latlng'[1]", numberMatches(71.5))
                .body("[1].'demonym'", containsString("Indian"))
                .body("[1].'area'", numberMatches(60.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+06:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("British Indian Ocean Territory"))
                .body("[1].'numericCode'", containsString("086"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("USD"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("en"))
                .body("[1].'translations'.'de'", containsString("Britisches Territorium im Indischen Ozean"))
                .body("[1].'translations'.'es'", containsString("Territorio Británico del Océano Índico"))
                .body("[1].'translations'.'fr'", containsString("Territoire britannique de l'océan Indien"))
                .body("[1].'translations'.'ja'", containsString("イギリス領インド洋地域"))
                .body("[1].'translations'.'it'", containsString("Territorio britannico dell'oceano indiano"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Virgin Islands (British)"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".vg"))
                .body("[2].'alpha2Code'", containsString("VG"))
                .body("[2].'alpha3Code'", containsString("VGB"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("1"))
                .body("[2].'capital'", containsString("Road Town"))
                .body("[2].'altSpellings'.size()", equalTo(1))
                .body("[2].'altSpellings'", hasItems("VG"))
                .body("[2].'region'", containsString("Americas"))
                .body("[2].'subregion'", containsString("Caribbean"))
                .body("[2].'population'", numberMatches(28054.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(18.431383))
                .body("[2].'latlng'[1]", numberMatches(-64.62305))
                .body("[2].'demonym'", containsString("Virgin Islander"))
                .body("[2].'area'", numberMatches(151.0))
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC-04:00"))
                .body("[2].'borders'.size()", equalTo(0))
                .body("[2].'nativeName'", containsString("British Virgin Islands"))
                .body("[2].'numericCode'", containsString("092"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("USD"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("en"))
                .body("[2].'translations'.'de'", containsString("Britische Jungferninseln"))
                .body("[2].'translations'.'es'", containsString("Islas Vírgenes del Reino Unido"))
                .body("[2].'translations'.'fr'", containsString("Îles Vierges britanniques"))
                .body("[2].'translations'.'ja'", containsString("イギリス領ヴァージン諸島"))
                .body("[2].'translations'.'it'", containsString("Isole Vergini Britanniche"))
                .body("[2].'relevance'", containsString("0.5"))
                ; // Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_969_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/shqiperi?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Albania"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".al"))
                .body("[0].'alpha2Code'", containsString("AL"))
                .body("[0].'alpha3Code'", containsString("ALB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("355"))
                .body("[0].'capital'", containsString("Tirana"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("AL", "Shqipëri", "Shqipëria", "Shqipnia"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(2893005.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(41.0))
                .body("[0].'latlng'[1]", numberMatches(20.0))
                .body("[0].'demonym'", containsString("Albanian"))
                .body("[0].'area'", numberMatches(28748.0))
                .body("[0].'gini'", numberMatches(34.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("MNE", "GRC", "MKD", "KOS"))
                .body("[0].'nativeName'", containsString("Shqipëria"))
                .body("[0].'numericCode'", containsString("008"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ALL"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("sq"))
                .body("[0].'translations'.'de'", containsString("Albanien"))
                .body("[0].'translations'.'es'", containsString("Albania"))
                .body("[0].'translations'.'fr'", containsString("Albanie"))
                .body("[0].'translations'.'ja'", containsString("アルバニア"))
                .body("[0].'translations'.'it'", containsString("Albania"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_970_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/shqiperia?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Albania"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".al"))
                .body("[0].'alpha2Code'", containsString("AL"))
                .body("[0].'alpha3Code'", containsString("ALB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("355"))
                .body("[0].'capital'", containsString("Tirana"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("AL", "Shqipëri", "Shqipëria", "Shqipnia"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(2893005.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(41.0))
                .body("[0].'latlng'[1]", numberMatches(20.0))
                .body("[0].'demonym'", containsString("Albanian"))
                .body("[0].'area'", numberMatches(28748.0))
                .body("[0].'gini'", numberMatches(34.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("MNE", "GRC", "MKD", "KOS"))
                .body("[0].'nativeName'", containsString("Shqipëria"))
                .body("[0].'numericCode'", containsString("008"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ALL"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("sq"))
                .body("[0].'translations'.'de'", containsString("Albanien"))
                .body("[0].'translations'.'es'", containsString("Albania"))
                .body("[0].'translations'.'fr'", containsString("Albanie"))
                .body("[0].'translations'.'ja'", containsString("アルバニア"))
                .body("[0].'translations'.'it'", containsString("Albania"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_971_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/fm?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Federated States of Micronesia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".fm"))
                .body("[0].'alpha2Code'", containsString("FM"))
                .body("[0].'alpha3Code'", containsString("FSM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("691"))
                .body("[0].'capital'", containsString("Palikir"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("FM", "Federated States of Micronesia"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Micronesia"))
                .body("[0].'population'", numberMatches(101351.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(6.91666666))
                .body("[0].'latlng'[1]", numberMatches(158.25))
                .body("[0].'demonym'", containsString("Micronesian"))
                .body("[0].'area'", numberMatches(702.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC+10:00", "UTC+11"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Micronesia"))
                .body("[0].'numericCode'", containsString("583"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Mikronesien"))
                .body("[0].'translations'.'es'", containsString("Micronesia"))
                .body("[0].'translations'.'fr'", containsString("Micronésie"))
                .body("[0].'translations'.'ja'", containsString("ミクロネシア連邦"))
                .body("[0].'translations'.'it'", containsString("Micronesia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_972_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/france?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("France"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".fr"))
                .body("[0].'alpha2Code'", containsString("FR"))
                .body("[0].'alpha3Code'", containsString("FRA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("33"))
                .body("[0].'capital'", containsString("Paris"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("FR", "French Republic", "République française"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(6.6186E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(46.0))
                .body("[0].'latlng'[1]", numberMatches(2.0))
                .body("[0].'demonym'", containsString("French"))
                .body("[0].'area'", numberMatches(640679.0))
                .body("[0].'gini'", numberMatches(32.7))
                .body("[0].'timezones'.size()", equalTo(12))
                .body("[0].'timezones'", hasItems("UTC-10:00", "UTC-09:30", "UTC-09:00", "UTC-08:00", "UTC-04:00", "UTC-03:00", "UTC+01:00", "UTC+03:00", "UTC+04:00", "UTC+05:00", "UTC+11:00", "UTC+12:00"))
                .body("[0].'borders'.size()", equalTo(8))
                .body("[0].'borders'", hasItems("AND", "BEL", "DEU", "ITA", "LUX", "MCO", "ESP", "CHE"))
                .body("[0].'nativeName'", containsString("France"))
                .body("[0].'numericCode'", containsString("250"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("fr"))
                .body("[0].'translations'.'de'", containsString("Frankreich"))
                .body("[0].'translations'.'es'", containsString("Francia"))
                .body("[0].'translations'.'fr'", containsString("France"))
                .body("[0].'translations'.'ja'", containsString("フランス"))
                .body("[0].'translations'.'it'", containsString("Francia"))
                .body("[0].'relevance'", containsString("2.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_973_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/bermuda?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Bermuda"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bm"))
                .body("[0].'alpha2Code'", containsString("BM"))
                .body("[0].'alpha3Code'", containsString("BMU"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Hamilton"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("BM", "The Islands of Bermuda", "The Bermudas", "Somers Isles"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Northern America"))
                .body("[0].'population'", numberMatches(64237.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(32.33333333))
                .body("[0].'latlng'[1]", numberMatches(-64.75))
                .body("[0].'demonym'", containsString("Bermudian"))
                .body("[0].'area'", numberMatches(54.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Bermuda"))
                .body("[0].'numericCode'", containsString("060"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BMD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Bermuda"))
                .body("[0].'translations'.'es'", containsString("Bermudas"))
                .body("[0].'translations'.'fr'", containsString("Bermudes"))
                .body("[0].'translations'.'ja'", containsString("バミューダ"))
                .body("[0].'translations'.'it'", containsString("Bermuda"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_974_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/bf?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Burkina Faso"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bf"))
                .body("[0].'alpha2Code'", containsString("BF"))
                .body("[0].'alpha3Code'", containsString("BFA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("226"))
                .body("[0].'capital'", containsString("Ouagadougou"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("BF"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(1.8450494E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(13.0))
                .body("[0].'latlng'[1]", numberMatches(-2.0))
                .body("[0].'demonym'", containsString("Burkinabe"))
                .body("[0].'area'", numberMatches(272967.0))
                .body("[0].'gini'", numberMatches(39.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("BEN", "CIV", "GHA", "MLI", "NER", "TGO"))
                .body("[0].'nativeName'", containsString("Burkina Faso"))
                .body("[0].'numericCode'", containsString("854"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XOF"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fr", "ff"))
                .body("[0].'translations'.'de'", containsString("Burkina Faso"))
                .body("[0].'translations'.'es'", containsString("Burkina Faso"))
                .body("[0].'translations'.'fr'", containsString("Burkina Faso"))
                .body("[0].'translations'.'ja'", containsString("ブルキナファソ"))
                .body("[0].'translations'.'it'", containsString("Burkina Faso"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_975_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/state%20of%20qatar?" + 
                    "fields=Glh&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_976_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/bouvet%20island?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Bouvet Island"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bv"))
                .body("[0].'alpha2Code'", containsString("BV"))
                .body("[0].'alpha3Code'", containsString("BVT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("47"))
                .body("[0].'capital'", containsString(""))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("BV", "Bouvetøya", "Bouvet-øya"))
                .body("[0].'region'", containsString(""))
                .body("[0].'subregion'", containsString(""))
                .body("[0].'population'", numberMatches(0.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-54.43333333))
                .body("[0].'latlng'[1]", numberMatches(3.4))
                .body("[0].'demonym'", containsString(""))
                .body("[0].'area'", numberMatches(49.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Bouvetøya"))
                .body("[0].'numericCode'", containsString("074"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("NOK"))
                .body("[0].'languages'.size()", equalTo(0))
                .body("[0].'translations'.'de'", containsString("Bouvetinsel"))
                .body("[0].'translations'.'es'", containsString("Isla Bouvet"))
                .body("[0].'translations'.'fr'", containsString("Île Bouvet"))
                .body("[0].'translations'.'ja'", containsString("ブーベ島"))
                .body("[0].'translations'.'it'", containsString("Isola Bouvet"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_977_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/bouvet-øya?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Bouvet Island"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bv"))
                .body("[0].'alpha2Code'", containsString("BV"))
                .body("[0].'alpha3Code'", containsString("BVT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("47"))
                .body("[0].'capital'", containsString(""))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("BV", "Bouvetøya", "Bouvet-øya"))
                .body("[0].'region'", containsString(""))
                .body("[0].'subregion'", containsString(""))
                .body("[0].'population'", numberMatches(0.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-54.43333333))
                .body("[0].'latlng'[1]", numberMatches(3.4))
                .body("[0].'demonym'", containsString(""))
                .body("[0].'area'", numberMatches(49.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Bouvetøya"))
                .body("[0].'numericCode'", containsString("074"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("NOK"))
                .body("[0].'languages'.size()", equalTo(0))
                .body("[0].'translations'.'de'", containsString("Bouvetinsel"))
                .body("[0].'translations'.'es'", containsString("Isla Bouvet"))
                .body("[0].'translations'.'fr'", containsString("Île Bouvet"))
                .body("[0].'translations'.'ja'", containsString("ブーベ島"))
                .body("[0].'translations'.'it'", containsString("Isola Bouvet"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_978_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/bouvetøya?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Bouvet Island"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bv"))
                .body("[0].'alpha2Code'", containsString("BV"))
                .body("[0].'alpha3Code'", containsString("BVT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("47"))
                .body("[0].'capital'", containsString(""))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("BV", "Bouvetøya", "Bouvet-øya"))
                .body("[0].'region'", containsString(""))
                .body("[0].'subregion'", containsString(""))
                .body("[0].'population'", numberMatches(0.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-54.43333333))
                .body("[0].'latlng'[1]", numberMatches(3.4))
                .body("[0].'demonym'", containsString(""))
                .body("[0].'area'", numberMatches(49.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Bouvetøya"))
                .body("[0].'numericCode'", containsString("074"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("NOK"))
                .body("[0].'languages'.size()", equalTo(0))
                .body("[0].'translations'.'de'", containsString("Bouvetinsel"))
                .body("[0].'translations'.'es'", containsString("Isla Bouvet"))
                .body("[0].'translations'.'fr'", containsString("Île Bouvet"))
                .body("[0].'translations'.'ja'", containsString("ブーベ島"))
                .body("[0].'translations'.'it'", containsString("Isola Bouvet"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_979_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/bq?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Bonaire"))
                .body("[0].'topLevelDomain'.size()", equalTo(2))
                .body("[0].'topLevelDomain'", hasItems(".an", ".nl"))
                .body("[0].'alpha2Code'", containsString("BQ"))
                .body("[0].'alpha3Code'", containsString("BES"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("599"))
                .body("[0].'capital'", containsString("Kralendijk"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("BQ", "Boneiru"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(17408.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(12.15))
                .body("[0].'latlng'[1]", numberMatches(-68.266667))
                .body("[0].'demonym'", containsString("Dutch"))
                .body("[0].'area'", numberMatches(294.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Bonaire"))
                .body("[0].'numericCode'", containsString("535"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("nl"))
                .body("[0].'translations'.'de'", nullValue())
                .body("[0].'translations'.'es'", nullValue())
                .body("[0].'translations'.'fr'", nullValue())
                .body("[0].'translations'.'ja'", nullValue())
                .body("[0].'translations'.'it'", nullValue())
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_980_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/509")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Haiti"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ht"))
                .body("[0].'alpha2Code'", containsString("HT"))
                .body("[0].'alpha3Code'", containsString("HTI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("509"))
                .body("[0].'capital'", containsString("Port-au-Prince"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("HT", "Republic of Haiti", "République d'Haïti", "Repiblik Ayiti"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(1.0911819E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(19.0))
                .body("[0].'latlng'[1]", numberMatches(-72.41666666))
                .body("[0].'demonym'", containsString("Haitian"))
                .body("[0].'area'", numberMatches(27750.0))
                .body("[0].'gini'", numberMatches(59.2))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-05:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("DOM"))
                .body("[0].'nativeName'", containsString("Haïti"))
                .body("[0].'numericCode'", containsString("332"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'", hasItems("HTG", "USD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fr", "ht"))
                .body("[0].'translations'.'de'", containsString("Haiti"))
                .body("[0].'translations'.'es'", containsString("Haiti"))
                .body("[0].'translations'.'fr'", containsString("Haïti"))
                .body("[0].'translations'.'ja'", containsString("ハイチ"))
                .body("[0].'translations'.'it'", containsString("Haiti"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_981_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/by?fields=Gmh")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_982_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/bz?fields=_EM_16375_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_983_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/bahamian?fields=tDSk")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_984_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/54")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Argentina"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ar"))
                .body("[0].'alpha2Code'", containsString("AR"))
                .body("[0].'alpha3Code'", containsString("ARG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("54"))
                .body("[0].'capital'", containsString("Buenos Aires"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("AR", "Argentine Republic", "República Argentina"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(4.3131966E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-34.0))
                .body("[0].'latlng'[1]", numberMatches(-64.0))
                .body("[0].'demonym'", containsString("Argentinean"))
                .body("[0].'area'", numberMatches(2780400.0))
                .body("[0].'gini'", numberMatches(44.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-03:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("BOL", "BRA", "CHL", "PRY", "URY"))
                .body("[0].'nativeName'", containsString("Argentina"))
                .body("[0].'numericCode'", containsString("032"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ARS"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("es", "gn"))
                .body("[0].'translations'.'de'", containsString("Argentinien"))
                .body("[0].'translations'.'es'", containsString("Argentina"))
                .body("[0].'translations'.'fr'", containsString("Argentine"))
                .body("[0].'translations'.'ja'", containsString("アルゼンチン"))
                .body("[0].'translations'.'it'", containsString("Argentina"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_985_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/58")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Venezuela"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ve"))
                .body("[0].'alpha2Code'", containsString("VE"))
                .body("[0].'alpha3Code'", containsString("VEN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("58"))
                .body("[0].'capital'", containsString("Caracas"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("VE", "Bolivarian Republic of Venezuela", "República Bolivariana de Venezuela"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(3.0620404E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(8.0))
                .body("[0].'latlng'[1]", numberMatches(-66.0))
                .body("[0].'demonym'", containsString("Venezuelan"))
                .body("[0].'area'", numberMatches(916445.0))
                .body("[0].'gini'", numberMatches(44.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:30"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("BRA", "COL", "GUY"))
                .body("[0].'nativeName'", containsString("Venezuela"))
                .body("[0].'numericCode'", containsString("862"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("VEF"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("es"))
                .body("[0].'translations'.'de'", containsString("Venezuela"))
                .body("[0].'translations'.'es'", containsString("Venezuela"))
                .body("[0].'translations'.'fr'", containsString("Venezuela"))
                .body("[0].'translations'.'ja'", containsString("ベネズエラ・ボリバル共和国"))
                .body("[0].'translations'.'it'", containsString("Venezuela"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_986_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/bahraini?fields=tDS")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_987_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/cabo%20verde?" + 
                    "fields=2Totyii16oP3u8&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_988_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/cambodia?" + 
                    "fields=2Totyii16oP3u8&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_989_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/cameroon?" + 
                    "fields=2Totyii16oP3u8&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_990_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/br?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(9))
                .body("[0].'name'", containsString("Brazil"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".br"))
                .body("[0].'alpha2Code'", containsString("BR"))
                .body("[0].'alpha3Code'", containsString("BRA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("55"))
                .body("[0].'capital'", containsString("Brasília"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("BR", "Brasil", "Federative Republic of Brazil", "República Federativa do Brasil"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(2.04772E8))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-10.0))
                .body("[0].'latlng'[1]", numberMatches(-55.0))
                .body("[0].'demonym'", containsString("Brazilian"))
                .body("[0].'area'", numberMatches(8515767.0))
                .body("[0].'gini'", numberMatches(54.7))
                .body("[0].'timezones'.size()", equalTo(4))
                .body("[0].'timezones'", hasItems("UTC-05:00", "UTC-04:00", "UTC-03:00", "UTC-02:00"))
                .body("[0].'borders'.size()", equalTo(10))
                .body("[0].'borders'", hasItems("ARG", "BOL", "COL", "GUF", "GUY", "PRY", "PER", "SUR", "URY", "VEN"))
                .body("[0].'nativeName'", containsString("Brasil"))
                .body("[0].'numericCode'", containsString("076"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BRL"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("pt"))
                .body("[0].'translations'.'de'", containsString("Brasilien"))
                .body("[0].'translations'.'es'", containsString("Brasil"))
                .body("[0].'translations'.'fr'", containsString("Brésil"))
                .body("[0].'translations'.'ja'", containsString("ブラジル"))
                .body("[0].'translations'.'it'", containsString("Brasile"))
                .body("[0].'relevance'", containsString("2"))
                .body("[1].'name'", containsString("British Indian Ocean Territory"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".io"))
                .body("[1].'alpha2Code'", containsString("IO"))
                .body("[1].'alpha3Code'", containsString("IOT"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("246"))
                .body("[1].'capital'", containsString("Diego Garcia"))
                .body("[1].'altSpellings'.size()", equalTo(1))
                .body("[1].'altSpellings'", hasItems("IO"))
                .body("[1].'region'", containsString("Africa"))
                .body("[1].'subregion'", containsString("Eastern Africa"))
                .body("[1].'population'", numberMatches(3000.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-6.0))
                .body("[1].'latlng'[1]", numberMatches(71.5))
                .body("[1].'demonym'", containsString("Indian"))
                .body("[1].'area'", numberMatches(60.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+06:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("British Indian Ocean Territory"))
                .body("[1].'numericCode'", containsString("086"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("USD"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("en"))
                .body("[1].'translations'.'de'", containsString("Britisches Territorium im Indischen Ozean"))
                .body("[1].'translations'.'es'", containsString("Territorio Británico del Océano Índico"))
                .body("[1].'translations'.'fr'", containsString("Territoire britannique de l'océan Indien"))
                .body("[1].'translations'.'ja'", containsString("イギリス領インド洋地域"))
                .body("[1].'translations'.'it'", containsString("Territorio britannico dell'oceano indiano"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Virgin Islands (British)"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".vg"))
                .body("[2].'alpha2Code'", containsString("VG"))
                .body("[2].'alpha3Code'", containsString("VGB"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("1"))
                .body("[2].'capital'", containsString("Road Town"))
                .body("[2].'altSpellings'.size()", equalTo(1))
                .body("[2].'altSpellings'", hasItems("VG"))
                .body("[2].'region'", containsString("Americas"))
                .body("[2].'subregion'", containsString("Caribbean"))
                .body("[2].'population'", numberMatches(28054.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(18.431383))
                .body("[2].'latlng'[1]", numberMatches(-64.62305))
                .body("[2].'demonym'", containsString("Virgin Islander"))
                .body("[2].'area'", numberMatches(151.0))
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC-04:00"))
                .body("[2].'borders'.size()", equalTo(0))
                .body("[2].'nativeName'", containsString("British Virgin Islands"))
                .body("[2].'numericCode'", containsString("092"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("USD"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("en"))
                .body("[2].'translations'.'de'", containsString("Britische Jungferninseln"))
                .body("[2].'translations'.'es'", containsString("Islas Vírgenes del Reino Unido"))
                .body("[2].'translations'.'fr'", containsString("Îles Vierges britanniques"))
                .body("[2].'translations'.'ja'", containsString("イギリス領ヴァージン諸島"))
                .body("[2].'translations'.'it'", containsString("Isole Vergini Britanniche"))
                .body("[2].'relevance'", containsString("0.5"))
                ; // Skipping assertions on the remaining 6 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_991_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/brazil?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Brazil"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".br"))
                .body("[0].'alpha2Code'", containsString("BR"))
                .body("[0].'alpha3Code'", containsString("BRA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("55"))
                .body("[0].'capital'", containsString("Brasília"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("BR", "Brasil", "Federative Republic of Brazil", "República Federativa do Brasil"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(2.04772E8))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-10.0))
                .body("[0].'latlng'[1]", numberMatches(-55.0))
                .body("[0].'demonym'", containsString("Brazilian"))
                .body("[0].'area'", numberMatches(8515767.0))
                .body("[0].'gini'", numberMatches(54.7))
                .body("[0].'timezones'.size()", equalTo(4))
                .body("[0].'timezones'", hasItems("UTC-05:00", "UTC-04:00", "UTC-03:00", "UTC-02:00"))
                .body("[0].'borders'.size()", equalTo(10))
                .body("[0].'borders'", hasItems("ARG", "BOL", "COL", "GUF", "GUY", "PRY", "PER", "SUR", "URY", "VEN"))
                .body("[0].'nativeName'", containsString("Brasil"))
                .body("[0].'numericCode'", containsString("076"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BRL"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("pt"))
                .body("[0].'translations'.'de'", containsString("Brasilien"))
                .body("[0].'translations'.'es'", containsString("Brasil"))
                .body("[0].'translations'.'fr'", containsString("Brésil"))
                .body("[0].'translations'.'ja'", containsString("ブラジル"))
                .body("[0].'translations'.'it'", containsString("Brasile"))
                .body("[0].'relevance'", containsString("2"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_992_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/canada?" + 
                    "fields=2Totyii16oP3u8&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_993_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/zimbabwe?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Zimbabwe"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".zw"))
                .body("[0].'alpha2Code'", containsString("ZW"))
                .body("[0].'alpha3Code'", containsString("ZWE"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("263"))
                .body("[0].'capital'", containsString("Harare"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("ZW", "Republic of Zimbabwe"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(1.3061239E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-20.0))
                .body("[0].'latlng'[1]", numberMatches(30.0))
                .body("[0].'demonym'", containsString("Zimbabwean"))
                .body("[0].'area'", numberMatches(390757.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("BWA", "MOZ", "ZAF", "ZMB"))
                .body("[0].'nativeName'", containsString("Zimbabwe"))
                .body("[0].'numericCode'", containsString("716"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("en", "sn", "nd"))
                .body("[0].'translations'.'de'", containsString("Simbabwe"))
                .body("[0].'translations'.'es'", containsString("Zimbabue"))
                .body("[0].'translations'.'fr'", containsString("Zimbabwe"))
                .body("[0].'translations'.'ja'", containsString("ジンバブエ"))
                .body("[0].'translations'.'it'", containsString("Zimbabwe"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_994_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/zm?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Zambia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".zm"))
                .body("[0].'alpha2Code'", containsString("ZM"))
                .body("[0].'alpha3Code'", containsString("ZMB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("260"))
                .body("[0].'capital'", containsString("Lusaka"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("ZM", "Republic of Zambia"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(1.5473905E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-15.0))
                .body("[0].'latlng'[1]", numberMatches(30.0))
                .body("[0].'demonym'", containsString("Zambian"))
                .body("[0].'area'", numberMatches(752612.0))
                .body("[0].'gini'", numberMatches(54.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(8))
                .body("[0].'borders'", hasItems("AGO", "BWA", "COD", "MWI", "MOZ", "NAM", "TZA", "ZWE"))
                .body("[0].'nativeName'", containsString("Zambia"))
                .body("[0].'numericCode'", containsString("894"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ZMW"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Sambia"))
                .body("[0].'translations'.'es'", containsString("Zambia"))
                .body("[0].'translations'.'fr'", containsString("Zambie"))
                .body("[0].'translations'.'ja'", containsString("ザンビア"))
                .body("[0].'translations'.'it'", containsString("Zambia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_995_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/zw?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Zimbabwe"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".zw"))
                .body("[0].'alpha2Code'", containsString("ZW"))
                .body("[0].'alpha3Code'", containsString("ZWE"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("263"))
                .body("[0].'capital'", containsString("Harare"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("ZW", "Republic of Zimbabwe"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(1.3061239E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-20.0))
                .body("[0].'latlng'[1]", numberMatches(30.0))
                .body("[0].'demonym'", containsString("Zimbabwean"))
                .body("[0].'area'", numberMatches(390757.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("BWA", "MOZ", "ZAF", "ZMB"))
                .body("[0].'nativeName'", containsString("Zimbabwe"))
                .body("[0].'numericCode'", containsString("716"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("en", "sn", "nd"))
                .body("[0].'translations'.'de'", containsString("Simbabwe"))
                .body("[0].'translations'.'es'", containsString("Zimbabue"))
                .body("[0].'translations'.'fr'", containsString("Zimbabwe"))
                .body("[0].'translations'.'ja'", containsString("ジンバブエ"))
                .body("[0].'translations'.'it'", containsString("Zimbabwe"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_996_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/ʾityoppya?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Ethiopia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".et"))
                .body("[0].'alpha2Code'", containsString("ET"))
                .body("[0].'alpha3Code'", containsString("ETH"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("251"))
                .body("[0].'capital'", containsString("Addis Ababa"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("ET", "ʾĪtyōṗṗyā", "Federal Democratic Republic of Ethiopia", "የኢትዮጵያ ፌዴራላዊ ዲሞክራሲያዊ ሪፐብሊክ"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(9.0076012E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(8.0))
                .body("[0].'latlng'[1]", numberMatches(38.0))
                .body("[0].'demonym'", containsString("Ethiopian"))
                .body("[0].'area'", numberMatches(1104300.0))
                .body("[0].'gini'", numberMatches(29.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("DJI", "ERI", "KEN", "SOM", "SSD", "SDN"))
                .body("[0].'nativeName'", containsString("ኢትዮጵያ"))
                .body("[0].'numericCode'", containsString("231"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ETB"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("am"))
                .body("[0].'translations'.'de'", containsString("Äthiopien"))
                .body("[0].'translations'.'es'", containsString("Etiopía"))
                .body("[0].'translations'.'fr'", containsString("Éthiopie"))
                .body("[0].'translations'.'ja'", containsString("エチオピア"))
                .body("[0].'translations'.'it'", containsString("Etiopia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_997_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/белоруссия?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Belarus"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".by"))
                .body("[0].'alpha2Code'", containsString("BY"))
                .body("[0].'alpha3Code'", containsString("BLR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("375"))
                .body("[0].'capital'", containsString("Minsk"))
                .body("[0].'altSpellings'.size()", equalTo(7))
                .body("[0].'altSpellings'", hasItems("BY", "Bielaruś", "Republic of Belarus", "Белоруссия", "Республика Беларусь", "Belorussiya", "Respublika Belarus’"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(9485300.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(53.0))
                .body("[0].'latlng'[1]", numberMatches(28.0))
                .body("[0].'demonym'", containsString("Belarusian"))
                .body("[0].'area'", numberMatches(207600.0))
                .body("[0].'gini'", numberMatches(26.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("LVA", "LTU", "POL", "RUS", "UKR"))
                .body("[0].'nativeName'", containsString("Белару́сь"))
                .body("[0].'numericCode'", containsString("112"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BYR"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("be", "ru"))
                .body("[0].'translations'.'de'", containsString("Weißrussland"))
                .body("[0].'translations'.'es'", containsString("Bielorrusia"))
                .body("[0].'translations'.'fr'", containsString("Biélorussie"))
                .body("[0].'translations'.'ja'", containsString("ベラルーシ"))
                .body("[0].'translations'.'it'", containsString("Bielorussia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_998_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/mh?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(19))
                .body("[0].'name'", containsString("Cyprus"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cy"))
                .body("[0].'alpha2Code'", containsString("CY"))
                .body("[0].'alpha3Code'", containsString("CYP"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("357"))
                .body("[0].'capital'", containsString("Nicosia"))
                .body("[0].'altSpellings'.size()", equalTo(6))
                .body("[0].'altSpellings'", hasItems("CY", "Kýpros", "Kıbrıs", "Republic of Cyprus", "Κυπριακή Δημοκρατία", "Kıbrıs Cumhuriyeti"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(858000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(35.0))
                .body("[0].'latlng'[1]", numberMatches(33.0))
                .body("[0].'demonym'", containsString("Cypriot"))
                .body("[0].'area'", numberMatches(9251.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("GBR"))
                .body("[0].'nativeName'", containsString("Κύπρος"))
                .body("[0].'numericCode'", containsString("196"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("el", "tr", "hy"))
                .body("[0].'translations'.'de'", containsString("Zypern"))
                .body("[0].'translations'.'es'", containsString("Chipre"))
                .body("[0].'translations'.'fr'", containsString("Chypre"))
                .body("[0].'translations'.'ja'", containsString("キプロス"))
                .body("[0].'translations'.'it'", containsString("Cipro"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Djibouti"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".dj"))
                .body("[1].'alpha2Code'", containsString("DJ"))
                .body("[1].'alpha3Code'", containsString("DJI"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("253"))
                .body("[1].'capital'", containsString("Djibouti"))
                .body("[1].'altSpellings'.size()", equalTo(7))
                .body("[1].'altSpellings'", hasItems("DJ", "Jabuuti", "Gabuuti", "Republic of Djibouti", "République de Djibouti", "Gabuutih Ummuuno", "Jamhuuriyadda Jabuuti"))
                .body("[1].'region'", containsString("Africa"))
                .body("[1].'subregion'", containsString("Eastern Africa"))
                .body("[1].'population'", numberMatches(888000.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(11.5))
                .body("[1].'latlng'[1]", numberMatches(43.0))
                .body("[1].'demonym'", containsString("Djibouti"))
                .body("[1].'area'", numberMatches(23200.0))
                .body("[1].'gini'", numberMatches(40.0))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+03:00"))
                .body("[1].'borders'.size()", equalTo(3))
                .body("[1].'borders'", hasItems("ERI", "ETH", "SOM"))
                .body("[1].'nativeName'", containsString("Djibouti"))
                .body("[1].'numericCode'", containsString("262"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("DJF"))
                .body("[1].'languages'.size()", equalTo(2))
                .body("[1].'languages'", hasItems("fr", "ar"))
                .body("[1].'translations'.'de'", containsString("Dschibuti"))
                .body("[1].'translations'.'es'", containsString("Yibuti"))
                .body("[1].'translations'.'fr'", containsString("Djibouti"))
                .body("[1].'translations'.'ja'", containsString("ジブチ"))
                .body("[1].'translations'.'it'", containsString("Gibuti"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Iran"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".ir"))
                .body("[2].'alpha2Code'", containsString("IR"))
                .body("[2].'alpha3Code'", containsString("IRN"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("98"))
                .body("[2].'capital'", containsString("Tehran"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("IR", "Islamic Republic of Iran", "Jomhuri-ye Eslāmi-ye Irān"))
                .body("[2].'region'", containsString("Asia"))
                .body("[2].'subregion'", containsString("Southern Asia"))
                .body("[2].'population'", numberMatches(7.85725E7))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(32.0))
                .body("[2].'latlng'[1]", numberMatches(53.0))
                .body("[2].'demonym'", containsString("Iranian"))
                .body("[2].'area'", numberMatches(1648195.0))
                .body("[2].'gini'", numberMatches(38.3))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+03:30"))
                .body("[2].'borders'.size()", equalTo(7))
                .body("[2].'borders'", hasItems("AFG", "ARM", "AZE", "IRQ", "PAK", "TUR", "TKM"))
                .body("[2].'nativeName'", containsString("ایران"))
                .body("[2].'numericCode'", containsString("364"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("IRR"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("fa"))
                .body("[2].'translations'.'de'", containsString("Iran"))
                .body("[2].'translations'.'es'", containsString("Iran"))
                .body("[2].'translations'.'fr'", containsString("Iran"))
                .body("[2].'translations'.'ja'", containsString("イラン・イスラム共和国"))
                .body("[2].'translations'.'it'", nullValue())
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 16 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_999_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/mk?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Republic of Macedonia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mk"))
                .body("[0].'alpha2Code'", containsString("MK"))
                .body("[0].'alpha3Code'", containsString("MKD"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("389"))
                .body("[0].'capital'", containsString("Skopje"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("MK", "Republic of Macedonia", "Република Македонија"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(2058539.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(41.83333333))
                .body("[0].'latlng'[1]", numberMatches(22.0))
                .body("[0].'demonym'", containsString("Macedonian"))
                .body("[0].'area'", numberMatches(25713.0))
                .body("[0].'gini'", numberMatches(43.2))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("ALB", "BGR", "GRC", "KOS", "SRB"))
                .body("[0].'nativeName'", containsString("Македонија"))
                .body("[0].'numericCode'", containsString("807"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MKD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("mk"))
                .body("[0].'translations'.'de'", containsString("Mazedonien"))
                .body("[0].'translations'.'es'", containsString("Macedonia"))
                .body("[0].'translations'.'fr'", containsString("Macédoine"))
                .body("[0].'translations'.'ja'", containsString("マケドニア旧ユーゴスラビア共和国"))
                .body("[0].'translations'.'it'", containsString("Macedonia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1000_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/mm?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(6))
                .body("[0].'name'", containsString("The Bahamas"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bs"))
                .body("[0].'alpha2Code'", containsString("BS"))
                .body("[0].'alpha3Code'", containsString("BHS"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Nassau"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("BS", "Commonwealth of the Bahamas"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(368390.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(24.25))
                .body("[0].'latlng'[1]", numberMatches(-76.0))
                .body("[0].'demonym'", containsString("Bahamian"))
                .body("[0].'area'", numberMatches(13943.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-05:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Bahamas"))
                .body("[0].'numericCode'", containsString("044"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BSD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Bahamas"))
                .body("[0].'translations'.'es'", containsString("Bahamas"))
                .body("[0].'translations'.'fr'", containsString("Bahamas"))
                .body("[0].'translations'.'ja'", containsString("バハマ"))
                .body("[0].'translations'.'it'", containsString("Bahamas"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Djibouti"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".dj"))
                .body("[1].'alpha2Code'", containsString("DJ"))
                .body("[1].'alpha3Code'", containsString("DJI"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("253"))
                .body("[1].'capital'", containsString("Djibouti"))
                .body("[1].'altSpellings'.size()", equalTo(7))
                .body("[1].'altSpellings'", hasItems("DJ", "Jabuuti", "Gabuuti", "Republic of Djibouti", "République de Djibouti", "Gabuutih Ummuuno", "Jamhuuriyadda Jabuuti"))
                .body("[1].'region'", containsString("Africa"))
                .body("[1].'subregion'", containsString("Eastern Africa"))
                .body("[1].'population'", numberMatches(888000.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(11.5))
                .body("[1].'latlng'[1]", numberMatches(43.0))
                .body("[1].'demonym'", containsString("Djibouti"))
                .body("[1].'area'", numberMatches(23200.0))
                .body("[1].'gini'", numberMatches(40.0))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+03:00"))
                .body("[1].'borders'.size()", equalTo(3))
                .body("[1].'borders'", hasItems("ERI", "ETH", "SOM"))
                .body("[1].'nativeName'", containsString("Djibouti"))
                .body("[1].'numericCode'", containsString("262"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("DJF"))
                .body("[1].'languages'.size()", equalTo(2))
                .body("[1].'languages'", hasItems("fr", "ar"))
                .body("[1].'translations'.'de'", containsString("Dschibuti"))
                .body("[1].'translations'.'es'", containsString("Yibuti"))
                .body("[1].'translations'.'fr'", containsString("Djibouti"))
                .body("[1].'translations'.'ja'", containsString("ジブチ"))
                .body("[1].'translations'.'it'", containsString("Gibuti"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Dominica"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".dm"))
                .body("[2].'alpha2Code'", containsString("DM"))
                .body("[2].'alpha3Code'", containsString("DMA"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("1"))
                .body("[2].'capital'", containsString("Roseau"))
                .body("[2].'altSpellings'.size()", equalTo(4))
                .body("[2].'altSpellings'", hasItems("DM", "Dominique", "Wai‘tu kubuli", "Commonwealth of Dominica"))
                .body("[2].'region'", containsString("Americas"))
                .body("[2].'subregion'", containsString("Caribbean"))
                .body("[2].'population'", numberMatches(71293.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(15.41666666))
                .body("[2].'latlng'[1]", numberMatches(-61.33333333))
                .body("[2].'demonym'", containsString("Dominican"))
                .body("[2].'area'", numberMatches(751.0))
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC-04:00"))
                .body("[2].'borders'.size()", equalTo(0))
                .body("[2].'nativeName'", containsString("Dominica"))
                .body("[2].'numericCode'", containsString("212"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("XCD"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("en"))
                .body("[2].'translations'.'de'", containsString("Dominica"))
                .body("[2].'translations'.'es'", containsString("Dominica"))
                .body("[2].'translations'.'fr'", containsString("Dominique"))
                .body("[2].'translations'.'ja'", containsString("ドミニカ国"))
                .body("[2].'translations'.'it'", containsString("Dominica"))
                .body("[2].'relevance'", containsString("0.5"))
                ; // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1001_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/mn?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Mongolia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mn"))
                .body("[0].'alpha2Code'", containsString("MN"))
                .body("[0].'alpha3Code'", containsString("MNG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("976"))
                .body("[0].'capital'", containsString("Ulan Bator"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("MN"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Eastern Asia"))
                .body("[0].'population'", numberMatches(3031099.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(46.0))
                .body("[0].'latlng'[1]", numberMatches(105.0))
                .body("[0].'demonym'", containsString("Mongolian"))
                .body("[0].'area'", numberMatches(1564110.0))
                .body("[0].'gini'", numberMatches(36.5))
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC+07:00", "UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("CHN", "RUS"))
                .body("[0].'nativeName'", containsString("Монгол улс"))
                .body("[0].'numericCode'", containsString("496"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MNT"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("mn"))
                .body("[0].'translations'.'de'", containsString("Mongolei"))
                .body("[0].'translations'.'es'", containsString("Mongolia"))
                .body("[0].'translations'.'fr'", containsString("Mongolie"))
                .body("[0].'translations'.'ja'", containsString("モンゴル"))
                .body("[0].'translations'.'it'", containsString("Mongolia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1002_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/mo?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Macau"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mo"))
                .body("[0].'alpha2Code'", containsString("MO"))
                .body("[0].'alpha3Code'", containsString("MAC"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("853"))
                .body("[0].'capital'", containsString(""))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("MO", "澳门", "Macao Special Administrative Region of the People's Republic of China", "中華人民共和國澳門特別行政區", "Região Administrativa Especial de Macau da República Popular da China"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Eastern Asia"))
                .body("[0].'population'", numberMatches(642900.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(22.16666666))
                .body("[0].'latlng'[1]", numberMatches(113.55))
                .body("[0].'demonym'", containsString("Chinese"))
                .body("[0].'area'", numberMatches(30.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("CHN"))
                .body("[0].'nativeName'", containsString("澳門"))
                .body("[0].'numericCode'", containsString("446"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MOP"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("zh", "pt"))
                .body("[0].'translations'.'de'", containsString("Macao"))
                .body("[0].'translations'.'es'", containsString("Macao"))
                .body("[0].'translations'.'fr'", containsString("Macao"))
                .body("[0].'translations'.'ja'", containsString("マカオ"))
                .body("[0].'translations'.'it'", containsString("Macao"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1003_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/30?fields=callingCodes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("30"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1004_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/lt")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(9))
                .body("[0].'name'", containsString("Gibraltar"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gi"))
                .body("[0].'alpha2Code'", containsString("GI"))
                .body("[0].'alpha3Code'", containsString("GIB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("350"))
                .body("[0].'capital'", containsString("Gibraltar"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("GI"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(33140.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(36.13333333))
                .body("[0].'latlng'[1]", numberMatches(-5.35))
                .body("[0].'demonym'", containsString("Gibraltar"))
                .body("[0].'area'", numberMatches(6.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("ESP"))
                .body("[0].'nativeName'", containsString("Gibraltar"))
                .body("[0].'numericCode'", containsString("292"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("GIP"))
                .body("[0].'currencies'[0].'name'", containsString("Gibraltar pound"))
                .body("[0].'currencies'[0].'symbol'", containsString("£"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("en"))
                .body("[0].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[0].'name'", containsString("English"))
                .body("[0].'languages'[0].'nativeName'", containsString("English"))
                .body("[0].'translations'.'de'", containsString("Gibraltar"))
                .body("[0].'translations'.'es'", containsString("Gibraltar"))
                .body("[0].'translations'.'fr'", containsString("Gibraltar"))
                .body("[0].'translations'.'ja'", containsString("ジブラルタル"))
                .body("[0].'translations'.'it'", containsString("Gibilterra"))
                .body("[0].'translations'.'br'", containsString("Gibraltar"))
                .body("[0].'translations'.'pt'", containsString("Gibraltar"))
                .body("[0].'translations'.'nl'", containsString("Gibraltar"))
                .body("[0].'translations'.'hr'", containsString("Gibraltar"))
                .body("[0].'translations'.'fa'", containsString("جبل‌طارق"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/gib.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("EU"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("European Union"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[0].'cioc'", containsString(""))
                .body("[1].'name'", containsString("Malta"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".mt"))
                .body("[1].'alpha2Code'", containsString("MT"))
                .body("[1].'alpha3Code'", containsString("MLT"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("356"))
                .body("[1].'capital'", containsString("Valletta"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("MT", "Republic of Malta", "Repubblika ta' Malta"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Southern Europe"))
                .body("[1].'population'", numberMatches(425384.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(35.83333333))
                .body("[1].'latlng'[1]", numberMatches(14.58333333))
                .body("[1].'demonym'", containsString("Maltese"))
                .body("[1].'area'", numberMatches(316.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+01:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Malta"))
                .body("[1].'numericCode'", containsString("470"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("EUR"))
                .body("[1].'currencies'[0].'name'", containsString("Euro"))
                .body("[1].'currencies'[0].'symbol'", containsString("€"))
                .body("[1].'languages'.size()", equalTo(2))
                .body("[1].'languages'[0].'iso639_1'", containsString("mt"))
                .body("[1].'languages'[0].'iso639_2'", containsString("mlt"))
                .body("[1].'languages'[0].'name'", containsString("Maltese"))
                .body("[1].'languages'[0].'nativeName'", containsString("Malti"))
                .body("[1].'languages'[1].'iso639_1'", containsString("en"))
                .body("[1].'languages'[1].'iso639_2'", containsString("eng"))
                .body("[1].'languages'[1].'name'", containsString("English"))
                .body("[1].'languages'[1].'nativeName'", containsString("English"))
                .body("[1].'translations'.'de'", containsString("Malta"))
                .body("[1].'translations'.'es'", containsString("Malta"))
                .body("[1].'translations'.'fr'", containsString("Malte"))
                .body("[1].'translations'.'ja'", containsString("マルタ"))
                .body("[1].'translations'.'it'", containsString("Malta"))
                .body("[1].'translations'.'br'", containsString("Malta"))
                .body("[1].'translations'.'pt'", containsString("Malta"))
                .body("[1].'translations'.'nl'", containsString("Malta"))
                .body("[1].'translations'.'hr'", containsString("Malta"))
                .body("[1].'translations'.'fa'", containsString("مالت"))
                .body("[1].'flag'", containsString("https://restcountries.eu/data/mlt.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[0].'acronym'", containsString("EU"))
                .body("[1].'regionalBlocs'[0].'name'", containsString("European Union"))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[1].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[1].'cioc'", containsString("MLT"))
                .body("[2].'name'", containsString("Bahamas"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".bs"))
                .body("[2].'alpha2Code'", containsString("BS"))
                .body("[2].'alpha3Code'", containsString("BHS"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("1"))
                .body("[2].'capital'", containsString("Nassau"))
                .body("[2].'altSpellings'.size()", equalTo(2))
                .body("[2].'altSpellings'", hasItems("BS", "Commonwealth of the Bahamas"))
                .body("[2].'region'", containsString("Americas"))
                .body("[2].'subregion'", containsString("Caribbean"))
                .body("[2].'population'", numberMatches(378040.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(24.25))
                .body("[2].'latlng'[1]", numberMatches(-76.0))
                .body("[2].'demonym'", containsString("Bahamian"))
                .body("[2].'area'", numberMatches(13943.0))
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC-05:00"))
                .body("[2].'borders'.size()", equalTo(0))
                .body("[2].'nativeName'", containsString("Bahamas"))
                .body("[2].'numericCode'", containsString("044"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'[0].'code'", containsString("BSD"))
                .body("[2].'currencies'[0].'name'", containsString("Bahamian dollar"))
                .body("[2].'currencies'[0].'symbol'", containsString("$"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'[0].'iso639_1'", containsString("en"))
                .body("[2].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[2].'languages'[0].'name'", containsString("English"))
                .body("[2].'languages'[0].'nativeName'", containsString("English"))
                .body("[2].'translations'.'de'", containsString("Bahamas"))
                .body("[2].'translations'.'es'", containsString("Bahamas"))
                .body("[2].'translations'.'fr'", containsString("Bahamas"))
                .body("[2].'translations'.'ja'", containsString("バハマ"))
                .body("[2].'translations'.'it'", containsString("Bahamas"))
                .body("[2].'translations'.'br'", containsString("Bahamas"))
                .body("[2].'translations'.'pt'", containsString("Baamas"))
                .body("[2].'translations'.'nl'", containsString("Bahama’s"))
                .body("[2].'translations'.'hr'", containsString("Bahami"))
                .body("[2].'translations'.'fa'", containsString("باهاما"))
                .body("[2].'flag'", containsString("https://restcountries.eu/data/bhs.svg"))
                .body("[2].'regionalBlocs'.size()", equalTo(1))
                .body("[2].'regionalBlocs'[0].'acronym'", containsString("CARICOM"))
                .body("[2].'regionalBlocs'[0].'name'", containsString("Caribbean Community"))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[2].'regionalBlocs'[0].'otherNames'.size()", equalTo(3))
                .body("[2].'regionalBlocs'[0].'otherNames'", hasItems("Comunidad del Caribe", "Communauté Caribéenne", "Caribische Gemeenschap"))
                .body("[2].'cioc'", containsString("BAH"))
                ; // Skipping assertions on the remaining 6 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1005_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/ly?" + 
                    "fields=Glhp&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1006_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/ma?" + 
                    "fields=Glhp&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(42))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 39 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1007_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/291?fields=_EM_4148_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1008_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/297?fields=altSpellings")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("AW"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1009_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/298?fields=altSpellings")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("FO", "Føroyar", "Færøerne"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1010_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/299?fields=callingCodes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("299"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1011_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/oslo?fields=_EM_16661_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1012_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/papua%20new%20guinean?fields=_EM_4167_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1013_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/ouagadougou?fields=topLevelDomain")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bf"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1014_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/palikir?fields=alpha2Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha2Code'", containsString("FM"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1015_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/paramaribo?fields=alpha3Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha3Code'", containsString("SUR"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1016_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/peruvian?fields=callingCodes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("51"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1017_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/portuguese?fields=capital")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'capital'", containsString("Lisbon"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1018_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/puerto%20rican?fields=name")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Puerto Rico"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1019_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/alofi")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Niue"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".nu"))
                .body("[0].'alpha2Code'", containsString("NU"))
                .body("[0].'alpha3Code'", containsString("NIU"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("683"))
                .body("[0].'capital'", containsString("Alofi"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("NU"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Polynesia"))
                .body("[0].'population'", numberMatches(1613.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-19.03333333))
                .body("[0].'latlng'[1]", numberMatches(-169.86666666))
                .body("[0].'demonym'", containsString("Niuean"))
                .body("[0].'area'", numberMatches(260.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-11:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Niuē"))
                .body("[0].'numericCode'", containsString("570"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("NZD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Niue"))
                .body("[0].'translations'.'es'", containsString("Niue"))
                .body("[0].'translations'.'fr'", containsString("Niue"))
                .body("[0].'translations'.'ja'", containsString("ニウエ"))
                .body("[0].'translations'.'it'", containsString("Niue"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1020_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/amsterdam")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Netherlands"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".nl"))
                .body("[0].'alpha2Code'", containsString("NL"))
                .body("[0].'alpha3Code'", containsString("NLD"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("31"))
                .body("[0].'capital'", containsString("Amsterdam"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("NL", "Holland", "Nederland"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(1.6916E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(52.5))
                .body("[0].'latlng'[1]", numberMatches(5.75))
                .body("[0].'demonym'", containsString("Dutch"))
                .body("[0].'area'", numberMatches(41850.0))
                .body("[0].'gini'", numberMatches(30.9))
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC-04:00", "UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("BEL", "DEU"))
                .body("[0].'nativeName'", containsString("Nederland"))
                .body("[0].'numericCode'", containsString("528"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("nl"))
                .body("[0].'translations'.'de'", containsString("Niederlande"))
                .body("[0].'translations'.'es'", containsString("Países Bajos"))
                .body("[0].'translations'.'fr'", containsString("Pays-Bas"))
                .body("[0].'translations'.'ja'", containsString("オランダ"))
                .body("[0].'translations'.'it'", containsString("Paesi Bassi"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1021_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/ankara")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Turkey"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".tr"))
                .body("[0].'alpha2Code'", containsString("TR"))
                .body("[0].'alpha3Code'", containsString("TUR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("90"))
                .body("[0].'capital'", containsString("Ankara"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("TR", "Turkiye", "Republic of Turkey", "Türkiye Cumhuriyeti"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(7.7695904E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(39.0))
                .body("[0].'latlng'[1]", numberMatches(35.0))
                .body("[0].'demonym'", containsString("Turkish"))
                .body("[0].'area'", numberMatches(783562.0))
                .body("[0].'gini'", numberMatches(39.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(8))
                .body("[0].'borders'", hasItems("ARM", "AZE", "BGR", "GEO", "GRC", "IRN", "IRQ", "SYR"))
                .body("[0].'nativeName'", containsString("Türkiye"))
                .body("[0].'numericCode'", containsString("792"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("TRY"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("tr"))
                .body("[0].'translations'.'de'", containsString("Türkei"))
                .body("[0].'translations'.'es'", containsString("Turquía"))
                .body("[0].'translations'.'fr'", containsString("Turquie"))
                .body("[0].'translations'.'ja'", containsString("トルコ"))
                .body("[0].'translations'.'it'", containsString("Turchia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1022_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/antananarivo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Madagascar"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mg"))
                .body("[0].'alpha2Code'", containsString("MG"))
                .body("[0].'alpha3Code'", containsString("MDG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("261"))
                .body("[0].'capital'", containsString("Antananarivo"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("MG", "Republic of Madagascar", "Repoblikan'i Madagasikara", "République de Madagascar"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(2.2434363E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-20.0))
                .body("[0].'latlng'[1]", numberMatches(47.0))
                .body("[0].'demonym'", containsString("Malagasy"))
                .body("[0].'area'", numberMatches(587041.0))
                .body("[0].'gini'", numberMatches(44.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Madagasikara"))
                .body("[0].'numericCode'", containsString("450"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MGA"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fr", "mg"))
                .body("[0].'translations'.'de'", containsString("Madagaskar"))
                .body("[0].'translations'.'es'", containsString("Madagascar"))
                .body("[0].'translations'.'fr'", containsString("Madagascar"))
                .body("[0].'translations'.'ja'", containsString("マダガスカル"))
                .body("[0].'translations'.'it'", containsString("Madagascar"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1023_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/philipsburg?fields=alpha3Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha3Code'", containsString("SXM"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1024_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/rwandan?fields=topLevelDomain")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".rw"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1025_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/jersey?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Jersey"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".je"))
                .body("[0].'alpha2Code'", containsString("JE"))
                .body("[0].'alpha3Code'", containsString("JEY"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("44"))
                .body("[0].'capital'", containsString("Saint Helier"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("JE", "Bailiwick of Jersey", "Bailliage de Jersey", "Bailliage dé Jèrri"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(99000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(49.25))
                .body("[0].'latlng'[1]", numberMatches(-2.16666666))
                .body("[0].'demonym'", containsString("Channel Islander"))
                .body("[0].'area'", numberMatches(116.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Jersey"))
                .body("[0].'numericCode'", containsString("832"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("GBP"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "fr"))
                .body("[0].'translations'.'de'", containsString("Jersey"))
                .body("[0].'translations'.'es'", containsString("Jersey"))
                .body("[0].'translations'.'fr'", containsString("Jersey"))
                .body("[0].'translations'.'ja'", containsString("ジャージー"))
                .body("[0].'translations'.'it'", containsString("Isola di Jersey"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1026_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/jo?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("Jordan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".jo"))
                .body("[0].'alpha2Code'", containsString("JO"))
                .body("[0].'alpha3Code'", containsString("JOR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("962"))
                .body("[0].'capital'", containsString("Amman"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("JO", "Hashemite Kingdom of Jordan", "al-Mamlakah al-Urdunīyah al-Hāshimīyah"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(6767600.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(31.0))
                .body("[0].'latlng'[1]", numberMatches(36.0))
                .body("[0].'demonym'", containsString("Jordanian"))
                .body("[0].'area'", numberMatches(89342.0))
                .body("[0].'gini'", numberMatches(35.4))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("IRQ", "ISR", "SAU", "SYR"))
                .body("[0].'nativeName'", containsString("الأردن"))
                .body("[0].'numericCode'", containsString("400"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("JOD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Jordanien"))
                .body("[0].'translations'.'es'", containsString("Jordania"))
                .body("[0].'translations'.'fr'", containsString("Jordanie"))
                .body("[0].'translations'.'ja'", containsString("ヨルダン"))
                .body("[0].'translations'.'it'", containsString("Giordania"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Iran"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ir"))
                .body("[1].'alpha2Code'", containsString("IR"))
                .body("[1].'alpha3Code'", containsString("IRN"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("98"))
                .body("[1].'capital'", containsString("Tehran"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("IR", "Islamic Republic of Iran", "Jomhuri-ye Eslāmi-ye Irān"))
                .body("[1].'region'", containsString("Asia"))
                .body("[1].'subregion'", containsString("Southern Asia"))
                .body("[1].'population'", numberMatches(7.85725E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(32.0))
                .body("[1].'latlng'[1]", numberMatches(53.0))
                .body("[1].'demonym'", containsString("Iranian"))
                .body("[1].'area'", numberMatches(1648195.0))
                .body("[1].'gini'", numberMatches(38.3))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+03:30"))
                .body("[1].'borders'.size()", equalTo(7))
                .body("[1].'borders'", hasItems("AFG", "ARM", "AZE", "IRQ", "PAK", "TUR", "TKM"))
                .body("[1].'nativeName'", containsString("ایران"))
                .body("[1].'numericCode'", containsString("364"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("IRR"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("fa"))
                .body("[1].'translations'.'de'", containsString("Iran"))
                .body("[1].'translations'.'es'", containsString("Iran"))
                .body("[1].'translations'.'fr'", containsString("Iran"))
                .body("[1].'translations'.'ja'", containsString("イラン・イスラム共和国"))
                .body("[1].'translations'.'it'", nullValue())
                .body("[1].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1027_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/jordan?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Jordan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".jo"))
                .body("[0].'alpha2Code'", containsString("JO"))
                .body("[0].'alpha3Code'", containsString("JOR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("962"))
                .body("[0].'capital'", containsString("Amman"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("JO", "Hashemite Kingdom of Jordan", "al-Mamlakah al-Urdunīyah al-Hāshimīyah"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(6767600.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(31.0))
                .body("[0].'latlng'[1]", numberMatches(36.0))
                .body("[0].'demonym'", containsString("Jordanian"))
                .body("[0].'area'", numberMatches(89342.0))
                .body("[0].'gini'", numberMatches(35.4))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("IRQ", "ISR", "SAU", "SYR"))
                .body("[0].'nativeName'", containsString("الأردن"))
                .body("[0].'numericCode'", containsString("400"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("JOD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Jordanien"))
                .body("[0].'translations'.'es'", containsString("Jordania"))
                .body("[0].'translations'.'fr'", containsString("Jordanie"))
                .body("[0].'translations'.'ja'", containsString("ヨルダン"))
                .body("[0].'translations'.'it'", containsString("Giordania"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1028_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/kazakhstan?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Kazakhstan"))
                .body("[0].'topLevelDomain'.size()", equalTo(2))
                .body("[0].'topLevelDomain'", hasItems(".kz", ".қаз"))
                .body("[0].'alpha2Code'", containsString("KZ"))
                .body("[0].'alpha3Code'", containsString("KAZ"))
                .body("[0].'callingCodes'.size()", equalTo(2))
                .body("[0].'callingCodes'", hasItems("76", "77"))
                .body("[0].'capital'", containsString("Astana"))
                .body("[0].'altSpellings'.size()", equalTo(8))
                .body("[0].'altSpellings'", hasItems("KZ", "Qazaqstan", "Казахстан", "Republic of Kazakhstan", "Қазақстан Республикасы", "Qazaqstan Respublïkası", "Республика Казахстан", "Respublika Kazakhstan"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Central Asia"))
                .body("[0].'population'", numberMatches(1.75412E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(48.0))
                .body("[0].'latlng'[1]", numberMatches(68.0))
                .body("[0].'demonym'", containsString("Kazakhstani"))
                .body("[0].'area'", numberMatches(2724900.0))
                .body("[0].'gini'", numberMatches(29.0))
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC+05:00", "UTC+06:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("CHN", "KGZ", "RUS", "TKM", "UZB"))
                .body("[0].'nativeName'", containsString("Қазақстан"))
                .body("[0].'numericCode'", containsString("398"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("KZT"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("kk", "ru"))
                .body("[0].'translations'.'de'", containsString("Kasachstan"))
                .body("[0].'translations'.'es'", containsString("Kazajistán"))
                .body("[0].'translations'.'fr'", containsString("Kazakhstan"))
                .body("[0].'translations'.'ja'", containsString("カザフスタン"))
                .body("[0].'translations'.'it'", containsString("Kazakistan"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1029_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/ke?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Kenya"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ke"))
                .body("[0].'alpha2Code'", containsString("KE"))
                .body("[0].'alpha3Code'", containsString("KEN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("254"))
                .body("[0].'capital'", containsString("Nairobi"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("KE", "Republic of Kenya", "Jamhuri ya Kenya"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(4.605E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(1.0))
                .body("[0].'latlng'[1]", numberMatches(38.0))
                .body("[0].'demonym'", containsString("Kenyan"))
                .body("[0].'area'", numberMatches(580367.0))
                .body("[0].'gini'", numberMatches(47.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("ETH", "SOM", "SSD", "TZA", "UGA"))
                .body("[0].'nativeName'", containsString("Kenya"))
                .body("[0].'numericCode'", containsString("404"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("KES"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "sw"))
                .body("[0].'translations'.'de'", containsString("Kenia"))
                .body("[0].'translations'.'es'", containsString("Kenia"))
                .body("[0].'translations'.'fr'", containsString("Kenya"))
                .body("[0].'translations'.'ja'", containsString("ケニア"))
                .body("[0].'translations'.'it'", containsString("Kenya"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1030_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/kenya?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Kenya"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ke"))
                .body("[0].'alpha2Code'", containsString("KE"))
                .body("[0].'alpha3Code'", containsString("KEN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("254"))
                .body("[0].'capital'", containsString("Nairobi"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("KE", "Republic of Kenya", "Jamhuri ya Kenya"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(4.605E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(1.0))
                .body("[0].'latlng'[1]", numberMatches(38.0))
                .body("[0].'demonym'", containsString("Kenyan"))
                .body("[0].'area'", numberMatches(580367.0))
                .body("[0].'gini'", numberMatches(47.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("ETH", "SOM", "SSD", "TZA", "UGA"))
                .body("[0].'nativeName'", containsString("Kenya"))
                .body("[0].'numericCode'", containsString("404"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("KES"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "sw"))
                .body("[0].'translations'.'de'", containsString("Kenia"))
                .body("[0].'translations'.'es'", containsString("Kenia"))
                .body("[0].'translations'.'fr'", containsString("Kenya"))
                .body("[0].'translations'.'ja'", containsString("ケニア"))
                .body("[0].'translations'.'it'", containsString("Kenya"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1031_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/kg?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Kyrgyzstan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".kg"))
                .body("[0].'alpha2Code'", containsString("KG"))
                .body("[0].'alpha3Code'", containsString("KGZ"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("996"))
                .body("[0].'capital'", containsString("Bishkek"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("KG", "Киргизия", "Kyrgyz Republic", "Кыргыз Республикасы", "Kyrgyz Respublikasy"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Central Asia"))
                .body("[0].'population'", numberMatches(5944400.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(41.0))
                .body("[0].'latlng'[1]", numberMatches(75.0))
                .body("[0].'demonym'", containsString("Kirghiz"))
                .body("[0].'area'", numberMatches(199951.0))
                .body("[0].'gini'", numberMatches(36.2))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+06:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("CHN", "KAZ", "TJK", "UZB"))
                .body("[0].'nativeName'", containsString("Кыргызстан"))
                .body("[0].'numericCode'", containsString("417"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("KGS"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("ky", "ru"))
                .body("[0].'translations'.'de'", containsString("Kirgisistan"))
                .body("[0].'translations'.'es'", containsString("Kirguizistán"))
                .body("[0].'translations'.'fr'", containsString("Kirghizistan"))
                .body("[0].'translations'.'ja'", containsString("キルギス"))
                .body("[0].'translations'.'it'", containsString("Kirghizistan"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1032_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/ki?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Kiribati"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ki"))
                .body("[0].'alpha2Code'", containsString("KI"))
                .body("[0].'alpha3Code'", containsString("KIR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("686"))
                .body("[0].'capital'", containsString("South Tarawa"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("KI", "Republic of Kiribati", "Ribaberiki Kiribati"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Micronesia"))
                .body("[0].'population'", numberMatches(106461.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(1.41666666))
                .body("[0].'latlng'[1]", numberMatches(173.0))
                .body("[0].'demonym'", containsString("I-Kiribati"))
                .body("[0].'area'", numberMatches(811.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(3))
                .body("[0].'timezones'", hasItems("UTC+12:00", "UTC+13:00", "UTC+14:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Kiribati"))
                .body("[0].'numericCode'", containsString("296"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AUD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Kiribati"))
                .body("[0].'translations'.'es'", containsString("Kiribati"))
                .body("[0].'translations'.'fr'", containsString("Kiribati"))
                .body("[0].'translations'.'ja'", containsString("キリバス"))
                .body("[0].'translations'.'it'", containsString("Kiribati"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1033_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/alpha/_EM_0_XYZ_?EMextraParam123=_EM_1_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1034_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/alpha/S")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1035_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha/BBTDi_cx2")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1036_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/alpha/P?fields=1nYfBMJI_X")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1037_getOnV2CurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Usbekistan")
                .get(baseUrlOfSut + "/rest/v2/currency/X7")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1038_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_7_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/currency/SLLY?EMextraParam123=_EM_6_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1039_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/alpha/e40ujf%5CL")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1040_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/N%5C?" + 
                    "fields=H03unRZTwlKaePEN&" + 
                    "EMextraParam123=_EM_340_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1041_getOnV2LangWithQueryParamsEmptyFieldsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/lang/eII%5CE?" + 
                    "fields=&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1042_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/alpha/P%5C?" + 
                    "fields=1nYfBMJI_X&" + 
                    "EMextraParam123=_EM_56_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1043_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/Ui%5CdUe%209eUUca?fields=_EM_10739_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1044_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/9%5C6")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1045_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/2V%5C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1046_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/PZ%5Cyn=Bia")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1047_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/region/As%5Ca")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1048_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/A%5Cia?fields=aMymdn")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1049_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/Co%5CombO")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1050_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/Ne%5Cal")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1051_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/currency/%5CUA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1052_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_8440_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1053_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_7_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/currency/SHL?EMextraParam123=_EM_6_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1054_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_10_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_8_XYZ_?" + 
                    "fullText=true&" + 
                    "EMextraParam123=_EM_9_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1055_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_13_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_11_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1056_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_52_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1057_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/region/_EM_14_XYZ_?EMextraParam123=_EM_15_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1058_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/_EM_16_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1059_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_268_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1060_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_8828_XYZ_?" + 
                    "fields=alpha3Code&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1061_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_7489_XYZ_?fields=_EM_7391_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1062_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_4245_XYZ_?fields=altSpellings")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1063_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_26_XYZ_?fields=_EM_25_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1064_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/_EM_54_XYZ_?" + 
                    "fields=_EM_53_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1065_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_5578_XYZ_?fields=_EM_5577_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1066_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_33_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_31_XYZ_?" + 
                    "fields=_EM_30_XYZ_&" + 
                    "EMextraParam123=_EM_32_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1067_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/lang/jkf?" + 
                    "fields=VVenuH3PGF6D&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1068_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_5580_XYZ_?fields=translations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1069_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/_EM_37_XYZ_?fields=_EM_36_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1070_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_48_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_46_XYZ_?EMextraParam123=_EM_47_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1071_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/lang/_EM_80_XYZ_?fields=_EM_79_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1072_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/P=N?fields=capital")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1073_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_138_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1074_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_152_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_150_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1075_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/subregion/_EM_162_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1076_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/subregion/_EM_176_XYZ_?EMextraParam123=_EM_177_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1077_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_184_XYZ_?fields=_EM_183_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1078_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Vereinigtes Königreich")
                .get(baseUrlOfSut + "/rest/v1/region/_EM_186_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1079_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_202_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1080_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_208_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1081_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_210_XYZ_?fields=jyrqrJP_wA")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1082_getOnV2RegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/_EM_224_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1083_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_229_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1084_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/_EM_234_XYZ_?EMextraParam123=_EM_235_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1085_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_242_XYZ_?fields=X")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1086_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/region/_EM_250_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1087_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_275_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/alpha/DI")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1088_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/_EM_283_XYZ_?fields=TIiVnKxpj")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1089_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_290_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1090_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_293_XYZ_?fields=bQSqfYpMzuM")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1091_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/_EM_312_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1092_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_361_XYZ_?fields=NJgqFt")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1093_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_374_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1094_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_376_XYZ_?EMextraParam123=_EM_377_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1095_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_381_XYZ_?" + 
                    "fields=_EM_380_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1096_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_384_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1097_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Ukraine")
                .get(baseUrlOfSut + "/rest/v1/subregion/_EM_410_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1098_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_439_XYZ_?fields=_EM_438_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1099_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_458_XYZ_?EMextraParam123=_EM_459_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1100_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_478_XYZ_?EMextraParam123=_EM_479_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1101_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_491_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/subregion/_EM_490_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1102_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_498_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1103_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_499_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1104_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_509_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1105_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_514_XYZ_?" + 
                    "fullText=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1106_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_533_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_532_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1107_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Saint Vincent und die Grenadinen")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_546_XYZ_?EMextraParam123=_EM_547_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1108_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_559_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1109_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_572_XYZ_?EMextraParam123=_EM_573_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1110_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_578_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1111_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_583_XYZ_?" + 
                    "fields=VdaBOSb&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1112_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_584_XYZ_?" + 
                    "fullText=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1113_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_611_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1114_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/_EM_612_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1115_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/_EM_617_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1116_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/region/_EM_619_XYZ_?EMextraParam123=_EM_620_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1117_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_622_XYZ_?EMextraParam123=_EM_623_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1118_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_653_XYZ_?EMextraParam123=_EM_654_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1119_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_658_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_656_XYZ_?EMextraParam123=_EM_657_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1120_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/_EM_669_XYZ_?" + 
                    "fields=_EM_668_XYZ_&" + 
                    "EMextraParam123=_EM_670_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1121_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_674_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_672_XYZ_?EMextraParam123=_EM_673_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1122_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_699_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_697_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1123_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_702_XYZ_?" + 
                    "fullText=true&" + 
                    "EMextraParam123=_EM_703_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1124_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Swasiland")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_705_XYZ_?EMextraParam123=_EM_706_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1125_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_707_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1126_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_725_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_724_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1127_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_726_XYZ_?fields=TvtWJVFI")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1128_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_741_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_739_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1129_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_747_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_745_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1130_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_750_XYZ_?EMextraParam123=_EM_751_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1131_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_754_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1132_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Tokelau")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_760_XYZ_?" + 
                    "fullText=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1133_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_766_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1134_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_768_XYZ_?" + 
                    "fields=Lc&" + 
                    "EMextraParam123=_EM_769_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1135_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_784_XYZ_?EMextraParam123=_EM_785_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1136_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_809_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/subregion/_EM_807_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1137_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_824_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1138_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_833_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1139_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_834_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1140_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_841_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1141_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_843_XYZ_?" + 
                    "fields=_EM_842_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1142_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_860_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_859_XYZ_?" + 
                    "fields=CGOs4d&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1143_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_865_XYZ_?fields=q2pJBr")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1144_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/_EM_870_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1145_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Turkmenistan")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_871_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1146_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_876_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1147_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_883_XYZ_?" + 
                    "fields=V9cU&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1148_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_890_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_888_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1149_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_902_XYZ_?" + 
                    "fields=JdLyjXl&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1150_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Turks- und Caicosinseln")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_909_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1151_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_922_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1152_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/_EM_942_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1153_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_947_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1154_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_954_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1155_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_962_XYZ_?EMextraParam123=_EM_963_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1156_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_729_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_970_XYZ_?" + 
                    "fullText=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1157_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_527_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_973_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1158_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_983_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1159_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_989_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1160_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Puerto Rico")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_996_XYZ_?fields=_EM_995_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1161_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_999_XYZ_?fields=_EM_998_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1162_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/region/_EM_1003_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1163_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1026_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_1024_XYZ_?" + 
                    "fullText=true&" + 
                    "EMextraParam123=_EM_1025_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1164_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/region/_EM_1032_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1165_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha/S3?fields=_EM_803_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1166_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_1057_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1167_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_1072_XYZ_?EMextraParam123=_EM_1073_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1168_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1088_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_1086_XYZ_?" + 
                    "fields=3RdxECBSfxz&" + 
                    "EMextraParam123=_EM_1087_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1169_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_1095_XYZ_?fields=DWo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1170_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_1101_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1171_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_1126_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1172_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Réunion")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_1133_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1173_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_1160_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1174_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_1177_XYZ_?EMextraParam123=_EM_1178_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1175_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_1216_XYZ_?" + 
                    "fields=_EM_1215_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1176_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_1229_XYZ_?EMextraParam123=_EM_1230_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1177_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_1234_XYZ_?EMextraParam123=_EM_1235_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1178_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1245_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_1244_XYZ_?" + 
                    "fields=Op3x&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1179_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_1246_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1180_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1248_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_1247_XYZ_?fields=yeg")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1181_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_1272_XYZ_?" + 
                    "fields=_EM_1271_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1182_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_1275_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1183_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1280_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_1279_XYZ_?" + 
                    "fields=_EM_1278_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1184_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_1286_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1185_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_1290_XYZ_?" + 
                    "fullText=false&" + 
                    "EMextraParam123=_EM_1291_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1186_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1298_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_1296_XYZ_?" + 
                    "fields=_EM_1295_XYZ_&" + 
                    "EMextraParam123=_EM_1297_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1187_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_1301_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1188_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1304_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_1302_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1189_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1324_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_1323_XYZ_?" + 
                    "fields=Lac17IuAug9UN4&" + 
                    "fullText=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1190_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Samoa")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_1328_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1191_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_1334_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1192_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_1351_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1193_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_1359_XYZ_?EMextraParam123=_EM_1360_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1194_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_1385_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1195_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Südgeorgien und die Südlichen Sandwichinseln")
                .get(baseUrlOfSut + "/rest/v2/region/_EM_1387_XYZ_?fields=DLZ69ZWxeCg")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1196_getOnV2RegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/_EM_2849_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1197_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Saint-Pierre und Miquelon")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_1412_XYZ_?fields=_EM_1411_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1198_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_1417_XYZ_?EMextraParam123=_EM_1418_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1199_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_1424_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1200_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_1444_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1201_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_1452_XYZ_?EMextraParam123=_EM_1453_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1202_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/region/_EM_1463_XYZ_?fields=_EM_1462_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1203_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_1497_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1204_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1518_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_1516_XYZ_?EMextraParam123=_EM_1517_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1205_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_1520_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1206_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Slowenien")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_1541_XYZ_?EMextraParam123=_EM_1542_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1207_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1589_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_1588_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1208_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_1599_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1209_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/_EM_1606_XYZ_?EMextraParam123=_EM_1607_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1210_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_1615_XYZ_?EMextraParam123=_EM_1616_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1211_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_1617_XYZ_?EMextraParam123=_EM_1618_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1212_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_1642_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1213_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_1660_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1214_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_1681_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1215_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1704_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_1703_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1216_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_1713_XYZ_?" + 
                    "fields=lCae5laMVSE9tt&" + 
                    "fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1217_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_1737_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1218_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_1747_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1219_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_1752_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1220_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Malaysia")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_1754_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1221_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_1760_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1222_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_1763_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1223_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_1771_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1224_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_1786_XYZ_?" + 
                    "fullText=false&" + 
                    "EMextraParam123=_EM_1787_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1225_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_1810_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1226_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_1837_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1227_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Ruanda")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_1848_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1228_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_1851_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1229_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/_EM_1856_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1230_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_1880_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1231_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_1890_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1232_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_1895_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1233_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_1899_XYZ_?EMextraParam123=_EM_1900_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1234_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1932_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/subregion/_EM_1930_XYZ_?EMextraParam123=_EM_1931_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1235_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_1935_XYZ_?EMextraParam123=_EM_1936_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1236_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1941_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_1939_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1237_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_1944_XYZ_?EMextraParam123=_EM_1945_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1238_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1955_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_1953_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1239_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_1989_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1240_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_2000_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1241_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_2005_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1242_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_2012_XYZ_?" + 
                    "fullText=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1243_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_2021_XYZ_?" + 
                    "fields=_EM_2020_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1244_getOnRegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/_EM_3275_XYZ_?" + 
                    "fields=_EM_3274_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1245_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_2047_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1246_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_2053_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1247_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_2075_XYZ_?" + 
                    "fields=1SWyARyqHn&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1248_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_2113_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1249_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_2123_XYZ_?fields=F")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1250_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_2134_XYZ_?" + 
                    "fields=6LloyJ54N3Xj7bB&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1251_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2167_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_2166_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1252_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2195_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_2193_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1253_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_2208_XYZ_?EMextraParam123=_EM_2209_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1254_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2224_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_2222_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1255_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2248_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_2247_XYZ_?" + 
                    "fullText=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1256_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_2283_XYZ_?" + 
                    "fields=MZ3KaMXRP88cTOAd&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1257_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_2286_XYZ_?EMextraParam123=_EM_2287_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1258_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2293_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_2291_XYZ_?fields=_EM_2290_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1259_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2312_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_2310_XYZ_?" + 
                    "fields=jWO&" + 
                    "EMextraParam123=_EM_2311_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1260_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_2320_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1261_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_2328_XYZ_?fields=_EM_2327_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1262_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_2354_XYZ_?EMextraParam123=_EM_2317_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1263_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_2370_XYZ_?" + 
                    "fields=MPPTm0S1xlI4Afrt&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1264_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_2371_XYZ_?fields=my0K")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1265_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2375_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_2374_XYZ_?" + 
                    "fields=L1eDrDWeHPOuux&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1266_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_2382_XYZ_?fields=_EM_2381_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1267_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_2392_XYZ_?fields=_EM_2391_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1268_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_2411_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1269_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_2423_XYZ_?" + 
                    "fields=Dd7p&" + 
                    "fullText=true&" + 
                    "EMextraParam123=_EM_2424_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1270_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_2426_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1271_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_2439_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1272_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_2447_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1273_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_2461_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1274_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2478_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_2477_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1275_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_2509_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1276_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_2513_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1277_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_2517_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1278_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_2528_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1279_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_2531_XYZ_?EMextraParam123=_EM_2532_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1280_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_2545_XYZ_?EMextraParam123=_EM_2546_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1281_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_2551_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1282_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2572_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_2571_XYZ_?" + 
                    "fields=yBTCg&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1283_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_2596_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1284_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_2605_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1285_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_2661_XYZ_?fields=_EM_2660_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1286_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_2669_XYZ_?" + 
                    "fields=FtF&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1287_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_2670_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1288_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_2674_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1289_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_2702_XYZ_?fields=_EM_2701_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1290_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2749_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_2747_XYZ_?EMextraParam123=_EM_2748_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1291_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_802_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_2761_XYZ_?" + 
                    "fullText=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1292_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_2770_XYZ_?EMextraParam123=_EM_1434_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1293_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_2775_XYZ_?" + 
                    "fullText=false&" + 
                    "EMextraParam123=_EM_2776_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1294_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2783_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_2782_XYZ_?" + 
                    "fields=_EM_2781_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1295_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_2798_XYZ_?" + 
                    "fields=_EM_2797_XYZ_&" + 
                    "EMextraParam123=_EM_2799_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1296_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_2809_XYZ_?" + 
                    "fields=_EM_2808_XYZ_&" + 
                    "fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1297_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_2818_XYZ_?" + 
                    "fields=_EM_2817_XYZ_&" + 
                    "EMextraParam123=_EM_2819_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1298_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_2852_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1299_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2866_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_2865_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1300_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_2867_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1301_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/_EM_2887_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1302_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_2905_XYZ_?" + 
                    "fields=_EM_2904_XYZ_&" + 
                    "EMextraParam123=_EM_2906_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1303_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_2908_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1304_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_2914_XYZ_?EMextraParam123=_EM_2915_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1305_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_2958_XYZ_?" + 
                    "fullText=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1306_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_2977_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1307_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_2988_XYZ_?" + 
                    "fields=dPqtb7c&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1308_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_3001_XYZ_?" + 
                    "fullText=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1309_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_3006_XYZ_?EMextraParam123=_EM_3007_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1310_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_3020_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1311_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_3027_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_3025_XYZ_?" + 
                    "fields=_EM_3024_XYZ_&" + 
                    "EMextraParam123=_EM_3026_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1312_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_3028_XYZ_?" + 
                    "fields=oL7nfLvp&" + 
                    "fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1313_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_3053_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1314_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_3068_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1315_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_3078_XYZ_?" + 
                    "fields=05MT4j9JcI5Pz&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1316_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_3080_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1317_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_3090_XYZ_?EMextraParam123=_EM_3091_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1318_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_3099_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1319_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_3188_XYZ_?" + 
                    "fields=PFnOkdQ3sHrE&" + 
                    "EMextraParam123=_EM_3189_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1320_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_3192_XYZ_?EMextraParam123=_EM_3193_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1321_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_3199_XYZ_?" + 
                    "fullText=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1322_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_3200_XYZ_?EMextraParam123=_EM_3201_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1323_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Tadschikistan")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_3225_XYZ_?fields=_EM_3224_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1324_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_3231_XYZ_?fields=JJbXGkX1m_D")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1325_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_3246_XYZ_?EMextraParam123=_EM_3247_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1326_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_3281_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_3280_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1327_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_3311_XYZ_?EMextraParam123=_EM_3312_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1328_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_3411_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1329_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_3416_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1330_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_3424_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1331_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_3433_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1332_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_3436_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/subregion/_EM_3435_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1333_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_3446_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1334_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_3478_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1335_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_3524_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1336_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_3556_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_3554_XYZ_?EMextraParam123=_EM_3555_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1337_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/_EM_3564_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1338_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_3583_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1339_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_3604_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_3603_XYZ_?fields=")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1340_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_3638_XYZ_?" + 
                    "fields=kDI5T&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1341_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_3664_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_3662_XYZ_?fields=_EM_3661_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1342_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_3674_XYZ_?" + 
                    "fields=bPibvfSGJ1RR&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1343_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_3534_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_3678_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1344_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_3684_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1345_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_3687_XYZ_?EMextraParam123=_EM_3688_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1346_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_4620_XYZ_?" + 
                    "fields=Ukg&" + 
                    "fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1347_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_3747_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1348_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_3756_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1349_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_3763_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1350_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_3764_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1351_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_3772_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1352_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_3843_XYZ_?EMextraParam123=_EM_3844_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1353_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_3852_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1354_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_3859_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1355_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_3884_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_3882_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1356_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_3922_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1357_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_3925_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1358_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_3413_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_3953_XYZ_?" + 
                    "fullText=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1359_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_3964_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1360_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_3969_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1361_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_3984_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1362_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "San Marino")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_4018_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1363_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Vereinigte Arabische Emirate")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_4043_XYZ_?" + 
                    "fullText=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1364_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_4153_XYZ_?" + 
                    "fields=Pa2CUl&" + 
                    "EMextraParam123=_EM_4154_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1365_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_4164_XYZ_?" + 
                    "fields=_EM_4163_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1366_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_4169_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1367_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_4189_XYZ_?" + 
                    "fields=tR&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1368_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Somalia")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_4200_XYZ_?" + 
                    "fullText=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1369_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_4219_XYZ_?" + 
                    "fullText=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1370_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_4225_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1371_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_4249_XYZ_?EMextraParam123=_EM_4250_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1372_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_4256_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_4255_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1373_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_4267_XYZ_?fields=_EM_4266_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1374_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/_EM_4268_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1375_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_4284_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1376_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_4293_XYZ_?" + 
                    "fullText=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1377_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_4307_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1378_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_4314_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1379_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_4326_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1380_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_4330_XYZ_?" + 
                    "fields=_EM_4277_XYZ_&" + 
                    "fullText=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1381_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1670_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_4334_XYZ_?fields=_EM_4333_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1382_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_4337_XYZ_?fields=_EM_4336_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1383_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_4353_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_4352_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1384_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_4364_XYZ_?EMextraParam123=_EM_4365_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1385_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_4373_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1386_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_4391_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1387_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_4410_XYZ_?EMextraParam123=_EM_4411_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1388_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_4436_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_4435_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1389_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_4478_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1390_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_4485_XYZ_?" + 
                    "fields=_EM_4484_XYZ_&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1391_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_4499_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1392_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_4501_XYZ_?EMextraParam123=_EM_1569_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1393_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_10411_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1394_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_4513_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1395_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_4533_XYZ_?" + 
                    "fullText=false&" + 
                    "EMextraParam123=_EM_4534_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1396_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_4535_XYZ_?fields=5tOWsE_90tVQzUdt")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1397_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_4545_XYZ_?" + 
                    "fields=BEU_UU59_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1398_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_4546_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1399_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_4633_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1400_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_4660_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1401_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_4676_XYZ_?EMextraParam123=_EM_4677_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1402_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Nordkorea")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_4692_XYZ_?" + 
                    "fields=Gq&" + 
                    "fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1403_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_4695_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1404_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_4729_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1405_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_4762_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_4760_XYZ_?" + 
                    "fields=f77rnO54LFtV&" + 
                    "fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1406_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/_EM_4769_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1407_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_4783_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1408_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_4784_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1409_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_4797_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1410_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_4827_XYZ_?EMextraParam123=_EM_4828_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1411_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_4847_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1412_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_4860_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1413_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_4928_XYZ_?" + 
                    "fields=GEItS4H&" + 
                    "EMextraParam123=_EM_4929_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1414_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_4936_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_4934_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1415_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_4948_XYZ_?fields=_EM_4947_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1416_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_4985_XYZ_?" + 
                    "fields=I2_ATx&" + 
                    "fullText=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1417_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_4987_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1418_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_4999_XYZ_?EMextraParam123=_EM_5000_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1419_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_5007_XYZ_?fields=S6Xjgm266")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1420_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_5010_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1421_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_5022_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_5020_XYZ_?EMextraParam123=_EM_5021_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1422_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_5037_XYZ_?EMextraParam123=_EM_5038_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1423_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_5054_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1424_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Portugal")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_5068_XYZ_?" + 
                    "fullText=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1425_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_5082_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1426_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_5128_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1427_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/_EM_5144_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1428_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_5214_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1429_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_5233_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1430_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_5242_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1431_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_5265_XYZ_?" + 
                    "fields=_EM_5264_XYZ_&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1432_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_5275_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1433_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_5300_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1434_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_5312_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1435_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_5336_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1436_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_5376_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1437_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_5383_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1438_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_5396_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1439_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_5411_XYZ_?" + 
                    "fields=_EM_5410_XYZ_&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1440_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_5418_XYZ_?fields=_EM_3959_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1441_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_5424_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1442_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_5454_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1443_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_5459_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1444_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_5463_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1445_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_5464_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1446_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_5469_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1447_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_5497_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1448_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_5518_XYZ_?fields=_EM_5517_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1449_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_5560_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1450_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_5562_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1451_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_5573_XYZ_?" + 
                    "fields=yLtogn5VW&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1452_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_5574_XYZ_?fields=W61MRbmJ5A")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1453_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_5583_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1454_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_5593_XYZ_?fields=wEYk3SD5_jj5C")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1455_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_5633_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1456_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_5645_XYZ_?" + 
                    "fields=TeLn&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1457_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_5695_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1458_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_5725_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1459_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_5726_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1460_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_5745_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1461_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_5752_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1462_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_5755_XYZ_?" + 
                    "fields=UufAA3Leab45t&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1463_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_5758_XYZ_?" + 
                    "fields=_EM_5757_XYZ_&" + 
                    "fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1464_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_5764_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1465_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_5807_XYZ_?fields=_EM_5806_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1466_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_5852_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1467_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_5900_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1468_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_5940_XYZ_?" + 
                    "fields=_EM_5939_XYZ_&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1469_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_5950_XYZ_?fields=_EM_2725_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1470_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_5995_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1471_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_5999_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1472_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_6025_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1473_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_6026_XYZ_?fields=mXNgOZ7T")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1474_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_6028_XYZ_?fields=_EM_4227_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1475_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_6038_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1476_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_6071_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1477_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_6075_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1478_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_6087_XYZ_?fields=DsyaY")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1479_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_6118_XYZ_?fields=_EM_5722_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1480_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_6120_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1481_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_6198_XYZ_?" + 
                    "fields=_EM_6197_XYZ_&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1482_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_6205_XYZ_?fields=_EM_4441_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1483_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_6253_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1484_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_6255_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1485_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_6277_XYZ_?" + 
                    "fields=LYFioIBmpjW8ms&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1486_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_6281_XYZ_?" + 
                    "fields=yLtogn5VW&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1487_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_6285_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1488_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_6290_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1489_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_6295_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1490_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_6305_XYZ_?fields=J9")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1491_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_6307_XYZ_?fields=jSp2E0rNJvhnlYAO")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1492_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_6311_XYZ_?fields=JLRuUY1TP_nCKI9")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1493_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_6314_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1494_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_6319_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1495_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_6341_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1496_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_6382_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1497_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_6394_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1498_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_6408_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1499_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_6426_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1500_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_6433_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1501_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_6444_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1502_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_6459_XYZ_?fields=Glh")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1503_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_6462_XYZ_?fields=_EM_4520_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1504_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_6516_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1505_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_6527_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1506_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_6536_XYZ_?fields=NpOr")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1507_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_6539_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1508_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_6555_XYZ_?" + 
                    "fields=_EM_3794_XYZ_&" + 
                    "fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1509_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_6582_XYZ_?fields=MZ3KaMXRP88cTOAd")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1510_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_6608_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1511_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/_EM_6626_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1512_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_6629_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1513_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_6633_XYZ_?fields=PTvQH2a")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1514_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_6636_XYZ_?" + 
                    "fields=TeLn&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1515_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_6637_XYZ_?fields=627TVQwZ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1516_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_6641_XYZ_?fields=_EM_6640_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1517_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_6642_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1518_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_6658_XYZ_?fields=_EM_6657_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1519_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_6678_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1520_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/_EM_6709_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1521_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_6710_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1522_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_6715_XYZ_?" + 
                    "fields=HZ&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1523_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_6724_XYZ_?fields=D")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1524_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_6732_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1525_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_6777_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1526_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_6789_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1527_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_6797_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1528_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_6829_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1529_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_6838_XYZ_?fields=_EM_3794_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1530_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_6898_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1531_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_6901_XYZ_?fields=_EM_3794_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1532_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_6909_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1533_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_7033_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1534_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_7037_XYZ_?fields=_EM_7036_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1535_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_7044_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1536_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_7125_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1537_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_7136_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1538_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_7139_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1539_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_7144_XYZ_?" + 
                    "fields=yLtogn5VW&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1540_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_7200_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1541_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_7212_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1542_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_7215_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1543_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_7295_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1544_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_7318_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1545_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_7346_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1546_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_7382_XYZ_?" + 
                    "fields=YFZ7K7&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1547_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_7399_XYZ_?fields=Glh")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1548_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_7406_XYZ_?fields=_EM_4441_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1549_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_7452_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1550_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_7480_XYZ_?" + 
                    "fields=IvdqjZ2&" + 
                    "fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1551_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_7488_XYZ_?" + 
                    "fields=TeLv&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1552_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_7504_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1553_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_7508_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1554_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_7518_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1555_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_7528_XYZ_?fields=_EM_7527_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1556_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_7530_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1557_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_7545_XYZ_?" + 
                    "fields=_EM_7544_XYZ_&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1558_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_7633_XYZ_?fields=TqbXv5MhE9")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1559_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_7634_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1560_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_7671_XYZ_?fields=_EM_7670_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1561_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_7675_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1562_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_7682_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1563_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_7708_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1564_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_7727_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1565_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_7740_XYZ_?fields=4V")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1566_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_7805_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1567_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_7812_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1568_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_7822_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1569_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_7842_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1570_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_7857_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1571_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_7900_XYZ_?fields=_EM_7899_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1572_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_7921_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1573_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_7934_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1574_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_7936_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1575_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_7977_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1576_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_7986_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1577_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_7995_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1578_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_8069_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1579_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_8118_XYZ_?fields=_EM_3794_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1580_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_8163_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1581_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_8189_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1582_getOnV2NameWithQueryParamsFullTextEmptyFields() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_8219_XYZ_?" + 
                    "fields=&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1583_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_8222_XYZ_?fields=Utad3I3")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1584_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_8230_XYZ_?fields=P")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1585_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_8244_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1586_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_8263_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1587_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_8271_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1588_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_8292_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1589_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_8296_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1590_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_8315_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1591_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_8335_XYZ_?fields=_EM_8334_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1592_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_8347_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1593_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_8361_XYZ_?fields=_EM_8360_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1594_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_8379_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1595_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_8392_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1596_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_8397_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1597_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_8403_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1598_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_8540_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1599_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_8575_XYZ_?" + 
                    "fields=topLevelDomain&" + 
                    "fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1600_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_8577_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1601_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_8580_XYZ_?fields=_EM_8579_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1602_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_8586_XYZ_?fields=Ra2lt1Z")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1603_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_8591_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1604_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_8645_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1605_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_8652_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1606_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_8668_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1607_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_8721_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1608_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_8726_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1609_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_8744_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1610_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_8758_XYZ_?fields=f1ElbTWl6yRVM")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1611_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_8761_XYZ_?fields=_EM_4441_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1612_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_8811_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1613_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_8813_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1614_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_8830_XYZ_?fields=_EM_4148_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1615_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_8833_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1616_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_8839_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1617_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_8843_XYZ_?fields=_EM_4167_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1618_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_8914_XYZ_?fields=_EM_8913_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1619_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_8932_XYZ_?fields=m5XZm7Phcp7Sbb")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1620_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_8985_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1621_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_8988_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1622_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_9048_XYZ_?fields=qRlGDE7uT")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1623_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_9050_XYZ_?fields=_EM_4441_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1624_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_9078_XYZ_?fields=_EM_9077_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1625_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_9102_XYZ_?fields=mpY")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1626_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_9104_XYZ_?fields=0Ztx8nWv")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1627_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_9118_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1628_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_9124_XYZ_?fields=_EM_9123_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1629_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_9128_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1630_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_9175_XYZ_?" + 
                    "fields=9YIuhWLr0&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1631_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_9190_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1632_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_9213_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1633_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_9217_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1634_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_9221_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1635_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_9223_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1636_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_9246_XYZ_?" + 
                    "fields=18FLB4jIqxig&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1637_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_9284_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1638_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_9292_XYZ_?fields=Qn1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1639_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_9305_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1640_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_9307_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1641_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_9314_XYZ_?fields=_EM_9313_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1642_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_9342_XYZ_?" + 
                    "fields=_EM_9341_XYZ_&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1643_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_9354_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1644_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_9360_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1645_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_9371_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1646_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_9382_XYZ_?fields=1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1647_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_9437_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1648_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_9451_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1649_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_9498_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1650_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_9503_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1651_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_9514_XYZ_?fields=_EM_5957_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1652_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_9563_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1653_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_9587_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1654_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_9588_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1655_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_9595_XYZ_?fields=vl")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1656_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_9613_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1657_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_9665_XYZ_?fields=P")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1658_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_9669_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1659_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_9680_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1660_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_9704_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1661_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_9711_XYZ_?fields=_EM_9710_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1662_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_9748_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1663_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_9758_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1664_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_9775_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1665_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_9783_XYZ_?fields=G")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1666_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_9805_XYZ_?fields=_EM_9804_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1667_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_9808_XYZ_?fields=X3GbFhwKiXL")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1668_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_9813_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1669_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_9814_XYZ_?fields=hPOWZ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1670_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_9848_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1671_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_9863_XYZ_?fields=_EM_3794_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1672_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_9869_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1673_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_9929_XYZ_?fields=mpY")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1674_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_9992_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1675_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_10005_XYZ_?fields=_EM_4167_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1676_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_10054_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1677_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_10097_XYZ_?fields=_EM_10096_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1678_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_10112_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1679_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_10171_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1680_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_10195_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1681_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_10220_XYZ_?" + 
                    "fields=18FLB4jIqxig&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1682_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_10231_XYZ_?fields=_EM_10230_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1683_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_10257_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1684_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_10285_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1685_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_10286_XYZ_?" + 
                    "fields=_EM_3794_XYZ_&" + 
                    "fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1686_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_10296_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1687_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_10321_XYZ_?fields=M")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1688_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_10355_XYZ_?fields=mpY")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1689_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_10381_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1690_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_10382_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1691_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_10390_XYZ_?fields=_EM_10389_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1692_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_10448_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1693_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_10492_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1694_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_10520_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1695_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_10558_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1696_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_10594_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1697_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_10615_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1698_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_10651_XYZ_?" + 
                    "fields=kxIXdvEJnUbcxyp&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1699_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_10680_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1700_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_10685_XYZ_?fields=_EM_4441_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1701_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_10698_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1702_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_10724_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1703_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_10731_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1704_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_10754_XYZ_?fields=Glh")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1705_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_10755_XYZ_?fields=l_Cptsng")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1706_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_10803_XYZ_?" + 
                    "fields=_EM_10804_XYZ_&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1707_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_10836_XYZ_?fields=_cuKGqSynz7ORh4a")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1708_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_10845_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1709_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_10851_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1710_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_10900_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1711_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_10907_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1712_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_10912_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1713_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_10913_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1714_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_10994_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1715_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_11001_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1716_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_11005_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1717_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_11046_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1718_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_11057_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1719_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_11066_XYZ_?fields=_EM_4148_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1720_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_11077_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1721_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_11109_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1722_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_11114_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1723_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_11117_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1724_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_11120_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1725_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_11935_XYZ_?" + 
                    "fields=V3zfEJ&" + 
                    "fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1726_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_11172_XYZ_?fields=1dt")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1727_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_11178_XYZ_?fields=yLtogn5VW")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1728_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_11183_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1729_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_11215_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1730_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_11233_XYZ_?" + 
                    "fields=_EM_11101_XYZ_&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1731_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_11250_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1732_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_11272_XYZ_?fields=pjtzcoLKbo7EO")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1733_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_11283_XYZ_?fields=alpha3Code")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1734_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_11316_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1735_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_11331_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1736_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_11347_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1737_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_11352_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1738_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_11359_XYZ_?fields=l0i")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1739_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_11378_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1740_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_11398_XYZ_?" + 
                    "fields=_EM_3794_XYZ_&" + 
                    "fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1741_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_11403_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1742_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_11440_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1743_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_11467_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1744_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_11495_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1745_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_11529_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1746_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_11611_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1747_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_11615_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1748_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_11641_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1749_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_11726_XYZ_?" + 
                    "fields=_EM_3794_XYZ_&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1750_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_11734_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1751_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_11833_XYZ_?fields=LZi2rDjtdx")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1752_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_11839_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1753_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_11865_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1754_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_12004_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1755_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_12062_XYZ_?" + 
                    "fields=yLtogn5VW&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1756_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_12082_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1757_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_12091_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1758_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_12111_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1759_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_12112_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1760_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_12249_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1761_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_12258_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1762_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_12279_XYZ_?fields=_EM_12278_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1763_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_12307_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1764_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_12388_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1765_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_12428_XYZ_?fields=yLtogn5VW")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1766_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_12431_XYZ_?fields=_EM_12430_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1767_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_12460_XYZ_?fields=_EM_12459_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1768_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_12511_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1769_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_12533_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1770_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/WfVJy?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1771_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_12584_XYZ_?fields=_EM_12583_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1772_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_12616_XYZ_?fields=DuStVMMjTHH44pA3")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1773_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_12625_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1774_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_12668_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1775_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_12677_XYZ_?fields=LZi2rDjtdx")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1776_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_12718_XYZ_?" + 
                    "fields=HZ&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1777_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_12740_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1778_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_12764_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1779_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_12790_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1780_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_12802_XYZ_?fields=_EM_3794_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1781_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_12832_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1782_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_12932_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1783_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_12970_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1784_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_12974_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1785_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_12976_XYZ_?" + 
                    "fields=_EM_12975_XYZ_&" + 
                    "fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1786_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_13015_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1787_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_13020_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1788_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_13042_XYZ_?fields=_EM_13041_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1789_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_13148_XYZ_?" + 
                    "fields=HZ&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1790_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_13160_XYZ_?fields=l")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1791_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_13169_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1792_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_13192_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1793_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_13202_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1794_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_13233_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1795_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_13242_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1796_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_13319_XYZ_?fields=_EM_4148_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1797_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_13320_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1798_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_13357_XYZ_R?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1799_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_13366_XYZ_?" + 
                    "fields=18FLB4jIqxigR&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1800_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_13375_XYZ_?fields=")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1801_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_13380_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1802_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_13409_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1803_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_13480_XYZ_?fields=_EM_4148_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1804_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_13556_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1805_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_13566_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1806_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_13611_XYZ_?" + 
                    "fields=18FLB4jIqxic&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1807_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_13706_XYZ_?" + 
                    "fields=0bpjblEZZ&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1808_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_13727_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1809_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_13728_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1810_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_13790_XYZ_?fields=0Ztx8nWv")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1811_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_13836_XYZ_?fields=iorpn")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1812_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_13838_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1813_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_13858_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1814_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_13892_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1815_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_13915_XYZ_?fields=_EM_5722_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1816_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_14006_XYZ_?fields=iQT3")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1817_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_14047_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1818_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_14064_XYZ_?fields=r%5ESk")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1819_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_14084_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1820_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_14130_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1821_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_14174_XYZ_?fields=_EM_4148_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1822_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_14207_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1823_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_14227_XYZ_?" + 
                    "fields=18FLF4jIqxig&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1824_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_14269_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1825_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_14272_XYZ_?fields=_EM_14271_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1826_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_14423_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1827_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_14499_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1828_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_14500_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1829_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_14527_XYZ_?fields=")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1830_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_14557_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1831_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_14584_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1832_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_14682_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1833_getOnDemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/ålandish?fields=rRLavV5zdC_awH")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1834_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_14735_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1835_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_14823_XYZ_?" + 
                    "fields=18FLD4jIqxig&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1836_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_14866_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1837_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_14879_XYZ_?" + 
                    "fields=_EM_3794_XYZ_&" + 
                    "fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1838_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_14936_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1839_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_14968_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1840_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_14970_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1841_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_15015_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1842_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_15049_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1843_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_15087_XYZ_?fields=mpY")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1844_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_15112_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1845_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_15124_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1846_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_15364_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1847_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_15392_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1848_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_15618_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1849_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_15678_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1850_getOnLangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_15688_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1851_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_15793_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1852_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_15853_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1853_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_16084_XYZ_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1854_getOnV2NameWithQueryParamsEmptyFieldsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_16119_XYZ_?" + 
                    "fields=&" + 
                    "fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1855_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_16340_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1856_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_16403_XYZ_?fields=_EM_16402_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1857_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_16543_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1858_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/_EM_16597_XYZ_?" + 
                    "fields=name&" + 
                    "fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1859_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_16750_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }


}
