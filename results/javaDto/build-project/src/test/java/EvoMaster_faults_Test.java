/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  dto.*;
import  java.util.ArrayList;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-10-07T22:43:24.529-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 37 tests
 * <br>
*  Covered targets: 1039
 * <br>
*  Used time: 0h 1m 44s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new ExternalEvoMasterController("/Users/pgarrett/evoMaster/EMB/jdk_8_maven/cs/rest/original/catwatch/catwatch-backend/target/catwatch-sut.jar");
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (500) GET:/contributors
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_0_getOnContributorsShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. org/zalando/catwatch/backend/web/config/DateUtil_15_iso8601.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=jdvSjt&" + 
                    "limit=621&" + 
                    "offset=580&" + 
                    "start_date=_EM_9_XYZ_&" + 
                    "q=zlsVSemNINq")
                .then()
                .statusCode(500)// org/zalando/catwatch/backend/web/config/DateUtil_15_iso8601
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.RuntimeException"))
                .body("'message'", containsString("java.text.ParseException: Unparseable date: \"_EM_9_XYZ_\""))
                .body("'path'", containsString("/contributors"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/contributors
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_1_getOnContributorsWithQueryParamsEmptySortByAndEmptyQShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. org/zalando/catwatch/backend/web/config/DateUtil_15_iso8601.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=V0&" + 
                    "end_date=nWniEcFGJVCx9OV&" + 
                    "sortBy=&" + 
                    "q=")
                .then()
                .statusCode(500)// org/zalando/catwatch/backend/web/config/DateUtil_15_iso8601
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.RuntimeException"))
                .body("'message'", containsString("java.text.ParseException: Unparseable date: \"nWniEcFGJVCx9OV\""))
                .body("'path'", containsString("/contributors"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/contributors
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_2_getOnContributorsShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. org/zalando/catwatch/backend/web/ContributorsApi_221_validate.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_12_XYZ_")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=26Llh03er05&" + 
                    "limit=902&" + 
                    "start_date=8_ZImBXS9v&" + 
                    "end_date=fCF&" + 
                    "sortBy=p7TGpi")
                .then()
                .statusCode(500)// org/zalando/catwatch/backend/web/ContributorsApi_221_validate
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("sortBy must be empty or have a valid value but was p7TGpi. Valid values are organizationalCommitsCount,organizationalProjectsCount,personalCommitsCount,personalProjectsCount,organizationName,name"))
                .body("'path'", containsString("/contributors"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/contributors
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_3_getOnContributorsShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. org/zalando/catwatch/backend/web/ContributorsApi_221_validate.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=_EM_55_XYZ_&" + 
                    "start_date=_EM_56_XYZ_&" + 
                    "end_date=JJz6QKL4Lr&" + 
                    "sortBy=S0BLfH2MC0aj&" + 
                    "q=tjOoQgTep2i")
                .then()
                .statusCode(500)// org/zalando/catwatch/backend/web/ContributorsApi_221_validate
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("sortBy must be empty or have a valid value but was S0BLfH2MC0aj. Valid values are organizationalCommitsCount,organizationalProjectsCount,personalCommitsCount,personalProjectsCount,organizationName,name"))
                .body("'path'", containsString("/contributors"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/config
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_4_getOnConfigReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/github.login'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/config")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'cache.path'", containsString("/Users/pgarrett/evoMaster/EMB/jdk_8_maven/cs/rest/original/catwatch/catwatch-backend/target/temp/tmp_catwatch/cache_12346"))
                .body("'cache.size'", containsString("50"))
                .body("'endpoints.enabled'", containsString("false"))
                .body("'endpoints.health.enabled'", containsString("true"))
                .body("'github.login'", nullValue())
                .body("'organization.list'", containsString("zalando,zalando-stups,zalando-incubator"))
                .body("'schedule'", containsString("0 1 8 * * *"))
                .body("'scoring.project'", containsString("function(project) {var daysSinceLastPush = 0;if (project.lastPushed) {var tokens = project.lastPushed.split(\" \");var day = tokens[2];var month = tokens[1];var year = tokens[5];var lastPushedDate = new Date(day + ' ' + month + ' ' + year);var millisInDay = 86400000;daysSinceLastPush = Math.floor((new Date() - lastPushedDate) / millisInDay);}var maintainersPenalty = 0;if (project.maintainers.length < 2) {maintainersPenalty = 100;}return project.starsCount * 3 + project.forksCount * 2 + project.contributorsCount * 5 - daysSinceLastPush - maintainersPenalty}"))
                .body("'spring.database.driverClassName'", nullValue())
                .body("'spring.datasource.platform'", nullValue())
                .body("'spring.datasource.username'", containsString("sa"))
                .body("'spring.jpa.database'", nullValue())
                .body("'spring.jpa.hibernate.ddl-auto'", containsString("update"));
    }
    
    
    /**
    * Calls:
    * 1 - (403) GET:/config
    * 2 - (200) GET:/config
    * Found 3 potential faults. Type-codes: 101, 980
    */
    @Test(timeout = 60000)
    public void test_5_getOnConfigShowsFaults_101_980() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/config?access_token=7zR93Uj3YKm")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/github.login'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault980. A Protected Resource Is Accessible Without Providing Any Authentication. null.
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/config")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'cache.path'", containsString("/Users/pgarrett/evoMaster/EMB/jdk_8_maven/cs/rest/original/catwatch/catwatch-backend/target/temp/tmp_catwatch/cache_12346"))
                .body("'cache.size'", containsString("50"))
                .body("'endpoints.enabled'", containsString("false"))
                .body("'endpoints.health.enabled'", containsString("true"))
                .body("'github.login'", nullValue())
                .body("'organization.list'", containsString("zalando,zalando-stups,zalando-incubator"))
                .body("'schedule'", containsString("0 1 8 * * *"))
                .body("'scoring.project'", containsString("function(project) {var daysSinceLastPush = 0;if (project.lastPushed) {var tokens = project.lastPushed.split(\" \");var day = tokens[2];var month = tokens[1];var year = tokens[5];var lastPushedDate = new Date(day + ' ' + month + ' ' + year);var millisInDay = 86400000;daysSinceLastPush = Math.floor((new Date() - lastPushedDate) / millisInDay);}var maintainersPenalty = 0;if (project.maintainers.length < 2) {maintainersPenalty = 100;}return project.starsCount * 3 + project.forksCount * 2 + project.contributorsCount * 5 - daysSinceLastPush - maintainersPenalty}"))
                .body("'spring.database.driverClassName'", nullValue())
                .body("'spring.datasource.platform'", nullValue())
                .body("'spring.datasource.username'", containsString("sa"))
                .body("'spring.jpa.database'", nullValue())
                .body("'spring.jpa.hibernate.ddl-auto'", containsString("update"));
    }
    
    
    /**
    * Calls:
    * 1 - (403) GET:/export
    * 2 - (200) GET:/export
    * Found 2 potential faults. Type-codes: 101, 980
    */
    @Test(timeout = 60000)
    public void test_6_getOnExportShowsFaults_101_980() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_13_XYZ_")
                .get(baseUrlOfSut + "/export?" + 
                    "EMextraParam123=42&" + 
                    "access_token=RMdgjTtN")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
        
        // Fault980. A Protected Resource Is Accessible Without Providing Any Authentication. null.
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_13_XYZ_")
                .get(baseUrlOfSut + "/export")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'contributors'.size()", equalTo(0))
                .body("'projects'.size()", equalTo(0))
                .body("'statistics'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * 1 - (403) GET:/languages
    * 2 - (200) GET:/languages
    * Found 2 potential faults. Type-codes: 101, 980
    */
    @Test(timeout = 60000)
    public void test_7_getOnLanguagesWithQueryParamsShowsFaults_101_980() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/languages?" + 
                    "organizations=aJh8cYaDoO2NTG&" + 
                    "limit=251&" + 
                    "offset=324&" + 
                    "q=zHQbN9&" + 
                    "access_token=wMjVzVTee")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
        
        // Fault980. A Protected Resource Is Accessible Without Providing Any Authentication. null.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/languages?" + 
                    "organizations=aJh8cYaDoO2NTG&" + 
                    "limit=251&" + 
                    "offset=836&" + 
                    "q=zHQbN9")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * 1 - (403) GET:/projects
    * 2 - (200) GET:/projects
    * Found 2 potential faults. Type-codes: 101, 980
    */
    @Test(timeout = 60000)
    public void test_8_getOnProjectsShowsFaults_101_980() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/projects?" + 
                    "limit=360&" + 
                    "offset=419&" + 
                    "end_date=2012-06-08T11%3A38%3A02Z&" + 
                    "sortBy=DjQa8J4&" + 
                    "language=EsnfLWpLo0&" + 
                    "access_token=bytsXYUeZu80")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
        
        // Fault980. A Protected Resource Is Accessible Without Providing Any Authentication. null.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/projects?" + 
                    "limit=360&" + 
                    "end_date=2012-06-08T11%3A38%3A02Z&" + 
                    "sortBy=DjQa8J4&" + 
                    "language=EsnfLWpLo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (400) GET:/statistics
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_9_getOnStatisticsWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/statistics'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics?end_date=_EM_20_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Invalid date format for endDate"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/statistics
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_10_getOnStatisticsWithQueryParamsEmptyAccess_token() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/statistics'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics?" + 
                    "organizations=fe8WunJ4ojx4m9n&" + 
                    "end_date=64HLH5I&" + 
                    "access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/projects
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_11_getOnProjectsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/projects'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/projects?" + 
                    "start_date=2026-08-21T20%3A27%3A59Z&" + 
                    "end_date=1912-13-26T03%3A59%3A40.160Z&" + 
                    "sortBy=m2QKWeUZzguZ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.web.method.annotation.MethodArgumentTypeMismatchException"))
                .body("'message'", containsString("Failed to convert value of type 'java.lang.String' to required type 'java.util.Date'; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [@io.swagger.annotations.ApiParam @org.springframework.web.bind.annotation.RequestParam @org.springframework.format.annotation.DateTimeFormat java.util.Date] for value '1912-13-26T03:59:40.160Z'; nested exception is java.lang.IllegalArgumentException: Parse attempt failed for value [1912-13-26T03:59:40.160Z]"))
                .body("'path'", containsString("/projects"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/delete
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_12_getOnDeleteReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/delete")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/init
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_13_getOnInitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/init")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/projects
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_14_getOnProjectsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/projects?" + 
                    "limit=360&" + 
                    "offset=419&" + 
                    "end_date=2012-06-08T11%3A38%3A02Z&" + 
                    "sortBy=DjQa8J4&" + 
                    "language=EsnfLWpLo0&" + 
                    "access_token=bytsXYUeZu80")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
    }
    
    
    /**
    * Calls:
    * (403) GET:/delete
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_15_getOnDeleteWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/delete?access_token=Krib")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
    }
    
    
    /**
    * Calls:
    * (403) GET:/languages
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_16_getOnLanguagesWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/languages?" + 
                    "organizations=aJh8cYaDoO2NTG&" + 
                    "limit=251&" + 
                    "offset=324&" + 
                    "q=zHQbN9&" + 
                    "access_token=wMjVzVTee")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
    }
    
    
    /**
    * Calls:
    * (403) GET:/contributors
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_17_getOnContributorsWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=26Llh03er05&" + 
                    "limit=902&" + 
                    "start_date=8_ZImBXS9v&" + 
                    "end_date=fCF&" + 
                    "sortBy=p7TGpi&" + 
                    "access_token=dIC")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
    }
    
    
    /**
    * Calls:
    * (403) GET:/export
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_18_getOnExportReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_13_XYZ_")
                .get(baseUrlOfSut + "/export?" + 
                    "EMextraParam123=42&" + 
                    "access_token=RMdgjTtN")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
    }
    
    
    /**
    * Calls:
    * (403) GET:/config
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_19_getOnConfigWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/config?access_token=7zR93Uj3YKm")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
    }
    
    
    /**
    * Calls:
    * (403) POST:/import
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_20_postOnImportReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        DatabaseDto dto_DatabaseDto_1 = new DatabaseDto();
        List<Contributor> list_Contributor_1 = new ArrayList<Contributor>();
        Contributor dto_Contributor_1 = new Contributor();
        dto_Contributor_1.setName("l9uqm0ynHG");
        dto_Contributor_1.setOrganizationid(608L);
        dto_Contributor_1.setOrganizationalcommitscount(558);
        dto_Contributor_1.setPersonalcommitscount(646);
        dto_Contributor_1.setPersonalprojectscount(824);
        list_Contributor_1.add(dto_Contributor_1);
        Contributor dto_Contributor_2 = new Contributor();
        dto_Contributor_2.setId(268L);
        ContributorKey dto_Key_2 = new ContributorKey();
        dto_Contributor_2.setKey(dto_Key_2);
        dto_Contributor_2.setLoginid("ty");
        dto_Contributor_2.setName("8mgbF4tgP1QW2");
        dto_Contributor_2.setOrganizationalprojectscount(563);
        dto_Contributor_2.setPersonalcommitscount(616);
        dto_Contributor_2.setPersonalprojectscount(362);
        dto_Contributor_2.setSnapshotdate("2080-12-22T10:58:20.579-12:42");
        dto_Contributor_2.setUrl("rq4dPR2rEfaM3iI");
        list_Contributor_1.add(dto_Contributor_2);
        Contributor dto_Contributor_3 = new Contributor();
        ContributorKey dto_Key_3 = new ContributorKey();
        dto_Key_3.setOrganizationid(563L);
        dto_Key_3.setSnapshotdate("2092-05-12T25:53:43.695-04:58");
        dto_Contributor_3.setKey(dto_Key_3);
        dto_Contributor_3.setOrganizationid(38L);
        dto_Contributor_3.setOrganizationname("v");
        dto_Contributor_3.setOrganizationalcommitscount(852);
        dto_Contributor_3.setPersonalcommitscount(150);
        dto_Contributor_3.setPersonalprojectscount(752);
        dto_Contributor_3.setSnapshotdate("1950-11-29T13:27:31.375Z");
        dto_Contributor_3.setUrl("pRUpHcJ");
        list_Contributor_1.add(dto_Contributor_3);
        Contributor dto_Contributor_4 = new Contributor();
        dto_Contributor_4.setId(337L);
        ContributorKey dto_Key_4 = new ContributorKey();
        dto_Key_4.setId(1249028865932831447L);
        dto_Key_4.setSnapshotdate("2039-10-23T03:22:01.535-05:51");
        dto_Contributor_4.setKey(dto_Key_4);
        dto_Contributor_4.setOrganizationalcommitscount(414);
        dto_Contributor_4.setPersonalcommitscount(807);
        dto_Contributor_4.setPersonalprojectscount(176);
        list_Contributor_1.add(dto_Contributor_4);
        Contributor dto_Contributor_5 = new Contributor();
        dto_Contributor_5.setLoginid("mNg4UP61l84AFQCq");
        dto_Contributor_5.setName("CDyvS7tlNx8J49");
        dto_Contributor_5.setOrganizationid(837L);
        dto_Contributor_5.setOrganizationalprojectscount(371);
        dto_Contributor_5.setPersonalcommitscount(111);
        dto_Contributor_5.setUrl("xYjGM");
        list_Contributor_1.add(dto_Contributor_5);
        dto_DatabaseDto_1.setContributors(list_Contributor_1);
        List<Project> list_Project_1 = new ArrayList<Project>();
        Project dto_Project_1 = new Project();
        dto_Project_1.setContributorscount(357);
        dto_Project_1.setExternalcontributorscount(192);
        dto_Project_1.setForkscount(518);
        dto_Project_1.setImage("ko0rh");
        dto_Project_1.setOrganizationname("ZrhmHbiY");
        dto_Project_1.setPrimarylanguage("k0R");
        dto_Project_1.setSnapshotdate("2015-01-23T05:42:35-08:25");
        dto_Project_1.setTitle("");
        list_Project_1.add(dto_Project_1);
        dto_DatabaseDto_1.setProjects(list_Project_1);
        List<Statistics> list_Statistics_1 = new ArrayList<Statistics>();
        Statistics dto_Statistics_1 = new Statistics();
        dto_Statistics_1.setAllcontributorscount(492);
        dto_Statistics_1.setAllforkscount(195);
        dto_Statistics_1.setAllsizecount(26);
        dto_Statistics_1.setAllstarscount(336);
        dto_Statistics_1.setMemberscount(584);
        dto_Statistics_1.setPrivateprojectcount(645);
        dto_Statistics_1.setPublicprojectcount(1000);
        dto_Statistics_1.setSnapshotdate("1964-11-12T10:59:01.339-05:37");
        dto_Statistics_1.setTagscount(12);
        dto_Statistics_1.setTeamscount(435);
        list_Statistics_1.add(dto_Statistics_1);
        dto_DatabaseDto_1.setStatistics(list_Statistics_1);
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(dto_DatabaseDto_1)
                .post(baseUrlOfSut + "/import?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
    }
    
    
    /**
    * Calls:
    * (403) POST:/import
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_21_postOnImportReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        DatabaseDto dto_DatabaseDto_1 = new DatabaseDto();
        List<Contributor> list_Contributor_1 = new ArrayList<Contributor>();
        Contributor dto_Contributor_1 = new Contributor();
        dto_Contributor_1.setName("VicL6h8");
        dto_Contributor_1.setOrganizationalcommitscount(391);
        dto_Contributor_1.setOrganizationalprojectscount(916);
        dto_Contributor_1.setPersonalcommitscount(921);
        dto_Contributor_1.setSnapshotdate("1991-13-01T01:57:06-11:07");
        list_Contributor_1.add(dto_Contributor_1);
        Contributor dto_Contributor_2 = new Contributor();
        dto_Contributor_2.setId(6177622261793285296L);
        ContributorKey dto_Key_2 = new ContributorKey();
        dto_Key_2.setId(95L);
        dto_Key_2.setOrganizationid(961L);
        dto_Key_2.setSnapshotdate("1993-12-04T13:38:57+05:39");
        dto_Contributor_2.setKey(dto_Key_2);
        dto_Contributor_2.setName("Fq7xq1sIX2");
        dto_Contributor_2.setOrganizationname("W5");
        dto_Contributor_2.setOrganizationalprojectscount(518);
        list_Contributor_1.add(dto_Contributor_2);
        Contributor dto_Contributor_3 = new Contributor();
        dto_Contributor_3.setId(623L);
        ContributorKey dto_Key_3 = new ContributorKey();
        dto_Key_3.setOrganizationid(223L);
        dto_Contributor_3.setKey(dto_Key_3);
        dto_Contributor_3.setLoginid("GA3sJ69x03vw8b");
        dto_Contributor_3.setName("Y");
        dto_Contributor_3.setOrganizationid(397L);
        dto_Contributor_3.setOrganizationalcommitscount(562);
        dto_Contributor_3.setPersonalcommitscount(680);
        dto_Contributor_3.setSnapshotdate("2092-02-19T10:19:10Z");
        dto_Contributor_3.setUrl("q");
        list_Contributor_1.add(dto_Contributor_3);
        dto_DatabaseDto_1.setContributors(list_Contributor_1);
        List<Statistics> list_Statistics_1 = new ArrayList<Statistics>();
        Statistics dto_Statistics_1 = new Statistics();
        dto_Statistics_1.setAllforkscount(608);
        dto_Statistics_1.setExternalcontributorscount(129);
        StatisticsKey dto_Key_1 = new StatisticsKey();
        dto_Key_1.setId(769L);
        dto_Statistics_1.setKey(dto_Key_1);
        dto_Statistics_1.setMemberscount(1384799546);
        dto_Statistics_1.setOrganizationname("_EM_23_XYZ_");
        dto_Statistics_1.setPrivateprojectcount(834);
        dto_Statistics_1.setPublicprojectcount(584);
        dto_Statistics_1.setSnapshotdate("1928-11-06T22:28:02.648+16:10");
        dto_Statistics_1.setTagscount(1233319189);
        dto_Statistics_1.setTeamscount(871);
        list_Statistics_1.add(dto_Statistics_1);
        Statistics dto_Statistics_2 = new Statistics();
        dto_Statistics_2.setAllcontributorscount(438);
        dto_Statistics_2.setAllforkscount(975);
        dto_Statistics_2.setExternalcontributorscount(661);
        StatisticsKey dto_Key_2 = new StatisticsKey();
        dto_Key_2.setSnapshotdate("1927-13-21T24:20:37+18:58");
        dto_Statistics_2.setKey(dto_Key_2);
        dto_Statistics_2.setMemberscount(92);
        dto_Statistics_2.setProgramlanguagescount(808);
        dto_Statistics_2.setSnapshotdate("2024-03-21T11:55:53-03:34");
        dto_Statistics_2.setTagscount(827);
        list_Statistics_1.add(dto_Statistics_2);
        dto_DatabaseDto_1.setStatistics(list_Statistics_1);
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(dto_DatabaseDto_1)
                .post(baseUrlOfSut + "/import")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
    }
    
    
    /**
    * Calls:
    * (403) POST:/import
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_22_postOnImportReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        DatabaseDto dto_DatabaseDto_1 = new DatabaseDto();
        List<Contributor> list_Contributor_1 = new ArrayList<Contributor>();
        dto_DatabaseDto_1.setContributors(list_Contributor_1);
        List<Project> list_Project_1 = new ArrayList<Project>();
        Project dto_Project_1 = new Project();
        dto_Project_1.setDescription("2e");
        dto_Project_1.setForkscount(697);
        dto_Project_1.setImage("7FzFq");
        dto_Project_1.setOrganizationname("EARloHwgPM");
        dto_Project_1.setScore(651);
        dto_Project_1.setStarscount(388);
        list_Project_1.add(dto_Project_1);
        dto_DatabaseDto_1.setProjects(list_Project_1);
        List<Statistics> list_Statistics_1 = new ArrayList<Statistics>();
        Statistics dto_Statistics_1 = new Statistics();
        dto_Statistics_1.setAllforkscount(804);
        dto_Statistics_1.setAllsizecount(197);
        dto_Statistics_1.setId(-5393180532841079233L);
        StatisticsKey dto_Key_1 = new StatisticsKey();
        dto_Key_1.setSnapshotdate("2036-06-26T17:53:22.159-06:37");
        dto_Statistics_1.setKey(dto_Key_1);
        dto_Statistics_1.setMemberscount(877);
        dto_Statistics_1.setOrganizationname("ScC");
        dto_Statistics_1.setPrivateprojectcount(804);
        dto_Statistics_1.setProgramlanguagescount(848);
        dto_Statistics_1.setPublicprojectcount(801);
        dto_Statistics_1.setTagscount(167);
        dto_Statistics_1.setTeamscount(907);
        list_Statistics_1.add(dto_Statistics_1);
        dto_DatabaseDto_1.setStatistics(list_Statistics_1);
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(dto_DatabaseDto_1)
                .post(baseUrlOfSut + "/import?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
    }
    
    
    /**
    * Calls:
    * (403) POST:/import
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_23_postOnImportReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        DatabaseDto dto_DatabaseDto_1 = new DatabaseDto();
        List<Contributor> list_Contributor_1 = new ArrayList<Contributor>();
        Contributor dto_Contributor_1 = new Contributor();
        dto_Contributor_1.setName("l9uqm0ynHG");
        dto_Contributor_1.setOrganizationid(608L);
        dto_Contributor_1.setOrganizationalcommitscount(558);
        dto_Contributor_1.setPersonalcommitscount(646);
        dto_Contributor_1.setPersonalprojectscount(824);
        list_Contributor_1.add(dto_Contributor_1);
        Contributor dto_Contributor_2 = new Contributor();
        dto_Contributor_2.setId(26L);
        ContributorKey dto_Key_2 = new ContributorKey();
        dto_Contributor_2.setKey(dto_Key_2);
        dto_Contributor_2.setLoginid("ty");
        dto_Contributor_2.setName("8mgbF4tgP1QW2");
        dto_Contributor_2.setOrganizationalprojectscount(563);
        dto_Contributor_2.setPersonalcommitscount(616);
        dto_Contributor_2.setPersonalprojectscount(362);
        dto_Contributor_2.setSnapshotdate("2080-12-22T10:58:20.579-12:42");
        dto_Contributor_2.setUrl("rq4dPR2rEfaM3iI");
        list_Contributor_1.add(dto_Contributor_2);
        Contributor dto_Contributor_3 = new Contributor();
        ContributorKey dto_Key_3 = new ContributorKey();
        dto_Key_3.setOrganizationid(563L);
        dto_Key_3.setSnapshotdate("2092-05-12T25:53:43.695-04:58");
        dto_Contributor_3.setKey(dto_Key_3);
        dto_Contributor_3.setOrganizationid(38L);
        dto_Contributor_3.setOrganizationname("v");
        dto_Contributor_3.setOrganizationalcommitscount(852);
        dto_Contributor_3.setPersonalcommitscount(150);
        dto_Contributor_3.setPersonalprojectscount(752);
        dto_Contributor_3.setSnapshotdate("1950-11-29T13:27:31.375Z");
        dto_Contributor_3.setUrl("pRUpHcJ");
        list_Contributor_1.add(dto_Contributor_3);
        Contributor dto_Contributor_4 = new Contributor();
        dto_Contributor_4.setId(337L);
        ContributorKey dto_Key_4 = new ContributorKey();
        dto_Key_4.setId(1249028865932831447L);
        dto_Key_4.setSnapshotdate("2039-10-23T03:22:01.535-05:51");
        dto_Contributor_4.setKey(dto_Key_4);
        dto_Contributor_4.setOrganizationalcommitscount(414);
        dto_Contributor_4.setPersonalcommitscount(807);
        dto_Contributor_4.setPersonalprojectscount(176);
        list_Contributor_1.add(dto_Contributor_4);
        Contributor dto_Contributor_5 = new Contributor();
        dto_Contributor_5.setLoginid("mNg4UP61l84AFQCq");
        dto_Contributor_5.setName("CDyvS7tlNx8J49");
        dto_Contributor_5.setOrganizationid(837L);
        dto_Contributor_5.setOrganizationalprojectscount(371);
        dto_Contributor_5.setPersonalcommitscount(111);
        dto_Contributor_5.setUrl("xYjGM");
        list_Contributor_1.add(dto_Contributor_5);
        dto_DatabaseDto_1.setContributors(list_Contributor_1);
        List<Project> list_Project_1 = new ArrayList<Project>();
        Project dto_Project_1 = new Project();
        dto_Project_1.setContributorscount(357);
        dto_Project_1.setExternalcontributorscount(192);
        dto_Project_1.setForkscount(518);
        dto_Project_1.setImage("ko0rh");
        dto_Project_1.setOrganizationname("ZrhmHbiY");
        dto_Project_1.setPrimarylanguage("k0R");
        dto_Project_1.setSnapshotdate("2015-01-23T05:42:35-08:25");
        dto_Project_1.setTitle("");
        list_Project_1.add(dto_Project_1);
        dto_DatabaseDto_1.setProjects(list_Project_1);
        List<Statistics> list_Statistics_1 = new ArrayList<Statistics>();
        Statistics dto_Statistics_1 = new Statistics();
        dto_Statistics_1.setAllcontributorscount(492);
        dto_Statistics_1.setAllforkscount(195);
        dto_Statistics_1.setAllsizecount(26);
        dto_Statistics_1.setAllstarscount(336);
        dto_Statistics_1.setMemberscount(584);
        dto_Statistics_1.setPrivateprojectcount(645);
        dto_Statistics_1.setPublicprojectcount(1000);
        dto_Statistics_1.setSnapshotdate("1964-11-12T10:59:01.339-05:37");
        dto_Statistics_1.setTagscount(14);
        dto_Statistics_1.setTeamscount(435);
        list_Statistics_1.add(dto_Statistics_1);
        dto_DatabaseDto_1.setStatistics(list_Statistics_1);
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(dto_DatabaseDto_1)
                .post(baseUrlOfSut + "/import?access_token=fV4")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
    }
    
    
    /**
    * Calls:
    * (500) GET:/statistics/projects
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_24_getOnProjectsShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. org/zalando/catwatch/backend/web/StatisticsApi_132_statisticsProjectGet.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/statistics/projects'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/projects?" + 
                    "organizations=7fPcAp_3uZ&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(500)// org/zalando/catwatch/backend/web/StatisticsApi_132_statisticsProjectGet
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IndexOutOfBoundsException"))
                .body("'message'", containsString("toIndex = 10"))
                .body("'path'", containsString("/statistics/projects"));
    }
    
    
    /**
    * Calls:
    * 1 - (403) GET:/statistics/languages
    * 2 - (200) GET:/statistics/languages
    * Found 2 potential faults. Type-codes: 101, 980
    */
    @Test(timeout = 60000)
    public void test_25_getOnStatisticsLanguagesWithQueryParamShowsFaults_101_980() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/languages?" + 
                    "end_date=I&" + 
                    "access_token=FIw0")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
        
        // Fault980. A Protected Resource Is Accessible Without Providing Any Authentication. null.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/languages?organizations=Ry_OAERp1Izzskfu")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (400) GET:/statistics/contributors
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_26_getOnContributorsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/statistics/contributors'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "start_date=_EM_0_XYZ_&" + 
                    "EMextraParam123=_EM_2_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string _EM_0_XYZ_."));
    }
    
    
    /**
    * Calls:
    * (400) GET:/statistics/projects
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_27_getOnProjectsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/statistics/projects'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/statistics/projects?" + 
                    "organizations=_EM_6_XYZ_&" + 
                    "end_date=_EM_7_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string _EM_7_XYZ_."));
    }
    
    
    /**
    * Calls:
    * (400) GET:/statistics/languages
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_28_getOnLanguagesReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/statistics/languages'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/statistics/languages?" + 
                    "end_date=_EM_4_XYZ_&" + 
                    "EMextraParam123=_EM_5_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string _EM_4_XYZ_."));
    }
    
    
    /**
    * Calls:
    * (400) GET:/statistics/contributors
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_29_getOnContributorsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/statistics/contributors'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "start_date=di9GEKWzvE9UWg&" + 
                    "end_date=AvGvb01qoPO1pKBv")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string di9GEKWzvE9UWg."));
    }
    
    
    /**
    * Calls:
    * (400) GET:/statistics/projects
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_30_getOnProjectsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/statistics/projects'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/statistics/projects?" + 
                    "start_date=EcUBn2BVOR0kUnRA&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string EcUBn2BVOR0kUnRA."));
    }
    
    
    /**
    * Calls:
    * (403) GET:/statistics/contributors
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_31_getOnStatisticsContributorsWithQueryParamsEmptyStart_date() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "organizations=Bs2V1u&" + 
                    "start_date=&" + 
                    "end_date=_EM_1_XYZ_&" + 
                    "access_token=JI_P2OP")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
    }
    
    
    /**
    * Calls:
    * (403) GET:/statistics/contributors
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_32_getOnContributorsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "EMextraParam123=_EM_2_XYZ_&" + 
                    "access_token=LwgK4a")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
    }
    
    
    /**
    * Calls:
    * (403) GET:/statistics/languages
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_33_getOnLanguagesReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/languages?" + 
                    "end_date=I&" + 
                    "access_token=FIw0")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
    }
    
    
    /**
    * Calls:
    * (403) GET:/statistics/languages
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_34_getOnLanguagesReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/statistics/languages?" + 
                    "organizations=DnFlw&" + 
                    "start_date=SApy1KOA_oq&" + 
                    "end_date=pjyuLF2ikstVx&" + 
                    "access_token=5mkwWrIAxDcB9tv")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
    }
    
    
    /**
    * Calls:
    * (403) GET:/statistics/projects
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_35_getOnStatisticsProjectsWithQueryParamsEmptyEnd_date() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/projects?" + 
                    "organizations=_EM_6_XYZ_&" + 
                    "end_date=&" + 
                    "access_token=GfG2UMU")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
    }
    
    
    /**
    * Calls:
    * (403) POST:/config/scoring.project
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_36_postOnScoring_projectReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .header("X-Organizations", "t_hyc0mycMK")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" t_hyc0mycMK ")
                .post(baseUrlOfSut + "/config/scoring.project")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
    }


}
