/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  dto.*;
import  java.util.ArrayList;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-10-05T16:58:17.412-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 59 tests
 * <br>
*  Covered targets: 1339
 * <br>
*  Used time: 0h 12m 40s
 * <br>
*  Needed budget for current results: 98%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.external.org.zalando.ExternalEvoMasterController("/Users/pgarrett/evoMaster/EMB/jdk_8_maven/cs/rest/original/catwatch/catwatch-backend/target/catwatch-sut.jar");
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("CONTRIBUTOR","LANGUAGE_LIST","MAINTAINERS","PROJECT","STATISTICS"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (500) GET:/contributors
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_0_getOnContributorsShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTRIBUTOR", 8L)
                .d("ID", "595")
                .d("ORGANIZATION_ID", "250")
                .d("SNAPSHOT_DATE", "\"2034-06-07 16:20:47\"")
                .d("NAME", "\"_EM_95_XYZ_\"")
                .d("ORGANIZATION_NAME", "\"_EM_96_XYZ_\"")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "627")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "1000")
                .d("PERSONAL_COMMITS_COUNT", "526")
                .d("PERSONAL_PROJECTS_COUNT", "499")
                .d("URL", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/zalando/catwatch/backend/web/config/DateUtil_15_iso8601.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=250&" + 
                    "limit=842&" + 
                    "offset=684&" + 
                    "start_date=_EM_97_XYZ_&" + 
                    "end_date=_oBFe6MulUyYs&" + 
                    "q=xVIxd2&" + 
                    "EMextraParam123=_EM_99_XYZ_")
                .then()
                .statusCode(500)// org/zalando/catwatch/backend/web/config/DateUtil_15_iso8601
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.RuntimeException"))
                .body("'message'", containsString("java.text.ParseException: Unparseable date: \"_oBFe6MulUyYs\""))
                .body("'path'", containsString("/contributors"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/contributors
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_1_getOnContributorsShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTRIBUTOR", 20L)
                .d("ID", "995")
                .d("ORGANIZATION_ID", "-7416019847483926528")
                .d("SNAPSHOT_DATE", "\"1923-06-25 11:26:42\"")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "NULL")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "518")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "NULL")
                .d("PERSONAL_COMMITS_COUNT", "NULL")
                .d("PERSONAL_PROJECTS_COUNT", "NULL")
                .d("URL", "\"1KO6aLhZ9\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/zalando/catwatch/backend/web/config/DateUtil_15_iso8601.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=-7416019847483926528&" + 
                    "end_date=c&" + 
                    "q=_EM_364_XYZ_")
                .then()
                .statusCode(500)// org/zalando/catwatch/backend/web/config/DateUtil_15_iso8601
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.RuntimeException"))
                .body("'message'", containsString("java.text.ParseException: Unparseable date: \"c\""))
                .body("'path'", containsString("/contributors"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/contributors
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_2_getOnContributorsShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTRIBUTOR", 30L)
                .d("ID", "565")
                .d("ORGANIZATION_ID", "126")
                .d("SNAPSHOT_DATE", "\"2023-09-10 10:38:52\"")
                .d("NAME", "\"_EM_525_XYZ_\"")
                .d("ORGANIZATION_NAME", "\"_EM_526_XYZ_\"")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "NULL")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "688")
                .d("PERSONAL_COMMITS_COUNT", "290")
                .d("PERSONAL_PROJECTS_COUNT", "NULL")
                .d("URL", "\"_EM_527_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/zalando/catwatch/backend/web/config/DateUtil_15_iso8601.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=126&" + 
                    "offset=868&" + 
                    "start_date=J4Q&" + 
                    "end_date=y&" + 
                    "q=y1sVkmVxYHhti")
                .then()
                .statusCode(500)// org/zalando/catwatch/backend/web/config/DateUtil_15_iso8601
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.RuntimeException"))
                .body("'message'", containsString("java.text.ParseException: Unparseable date: \"y\""))
                .body("'path'", containsString("/contributors"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/contributors
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_3_getOnContributorsShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTRIBUTOR", 15L)
                .d("ID", "938")
                .d("ORGANIZATION_ID", "47")
                .d("SNAPSHOT_DATE", "\"2018-10-23 05:07:05\"")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "\"SuYfI\"")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "485")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "NULL")
                .d("PERSONAL_COMMITS_COUNT", "509")
                .d("PERSONAL_PROJECTS_COUNT", "NULL")
                .d("URL", "\"fyKZiKf\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/zalando/catwatch/backend/web/ContributorsApi_221_validate.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=47&" + 
                    "start_date=lrTxsWT9EBWa9&" + 
                    "sortBy=hX9yRFJW0T8&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(500)// org/zalando/catwatch/backend/web/ContributorsApi_221_validate
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("sortBy must be empty or have a valid value but was hX9yRFJW0T8. Valid values are organizationalCommitsCount,organizationalProjectsCount,personalCommitsCount,personalProjectsCount,organizationName,name"))
                .body("'path'", containsString("/contributors"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/contributors
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_4_getOnContributorsWithQueryParamsShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. org/zalando/catwatch/backend/web/config/DateUtil_15_iso8601.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_10_XYZ_")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=LM&" + 
                    "end_date=Kr1kc")
                .then()
                .statusCode(500)// org/zalando/catwatch/backend/web/config/DateUtil_15_iso8601
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.RuntimeException"))
                .body("'message'", containsString("java.text.ParseException: Unparseable date: \"Kr1kc\""))
                .body("'path'", containsString("/contributors"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/config
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_5_getOnConfigReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/github.login'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/config")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'cache.path'", containsString("/Users/pgarrett/evoMaster/EMB/jdk_8_maven/cs/rest/original/catwatch/catwatch-backend/target/temp/tmp_catwatch/cache_12346"))
                .body("'cache.size'", containsString("50"))
                .body("'endpoints.enabled'", containsString("false"))
                .body("'endpoints.health.enabled'", containsString("true"))
                .body("'github.login'", nullValue())
                .body("'organization.list'", containsString("zalando,zalando-stups,zalando-incubator"))
                .body("'schedule'", containsString("0 1 8 * * *"))
                .body("'scoring.project'", containsString("function(project) {var daysSinceLastPush = 0;if (project.lastPushed) {var tokens = project.lastPushed.split(\" \");var day = tokens[2];var month = tokens[1];var year = tokens[5];var lastPushedDate = new Date(day + ' ' + month + ' ' + year);var millisInDay = 86400000;daysSinceLastPush = Math.floor((new Date() - lastPushedDate) / millisInDay);}var maintainersPenalty = 0;if (project.maintainers.length < 2) {maintainersPenalty = 100;}return project.starsCount * 3 + project.forksCount * 2 + project.contributorsCount * 5 - daysSinceLastPush - maintainersPenalty}"))
                .body("'spring.database.driverClassName'", nullValue())
                .body("'spring.datasource.platform'", nullValue())
                .body("'spring.datasource.username'", containsString("sa"))
                .body("'spring.jpa.database'", nullValue())
                .body("'spring.jpa.hibernate.ddl-auto'", containsString("update"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/export
    * Found 2 potential faults of type-code 101
    */
    @Test(timeout = 60000)
    public void test_6_getOnExportReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("STATISTICS", 27L)
                .d("ID", "166")
                .d("SNAPSHOT_DATE", "\"1947-12-31 05:54:11\"")
                .d("ALL_CONTRIBUTORS_COUNT", "367")
                .d("ALL_FORKS_COUNT", "269")
                .d("ALL_SIZE_COUNT", "NULL")
                .d("ALL_STARS_COUNT", "523")
                .d("MEMBERS_COUNT", "NULL")
                .d("ORGANIZATION_NAME", "\"U\"")
                .d("PRIVATE_PROJECT_COUNT", "-2008330116")
                .d("PROGRAM_LANGUAGES_COUNT", "160")
                .d("PUBLIC_PROJECT_COUNT", "325")
                .d("TAGS_COUNT", "NULL")
                .d("TEAMS_COUNT", "504")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "658")
            .and().insertInto("PROJECT", 28L)
                .d("COMMITS_COUNT", "182")
                .d("CONTRIBUTORS_COUNT", "NULL")
                .d("DESCRIPTION", "NULL")
                .d("FORKS_COUNT", "931")
                .d("GIT_HUB_PROJECT_ID", "756")
                .d("LAST_PUSHED", "NULL")
                .d("NAME", "\"_EM_514_XYZ_\"")
                .d("ORGANIZATION_NAME", "NULL")
                .d("PRIMARY_LANGUAGE", "\"Qph\"")
                .d("SCORE", "NULL")
                .d("SNAPSHOT_DATE", "\"1991-11-04 17:36:49\"")
                .d("STARS_COUNT", "997")
                .d("URL", "\"_EM_515_XYZ_\"")
                .d("TITLE", "\"v_wz\"")
                .d("IMAGE", "\"ZT3\"")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "720")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/projects/0/contributorsCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.format.date-time. [Path '/projects/0/snapshotDate'] String "1991-11-04T17:36:49" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .header("x-organizations", "_EM_511_XYZ_")
                .get(baseUrlOfSut + "/export")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'contributors'.size()", equalTo(0))
                .body("'projects'.size()", equalTo(1))
                .body("'projects'[0].'languageList'.size()", equalTo(0))
                .body("'projects'[0].'gitHubProjectId'", numberMatches(756.0))
                .body("'projects'[0].'snapshotDate'", containsString("1991-11-04T17:36:49"))
                .body("'projects'[0].'name'", containsString("_EM_514_XYZ_"))
                .body("'projects'[0].'title'", containsString("v_wz"))
                .body("'projects'[0].'image'", containsString("ZT3"))
                .body("'projects'[0].'organizationName'", nullValue())
                .body("'projects'[0].'url'", containsString("_EM_515_XYZ_"))
                .body("'projects'[0].'description'", nullValue())
                .body("'projects'[0].'starsCount'", numberMatches(997.0))
                .body("'projects'[0].'commitsCount'", numberMatches(182.0))
                .body("'projects'[0].'forksCount'", numberMatches(931.0))
                .body("'projects'[0].'contributorsCount'", nullValue())
                .body("'projects'[0].'externalContributorsCount'", numberMatches(720.0))
                .body("'projects'[0].'score'", nullValue())
                .body("'projects'[0].'lastPushed'", nullValue())
                .body("'projects'[0].'primaryLanguage'", containsString("Qph"))
                .body("'projects'[0].'maintainers'.size()", equalTo(0))
                .body("'statistics'.size()", equalTo(1))
                .body("'statistics'[0].'key'.'snapshotDate'", containsString("1947-12-31T05:54:11"))
                .body("'statistics'[0].'privateProjectCount'", numberMatches(-2.008330116E9))
                .body("'statistics'[0].'publicProjectCount'", numberMatches(325.0))
                .body("'statistics'[0].'membersCount'", nullValue())
                .body("'statistics'[0].'teamsCount'", numberMatches(504.0))
                .body("'statistics'[0].'allContributorsCount'", numberMatches(367.0))
                .body("'statistics'[0].'externalContributorsCount'", numberMatches(658.0))
                .body("'statistics'[0].'allStarsCount'", numberMatches(523.0))
                .body("'statistics'[0].'allForksCount'", numberMatches(269.0))
                .body("'statistics'[0].'allSizeCount'", nullValue())
                .body("'statistics'[0].'programLanguagesCount'", numberMatches(160.0))
                .body("'statistics'[0].'tagsCount'", nullValue())
                .body("'statistics'[0].'organizationName'", containsString("U"))
                .body("'statistics'[0].'snapshotDate'", numberMatches(-6.94364749E11));
    }
    
    
    /**
    * Calls:
    * (200) GET:/statistics
    * Found 2 potential faults of type-code 101
    */
    @Test(timeout = 60000)
    public void test_7_getOnStatisticsWithQueryParamReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("STATISTICS", 21L)
                .d("ID", "268")
                .d("SNAPSHOT_DATE", "\"2069-08-30 22:20:07\"")
                .d("ALL_CONTRIBUTORS_COUNT", "300")
                .d("ALL_FORKS_COUNT", "787")
                .d("ALL_SIZE_COUNT", "NULL")
                .d("ALL_STARS_COUNT", "NULL")
                .d("MEMBERS_COUNT", "919")
                .d("ORGANIZATION_NAME", "\"uZ\"")
                .d("PRIVATE_PROJECT_COUNT", "NULL")
                .d("PROGRAM_LANGUAGES_COUNT", "288")
                .d("PUBLIC_PROJECT_COUNT", "NULL")
                .d("TAGS_COUNT", "NULL")
                .d("TEAMS_COUNT", "705")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/0/allSizeCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.format.date-time. [Path '/0/key/snapshotDate'] String "2069-08-30T22:20:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics?organizations=uZ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'key'.'snapshotDate'", containsString("2069-08-30T22:20:07"))
                .body("[0].'privateProjectCount'", nullValue())
                .body("[0].'publicProjectCount'", nullValue())
                .body("[0].'membersCount'", numberMatches(919.0))
                .body("[0].'teamsCount'", numberMatches(705.0))
                .body("[0].'allContributorsCount'", numberMatches(300.0))
                .body("[0].'externalContributorsCount'", nullValue())
                .body("[0].'allStarsCount'", nullValue())
                .body("[0].'allForksCount'", numberMatches(787.0))
                .body("[0].'allSizeCount'", nullValue())
                .body("[0].'programLanguagesCount'", numberMatches(288.0))
                .body("[0].'tagsCount'", nullValue())
                .body("[0].'organizationName'", containsString("uZ"))
                .body("[0].'snapshotDate'", numberMatches(3.145137607E12));
    }
    
    
    /**
    * Calls:
    * (200) GET:/statistics
    * Found 2 potential faults of type-code 101
    */
    @Test(timeout = 60000)
    public void test_8_getOnStatisticsWithQueryParamsReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("STATISTICS", 27L)
                .d("ID", "166")
                .d("SNAPSHOT_DATE", "\"1947-12-31 05:54:11\"")
                .d("ALL_CONTRIBUTORS_COUNT", "367")
                .d("ALL_FORKS_COUNT", "269")
                .d("ALL_SIZE_COUNT", "NULL")
                .d("ALL_STARS_COUNT", "523")
                .d("MEMBERS_COUNT", "NULL")
                .d("ORGANIZATION_NAME", "\"U\"")
                .d("PRIVATE_PROJECT_COUNT", "-2008330116")
                .d("PROGRAM_LANGUAGES_COUNT", "160")
                .d("PUBLIC_PROJECT_COUNT", "325")
                .d("TAGS_COUNT", "NULL")
                .d("TEAMS_COUNT", "504")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "658")
            .and().insertInto("PROJECT", 28L)
                .d("COMMITS_COUNT", "182")
                .d("CONTRIBUTORS_COUNT", "NULL")
                .d("DESCRIPTION", "NULL")
                .d("FORKS_COUNT", "931")
                .d("GIT_HUB_PROJECT_ID", "756")
                .d("LAST_PUSHED", "NULL")
                .d("NAME", "\"_EM_514_XYZ_\"")
                .d("ORGANIZATION_NAME", "NULL")
                .d("PRIMARY_LANGUAGE", "\"Qph\"")
                .d("SCORE", "NULL")
                .d("SNAPSHOT_DATE", "\"1991-11-04 17:36:49\"")
                .d("STARS_COUNT", "997")
                .d("URL", "\"_EM_515_XYZ_\"")
                .d("TITLE", "\"v_wz\"")
                .d("IMAGE", "\"ZT3\"")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "720")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/0/allSizeCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.format.date-time. [Path '/0/key/snapshotDate'] String "1947-12-31T05:54:11" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics?" + 
                    "organizations=U&" + 
                    "q=FMu93vKY8&" + 
                    "offset=_EM_469_XYZ_&" + 
                    "limit=_EM_470_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'key'.'snapshotDate'", containsString("1947-12-31T05:54:11"))
                .body("[0].'privateProjectCount'", numberMatches(-2.008330116E9))
                .body("[0].'publicProjectCount'", numberMatches(325.0))
                .body("[0].'membersCount'", nullValue())
                .body("[0].'teamsCount'", numberMatches(504.0))
                .body("[0].'allContributorsCount'", numberMatches(367.0))
                .body("[0].'externalContributorsCount'", numberMatches(658.0))
                .body("[0].'allStarsCount'", numberMatches(523.0))
                .body("[0].'allForksCount'", numberMatches(269.0))
                .body("[0].'allSizeCount'", nullValue())
                .body("[0].'programLanguagesCount'", numberMatches(160.0))
                .body("[0].'tagsCount'", nullValue())
                .body("[0].'organizationName'", containsString("U"))
                .body("[0].'snapshotDate'", numberMatches(-6.94364749E11));
    }
    
    
    /**
    * Calls:
    * 1 - (403) GET:/config
    * 2 - (200) GET:/config
    * Found 3 potential faults. Type-codes: 101, 980
    */
    @Test(timeout = 60000)
    public void test_9_getOnConfigShowsFaults_101_980() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "MU9ZdsI")
                .get(baseUrlOfSut + "/config?access_token=_EM_176_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/github.login'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault980. A Protected Resource Is Accessible Without Providing Any Authentication. null.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/config")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'cache.path'", containsString("/Users/pgarrett/evoMaster/EMB/jdk_8_maven/cs/rest/original/catwatch/catwatch-backend/target/temp/tmp_catwatch/cache_12346"))
                .body("'cache.size'", containsString("50"))
                .body("'endpoints.enabled'", containsString("false"))
                .body("'endpoints.health.enabled'", containsString("true"))
                .body("'github.login'", nullValue())
                .body("'organization.list'", containsString("zalando,zalando-stups,zalando-incubator"))
                .body("'schedule'", containsString("0 1 8 * * *"))
                .body("'scoring.project'", containsString("function(project) {var daysSinceLastPush = 0;if (project.lastPushed) {var tokens = project.lastPushed.split(\" \");var day = tokens[2];var month = tokens[1];var year = tokens[5];var lastPushedDate = new Date(day + ' ' + month + ' ' + year);var millisInDay = 86400000;daysSinceLastPush = Math.floor((new Date() - lastPushedDate) / millisInDay);}var maintainersPenalty = 0;if (project.maintainers.length < 2) {maintainersPenalty = 100;}return project.starsCount * 3 + project.forksCount * 2 + project.contributorsCount * 5 - daysSinceLastPush - maintainersPenalty}"))
                .body("'spring.database.driverClassName'", nullValue())
                .body("'spring.datasource.platform'", nullValue())
                .body("'spring.datasource.username'", containsString("sa"))
                .body("'spring.jpa.database'", nullValue())
                .body("'spring.jpa.hibernate.ddl-auto'", containsString("update"));
    }
    
    
    /**
    * Calls:
    * 1 - (403) GET:/export
    * 2 - (200) GET:/export
    * Found 4 potential faults. Type-codes: 101, 980
    */
    @Test(timeout = 60000)
    public void test_10_getOnExportShowsFaults_101_980UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("STATISTICS", 27L)
                .d("ID", "166")
                .d("SNAPSHOT_DATE", "\"1947-12-31 05:54:11\"")
                .d("ALL_CONTRIBUTORS_COUNT", "367")
                .d("ALL_FORKS_COUNT", "269")
                .d("ALL_SIZE_COUNT", "NULL")
                .d("ALL_STARS_COUNT", "523")
                .d("MEMBERS_COUNT", "NULL")
                .d("ORGANIZATION_NAME", "\"U\"")
                .d("PRIVATE_PROJECT_COUNT", "-2008330116")
                .d("PROGRAM_LANGUAGES_COUNT", "160")
                .d("PUBLIC_PROJECT_COUNT", "325")
                .d("TAGS_COUNT", "NULL")
                .d("TEAMS_COUNT", "504")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "658")
            .and().insertInto("PROJECT", 28L)
                .d("COMMITS_COUNT", "182")
                .d("CONTRIBUTORS_COUNT", "NULL")
                .d("DESCRIPTION", "NULL")
                .d("FORKS_COUNT", "931")
                .d("GIT_HUB_PROJECT_ID", "756")
                .d("LAST_PUSHED", "NULL")
                .d("NAME", "\"_EM_514_XYZ_\"")
                .d("ORGANIZATION_NAME", "NULL")
                .d("PRIMARY_LANGUAGE", "\"Qph\"")
                .d("SCORE", "NULL")
                .d("SNAPSHOT_DATE", "\"1991-11-04 17:36:49\"")
                .d("STARS_COUNT", "997")
                .d("URL", "\"_EM_515_XYZ_\"")
                .d("TITLE", "\"v_wz\"")
                .d("IMAGE", "\"ZT3\"")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "720")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .header("x-organizations", "Gp40_D4Ym02ZSmP")
                .get(baseUrlOfSut + "/export?access_token=BabaGjNbyWBVp")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/projects/0/contributorsCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.format.date-time. [Path '/projects/0/snapshotDate'] String "1991-11-04T17:36:49" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        // Fault980. A Protected Resource Is Accessible Without Providing Any Authentication. null.
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .header("x-organizations", "_EM_511_XYZ_")
                .get(baseUrlOfSut + "/export")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'contributors'.size()", equalTo(0))
                .body("'projects'.size()", equalTo(1))
                .body("'projects'[0].'languageList'.size()", equalTo(0))
                .body("'projects'[0].'gitHubProjectId'", numberMatches(756.0))
                .body("'projects'[0].'snapshotDate'", containsString("1991-11-04T17:36:49"))
                .body("'projects'[0].'name'", containsString("_EM_514_XYZ_"))
                .body("'projects'[0].'title'", containsString("v_wz"))
                .body("'projects'[0].'image'", containsString("ZT3"))
                .body("'projects'[0].'organizationName'", nullValue())
                .body("'projects'[0].'url'", containsString("_EM_515_XYZ_"))
                .body("'projects'[0].'description'", nullValue())
                .body("'projects'[0].'starsCount'", numberMatches(997.0))
                .body("'projects'[0].'commitsCount'", numberMatches(182.0))
                .body("'projects'[0].'forksCount'", numberMatches(931.0))
                .body("'projects'[0].'contributorsCount'", nullValue())
                .body("'projects'[0].'externalContributorsCount'", numberMatches(720.0))
                .body("'projects'[0].'score'", nullValue())
                .body("'projects'[0].'lastPushed'", nullValue())
                .body("'projects'[0].'primaryLanguage'", containsString("Qph"))
                .body("'projects'[0].'maintainers'.size()", equalTo(0))
                .body("'statistics'.size()", equalTo(1))
                .body("'statistics'[0].'key'.'snapshotDate'", containsString("1947-12-31T05:54:11"))
                .body("'statistics'[0].'privateProjectCount'", numberMatches(-2.008330116E9))
                .body("'statistics'[0].'publicProjectCount'", numberMatches(325.0))
                .body("'statistics'[0].'membersCount'", nullValue())
                .body("'statistics'[0].'teamsCount'", numberMatches(504.0))
                .body("'statistics'[0].'allContributorsCount'", numberMatches(367.0))
                .body("'statistics'[0].'externalContributorsCount'", numberMatches(658.0))
                .body("'statistics'[0].'allStarsCount'", numberMatches(523.0))
                .body("'statistics'[0].'allForksCount'", numberMatches(269.0))
                .body("'statistics'[0].'allSizeCount'", nullValue())
                .body("'statistics'[0].'programLanguagesCount'", numberMatches(160.0))
                .body("'statistics'[0].'tagsCount'", nullValue())
                .body("'statistics'[0].'organizationName'", containsString("U"))
                .body("'statistics'[0].'snapshotDate'", numberMatches(-6.94364749E11));
    }
    
    
    /**
    * Calls:
    * 1 - (403) GET:/languages
    * 2 - (200) GET:/languages
    * Found 2 potential faults. Type-codes: 101, 980
    */
    @Test(timeout = 60000)
    public void test_11_getOnLanguagesWithQueryParamsShowsFaults_101_980UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("STATISTICS", 21L)
                .d("ID", "268")
                .d("SNAPSHOT_DATE", "\"2069-08-30 22:20:07\"")
                .d("ALL_CONTRIBUTORS_COUNT", "300")
                .d("ALL_FORKS_COUNT", "787")
                .d("ALL_SIZE_COUNT", "NULL")
                .d("ALL_STARS_COUNT", "NULL")
                .d("MEMBERS_COUNT", "919")
                .d("ORGANIZATION_NAME", "\"uZ\"")
                .d("PRIVATE_PROJECT_COUNT", "NULL")
                .d("PROGRAM_LANGUAGES_COUNT", "288")
                .d("PUBLIC_PROJECT_COUNT", "NULL")
                .d("TAGS_COUNT", "NULL")
                .d("TEAMS_COUNT", "705")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/languages?" + 
                    "organizations=rDUteYQ76G&" + 
                    "limit=274&" + 
                    "offset=730&" + 
                    "access_token=LkT3XCtKhdE")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
        
        // Fault980. A Protected Resource Is Accessible Without Providing Any Authentication. null.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/languages?" + 
                    "organizations=uZ&" + 
                    "q=Ilw_0h")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * 1 - (403) GET:/projects
    * 2 - (200) GET:/projects
    * Found 2 potential faults. Type-codes: 101, 980
    */
    @Test(timeout = 60000)
    public void test_12_getOnProjectsShowsFaults_101_980() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/projects?" + 
                    "start_date=1915-11-29T13%3A05%3A05.681%2B09%3A19&" + 
                    "end_date=1950-00-13T01%3A52%3A37.358%2B06%3A58&" + 
                    "EMextraParam123=_EM_20_XYZ_&" + 
                    "access_token=aCb")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
        
        // Fault980. A Protected Resource Is Accessible Without Providing Any Authentication. null.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/projects?" + 
                    "organizations=uxqcdkGaA5r&" + 
                    "offset=468&" + 
                    "start_date=2074-02-02T02%3A01%3A29Z&" + 
                    "sortBy=_EM_310_XYZ_&" + 
                    "q=iAooQAl&" + 
                    "language=8OjkB2xj")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * 1 - (403) GET:/statistics
    * 2 - (200) GET:/statistics
    * Found 4 potential faults. Type-codes: 101, 980
    */
    @Test(timeout = 60000)
    public void test_13_getOnStatisticsShowsFaults_101_980UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("STATISTICS", 21L)
                .d("ID", "268")
                .d("SNAPSHOT_DATE", "\"2069-08-30 22:20:07\"")
                .d("ALL_CONTRIBUTORS_COUNT", "300")
                .d("ALL_FORKS_COUNT", "787")
                .d("ALL_SIZE_COUNT", "NULL")
                .d("ALL_STARS_COUNT", "NULL")
                .d("MEMBERS_COUNT", "919")
                .d("ORGANIZATION_NAME", "\"uZ\"")
                .d("PRIVATE_PROJECT_COUNT", "NULL")
                .d("PROGRAM_LANGUAGES_COUNT", "288")
                .d("PUBLIC_PROJECT_COUNT", "NULL")
                .d("TAGS_COUNT", "NULL")
                .d("TEAMS_COUNT", "705")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics?" + 
                    "end_date=TLr9vc4L&" + 
                    "access_token=XY7IiOjl&" + 
                    "offset=&" + 
                    "limit=0yQ5U2St")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/0/allSizeCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.format.date-time. [Path '/0/key/snapshotDate'] String "2069-08-30T22:20:07" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        // Fault980. A Protected Resource Is Accessible Without Providing Any Authentication. null.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics?organizations=uZ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'key'.'snapshotDate'", containsString("2069-08-30T22:20:07"))
                .body("[0].'privateProjectCount'", nullValue())
                .body("[0].'publicProjectCount'", nullValue())
                .body("[0].'membersCount'", numberMatches(919.0))
                .body("[0].'teamsCount'", numberMatches(705.0))
                .body("[0].'allContributorsCount'", numberMatches(300.0))
                .body("[0].'externalContributorsCount'", nullValue())
                .body("[0].'allStarsCount'", nullValue())
                .body("[0].'allForksCount'", numberMatches(787.0))
                .body("[0].'allSizeCount'", nullValue())
                .body("[0].'programLanguagesCount'", numberMatches(288.0))
                .body("[0].'tagsCount'", nullValue())
                .body("[0].'organizationName'", containsString("uZ"))
                .body("[0].'snapshotDate'", numberMatches(3.145137607E12));
    }
    
    
    /**
    * Calls:
    * (400) GET:/statistics
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_14_getOnStatisticsWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/statistics'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics?end_date=_EM_22_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Invalid date format for endDate"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/statistics
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_15_getOnStatisticsWithQueryParamsEmptyEnd_date() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/statistics'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics?" + 
                    "organizations=_EM_240_XYZ_&" + 
                    "start_date=_CpkBa5&" + 
                    "end_date=&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Invalid date format for stardDate"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/projects
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_16_getOnProjectsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/projects'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_239_XYZ_")
                .get(baseUrlOfSut + "/projects?" + 
                    "organizations=_EM_237_XYZ_&" + 
                    "limit=422&" + 
                    "offset=413&" + 
                    "start_date=1910-13-30T07%3A34%3A09Z&" + 
                    "sortBy=_EM_238_XYZ_&" + 
                    "language=HaK7gctVy&" + 
                    "EMextraParam123=_EM_20_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.web.method.annotation.MethodArgumentTypeMismatchException"))
                .body("'message'", containsString("Failed to convert value of type 'java.lang.String' to required type 'java.util.Date'; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [@io.swagger.annotations.ApiParam @org.springframework.web.bind.annotation.RequestParam @org.springframework.format.annotation.DateTimeFormat java.util.Date] for value '1910-13-30T07:34:09Z'; nested exception is java.lang.IllegalArgumentException: Parse attempt failed for value [1910-13-30T07:34:09Z]"))
                .body("'path'", containsString("/projects"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/statistics
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_17_getOnStatisticsWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/statistics'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics?" + 
                    "organizations=_EM_286_XYZ_&" + 
                    "start_date=_EM_287_XYZ_&" + 
                    "EMextraParam123=_EM_288_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Invalid date format for stardDate"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/export
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_18_getOnExportWithQueryParamsEmptyAccess_token() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/export'.
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/export?" + 
                    "EMextraParam123=_EM_12_XYZ_&" + 
                    "access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/languages
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_19_getOnLanguagesWithQueryParamsEmptyAccess_tokenUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("STATISTICS", 25L)
                .d("ID", "437")
                .d("SNAPSHOT_DATE", "\"2066-03-02 23:52:13\"")
                .d("ALL_CONTRIBUTORS_COUNT", "NULL")
                .d("ALL_FORKS_COUNT", "NULL")
                .d("ALL_SIZE_COUNT", "640")
                .d("ALL_STARS_COUNT", "698")
                .d("MEMBERS_COUNT", "378")
                .d("ORGANIZATION_NAME", "NULL")
                .d("PRIVATE_PROJECT_COUNT", "NULL")
                .d("PROGRAM_LANGUAGES_COUNT", "288")
                .d("PUBLIC_PROJECT_COUNT", "458")
                .d("TAGS_COUNT", "734")
                .d("TEAMS_COUNT", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .and().insertInto("PROJECT", 26L)
                .d("COMMITS_COUNT", "89")
                .d("CONTRIBUTORS_COUNT", "179")
                .d("DESCRIPTION", "NULL")
                .d("FORKS_COUNT", "868")
                .d("GIT_HUB_PROJECT_ID", "835")
                .d("LAST_PUSHED", "\"_EM_317_XYZ_\"")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "\"wvTeqXHJTNQQ\"")
                .d("PRIMARY_LANGUAGE", "NULL")
                .d("SCORE", "NULL")
                .d("SNAPSHOT_DATE", "NULL")
                .d("STARS_COUNT", "NULL")
                .d("URL", "\"CUnTcpAyGsqC5s5\"")
                .d("TITLE", "NULL")
                .d("IMAGE", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "623")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/languages'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/languages?" + 
                    "organizations=wvTeqXHJTNQQ&" + 
                    "offset=807&" + 
                    "q=Fj0Pne73Mvb0&" + 
                    "access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/config
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_20_getOnConfigWithQueryParamEmptyAccess_token() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/config'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("x-organizations", "cInqQL8tKwWOc0")
                .header("X-Organizations", "MrehsvSmcSUyE")
                .get(baseUrlOfSut + "/config?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/contributors
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_21_getOnContributorsWithQueryParamsEmptyAccess_token() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/contributors'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=KAxPi&" + 
                    "limit=210&" + 
                    "start_date=3vpXhGWQ&" + 
                    "access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/init
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_22_getOnInitWithQueryParamEmptyAccess_token() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/init'.
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/init?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/import
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_23_postOnImportWithQueryParamEmptyAccess_tokenUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTRIBUTOR", 20L)
                .d("ID", "995")
                .d("ORGANIZATION_ID", "-7416019847483926528")
                .d("SNAPSHOT_DATE", "\"1923-06-25 11:26:42\"")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "NULL")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "518")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "NULL")
                .d("PERSONAL_COMMITS_COUNT", "NULL")
                .d("PERSONAL_PROJECTS_COUNT", "NULL")
                .d("URL", "\"1KO6aLhZ9\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/import'.
        DatabaseDto dto_DatabaseDto_1 = new DatabaseDto();
        List<Project> list_Project_1 = new ArrayList<Project>();
        Project dto_Project_1 = new Project();
        dto_Project_1.setContributorscount(305);
        dto_Project_1.setForkscount(65);
        dto_Project_1.setGithubprojectid(668);
        List<String> list_String_1 = new ArrayList<String>();
        list_String_1.add("s6D1wVjGD9Np");
        list_String_1.add("");
        list_String_1.add("LFJXl");
        dto_Project_1.setLanguagelist(list_String_1);
        dto_Project_1.setName("_EM_397_XYZ_");
        dto_Project_1.setScore(719);
        dto_Project_1.setStarscount(988);
        dto_Project_1.setTitle("_EM_400_XYZ_");
        dto_Project_1.setUrl("FVW5dMnaGeAbpR");
        list_Project_1.add(dto_Project_1);
        dto_DatabaseDto_1.setProjects(list_Project_1);
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(dto_DatabaseDto_1)
                .post(baseUrlOfSut + "/import?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/delete
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_24_getOnDeleteWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/delete?EMextraParam123=_EM_11_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/init
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_25_getOnInitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/init")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/delete
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_26_getOnDeleteWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/delete?" + 
                    "EMextraParam123=_EM_11_XYZ_&" + 
                    "access_token=_656PwcvKtxZX9e")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
    }
    
    
    /**
    * Calls:
    * (403) GET:/projects
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_27_getOnProjectsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/projects?" + 
                    "start_date=1915-11-29T13%3A05%3A05.681%2B09%3A19&" + 
                    "end_date=1950-00-13T01%3A52%3A37.358%2B06%3A58&" + 
                    "EMextraParam123=_EM_20_XYZ_&" + 
                    "access_token=aCb")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
    }
    
    
    /**
    * Calls:
    * (403) GET:/init
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_28_getOnInitWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "bQw9")
                .get(baseUrlOfSut + "/init?access_token=9ZsKgHnfsYA")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
    }
    
    
    /**
    * Calls:
    * (403) GET:/statistics
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_29_getOnStatisticsWithQueryParamsEmptyOffset() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics?" + 
                    "end_date=TLr9vc4L&" + 
                    "access_token=XY7IiOjl&" + 
                    "offset=&" + 
                    "limit=0yQ5U2St")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
    }
    
    
    /**
    * Calls:
    * (403) GET:/fetch
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_30_getOnFetchReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "_EM_13_XYZ_")
                .get(baseUrlOfSut + "/fetch?access_token=09EtU2eOjgejor")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
    }
    
    
    /**
    * Calls:
    * (403) GET:/config
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_31_getOnConfigWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "MU9ZdsI")
                .get(baseUrlOfSut + "/config?access_token=_EM_176_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
    }
    
    
    /**
    * Calls:
    * (403) GET:/contributors
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_32_getOnContributorsWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTRIBUTOR", 31L)
                .d("ID", "461")
                .d("ORGANIZATION_ID", "709")
                .d("SNAPSHOT_DATE", "\"1924-04-25 20:59:29\"")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "NULL")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "NULL")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "NULL")
                .d("PERSONAL_COMMITS_COUNT", "NULL")
                .d("PERSONAL_PROJECTS_COUNT", "877")
                .d("URL", "\"PRWYRHDNKK\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=709&" + 
                    "limit=476&" + 
                    "offset=277&" + 
                    "start_date=vxWW&" + 
                    "end_date=D&" + 
                    "q=QHhbnli1&" + 
                    "access_token=vq")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
    }
    
    
    /**
    * Calls:
    * (403) GET:/export
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_33_getOnExportWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .header("x-organizations", "Gp40_D4Ym02ZSmP")
                .get(baseUrlOfSut + "/export?access_token=BabaGjNbyWBVp")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
    }
    
    
    /**
    * Calls:
    * (403) GET:/languages
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_34_getOnLanguagesWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/languages?" + 
                    "organizations=rDUteYQ76G&" + 
                    "limit=274&" + 
                    "offset=730&" + 
                    "access_token=LkT3XCtKhdE")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
    }
    
    
    /**
    * Calls:
    * (403) GET:/projects
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_35_getOnProjectsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/projects?" + 
                    "organizations=qO1i4GLXTx&" + 
                    "limit=708&" + 
                    "start_date=1936-00-25T-1%3A00%3A58.215%2B14%3A32&" + 
                    "sortBy=G1anIhv94IBh0oS5&" + 
                    "q=6pRLX7e_xV&" + 
                    "access_token=_EM_575_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
    }
    
    
    /**
    * Calls:
    * (403) POST:/import
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_36_postOnImportReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTRIBUTOR", 20L)
                .d("ID", "995")
                .d("ORGANIZATION_ID", "-7416019847483926528")
                .d("SNAPSHOT_DATE", "\"1923-06-25 11:26:42\"")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "NULL")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "518")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "NULL")
                .d("PERSONAL_COMMITS_COUNT", "NULL")
                .d("PERSONAL_PROJECTS_COUNT", "NULL")
                .d("URL", "\"1KO6aLhZ9\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        DatabaseDto dto_DatabaseDto_1 = new DatabaseDto();
        List<Contributor> list_Contributor_1 = new ArrayList<Contributor>();
        Contributor dto_Contributor_1 = new Contributor();
        Key dto_Key_1 = new Key();
        dto_Contributor_1.setKey(dto_Key_1);
        dto_Contributor_1.setLoginid("_EM_365_XYZ_");
        dto_Contributor_1.setName("IF9Aqpd2u");
        dto_Contributor_1.setOrganizationid(97);
        dto_Contributor_1.setOrganizationalcommitscount(412);
        dto_Contributor_1.setOrganizationalprojectscount(202);
        dto_Contributor_1.setPersonalcommitscount(744);
        dto_Contributor_1.setPersonalprojectscount(649);
        dto_Contributor_1.setSnapshotdate("2067-04-06T16:16:27+04:12");
        dto_Contributor_1.setUrl("lwrdhUyeglYc");
        list_Contributor_1.add(dto_Contributor_1);
        Contributor dto_Contributor_2 = new Contributor();
        dto_Contributor_2.setId(580);
        dto_Contributor_2.setLoginid("v");
        dto_Contributor_2.setName("BoGCTj");
        dto_Contributor_2.setOrganizationname("_EM_366_XYZ_");
        dto_Contributor_2.setOrganizationalprojectscount(764);
        dto_Contributor_2.setPersonalprojectscount(229);
        list_Contributor_1.add(dto_Contributor_2);
        Contributor dto_Contributor_3 = new Contributor();
        dto_Contributor_3.setId(546);
        Key dto_Key_3 = new Key();
        dto_Contributor_3.setKey(dto_Key_3);
        dto_Contributor_3.setLoginid("_EM_367_XYZ_");
        dto_Contributor_3.setName("Iu9");
        dto_Contributor_3.setOrganizationname("_EM_368_XYZ_");
        dto_Contributor_3.setUrl("x");
        list_Contributor_1.add(dto_Contributor_3);
        Contributor dto_Contributor_4 = new Contributor();
        dto_Contributor_4.setId(-6977946559179359698);
        dto_Contributor_4.setOrganizationname("_EM_369_XYZ_");
        dto_Contributor_4.setOrganizationalcommitscount(671);
        dto_Contributor_4.setPersonalcommitscount(671);
        dto_Contributor_4.setUrl("fT4p6J");
        list_Contributor_1.add(dto_Contributor_4);
        Contributor dto_Contributor_5 = new Contributor();
        Key dto_Key_5 = new Key();
        dto_Key_5.setId(60);
        dto_Contributor_5.setKey(dto_Key_5);
        dto_Contributor_5.setLoginid("");
        dto_Contributor_5.setName("q");
        dto_Contributor_5.setOrganizationid(428);
        dto_Contributor_5.setOrganizationname("fK5GL0DoDNeX");
        dto_Contributor_5.setOrganizationalcommitscount(818);
        dto_Contributor_5.setPersonalprojectscount(906);
        dto_Contributor_5.setSnapshotdate("2066-03-09T19:53:00-14:58");
        dto_Contributor_5.setUrl("zRyF8nJbf6qnzgVh");
        list_Contributor_1.add(dto_Contributor_5);
        dto_DatabaseDto_1.setContributors(list_Contributor_1);
        List<Project> list_Project_1 = new ArrayList<Project>();
        Project dto_Project_1 = new Project();
        dto_Project_1.setContributorscount(716);
        dto_Project_1.setForkscount(313);
        List<String> list_String_1 = new ArrayList<String>();
        list_String_1.add("_EM_370_XYZ_");
        list_String_1.add("YJJrHJ");
        list_String_1.add("PelNW8oSQ");
        list_String_1.add("_EM_371_XYZ_");
        dto_Project_1.setLanguagelist(list_String_1);
        dto_Project_1.setScore(699);
        dto_Project_1.setSnapshotdate("2094-04-16T24:49:26.610-06:50");
        list_Project_1.add(dto_Project_1);
        Project dto_Project_2 = new Project();
        dto_Project_2.setCommitscount(97);
        dto_Project_2.setContributorscount(309);
        dto_Project_2.setExternalcontributorscount(410);
        dto_Project_2.setForkscount(125);
        dto_Project_2.setGithubprojectid(360);
        dto_Project_2.setImage("6Yd44jnDSUQwTykI");
        List<String> list_String_2 = new ArrayList<String>();
        list_String_2.add("B7jh0oaYnHIt");
        list_String_2.add("TSh4qgC");
        list_String_2.add("2BZoiTYioz4");
        list_String_2.add("lPrOQe4QIeqcT");
        dto_Project_2.setMaintainers(list_String_2);
        dto_Project_2.setName("0");
        dto_Project_2.setStarscount(710);
        dto_Project_2.setTitle("ayRDUmS");
        dto_Project_2.setUrl("_EM_375_XYZ_");
        list_Project_1.add(dto_Project_2);
        Project dto_Project_3 = new Project();
        dto_Project_3.setCommitscount(357);
        dto_Project_3.setContributorscount(810);
        dto_Project_3.setDescription("Wfk7T2K");
        List<String> list_String_3 = new ArrayList<String>();
        list_String_3.add("80w0ASj56BOD62");
        list_String_3.add("uzSTZ7pBHLLayHrs");
        list_String_3.add("_EM_376_XYZ_");
        list_String_3.add("_EM_377_XYZ_");
        list_String_3.add("RHXExeXxMyemKB42");
        dto_Project_3.setMaintainers(list_String_3);
        dto_Project_3.setName("NlinyuI9KiOcX7HP");
        dto_Project_3.setOrganizationname("QYN");
        dto_Project_3.setSnapshotdate("2063-04-30T10:29:60.033Z");
        dto_Project_3.setStarscount(338);
        dto_Project_3.setUrl("GgpEZhs8_pR");
        list_Project_1.add(dto_Project_3);
        Project dto_Project_4 = new Project();
        dto_Project_4.setCommitscount(805);
        dto_Project_4.setContributorscount(823);
        dto_Project_4.setDescription("_EM_380_XYZ_");
        dto_Project_4.setExternalcontributorscount(658);
        dto_Project_4.setForkscount(235);
        dto_Project_4.setImage("_EM_320_XYZ_");
        List<String> list_String_4 = new ArrayList<String>();
        list_String_4.add("4pW");
        list_String_4.add("_EM_381_XYZ_");
        dto_Project_4.setLanguagelist(list_String_4);
        dto_Project_4.setLastpushed("VzdI");
        dto_Project_4.setPrimarylanguage("zsex377Di_eUPHy");
        dto_Project_4.setScore(709);
        dto_Project_4.setStarscount(68);
        dto_Project_4.setTitle("WMXhx");
        dto_Project_4.setUrl("wy2l");
        list_Project_1.add(dto_Project_4);
        dto_DatabaseDto_1.setProjects(list_Project_1);
        List<Statistics> list_Statistics_1 = new ArrayList<Statistics>();
        Statistics dto_Statistics_1 = new Statistics();
        dto_Statistics_1.setAllcontributorscount(413);
        dto_Statistics_1.setAllforkscount(678);
        dto_Statistics_1.setExternalcontributorscount(630);
        dto_Statistics_1.setMemberscount(845);
        dto_Statistics_1.setOrganizationname("QYN");
        dto_Statistics_1.setPrivateprojectcount(364);
        dto_Statistics_1.setSnapshotdate("1978-04-30T14:53:26Z");
        dto_Statistics_1.setTagscount(966);
        dto_Statistics_1.setTeamscount(628);
        list_Statistics_1.add(dto_Statistics_1);
        Statistics dto_Statistics_2 = new Statistics();
        dto_Statistics_2.setAllcontributorscount(548);
        dto_Statistics_2.setAllforkscount(255);
        dto_Statistics_2.setAllsizecount(798);
        dto_Statistics_2.setExternalcontributorscount(658);
        dto_Statistics_2.setOrganizationname("_EM_384_XYZ_");
        dto_Statistics_2.setProgramlanguagescount(318);
        dto_Statistics_2.setPublicprojectcount(95);
        dto_Statistics_2.setTeamscount(180);
        list_Statistics_1.add(dto_Statistics_2);
        Statistics dto_Statistics_3 = new Statistics();
        dto_Statistics_3.setAllcontributorscount(433);
        dto_Statistics_3.setAllforkscount(409);
        dto_Statistics_3.setAllsizecount(411);
        dto_Statistics_3.setMemberscount(561);
        dto_Statistics_3.setProgramlanguagescount(828);
        dto_Statistics_3.setPublicprojectcount(779);
        dto_Statistics_3.setSnapshotdate("1941-13-26T05:46:25.350-07:09");
        dto_Statistics_3.setTeamscount(972);
        list_Statistics_1.add(dto_Statistics_3);
        Statistics dto_Statistics_4 = new Statistics();
        dto_Statistics_4.setAllsizecount(228);
        dto_Statistics_4.setExternalcontributorscount(826);
        dto_Statistics_4.setId(-3147018692061297621);
        dto_Statistics_4.setMemberscount(919);
        dto_Statistics_4.setProgramlanguagescount(688);
        dto_Statistics_4.setPublicprojectcount(691);
        dto_Statistics_4.setSnapshotdate("1953-06-21T00:10:57Z");
        dto_Statistics_4.setTagscount(966);
        dto_Statistics_4.setTeamscount(444);
        list_Statistics_1.add(dto_Statistics_4);
        Statistics dto_Statistics_5 = new Statistics();
        dto_Statistics_5.setAllcontributorscount(218);
        dto_Statistics_5.setAllforkscount(324);
        dto_Statistics_5.setId(-978566101);
        Key dto_Key_5 = new Key();
        dto_Key_5.setId(746);
        dto_Key_5.setSnapshotdate("2046-11-05T00:34:48Z");
        dto_Statistics_5.setKey(dto_Key_5);
        dto_Statistics_5.setMemberscount(373);
        dto_Statistics_5.setOrganizationname("eEHdTrNPSb");
        dto_Statistics_5.setPrivateprojectcount(989);
        dto_Statistics_5.setSnapshotdate("1996-12-31T22:40:33.989Z");
        dto_Statistics_5.setTagscount(-1937684783);
        dto_Statistics_5.setTeamscount(283);
        list_Statistics_1.add(dto_Statistics_5);
        dto_DatabaseDto_1.setStatistics(list_Statistics_1);
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(dto_DatabaseDto_1)
                .post(baseUrlOfSut + "/import")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
    }
    
    
    /**
    * Calls:
    * (403) POST:/import
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_37_postOnImportReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("STATISTICS", 27L)
                .d("ID", "166")
                .d("SNAPSHOT_DATE", "\"1947-12-31 05:54:11\"")
                .d("ALL_CONTRIBUTORS_COUNT", "367")
                .d("ALL_FORKS_COUNT", "269")
                .d("ALL_SIZE_COUNT", "NULL")
                .d("ALL_STARS_COUNT", "523")
                .d("MEMBERS_COUNT", "NULL")
                .d("ORGANIZATION_NAME", "\"U\"")
                .d("PRIVATE_PROJECT_COUNT", "-2008330116")
                .d("PROGRAM_LANGUAGES_COUNT", "160")
                .d("PUBLIC_PROJECT_COUNT", "325")
                .d("TAGS_COUNT", "NULL")
                .d("TEAMS_COUNT", "504")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "658")
            .and().insertInto("PROJECT", 28L)
                .d("COMMITS_COUNT", "182")
                .d("CONTRIBUTORS_COUNT", "NULL")
                .d("DESCRIPTION", "NULL")
                .d("FORKS_COUNT", "931")
                .d("GIT_HUB_PROJECT_ID", "756")
                .d("LAST_PUSHED", "NULL")
                .d("NAME", "\"_EM_514_XYZ_\"")
                .d("ORGANIZATION_NAME", "NULL")
                .d("PRIMARY_LANGUAGE", "\"Qph\"")
                .d("SCORE", "NULL")
                .d("SNAPSHOT_DATE", "\"1991-11-04 17:36:49\"")
                .d("STARS_COUNT", "997")
                .d("URL", "\"_EM_515_XYZ_\"")
                .d("TITLE", "\"v_wz\"")
                .d("IMAGE", "\"ZT3\"")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "720")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        DatabaseDto dto_DatabaseDto_1 = new DatabaseDto();
        List<Contributor> list_Contributor_1 = new ArrayList<Contributor>();
        Contributor dto_Contributor_1 = new Contributor();
        dto_Contributor_1.setId(629);
        dto_Contributor_1.setLoginid("2qZXw5");
        dto_Contributor_1.setName("");
        dto_Contributor_1.setOrganizationalprojectscount(841);
        dto_Contributor_1.setUrl("lmT");
        list_Contributor_1.add(dto_Contributor_1);
        Contributor dto_Contributor_2 = new Contributor();
        dto_Contributor_2.setOrganizationid(739);
        dto_Contributor_2.setOrganizationname("_EM_473_XYZ_");
        dto_Contributor_2.setOrganizationalcommitscount(711);
        dto_Contributor_2.setPersonalcommitscount(671);
        dto_Contributor_2.setPersonalprojectscount(232);
        dto_Contributor_2.setUrl("_EM_474_XYZ_");
        list_Contributor_1.add(dto_Contributor_2);
        Contributor dto_Contributor_3 = new Contributor();
        Key dto_Key_3 = new Key();
        dto_Key_3.setOrganizationid(570572287296345381);
        dto_Key_3.setSnapshotdate("1995-02-19T21:04:22.253Z");
        dto_Contributor_3.setKey(dto_Key_3);
        dto_Contributor_3.setName("_EM_475_XYZ_");
        dto_Contributor_3.setOrganizationname("q");
        dto_Contributor_3.setOrganizationalprojectscount(204);
        dto_Contributor_3.setSnapshotdate("2023-08-18T12:58:21Z");
        list_Contributor_1.add(dto_Contributor_3);
        Contributor dto_Contributor_4 = new Contributor();
        dto_Contributor_4.setName("_5ljD6d9");
        dto_Contributor_4.setOrganizationname("_EM_476_XYZ_");
        dto_Contributor_4.setOrganizationalprojectscount(177);
        dto_Contributor_4.setPersonalprojectscount(211);
        list_Contributor_1.add(dto_Contributor_4);
        Contributor dto_Contributor_5 = new Contributor();
        dto_Contributor_5.setId(101);
        Key dto_Key_5 = new Key();
        dto_Contributor_5.setKey(dto_Key_5);
        dto_Contributor_5.setOrganizationid(948);
        dto_Contributor_5.setOrganizationname("_EM_478_XYZ_");
        dto_Contributor_5.setOrganizationalprojectscount(579);
        dto_Contributor_5.setPersonalcommitscount(671);
        dto_Contributor_5.setSnapshotdate("1937-00-08T12:36:48.475Z");
        dto_Contributor_5.setUrl("_EM_479_XYZ_");
        list_Contributor_1.add(dto_Contributor_5);
        dto_DatabaseDto_1.setContributors(list_Contributor_1);
        List<Statistics> list_Statistics_1 = new ArrayList<Statistics>();
        Statistics dto_Statistics_1 = new Statistics();
        dto_Statistics_1.setAllforkscount(939);
        dto_Statistics_1.setAllsizecount(226);
        Key dto_Key_1 = new Key();
        dto_Key_1.setSnapshotdate("1967-03-21T11:60:12.596Z");
        dto_Statistics_1.setKey(dto_Key_1);
        dto_Statistics_1.setPrivateprojectcount(937);
        dto_Statistics_1.setPublicprojectcount(40);
        dto_Statistics_1.setSnapshotdate("1914-10-31T04:08:14Z");
        dto_Statistics_1.setTagscount(152);
        list_Statistics_1.add(dto_Statistics_1);
        dto_DatabaseDto_1.setStatistics(list_Statistics_1);
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(dto_DatabaseDto_1)
                .post(baseUrlOfSut + "/import")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
    }
    
    
    /**
    * Calls:
    * (403) POST:/import
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_38_postOnImportReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        DatabaseDto dto_DatabaseDto_1 = new DatabaseDto();
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(dto_DatabaseDto_1)
                .post(baseUrlOfSut + "/import?access_token=QfZsqeEJ72fGudQ")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
    }
    
    
    /**
    * Calls:
    * (403) POST:/import
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_39_postOnImportReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("STATISTICS", 27L)
                .d("ID", "166")
                .d("SNAPSHOT_DATE", "\"1947-12-31 05:54:11\"")
                .d("ALL_CONTRIBUTORS_COUNT", "367")
                .d("ALL_FORKS_COUNT", "269")
                .d("ALL_SIZE_COUNT", "NULL")
                .d("ALL_STARS_COUNT", "523")
                .d("MEMBERS_COUNT", "NULL")
                .d("ORGANIZATION_NAME", "\"U\"")
                .d("PRIVATE_PROJECT_COUNT", "-2008330116")
                .d("PROGRAM_LANGUAGES_COUNT", "160")
                .d("PUBLIC_PROJECT_COUNT", "325")
                .d("TAGS_COUNT", "NULL")
                .d("TEAMS_COUNT", "504")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "658")
            .and().insertInto("PROJECT", 28L)
                .d("COMMITS_COUNT", "182")
                .d("CONTRIBUTORS_COUNT", "NULL")
                .d("DESCRIPTION", "NULL")
                .d("FORKS_COUNT", "931")
                .d("GIT_HUB_PROJECT_ID", "756")
                .d("LAST_PUSHED", "NULL")
                .d("NAME", "\"_EM_514_XYZ_\"")
                .d("ORGANIZATION_NAME", "NULL")
                .d("PRIMARY_LANGUAGE", "\"Qph\"")
                .d("SCORE", "NULL")
                .d("SNAPSHOT_DATE", "\"1991-11-04 17:36:49\"")
                .d("STARS_COUNT", "997")
                .d("URL", "\"_EM_515_XYZ_\"")
                .d("TITLE", "\"v_wz\"")
                .d("IMAGE", "\"ZT3\"")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "720")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        DatabaseDto dto_DatabaseDto_1 = new DatabaseDto();
        List<Contributor> list_Contributor_1 = new ArrayList<Contributor>();
        Contributor dto_Contributor_1 = new Contributor();
        dto_Contributor_1.setId(844);
        Key dto_Key_1 = new Key();
        dto_Key_1.setId(72);
        dto_Contributor_1.setKey(dto_Key_1);
        dto_Contributor_1.setLoginid("g4AoedcCBi7m3UT");
        dto_Contributor_1.setOrganizationid(813);
        dto_Contributor_1.setOrganizationname("A4H");
        dto_Contributor_1.setOrganizationalprojectscount(460);
        dto_Contributor_1.setPersonalprojectscount(707);
        dto_Contributor_1.setUrl("_EM_494_XYZ_");
        list_Contributor_1.add(dto_Contributor_1);
        Contributor dto_Contributor_2 = new Contributor();
        dto_Contributor_2.setId(818);
        dto_Contributor_2.setLoginid("_EM_495_XYZ_");
        dto_Contributor_2.setOrganizationid(930);
        dto_Contributor_2.setOrganizationalcommitscount(79);
        dto_Contributor_2.setOrganizationalprojectscount(641);
        dto_Contributor_2.setPersonalcommitscount(-1046102114);
        dto_Contributor_2.setPersonalprojectscount(77);
        dto_Contributor_2.setSnapshotdate("1946-00-28T04:23:21.659-17:21");
        list_Contributor_1.add(dto_Contributor_2);
        dto_DatabaseDto_1.setContributors(list_Contributor_1);
        List<Project> list_Project_1 = new ArrayList<Project>();
        Project dto_Project_1 = new Project();
        dto_Project_1.setCommitscount(256);
        dto_Project_1.setContributorscount(390);
        dto_Project_1.setDescription("_EM_496_XYZ_");
        dto_Project_1.setForkscount(90);
        dto_Project_1.setGithubprojectid(-67101595);
        dto_Project_1.setImage("Q");
        List<String> list_String_1 = new ArrayList<String>();
        list_String_1.add("vdgYpwn");
        list_String_1.add("k");
        list_String_1.add("_EM_497_XYZ_");
        list_String_1.add("AAz");
        dto_Project_1.setLanguagelist(list_String_1);
        dto_Project_1.setLastpushed("yOwpyhaEk5");
        List<String> list_String_1 = new ArrayList<String>();
        list_String_1.add("d0bHF4");
        list_String_1.add("8C1LCTqcV");
        list_String_1.add("_EM_498_XYZ_");
        list_String_1.add("xyulcgpKPSN2Nv");
        list_String_1.add("blnk26ze1bP2d");
        dto_Project_1.setMaintainers(list_String_1);
        dto_Project_1.setName("_EM_499_XYZ_");
        dto_Project_1.setOrganizationname("mOCe");
        dto_Project_1.setScore(257);
        dto_Project_1.setSnapshotdate("2019-06-32T23:58:45Z");
        dto_Project_1.setTitle("g3kmJ");
        list_Project_1.add(dto_Project_1);
        Project dto_Project_2 = new Project();
        dto_Project_2.setContributorscount(379);
        dto_Project_2.setGithubprojectid(130);
        List<String> list_String_2 = new ArrayList<String>();
        list_String_2.add("U");
        dto_Project_2.setMaintainers(list_String_2);
        dto_Project_2.setName("XZX11mFuwr");
        dto_Project_2.setScore(187);
        dto_Project_2.setSnapshotdate("2057-12-20T24:39:40.816-13:40");
        dto_Project_2.setTitle("_EM_503_XYZ_");
        list_Project_1.add(dto_Project_2);
        Project dto_Project_3 = new Project();
        dto_Project_3.setContributorscount(185);
        dto_Project_3.setDescription("aVL349589_03pR");
        dto_Project_3.setExternalcontributorscount(32);
        dto_Project_3.setImage("eZjvrdjO");
        dto_Project_3.setLastpushed("3LBXt");
        List<String> list_String_3 = new ArrayList<String>();
        list_String_3.add("Uhyx");
        list_String_3.add("3");
        list_String_3.add("2Rt");
        dto_Project_3.setMaintainers(list_String_3);
        dto_Project_3.setName("_EM_506_XYZ_");
        dto_Project_3.setStarscount(863);
        dto_Project_3.setTitle("_EM_319_XYZ_");
        list_Project_1.add(dto_Project_3);
        Project dto_Project_4 = new Project();
        dto_Project_4.setDescription("faO3CDoo");
        dto_Project_4.setExternalcontributorscount(448);
        dto_Project_4.setGithubprojectid(665);
        dto_Project_4.setLastpushed("n7Goch4jMIOU0");
        dto_Project_4.setPrimarylanguage("kS_W");
        dto_Project_4.setScore(443);
        dto_Project_4.setSnapshotdate("1977-06-15T11:06:52.336+12:38");
        dto_Project_4.setStarscount(401);
        list_Project_1.add(dto_Project_4);
        dto_DatabaseDto_1.setProjects(list_Project_1);
        List<Statistics> list_Statistics_1 = new ArrayList<Statistics>();
        Statistics dto_Statistics_1 = new Statistics();
        dto_Statistics_1.setAllcontributorscount(622);
        dto_Statistics_1.setAllsizecount(73);
        dto_Statistics_1.setExternalcontributorscount(348);
        Key dto_Key_1 = new Key();
        dto_Statistics_1.setKey(dto_Key_1);
        dto_Statistics_1.setPrivateprojectcount(245);
        dto_Statistics_1.setProgramlanguagescount(464);
        dto_Statistics_1.setTagscount(966);
        list_Statistics_1.add(dto_Statistics_1);
        Statistics dto_Statistics_2 = new Statistics();
        dto_Statistics_2.setAllsizecount(264);
        dto_Statistics_2.setExternalcontributorscount(953);
        dto_Statistics_2.setId(5703897859724105941);
        Key dto_Key_2 = new Key();
        dto_Key_2.setId(1274082566);
        dto_Statistics_2.setKey(dto_Key_2);
        dto_Statistics_2.setMemberscount(591);
        dto_Statistics_2.setPrivateprojectcount(518);
        dto_Statistics_2.setProgramlanguagescount(288);
        dto_Statistics_2.setSnapshotdate("1942-10-04T12:47:47.285-18:26");
        dto_Statistics_2.setTeamscount(991);
        list_Statistics_1.add(dto_Statistics_2);
        Statistics dto_Statistics_3 = new Statistics();
        dto_Statistics_3.setAllcontributorscount(84);
        dto_Statistics_3.setAllforkscount(326);
        dto_Statistics_3.setAllstarscount(753);
        dto_Statistics_3.setExternalcontributorscount(658);
        dto_Statistics_3.setId(1842003751);
        dto_Statistics_3.setMemberscount(715);
        dto_Statistics_3.setOrganizationname("QYN");
        dto_Statistics_3.setPrivateprojectcount(611);
        dto_Statistics_3.setPublicprojectcount(190);
        dto_Statistics_3.setTeamscount(226);
        list_Statistics_1.add(dto_Statistics_3);
        Statistics dto_Statistics_4 = new Statistics();
        dto_Statistics_4.setAllstarscount(771);
        dto_Statistics_4.setExternalcontributorscount(854);
        dto_Statistics_4.setOrganizationname("_EM_510_XYZ_");
        dto_Statistics_4.setPrivateprojectcount(364);
        dto_Statistics_4.setProgramlanguagescount(936);
        dto_Statistics_4.setSnapshotdate("2066-11-30T11:42:39.301+04:50");
        dto_Statistics_4.setTeamscount(588);
        list_Statistics_1.add(dto_Statistics_4);
        Statistics dto_Statistics_5 = new Statistics();
        dto_Statistics_5.setAllcontributorscount(147);
        dto_Statistics_5.setAllforkscount(441);
        dto_Statistics_5.setAllsizecount(608);
        dto_Statistics_5.setExternalcontributorscount(496);
        dto_Statistics_5.setMemberscount(122);
        dto_Statistics_5.setOrganizationname("gTX");
        dto_Statistics_5.setProgramlanguagescount(646);
        dto_Statistics_5.setSnapshotdate("2051-02-17T09:48:15.088+03:50");
        dto_Statistics_5.setTagscount(962);
        list_Statistics_1.add(dto_Statistics_5);
        dto_DatabaseDto_1.setStatistics(list_Statistics_1);
        
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(dto_DatabaseDto_1)
                .post(baseUrlOfSut + "/import")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
    }
    
    
    /**
    * Calls:
    * (500) GET:/statistics/contributors
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_40_getOnStatisticsContributorsWithQueryParamShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTRIBUTOR", 14L)
                .d("ID", "236")
                .d("ORGANIZATION_ID", "399")
                .d("SNAPSHOT_DATE", "\"1976-04-05 19:11:24\"")
                .d("NAME", "\"hf0rbOvlUeqk\"")
                .d("ORGANIZATION_NAME", "NULL")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "NULL")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "200")
                .d("PERSONAL_COMMITS_COUNT", "290")
                .d("PERSONAL_PROJECTS_COUNT", "760")
                .d("URL", "\"_EM_277_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/zalando/catwatch/backend/web/StatisticsApi_165_statisticsContributorGet.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/statistics/contributors'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/contributors?EMextraParam123=_EM_278_XYZ_")
                .then()
                .statusCode(500)// org/zalando/catwatch/backend/web/StatisticsApi_165_statisticsContributorGet
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IndexOutOfBoundsException"))
                .body("'message'", containsString("toIndex = 10"))
                .body("'path'", containsString("/statistics/contributors"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/statistics/contributors
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_41_getOnStatisticsContributorsWithQueryParamShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. org/zalando/catwatch/backend/web/StatisticsApi_165_statisticsContributorGet.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/statistics/contributors'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/contributors?organizations=_EM_269_XYZ_")
                .then()
                .statusCode(500)// org/zalando/catwatch/backend/web/StatisticsApi_165_statisticsContributorGet
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IndexOutOfBoundsException"))
                .body("'message'", containsString("toIndex = 10"))
                .body("'path'", containsString("/statistics/contributors"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/statistics/projects
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_42_getOnStatisticsProjectsWithQueryParamShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. org/zalando/catwatch/backend/web/StatisticsApi_132_statisticsProjectGet.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/statistics/projects'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/projects?organizations=_EM_257_XYZ_")
                .then()
                .statusCode(500)// org/zalando/catwatch/backend/web/StatisticsApi_132_statisticsProjectGet
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IndexOutOfBoundsException"))
                .body("'message'", containsString("toIndex = 10"))
                .body("'path'", containsString("/statistics/projects"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/statistics/projects
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_43_getOnStatisticsProjectsShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. org/zalando/catwatch/backend/web/StatisticsApi_132_statisticsProjectGet.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/statistics/projects'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_6_XYZ_")
                .get(baseUrlOfSut + "/statistics/projects")
                .then()
                .statusCode(500)// org/zalando/catwatch/backend/web/StatisticsApi_132_statisticsProjectGet
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IndexOutOfBoundsException"))
                .body("'message'", containsString("toIndex = 10"))
                .body("'path'", containsString("/statistics/projects"));
    }
    
    
    /**
    * Calls:
    * 1 - (403) GET:/statistics/languages
    * 2 - (200) GET:/statistics/languages
    * Found 2 potential faults. Type-codes: 101, 980
    */
    @Test(timeout = 60000)
    public void test_44_getOnStatisticsLanguagesWithQueryParamsShowsFaults_101_980UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("STATISTICS", 29L)
                .d("ID", "688")
                .d("SNAPSHOT_DATE", "\"1996-02-24 15:52:28\"")
                .d("ALL_CONTRIBUTORS_COUNT", "637")
                .d("ALL_FORKS_COUNT", "NULL")
                .d("ALL_SIZE_COUNT", "670")
                .d("ALL_STARS_COUNT", "266")
                .d("MEMBERS_COUNT", "325")
                .d("ORGANIZATION_NAME", "\"bzZvXiCWW_\"")
                .d("PRIVATE_PROJECT_COUNT", "253")
                .d("PROGRAM_LANGUAGES_COUNT", "NULL")
                .d("PUBLIC_PROJECT_COUNT", "NULL")
                .d("TAGS_COUNT", "49")
                .d("TEAMS_COUNT", "463")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/languages?" + 
                    "organizations=bzZvXiCWW_&" + 
                    "end_date=&" + 
                    "access_token=_EM_520_XYZ_&" + 
                    "q=tfIg7NdYaeEGAvl&" + 
                    "offset=_EM_521_XYZ_&" + 
                    "limit=_EM_522_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
        
        // Fault980. A Protected Resource Is Accessible Without Providing Any Authentication. null.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/languages?" + 
                    "q=yXFnu&" + 
                    "offset=FJnVXKjAJ_sc5wE4")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (400) GET:/statistics/projects
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_45_getOnProjectsReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PROJECT", 12L)
                .d("COMMITS_COUNT", "NULL")
                .d("CONTRIBUTORS_COUNT", "NULL")
                .d("DESCRIPTION", "NULL")
                .d("FORKS_COUNT", "267")
                .d("GIT_HUB_PROJECT_ID", "-2474173547384464384")
                .d("LAST_PUSHED", "NULL")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "NULL")
                .d("PRIMARY_LANGUAGE", "NULL")
                .d("SCORE", "NULL")
                .d("SNAPSHOT_DATE", "NULL")
                .d("STARS_COUNT", "NULL")
                .d("URL", "NULL")
                .d("TITLE", "NULL")
                .d("IMAGE", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/statistics/projects'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "XAvY5wfS0k_7LUI")
                .get(baseUrlOfSut + "/statistics/projects?" + 
                    "organizations=pSHzG5yixRZMC&" + 
                    "end_date=pey3UZCrC21j&" + 
                    "EMextraParam123=_EM_5_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string pey3UZCrC21j."));
    }
    
    
    /**
    * Calls:
    * (400) GET:/statistics/projects
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_46_getOnProjectsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/statistics/projects'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_6_XYZ_")
                .get(baseUrlOfSut + "/statistics/projects?" + 
                    "organizations=2uGet5N&" + 
                    "start_date=RbWHA2rpZ&" + 
                    "end_date=_EM_4_XYZ_&" + 
                    "EMextraParam123=_EM_5_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string RbWHA2rpZ."));
    }
    
    
    /**
    * Calls:
    * (400) GET:/statistics/contributors
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_47_getOnStatisticsContributorsWithQueryParamUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTRIBUTOR", 30L)
                .d("ID", "565")
                .d("ORGANIZATION_ID", "126")
                .d("SNAPSHOT_DATE", "\"2023-09-10 10:38:52\"")
                .d("NAME", "\"_EM_525_XYZ_\"")
                .d("ORGANIZATION_NAME", "\"_EM_526_XYZ_\"")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "NULL")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "688")
                .d("PERSONAL_COMMITS_COUNT", "290")
                .d("PERSONAL_PROJECTS_COUNT", "NULL")
                .d("URL", "\"_EM_527_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/statistics/contributors'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/contributors?start_date=J4Q")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string J4Q."));
    }
    
    
    /**
    * Calls:
    * (400) GET:/statistics/contributors
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_48_getOnContributorsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/statistics/contributors'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_267_XYZ_")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "start_date=b_ZHjuI6&" + 
                    "end_date=vIG8vkdJJY")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string b_ZHjuI6."));
    }
    
    
    /**
    * Calls:
    * (400) GET:/statistics/languages
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_49_getOnStatisticsLanguagesWithQueryParamsEmptyEnd_date() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/statistics/languages'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/languages?" + 
                    "start_date=6vSfdMya&" + 
                    "end_date=&" + 
                    "q=qEdvRr6yz&" + 
                    "limit=fRqs")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string 6vSfdMya."));
    }
    
    
    /**
    * Calls:
    * (400) POST:/config/scoring.project
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_50_postOnConfigScoring_projectWithQueryParamEmptyAccess_tokenUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTRIBUTOR", 20L)
                .d("ID", "995")
                .d("ORGANIZATION_ID", "-7416019847483926528")
                .d("SNAPSHOT_DATE", "\"1923-06-25 11:26:42\"")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "NULL")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "518")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "NULL")
                .d("PERSONAL_COMMITS_COUNT", "NULL")
                .d("PERSONAL_PROJECTS_COUNT", "NULL")
                .d("URL", "\"1KO6aLhZ9\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/config/scoring.project'.
        given().accept("application/json;charset=utf-8")
                .header("X-Organizations", "")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .post(baseUrlOfSut + "/config/scoring.project?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/statistics/contributors
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_51_getOnStatisticsContributorsWithQueryParamsUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTRIBUTOR", 31L)
                .d("ID", "461")
                .d("ORGANIZATION_ID", "709")
                .d("SNAPSHOT_DATE", "\"1924-04-25 20:59:29\"")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "NULL")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "NULL")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "NULL")
                .d("PERSONAL_COMMITS_COUNT", "NULL")
                .d("PERSONAL_PROJECTS_COUNT", "877")
                .d("URL", "\"PRWYRHDNKK\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "organizations=709&" + 
                    "end_date=D&" + 
                    "access_token=vq&" + 
                    "q=QHhbnli1&" + 
                    "sortBy=5")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
    }
    
    
    /**
    * Calls:
    * (403) GET:/statistics/languages
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_52_getOnStatisticsLanguagesWithQueryParamsEmptyEnd_dateUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("STATISTICS", 29L)
                .d("ID", "688")
                .d("SNAPSHOT_DATE", "\"1996-02-24 15:52:28\"")
                .d("ALL_CONTRIBUTORS_COUNT", "637")
                .d("ALL_FORKS_COUNT", "NULL")
                .d("ALL_SIZE_COUNT", "670")
                .d("ALL_STARS_COUNT", "266")
                .d("MEMBERS_COUNT", "325")
                .d("ORGANIZATION_NAME", "\"bzZvXiCWW_\"")
                .d("PRIVATE_PROJECT_COUNT", "253")
                .d("PROGRAM_LANGUAGES_COUNT", "NULL")
                .d("PUBLIC_PROJECT_COUNT", "NULL")
                .d("TAGS_COUNT", "49")
                .d("TEAMS_COUNT", "463")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/languages?" + 
                    "organizations=bzZvXiCWW_&" + 
                    "end_date=&" + 
                    "access_token=_EM_520_XYZ_&" + 
                    "q=tfIg7NdYaeEGAvl&" + 
                    "offset=_EM_521_XYZ_&" + 
                    "limit=_EM_522_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
    }
    
    
    /**
    * Calls:
    * (403) GET:/statistics/languages
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_53_getOnStatisticsLanguagesWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/languages?" + 
                    "start_date=_S4&" + 
                    "access_token=R7G6pnmdBoT2s&" + 
                    "offset=SQIc3lud")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
    }
    
    
    /**
    * Calls:
    * (403) GET:/statistics/projects
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_54_getOnProjectsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/projects?" + 
                    "organizations=2uCet5N&" + 
                    "start_date=RbWHA2rpZ&" + 
                    "end_date=_EM_4_XYZ_&" + 
                    "access_token=qR%5ES2A6z8")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
    }
    
    
    /**
    * Calls:
    * (403) GET:/statistics/contributors
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_55_getOnContributorsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "organizations=0TaHXnNp&" + 
                    "end_date=trnvTW&" + 
                    "access_token=9NPWyjB_YMi&" + 
                    "offset=hfw&" + 
                    "limit=V2s4yR")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
    }
    
    
    /**
    * Calls:
    * (403) POST:/config/scoring.project
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_56_postOnConfigScoring_projectReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("STATISTICS", 27L)
                .d("ID", "166")
                .d("SNAPSHOT_DATE", "\"1947-12-31 05:54:11\"")
                .d("ALL_CONTRIBUTORS_COUNT", "367")
                .d("ALL_FORKS_COUNT", "269")
                .d("ALL_SIZE_COUNT", "NULL")
                .d("ALL_STARS_COUNT", "523")
                .d("MEMBERS_COUNT", "NULL")
                .d("ORGANIZATION_NAME", "\"U\"")
                .d("PRIVATE_PROJECT_COUNT", "-2008330116")
                .d("PROGRAM_LANGUAGES_COUNT", "160")
                .d("PUBLIC_PROJECT_COUNT", "325")
                .d("TAGS_COUNT", "NULL")
                .d("TEAMS_COUNT", "504")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "658")
            .and().insertInto("PROJECT", 28L)
                .d("COMMITS_COUNT", "182")
                .d("CONTRIBUTORS_COUNT", "NULL")
                .d("DESCRIPTION", "NULL")
                .d("FORKS_COUNT", "931")
                .d("GIT_HUB_PROJECT_ID", "756")
                .d("LAST_PUSHED", "NULL")
                .d("NAME", "\"_EM_514_XYZ_\"")
                .d("ORGANIZATION_NAME", "NULL")
                .d("PRIMARY_LANGUAGE", "\"Qph\"")
                .d("SCORE", "NULL")
                .d("SNAPSHOT_DATE", "\"1991-11-04 17:36:49\"")
                .d("STARS_COUNT", "997")
                .d("URL", "\"_EM_515_XYZ_\"")
                .d("TITLE", "\"v_wz\"")
                .d("IMAGE", "\"ZT3\"")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "720")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .header("X-Organizations", "70YvNP4jBf")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .post(baseUrlOfSut + "/config/scoring.project")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
    }
    
    
    /**
    * Calls:
    * (403) POST:/config/scoring.project
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_57_postOnConfigScoring_projectWithQueryParams() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .header("X-Organizations", "JNtvpQgQSMjLz1Kc")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .post(baseUrlOfSut + "/config/scoring.project?" + 
                    "access_token=JNtvpQgQSMjLz1Kc&" + 
                    "end_date=JNtvpQgQSMjLz1Kc&" + 
                    "offset=JNtvpQgQSMjLz1Kc&" + 
                    "organizations=JNtvpQgQSMjLz1Kc&" + 
                    "limit=JNtvpQgQSMjLz1Kc&" + 
                    "sortBy=JNtvpQgQSMjLz1Kc&" + 
                    "language=JNtvpQgQSMjLz1Kc&" + 
                    "start_date=JNtvpQgQSMjLz1Kc")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource &#39;null&#39;. The provider manager is not configured to support it."));
    }
    
    
    /**
    * Calls:
    * (403) POST:/config/scoring.project
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_58_postOnConfigScoring_projectWithQueryParamsEmptyOrganizations() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .header("X-Organizations", "SG")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .post(baseUrlOfSut + "/config/scoring.project?" + 
                    "end_date=MHriXTltc0ZsB7i&" + 
                    "q=TNg&" + 
                    "organizations=&" + 
                    "sortBy=fxL_qWzNoEz8zEnq&" + 
                    "start_date=mRImDFE")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
    }


}
