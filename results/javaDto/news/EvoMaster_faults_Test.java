/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  dto.*;
import  java.util.ArrayList;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-10-05T18:02:24.845-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 4 tests
 * <br>
*  Covered targets: 220
 * <br>
*  Used time: 0h 10m 8s
 * <br>
*  Needed budget for current results: 73%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.external.org.tsdes.ExternalEvoMasterController("/Users/pgarrett/evoMaster/EMB/jdk_8_maven/cs/rest/artificial/news/target/rest-news-sut.jar");
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("NEWS_ENTITY"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (500) POST:/news
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_0_postOnNewsWithQueryParamsCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 231L)
                .d("ID", "291")
                .d("AUTHOR_ID", "\"e\"")
                .d("COUNTRY", "\"KdIB3UsHGE5drBlC\"")
                .d("CREATION_TIME", "\"1921-06-25 00:31:29\"")
                .d("TEXT", "\"r26MdBifZhgEKN2\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/tsdes/spring/examples/news/api/NewsRestApi_123_createNews.
        NewsDto dto_NewsDto_1 = new NewsDto();
        dto_NewsDto_1.setAuthorid("_EM_5502_XYZ_");
        dto_NewsDto_1.setCountry("_EM_7548_XYZ_");
        dto_NewsDto_1.setText("_EM_7549_XYZ_");
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "42")
                .contentType("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .body(dto_NewsDto_1)
                .post(baseUrlOfSut + "/news?" + 
                    "country=LTnk_&" + 
                    "authorId=PG2bI")
                .then()
                .statusCode(500)// org/tsdes/spring/examples/news/api/NewsRestApi_123_createNews
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Could not commit JPA transaction; nested exception is javax.persistence.RollbackException: Error while committing the transaction"))
                .body("'path'", containsString("/news"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/news
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_1_postOnNewsCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 324L)
                .d("ID", "0")
                .d("AUTHOR_ID", "\"FXWC\u008AjohHGU55k\"")
                .d("COUNTRY", "\"w_jwypszImad\"")
                .d("CREATION_TIME", "\"2000-03-24 22:36:44\"")
                .d("TEXT", "\"j_idfb6ujDYrjU\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/tsdes/spring/examples/news/api/NewsRestApi_123_createNews.
        NewsDto dto_NewsDto_1 = new NewsDto();
        dto_NewsDto_1.setAuthorid("dN_F6DpS");
        dto_NewsDto_1.setCountry("_EM_7403_XYZ_");
        dto_NewsDto_1.setText("_EM_3036_XYZ_");
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .contentType("application/json;charset=UTF-8")
                .body(dto_NewsDto_1)
                .post(baseUrlOfSut + "/news")
                .then()
                .statusCode(500)// org/tsdes/spring/examples/news/api/NewsRestApi_123_createNews
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Could not commit JPA transaction; nested exception is javax.persistence.RollbackException: Error while committing the transaction"))
                .body("'path'", containsString("/news"));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/news/{id}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_2_putOnNewCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 67L)
                .d("ID", "0")
                .d("AUTHOR_ID", "\"_EM_11110_XYZ_\"")
                .d("COUNTRY", "\"szHGej7:\"")
                .d("CREATION_TIME", "\"2057-08-07 15:48:51\"")
                .d("TEXT", "\"kU\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/tsdes/spring/examples/news/api/NewsRestApi_204_update.
        NewsDto dto_NewsDto_1 = new NewsDto();
        dto_NewsDto_1.setAuthorid("g");
        dto_NewsDto_1.setCountry("tBecz15");
        dto_NewsDto_1.setCreationtime("2043-03-17T23:08:51.327-02:15");
        dto_NewsDto_1.setId("0");
        dto_NewsDto_1.setText("KvMDvpWV");
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(dto_NewsDto_1)
                .put(baseUrlOfSut + "/news/0")
                .then()
                .statusCode(500)// org/tsdes/spring/examples/news/api/NewsRestApi_204_update
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Could not commit JPA transaction; nested exception is javax.persistence.RollbackException: Error while committing the transaction"))
                .body("'path'", containsString("/news/0"));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/news/{id}/text
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_3_putOnTextCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 161L)
                .d("ID", "37")
                .d("AUTHOR_ID", "\"_h1x\"")
                .d("COUNTRY", "\"_EM_4264_XYZ_\"")
                .d("CREATION_TIME", "\"2063-05-11 06:25:07\"")
                .d("TEXT", "\"_EM_4265_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/tsdes/spring/examples/news/api/NewsRestApi_233_updateText.
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .contentType("text/plain")
                .body("_EM_4266_XYZ_")
                .put(baseUrlOfSut + "/news/37/text")
                .then()
                .statusCode(500)// org/tsdes/spring/examples/news/api/NewsRestApi_233_updateText
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Could not commit JPA transaction; nested exception is javax.persistence.RollbackException: Error while committing the transaction"))
                .body("'path'", containsString("/news/37/text"));
    }


}
