/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  dto.*;
import  java.util.ArrayList;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-10-05T18:02:24.906-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 24 tests
 * <br>
*  Covered targets: 212
 * <br>
*  Used time: 0h 10m 8s
 * <br>
*  Needed budget for current results: 73%
 * <br>
*  This file contains test cases that represent failed calls, but not indicative of faults.
*/
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.external.org.tsdes.ExternalEvoMasterController("/Users/pgarrett/evoMaster/EMB/jdk_8_maven/cs/rest/artificial/news/target/rest-news-sut.jar");
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("NEWS_ENTITY"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (400) POST:/news
    */
    @Test(timeout = 60000)
    public void test_0_postOnNewsWithQueryParamReturns400() throws Exception {
        
        NewsDto dto_NewsDto_1 = new NewsDto();
        dto_NewsDto_1.setCountry("dVtmA14sr");
        dto_NewsDto_1.setNewsid("");
        dto_NewsDto_1.setText("_EM_1463_XYZ_");
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .body(dto_NewsDto_1)
                .post(baseUrlOfSut + "/news?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/news
    */
    @Test(timeout = 60000)
    public void test_1_postOnNewsReturns400() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 37L)
                .d("ID", "438")
                .d("AUTHOR_ID", "\"jan\"")
                .d("COUNTRY", "\"FdQci\"")
                .d("CREATION_TIME", "\"1947-11-08 17:32:43\"")
                .d("TEXT", "\"\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        NewsDto dto_NewsDto_1 = new NewsDto();
        dto_NewsDto_1.setAuthorid("rLE7waxZ1jX");
        dto_NewsDto_1.setCountry("");
        dto_NewsDto_1.setNewsid("LfBKq");
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json;charset=UTF-8")
                .body(dto_NewsDto_1)
                .post(baseUrlOfSut + "/news")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/news
    */
    @Test(timeout = 60000)
    public void test_2_postOnNewsWithQueryParamsReturns400() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 67L)
                .d("ID", "-16384")
                .d("AUTHOR_ID", "\"_EM_11110_XYZ_\"")
                .d("COUNTRY", "\"szHHej7:\"")
                .d("CREATION_TIME", "\"2057-08-07 15:48:51\"")
                .d("TEXT", "\"jU\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        NewsDto dto_NewsDto_1 = new NewsDto();
        dto_NewsDto_1.setAuthorid("_EM_12081_XYZ_");
        dto_NewsDto_1.setCountry("_EM_12082_XYZ_");
        dto_NewsDto_1.setCreationtime("1901-11-23T06:27:21Z");
        dto_NewsDto_1.setId("");
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json;charset=UTF-8")
                .body(dto_NewsDto_1)
                .post(baseUrlOfSut + "/news?" + 
                    "country=JXT7QQPsOZPkbol&" + 
                    "authorId=0zDT")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) PUT:/news/{id}
    */
    @Test(timeout = 60000)
    public void test_3_putOnNewReturns400() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 67L)
                .d("ID", "0")
                .d("AUTHOR_ID", "\"44aMLf\"")
                .d("COUNTRY", "\"szHGej72\"")
                .d("CREATION_TIME", "\"2057-08-07 15:48:51\"")
                .d("TEXT", "\"w8\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        NewsDto dto_NewsDto_1 = new NewsDto();
        dto_NewsDto_1.setAuthorid("k");
        dto_NewsDto_1.setCreationtime("2043-05-17T23:08:51.327-02:15");
        dto_NewsDto_1.setId("0");
        dto_NewsDto_1.setText("KvMDvpWV");
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(dto_NewsDto_1)
                .put(baseUrlOfSut + "/news/0")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) PUT:/news/{id}
    */
    @Test(timeout = 60000)
    public void test_4_putOnNewReturns400() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 67L)
                .d("ID", "0")
                .d("AUTHOR_ID", "\"44aMLf\"")
                .d("COUNTRY", "\"szHGej72\"")
                .d("CREATION_TIME", "\"2057-08-07 15:48:51\"")
                .d("TEXT", "\"o8\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        NewsDto dto_NewsDto_1 = new NewsDto();
        dto_NewsDto_1.setAuthorid("g");
        dto_NewsDto_1.setCreationtime("2043-05-17T23:08:51.327-02:15");
        dto_NewsDto_1.setId("0");
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(dto_NewsDto_1)
                .put(baseUrlOfSut + "/news/0")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/news/{id}
    */
    @Test(timeout = 60000)
    public void test_5_deleteOnNewReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/news/_EM_2652_XYZ_?" + 
                    "country=N2qT2M22t&" + 
                    "authorId=uigst94_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) GET:/news/{id}
    */
    @Test(timeout = 60000)
    public void test_6_getOnNewReturns404() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news/_EM_14844_XYZ_?country=uGnpV9")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) GET:/news/{id}
    */
    @Test(timeout = 60000)
    public void test_7_getOnNewReturns404() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news/-3412154472074219240?EMextraParam123=_EM_0_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) PUT:/news/{id}
    */
    @Test(timeout = 60000)
    public void test_8_putOnNewReturns404() throws Exception {
        
        NewsDto dto_NewsDto_1 = new NewsDto();
        dto_NewsDto_1.setAuthorid("jdJ0u2EOg");
        dto_NewsDto_1.setCountry("_EM_4951_XYZ_");
        dto_NewsDto_1.setCreationtime("1965-06-30T13:15:46.666-07:07");
        dto_NewsDto_1.setNewsid("3cUG2bgq");
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(dto_NewsDto_1)
                .put(baseUrlOfSut + "/news/SCYdN?" + 
                    "EMextraParam123=_EM_4952_XYZ_&" + 
                    "authorId=_EM_4953_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) PUT:/news/{id}
    */
    @Test(timeout = 60000)
    public void test_9_putOnNewReturns404() throws Exception {
        
        NewsDto dto_NewsDto_1 = new NewsDto();
        dto_NewsDto_1.setAuthorid("wB_3IDpJ0ve");
        dto_NewsDto_1.setId("ggE05sfkFWe");
        dto_NewsDto_1.setNewsid("_EM_5001_XYZ_");
        dto_NewsDto_1.setText("_EM_5002_XYZ_");
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_5003_XYZ_")
                .contentType("application/json")
                .body(dto_NewsDto_1)
                .put(baseUrlOfSut + "/news/_EM_5000_XYZ_?" + 
                    "EMextraParam123=42&" + 
                    "country=rA7h2o0lS2KZ")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) PUT:/news/{id}
    */
    @Test(timeout = 60000)
    public void test_10_putOnNewReturns404() throws Exception {
        
        NewsDto dto_NewsDto_1 = new NewsDto();
        dto_NewsDto_1.setCountry("u4gMyQoIKQi");
        dto_NewsDto_1.setCreationtime("2050-11-26T18:42:11+02:46");
        dto_NewsDto_1.setId("238");
        dto_NewsDto_1.setText("8ZmKCL");
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(dto_NewsDto_1)
                .put(baseUrlOfSut + "/news/238")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) PUT:/news/{id}
    */
    @Test(timeout = 60000)
    public void test_11_putOnNewWithQueryParamReturns404() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 148L)
                .d("ID", "345")
                .d("AUTHOR_ID", "\"eoE\"")
                .d("COUNTRY", "\"eaP1LtNHzHdb_vIu\"")
                .d("CREATION_TIME", "\"2043-12-29 10:20:22\"")
                .d("TEXT", "\"X2stMdsYt1T9sMeJ\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        NewsDto dto_NewsDto_1 = new NewsDto();
        dto_NewsDto_1.setAuthorid("3tRmFsLx3Y");
        dto_NewsDto_1.setCountry("Peru");
        dto_NewsDto_1.setId("_EM_3779_XYZ_");
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(dto_NewsDto_1)
                .put(baseUrlOfSut + "/news/_EM_3779_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/news/{id}
    */
    @Test(timeout = 60000)
    public void test_12_deleteOnNewReturns404() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 48L)
                .d("ID", "1")
                .d("AUTHOR_ID", "\"UD6wGURLdASUsnML2\"")
                .d("COUNTRY", "\"xtRZnveustjQf\"")
                .d("CREATION_TIME", "\"2068-03-27 14:53:59\"")
                .d("TEXT", "\"QDcpBf93ia\"")
            .and().insertInto("NEWS_ENTITY", 41L)
                .d("ID", "82")
                .d("AUTHOR_ID", "\"\"")
                .d("COUNTRY", "\"_EM_1387_XYZ_\"")
                .d("CREATION_TIME", "\"2050-09-28 02:59:01\"")
                .d("TEXT", "\"_EM_1388_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/news/481?" + 
                    "country=vH&" + 
                    "authorId=Sgnsnto5lk")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (405) PUT:/news/{id}
    */
    @Test(timeout = 60000)
    public void test_13_putOnNewReturns405() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 67L)
                .d("ID", "0")
                .d("AUTHOR_ID", "\"_EM_11110_XYZ_\"")
                .d("COUNTRY", "\"szHGej7:\"")
                .d("CREATION_TIME", "\"2057-08-07 15:48:51\"")
                .d("TEXT", "\"kU\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        NewsDto dto_NewsDto_1 = new NewsDto();
        dto_NewsDto_1.setAuthorid("933");
        dto_NewsDto_1.setCreationtime("1949-03-15T13:24:-1Z");
        dto_NewsDto_1.setId("933");
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .put(baseUrlOfSut + "/news/;33")
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("'status'", numberMatches(405.0))
                .body("'error'", containsString("Method Not Allowed"))
                .body("'message'", containsString("Request method 'PUT' not supported"))
                .body("'path'", containsString("/news/;33"));
    }
    
    
    /**
    * Calls:
    * (405) DELETE:/news/{id}
    */
    @Test(timeout = 60000)
    public void test_14_deleteOnNewReturns405() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 48L)
                .d("ID", "129")
                .d("AUTHOR_ID", "\"djVN81tqqD6Z40qp\"")
                .d("COUNTRY", "\"UzUZUreurtjQT\"")
                .d("CREATION_TIME", "\"2000-03-16 11:53:59\"")
                .d("TEXT", "\"ubIF0UPf7\"")
            .and().insertInto("NEWS_ENTITY", 41L)
                .d("ID", "96")
                .d("AUTHOR_ID", "\"\"")
                .d("COUNTRY", "\"_EM_1387_XYZ_\"")
                .d("CREATION_TIME", "\"1986-01-28 02:51:01\"")
                .d("TEXT", "\"X\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/news/;6")
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("'status'", numberMatches(405.0))
                .body("'error'", containsString("Method Not Allowed"))
                .body("'message'", containsString("Request method 'DELETE' not supported"))
                .body("'path'", containsString("/news/;6"));
    }
    
    
    /**
    * Calls:
    * (409) PUT:/news/{id}
    */
    @Test(timeout = 60000)
    public void test_15_putOnNewReturns409() throws Exception {
        
        NewsDto dto_NewsDto_1 = new NewsDto();
        dto_NewsDto_1.setCountry("K479");
        dto_NewsDto_1.setNewsid("5");
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(dto_NewsDto_1)
                .put(baseUrlOfSut + "/news/118")
                .then()
                .statusCode(409)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (409) PUT:/news/{id}
    */
    @Test(timeout = 60000)
    public void test_16_putOnNewWithQueryParamReturns409() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 67L)
                .d("ID", "62")
                .d("AUTHOR_ID", "\"44aMLf\"")
                .d("COUNTRY", "\"_EM_7385_XYZ_\"")
                .d("CREATION_TIME", "\"2057-08-07 15:48:51\"")
                .d("TEXT", "\"o\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        NewsDto dto_NewsDto_1 = new NewsDto();
        dto_NewsDto_1.setAuthorid("g");
        dto_NewsDto_1.setCreationtime("2043-05-17T23:08:51.327-02:15");
        dto_NewsDto_1.setId("88");
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(dto_NewsDto_1)
                .put(baseUrlOfSut + "/news/_EM_7384_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(409)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (409) PUT:/news/{id}
    */
    @Test(timeout = 60000)
    public void test_17_putOnNewReturns409() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 21L)
                .d("ID", "0")
                .d("AUTHOR_ID", "\"R1nHEfWQ\"")
                .d("COUNTRY", "\"V^\"")
                .d("CREATION_TIME", "\"1945-12-23 06:01:59\"")
                .d("TEXT", "\"ahYkwgwev\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        NewsDto dto_NewsDto_1 = new NewsDto();
        dto_NewsDto_1.setAuthorid("9");
        dto_NewsDto_1.setId("596");
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(dto_NewsDto_1)
                .put(baseUrlOfSut + "/news/_EM_8759_XYZ_")
                .then()
                .statusCode(409)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (409) PUT:/news/{id}
    */
    @Test(timeout = 60000)
    public void test_18_putOnNewReturns409() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 67L)
                .d("ID", "131072")
                .d("AUTHOR_ID", "\"44aMLf\"")
                .d("COUNTRY", "\"_EM_9606_XYZ_\"")
                .d("CREATION_TIME", "\"2057-08-07 15:48:51\"")
                .d("TEXT", "\"o8\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        NewsDto dto_NewsDto_1 = new NewsDto();
        dto_NewsDto_1.setAuthorid("g");
        dto_NewsDto_1.setCreationtime("2043-05-17T23:08:51.327-02:15");
        dto_NewsDto_1.setId("0");
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(dto_NewsDto_1)
                .put(baseUrlOfSut + "/news/_EM_9605_XYZ_")
                .then()
                .statusCode(409)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (409) PUT:/news/{id}
    */
    @Test(timeout = 60000)
    public void test_19_putOnNewReturns409() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 213L)
                .d("ID", "946")
                .d("AUTHOR_ID", "\"1gpHlPbo31wNG\"")
                .d("COUNTRY", "\"\"")
                .d("CREATION_TIME", "\"2014-02-17 17:26:49\"")
                .d("TEXT", "\"_EM_5292_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        NewsDto dto_NewsDto_1 = new NewsDto();
        dto_NewsDto_1.setAuthorid("-6043593635540341956");
        dto_NewsDto_1.setId("-6043593635540341956");
        dto_NewsDto_1.setText("8");
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(dto_NewsDto_1)
                .put(baseUrlOfSut + "/news/_EM_18458_XYZ_")
                .then()
                .statusCode(409)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (409) PUT:/news/{id}
    */
    @Test(timeout = 60000)
    public void test_20_putOnNewReturns409() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 48L)
                .d("ID", "129")
                .d("AUTHOR_ID", "\"oD6wGZRLdARfsnMN2\"")
                .d("COUNTRY", "\"UtXYWveurtjQU\"")
                .d("CREATION_TIME", "\"2000-03-16 11:53:59\"")
                .d("TEXT", "\"_EM_21228_XYZ_S\"")
            .and().insertInto("NEWS_ENTITY", 41L)
                .d("ID", "86")
                .d("AUTHOR_ID", "\"\"")
                .d("COUNTRY", "\"_EM_1387_XYZ_\"")
                .d("CREATION_TIME", "\"1986-01-28 02:51:01\"")
                .d("TEXT", "\"V\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        NewsDto dto_NewsDto_1 = new NewsDto();
        dto_NewsDto_1.setAuthorid("168");
        dto_NewsDto_1.setCountry("168");
        dto_NewsDto_1.setCreationtime("1961-04-24T01:26:47.568Z");
        dto_NewsDto_1.setId("168");
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(dto_NewsDto_1)
                .put(baseUrlOfSut + "/news/_EM_26037_XYZ_")
                .then()
                .statusCode(409)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (409) PUT:/news/{id}
    */
    @Test(timeout = 60000)
    public void test_21_putOnNewReturns409() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 48L)
                .d("ID", "97")
                .d("AUTHOR_ID", "\"djVN81tqqD6Z40qpS\"")
                .d("COUNTRY", "\"UzZ]TrVurQjUUU\"")
                .d("CREATION_TIME", "\"2000-03-15 19:49:59\"")
                .d("TEXT", "\"_EM_28271_XYZ_\"")
            .and().insertInto("NEWS_ENTITY", 41L)
                .d("ID", "96")
                .d("AUTHOR_ID", "\"\"")
                .d("COUNTRY", "\"_EM_1387_XYZ_\"")
                .d("CREATION_TIME", "\"1918-02-28 02:59:01\"")
                .d("TEXT", "\"Y\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        NewsDto dto_NewsDto_1 = new NewsDto();
        dto_NewsDto_1.setAuthorid("513");
        dto_NewsDto_1.setCreationtime("1947-01-06T11:49:07-02:42");
        dto_NewsDto_1.setId("513");
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(dto_NewsDto_1)
                .put(baseUrlOfSut + "/news/_EM_28270_XYZ_")
                .then()
                .statusCode(409)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) PUT:/news/{id}/text
    */
    @Test(timeout = 60000)
    public void test_22_putOnTextReturns400() throws Exception {
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "42")
                .contentType("text/plain")
                .body()
                .put(baseUrlOfSut + "/news/897/text?EMextraParam123=_EM_4213_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'message'", containsString("Required request body is missing: public org.springframework.http.ResponseEntity<java.lang.Object> org.tsdes.spring.examples.news.api.NewsRestApi.updateText(java.lang.Long,java.lang.String)"))
                .body("'path'", containsString("/news/897/text"));
    }
    
    
    /**
    * Calls:
    * (404) PUT:/news/{id}/text
    */
    @Test(timeout = 60000)
    public void test_23_putOnTextReturns404() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("text/plain")
                .body("WvmOsItbMm4Wp")
                .put(baseUrlOfSut + "/news/85/text?country=teHaE8F__ep")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }


}
