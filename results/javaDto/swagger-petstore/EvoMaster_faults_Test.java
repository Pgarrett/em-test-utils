/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  dto.*;
import  java.util.ArrayList;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-10-05T19:41:56.948-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 88 tests
 * <br>
*  Covered targets: 894
 * <br>
*  Used time: 0h 10m 3s
 * <br>
*  Needed budget for current results: 93%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.external.swagger.petstore.ExternalEvoMasterController("/Users/pgarrett/evoMaster/EMB/jdk_8_maven/cs/rest/original/swagger-petstore/target/swagger-petstore-sut.jar");
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (500) POST:/api/v3/pet
    * Found 2 potential faults. Type-codes: 100, 101
    * Using 1 example:
    *   1
    */
    @Test(timeout = 60000)
    public void test_0_postOnPetShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/model/Pet_38_getId.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        Pet dto_Pet_1 = new Pet();
        dto_Pet_1.setName("_EM_9595_XYZ_");
        Category dto_Category_1 = new Category();
        dto_Category_1.setId(1);
        dto_Category_1.setName("E8T");
        dto_Pet_1.setCategory(dto_Category_1);
        List<String> list_String_1 = new ArrayList<String>();
        list_String_1.add("gRU");
        dto_Pet_1.setPhotourls(list_String_1);
        List<Tag> list_Tag_1 = new ArrayList<Tag>();
        dto_Pet_1.setTags(list_Tag_1);
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(dto_Pet_1)
                .post(baseUrlOfSut + "/api/v3/pet")
                .then()
                .statusCode(500)// io/swagger/petstore/model/Pet_38_getId
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/api/v3/user
    * Found 2 potential faults. Type-codes: 100, 101
    * Using 4 examples:
    *   10
    *   12345
    *   James
    *   theUser
    */
    @Test(timeout = 60000)
    public void test_1_postOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/data/UserData_65_addUser.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("id=10&username=theUser&firstName=BQkZDYOHAktYqx&lastName=James&phone=12345&userStatus=674")
                .post(baseUrlOfSut + "/api/v3/user")
                .then()
                .statusCode(500)// io/swagger/petstore/data/UserData_65_addUser
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/api/v3/user
    * Found 2 potential faults. Type-codes: 100, 101
    * Using 2 examples:
    *   1
    *   John
    */
    @Test(timeout = 60000)
    public void test_2_postOnV3UserWithQueryParamShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/controller/UserController_50_createUser.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("username=_EM_4202_XYZ_&firstName=John&lastName=_EM_4203_XYZ_&email=_EM_4204_XYZ_&phone=_EM_4205_XYZ_&userStatus=1")
                .post(baseUrlOfSut + "/api/v3/user?EMextraParam123=_EM_4206_XYZ_")
                .then()
                .statusCode(500)// io/swagger/petstore/controller/UserController_50_createUser
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/api/v3/user
    * Found 2 potential faults. Type-codes: 100, 101
    * Using 4 examples:
    *   1
    *   12345
    *   john@email.com
    *   theUser
    */
    @Test(timeout = 60000)
    public void test_3_postOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/data/UserData_65_addUser.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("id=-31815&username=theUser&firstName=first+name+10&email=john%40email.com&password=12345&phone=123-456-7890&userStatus=1")
                .post(baseUrlOfSut + "/api/v3/user")
                .then()
                .statusCode(500)// io/swagger/petstore/data/UserData_65_addUser
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/api/v3/user
    * Found 2 potential faults. Type-codes: 100, 101
    * Using 2 examples:
    *   James
    *   John
    */
    @Test(timeout = 60000)
    public void test_4_postOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/data/UserData_65_addUser.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("id=-5223710403565956332&username=_EM_5743_XYZ_&firstName=John&lastName=James&phone=Y1ukD4b_fxq&userStatus=291")
                .post(baseUrlOfSut + "/api/v3/user")
                .then()
                .statusCode(500)// io/swagger/petstore/data/UserData_65_addUser
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/api/v3/user
    * Found 2 potential faults. Type-codes: 100, 101
    * Using 3 examples:
    *   12345
    *   john@email.com
    *   theUser
    */
    @Test(timeout = 60000)
    public void test_5_postOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/data/UserData_65_addUser.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        User dto_User_1 = new User();
        dto_User_1.setUsername("theUser");
        dto_User_1.setLastname("T13mPpjAlQb");
        dto_User_1.setEmail("john@email.com");
        dto_User_1.setPhone("12345");
        dto_User_1.setUserstatus(425);
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(dto_User_1)
                .post(baseUrlOfSut + "/api/v3/user")
                .then()
                .statusCode(500)// io/swagger/petstore/data/UserData_65_addUser
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/api/v3/pet
    * Found 2 potential faults. Type-codes: 100, 101
    * Using 2 examples:
    *   Dogs
    *   doggie
    */
    @Test(timeout = 60000)
    public void test_6_putOnPetShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/model/Pet_38_getId.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        Pet dto_Pet_1 = new Pet();
        dto_Pet_1.setName("doggie");
        Category dto_Category_1 = new Category();
        dto_Category_1.setName("Dogs");
        dto_Pet_1.setCategory(dto_Category_1);
        List<String> list_String_1 = new ArrayList<String>();
        list_String_1.add("fhbs");
        list_String_1.add("_EM_2725_XYZ_");
        list_String_1.add("_EM_3694_XYZ_");
        list_String_1.add("2hUfXir8");
        dto_Pet_1.setPhotourls(list_String_1);
        List<Tag> list_Tag_1 = new ArrayList<Tag>();
        Tag dto_Tag_1 = new Tag();
        dto_Tag_1.setName("mIEOMXAv");
        list_Tag_1.add(dto_Tag_1);
        Tag dto_Tag_2 = new Tag();
        dto_Tag_2.setName("_EM_4451_XYZ_");
        list_Tag_1.add(dto_Tag_2);
        dto_Pet_1.setTags(list_Tag_1);
        dto_Pet_1.setStatus("EVOMASTER");
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(dto_Pet_1)
                .put(baseUrlOfSut + "/api/v3/pet?EMextraParam123=_EM_4452_XYZ_")
                .then()
                .statusCode(500)// io/swagger/petstore/model/Pet_38_getId
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/v3/pet
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   10
    */
    @Test(timeout = 60000)
    public void test_7_postOnV3PetWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.enum. [Path '/status'] Instance value ("EVOMASTER") not found in enum (possible values: ["available","pending","sold"])
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("id=10&name=c7Nxx1k&photoUrls=%5B%5D&status=EVOMASTER")
                .post(baseUrlOfSut + "/api/v3/pet?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("c7Nxx1k"))
                .body("'photoUrls'.size()", equalTo(0))
                .body("'status'", containsString("EVOMASTER"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/v3/pet
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   10
    */
    @Test(timeout = 60000)
    public void test_8_postOnPetReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.required. Object has missing required properties (["name"])
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("id=10&name=&photoUrls=%5B%22%22%2C+%22_EM_13779_XYZ_%22%2C+%22_EM_13780_XYZ_%22%2C+%22_EM_13781_XYZ_%22%2C+%22_EM_12667_XYZ_%22%5D&status=sold")
                .post(baseUrlOfSut + "/api/v3/pet")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'photoUrls'.size()", equalTo(0))
                .body("'status'", containsString("sold"));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/api/v3/pet
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   10
    */
    @Test(timeout = 60000)
    public void test_9_putOnV3PetWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.enum. [Path '/status'] Instance value ("EVOMASTER") not found in enum (possible values: ["available","pending","sold"])
        Pet dto_Pet_1 = new Pet();
        dto_Pet_1.setId(10);
        dto_Pet_1.setName("TNApCuWIDSE9y");
        Category dto_Category_1 = new Category();
        dto_Category_1.setId(938);
        dto_Pet_1.setCategory(dto_Category_1);
        List<String> list_String_1 = new ArrayList<String>();
        list_String_1.add("_EM_9562_XYZ_");
        dto_Pet_1.setPhotourls(list_String_1);
        dto_Pet_1.setStatus("EVOMASTER");
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(dto_Pet_1)
                .put(baseUrlOfSut + "/api/v3/pet?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("TNApCuWIDSE9y"))
                .body("'photoUrls'.size()", equalTo(1))
                .body("'photoUrls'", hasItems("_EM_9562_XYZ_"))
                .body("'tags'.size()", equalTo(0))
                .body("'status'", containsString("EVOMASTER"));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/api/v3/pet
    * Found 1 potential fault of type-code 101
    * Using 2 examples:
    *   10
    *   doggie
    */
    @Test(timeout = 60000)
    public void test_10_putOnPetReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.enum. [Path '/status'] Instance value ("EVOMASTER") not found in enum (possible values: ["available","pending","sold"])
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("id=10&name=doggie&photoUrls=%5B%22_EM_17522_XYZ_%22%5D&tags=%5B%7B%22name%22%3A%22_EM_17523_XYZ_%22%7D%5D&status=EVOMASTER")
                .put(baseUrlOfSut + "/api/v3/pet")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("doggie"))
                .body("'photoUrls'.size()", equalTo(0))
                .body("'tags'.size()", equalTo(0))
                .body("'status'", containsString("EVOMASTER"));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/api/v3/pet
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   10
    */
    @Test(timeout = 60000)
    public void test_11_putOnPetReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.required. Object has missing required properties (["name"])
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("id=10&name=&photoUrls=%5B%22Lf42o%22%5D")
                .put(baseUrlOfSut + "/api/v3/pet")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'photoUrls'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/v3/pet
    * Found 1 potential fault of type-code 101
    * Using 3 examples:
    *   10
    *   Dogs
    *   doggie
    */
    @Test(timeout = 60000)
    public void test_12_postOnPetReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/xml")
                .post(baseUrlOfSut + "/api/v3/pet")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Input error: unable to convert input to io.swagger.petstore.model.Pet"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/v3/user
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_13_postOnUserReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/xml")
                .post(baseUrlOfSut + "/api/v3/user")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("No User provided. Try again?"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/api/v3/pet
    * Found 1 potential fault of type-code 101
    * Using 2 examples:
    *   10
    *   Dogs
    */
    @Test(timeout = 60000)
    public void test_14_putOnPetReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/xml")
                .put(baseUrlOfSut + "/api/v3/pet")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Input error: unable to convert input to io.swagger.petstore.model.Pet"));
    }
    
    
    /**
    * Calls:
    * (404) PUT:/api/v3/pet
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_15_putOnPetReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("id=445&name=&photoUrls=%5B%22%22%2C+%22p8b8n4r5o6AzxPF%22%2C+%22_WHWDCWF%22%2C+%22_EM_13783_XYZ_%22%2C+%22upozi%22%5D&tags=%5B%7B%22name%22%3A%22_EM_7088_XYZ_%22%7D%2C+%7B%7D%2C+%7B%22name%22%3A%22_EM_13784_XYZ_%22%7D%5D")
                .put(baseUrlOfSut + "/api/v3/pet")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Pet not found"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/api/v3/store/inventory
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_16_getOnInventoryShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/controller/OrderController_35_getInventory.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v3/store/inventory")
                .then()
                .statusCode(500)// io/swagger/petstore/controller/OrderController_35_getInventory
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/api/v3/user/{username}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_17_getOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/data/UserData_55_findUserByName.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v3/user/_EM_7_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(500)// io/swagger/petstore/data/UserData_55_findUserByName
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/api/v3/user/{username}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_18_getOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/data/UserData_55_findUserByName.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v3/user/_EM_609_XYZ_")
                .then()
                .statusCode(500)// io/swagger/petstore/data/UserData_55_findUserByName
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/api/v3/user/{username}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_19_getOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/data/UserData_55_findUserByName.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v3/user/_EM_758_XYZ_")
                .then()
                .statusCode(500)// io/swagger/petstore/data/UserData_55_findUserByName
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/api/v3/user/{username}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_20_getOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/data/UserData_55_findUserByName.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v3/user/_EM_4719_XYZ_")
                .then()
                .statusCode(500)// io/swagger/petstore/data/UserData_55_findUserByName
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/api/v3/user/{username}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_21_getOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/data/UserData_55_findUserByName.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_940_XYZ_")
                .get(baseUrlOfSut + "/api/v3/user/_EM_938_XYZ_")
                .then()
                .statusCode(500)// io/swagger/petstore/data/UserData_55_findUserByName
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/api/v3/user/{username}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_22_getOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/data/UserData_55_findUserByName.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_4311_XYZ_")
                .get(baseUrlOfSut + "/api/v3/user/_EM_4310_XYZ_")
                .then()
                .statusCode(500)// io/swagger/petstore/data/UserData_55_findUserByName
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/api/v3/user/{username}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_23_getOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/data/UserData_55_findUserByName.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v3/user/_EM_5222_XYZ_")
                .then()
                .statusCode(500)// io/swagger/petstore/data/UserData_55_findUserByName
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/api/v3/user/{username}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_24_getOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/data/UserData_55_findUserByName.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v3/user/_EM_5104_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(500)// io/swagger/petstore/data/UserData_55_findUserByName
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/api/v3/user/{username}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_25_getOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/data/UserData_55_findUserByName.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v3/user/_EM_4160_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(500)// io/swagger/petstore/data/UserData_55_findUserByName
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/api/v3/user/{username}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_26_getOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/data/UserData_55_findUserByName.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v3/user/_EM_4139_XYZ_?EMextraParam123=_EM_3307_XYZ_")
                .then()
                .statusCode(500)// io/swagger/petstore/data/UserData_55_findUserByName
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/api/v3/user/{username}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_27_getOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/data/UserData_55_findUserByName.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_10092_XYZ_")
                .get(baseUrlOfSut + "/api/v3/user/_EM_10090_XYZ_")
                .then()
                .statusCode(500)// io/swagger/petstore/data/UserData_55_findUserByName
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/api/v3/store/order
    * Found 2 potential faults. Type-codes: 100, 101
    * Using 1 example:
    *   10
    */
    @Test(timeout = 60000)
    public void test_28_postOnOrderShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/controller/OrderController_73_placeOrder.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/x-www-form-urlencoded")
                .body("id=10&petId=-6478673823883453807")
                .post(baseUrlOfSut + "/api/v3/store/order?EMextraParam123=_EM_3010_XYZ_")
                .then()
                .statusCode(500)// io/swagger/petstore/controller/OrderController_73_placeOrder
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/api/v3/user/createWithList
    * Found 2 potential faults. Type-codes: 100, 101
    * Using 6 examples:
    *   1
    *   10
    *   12345
    *   John
    *   john@email.com
    *   theUser
    */
    @Test(timeout = 60000)
    public void test_29_postOnCreateWithListShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/data/UserData_65_addUser.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        List<User> list_User_1 = new ArrayList<User>();
        User dto_User_1 = new User();
        dto_User_1.setUsername("theUser");
        dto_User_1.setEmail("john@email.com");
        dto_User_1.setPassword("XXXXXXXXXXX");
        dto_User_1.setUserstatus(1);
        list_User_1.add(dto_User_1);
        User dto_User_2 = new User();
        dto_User_2.setId(591);
        dto_User_2.setFirstname("Ycs7bimCDs");
        dto_User_2.setEmail("_EM_9599_XYZ_");
        dto_User_2.setPhone("HvhAyoOK3UMUu");
        dto_User_2.setUserstatus(337);
        list_User_1.add(dto_User_2);
        User dto_User_3 = new User();
        dto_User_3.setId(918);
        dto_User_3.setFirstname("John");
        dto_User_3.setLastname("CvdCVIio");
        dto_User_3.setEmail("_EM_9602_XYZ_");
        dto_User_3.setPassword("12345");
        list_User_1.add(dto_User_3);
        User dto_User_4 = new User();
        dto_User_4.setId(602);
        dto_User_4.setUsername("user10");
        dto_User_4.setFirstname("first name 10");
        dto_User_4.setEmail("_EM_9603_XYZ_");
        dto_User_4.setPhone("12345");
        dto_User_4.setUserstatus(1);
        list_User_1.add(dto_User_4);
        User dto_User_5 = new User();
        dto_User_5.setId(10);
        dto_User_5.setUsername("eAwRQi");
        dto_User_5.setLastname("P_cPlHh");
        dto_User_5.setPassword("");
        dto_User_5.setPhone("yJ0hNEGvxST4glns");
        dto_User_5.setUserstatus(1);
        list_User_1.add(dto_User_5);
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(list_User_1)
                .post(baseUrlOfSut + "/api/v3/user/createWithList")
                .then()
                .statusCode(500)// io/swagger/petstore/data/UserData_65_addUser
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/api/v3/user/createWithList
    * Found 2 potential faults. Type-codes: 100, 101
    * Using 5 examples:
    *   1
    *   10
    *   12345
    *   James
    *   theUser
    */
    @Test(timeout = 60000)
    public void test_30_postOnCreateWithListShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/data/UserData_65_addUser.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        List<User> list_User_1 = new ArrayList<User>();
        User dto_User_1 = new User();
        dto_User_1.setId(533);
        dto_User_1.setEmail("email10@test.com");
        dto_User_1.setPassword("_EM_9344_XYZ_");
        dto_User_1.setPhone("_EM_9345_XYZ_");
        list_User_1.add(dto_User_1);
        User dto_User_2 = new User();
        dto_User_2.setId(238);
        dto_User_2.setUsername("_EM_9346_XYZ_");
        dto_User_2.setLastname("a2ZMDxJILHq");
        dto_User_2.setEmail("email10@test.com");
        dto_User_2.setPhone("12345");
        list_User_1.add(dto_User_2);
        User dto_User_3 = new User();
        dto_User_3.setId(920);
        dto_User_3.setUsername("theUser");
        dto_User_3.setLastname("_EM_9350_XYZ_");
        dto_User_3.setEmail("email10@test.com");
        list_User_1.add(dto_User_3);
        User dto_User_4 = new User();
        dto_User_4.setUsername("_EM_9353_XYZ_");
        dto_User_4.setLastname("James");
        dto_User_4.setUserstatus(420);
        list_User_1.add(dto_User_4);
        User dto_User_5 = new User();
        dto_User_5.setId(10);
        dto_User_5.setLastname("_EM_9356_XYZ_");
        dto_User_5.setPhone("_EM_9358_XYZ_");
        dto_User_5.setUserstatus(1);
        list_User_1.add(dto_User_5);
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(list_User_1)
                .post(baseUrlOfSut + "/api/v3/user/createWithList")
                .then()
                .statusCode(500)// io/swagger/petstore/data/UserData_65_addUser
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/api/v3/user/{username}
    * Found 2 potential faults. Type-codes: 100, 101
    * Using 1 example:
    *   theUser
    */
    @Test(timeout = 60000)
    public void test_31_putOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/data/UserData_74_lambda$deleteUser$0.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        User dto_User_1 = new User();
        dto_User_1.setUsername("theUser");
        dto_User_1.setFirstname("1J");
        dto_User_1.setEmail("_EM_4703_XYZ_");
        dto_User_1.setPhone("_EM_4704_XYZ_");
        dto_User_1.setUserstatus(8389050);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(dto_User_1)
                .put(baseUrlOfSut + "/api/v3/user/user3?EMextraParam123=_EM_4705_XYZ_")
                .then()
                .statusCode(500)// io/swagger/petstore/data/UserData_74_lambda$deleteUser$0
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/api/v3/user/{username}
    * Found 2 potential faults. Type-codes: 100, 101
    * Using 2 examples:
    *   10
    *   James
    */
    @Test(timeout = 60000)
    public void test_32_putOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/controller/UserController_169_updateUser.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("id=10&username=553&firstName=%60iUUUrSZVcQgUnM8&lastName=James&password=CxHPTvzumUqbZvO&phone=_EM_24837_XYZ_&userStatus=41")
                .put(baseUrlOfSut + "/api/v3/user/user7")
                .then()
                .statusCode(500)// io/swagger/petstore/controller/UserController_169_updateUser
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/api/v3/user/{username}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_33_putOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/controller/UserController_169_updateUser.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/x-www-form-urlencoded")
                .body("id=571349239&username=420&firstName=_EM_2184_XYZ_&lastName=Uv1ck9EiJhi9yI4&email=_EM_2186_XYZ_&phone=_EM_2187_XYZ_&userStatus=41")
                .put(baseUrlOfSut + "/api/v3/user/user6?EMextraParam123=42")
                .then()
                .statusCode(500)// io/swagger/petstore/controller/UserController_169_updateUser
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/api/v3/user/{username}
    * Found 2 potential faults. Type-codes: 100, 101
    * Using 2 examples:
    *   12345
    *   James
    */
    @Test(timeout = 60000)
    public void test_34_putOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/data/UserData_55_findUserByName.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        User dto_User_1 = new User();
        dto_User_1.setUsername("RkU6QjW");
        dto_User_1.setLastname("James");
        dto_User_1.setPhone("12345");
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(dto_User_1)
                .put(baseUrlOfSut + "/api/v3/user/_EM_11942_XYZ_")
                .then()
                .statusCode(500)// io/swagger/petstore/data/UserData_55_findUserByName
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/api/v3/user/{username}
    * Found 2 potential faults. Type-codes: 100, 101
    * Using 2 examples:
    *   1
    *   12345
    */
    @Test(timeout = 60000)
    public void test_35_putOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/data/UserData_55_findUserByName.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        User dto_User_1 = new User();
        dto_User_1.setId(436);
        dto_User_1.setFirstname("first name 10");
        dto_User_1.setEmail("J6u");
        dto_User_1.setPassword("12345");
        dto_User_1.setPhone("_EM_6271_XYZ_");
        dto_User_1.setUserstatus(1);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(dto_User_1)
                .put(baseUrlOfSut + "/api/v3/user/8lCiGOc?EMextraParam123=_EM_6272_XYZ_")
                .then()
                .statusCode(500)// io/swagger/petstore/data/UserData_55_findUserByName
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/api/v3/user/{username}
    * Found 2 potential faults. Type-codes: 100, 101
    * Using 1 example:
    *   john@email.com
    */
    @Test(timeout = 60000)
    public void test_36_putOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/data/UserData_55_findUserByName.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        User dto_User_1 = new User();
        dto_User_1.setUsername("HxinNjXi");
        dto_User_1.setLastname("xZ3iJQ");
        dto_User_1.setEmail("john@email.com");
        dto_User_1.setPhone("_EM_4704_XYZ_");
        dto_User_1.setUserstatus(442);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(dto_User_1)
                .put(baseUrlOfSut + "/api/v3/user/_EM_4702_XYZ_?EMextraParam123=_EM_4705_XYZ_")
                .then()
                .statusCode(500)// io/swagger/petstore/data/UserData_55_findUserByName
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/api/v3/user/{username}
    * Found 2 potential faults. Type-codes: 100, 101
    * Using 1 example:
    *   John
    */
    @Test(timeout = 60000)
    public void test_37_putOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/data/UserData_55_findUserByName.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        User dto_User_1 = new User();
        dto_User_1.setId(875);
        dto_User_1.setFirstname("John");
        dto_User_1.setUserstatus(1);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(dto_User_1)
                .put(baseUrlOfSut + "/api/v3/user/_EM_9383_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(500)// io/swagger/petstore/data/UserData_55_findUserByName
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/api/v3/user/{username}
    * Found 2 potential faults. Type-codes: 100, 101
    * Using 1 example:
    *   James
    */
    @Test(timeout = 60000)
    public void test_38_putOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/controller/UserController_169_updateUser.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("id=571349208&username=553&firstName=_iogfrSZVdNgxnL8&lastName=James&password=CxHPTvzumUqbZvO&phone=_EM_2187_XYZ_&userStatus=-23")
                .put(baseUrlOfSut + "/api/v3/user/user8")
                .then()
                .statusCode(500)// io/swagger/petstore/controller/UserController_169_updateUser
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/api/v3/user/{username}
    * Found 2 potential faults. Type-codes: 100, 101
    * Using 1 example:
    *   theUser
    */
    @Test(timeout = 60000)
    public void test_39_putOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/controller/UserController_169_updateUser.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/x-www-form-urlencoded")
                .body("username=theUser&firstName=1J&email=_EM_4703_XYZ_&phone=_EM_4704_XYZ_&userStatus=8389050")
                .put(baseUrlOfSut + "/api/v3/user/user4?EMextraParam123=_EM_4705_XYZ_")
                .then()
                .statusCode(500)// io/swagger/petstore/controller/UserController_169_updateUser
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/api/v3/user/{username}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_40_putOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/data/UserData_55_findUserByName.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        User dto_User_1 = new User();
        dto_User_1.setId(812);
        dto_User_1.setPhone("M1_1T");
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(dto_User_1)
                .put(baseUrlOfSut + "/api/v3/user/_EM_7107_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(500)// io/swagger/petstore/data/UserData_55_findUserByName
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/api/v3/user/{username}
    * Found 2 potential faults. Type-codes: 100, 101
    * Using 1 example:
    *   12345
    */
    @Test(timeout = 60000)
    public void test_41_putOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/data/UserData_55_findUserByName.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        User dto_User_1 = new User();
        dto_User_1.setId(436);
        dto_User_1.setFirstname("first name 10");
        dto_User_1.setEmail("J6u");
        dto_User_1.setPassword("12345");
        dto_User_1.setPhone("r2ztme0vtBW");
        dto_User_1.setUserstatus(1);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(dto_User_1)
                .put(baseUrlOfSut + "/api/v3/user/_EM_7564_XYZ_")
                .then()
                .statusCode(500)// io/swagger/petstore/data/UserData_55_findUserByName
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/api/v3/user/{username}
    * Found 2 potential faults. Type-codes: 100, 101
    * Using 1 example:
    *   1
    */
    @Test(timeout = 60000)
    public void test_42_putOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/data/UserData_55_findUserByName.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        User dto_User_1 = new User();
        dto_User_1.setUsername("RkU6QjW");
        dto_User_1.setFirstname("pZVV7EX");
        dto_User_1.setLastname("_EM_6810_XYZ_");
        dto_User_1.setPhone("2_CnvfTT2iNAiu");
        dto_User_1.setUserstatus(1);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(dto_User_1)
                .put(baseUrlOfSut + "/api/v3/user/_EM_12554_XYZ_")
                .then()
                .statusCode(500)// io/swagger/petstore/data/UserData_55_findUserByName
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/api/v3/user/{username}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_43_deleteOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/data/UserData_74_lambda$deleteUser$0.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v3/user/user2")
                .then()
                .statusCode(500)// io/swagger/petstore/data/UserData_74_lambda$deleteUser$0
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/api/v3/user/{username}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_44_deleteOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/data/UserData_74_lambda$deleteUser$0.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_11_XYZ_")
                .delete(baseUrlOfSut + "/api/v3/user/_EM_9_XYZ_")
                .then()
                .statusCode(500)// io/swagger/petstore/data/UserData_74_lambda$deleteUser$0
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/api/v3/user/{username}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_45_deleteOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/data/UserData_74_lambda$deleteUser$0.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v3/user/_EM_572_XYZ_")
                .then()
                .statusCode(500)// io/swagger/petstore/data/UserData_74_lambda$deleteUser$0
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/api/v3/user/{username}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_46_deleteOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/data/UserData_74_lambda$deleteUser$0.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v3/user/_EM_1047_XYZ_")
                .then()
                .statusCode(500)// io/swagger/petstore/data/UserData_74_lambda$deleteUser$0
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/api/v3/user/{username}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_47_deleteOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/data/UserData_74_lambda$deleteUser$0.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v3/user/_EM_4162_XYZ_?EMextraParam123=_EM_4163_XYZ_")
                .then()
                .statusCode(500)// io/swagger/petstore/data/UserData_74_lambda$deleteUser$0
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/api/v3/user/{username}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_48_deleteOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/data/UserData_74_lambda$deleteUser$0.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_6019_XYZ_")
                .delete(baseUrlOfSut + "/api/v3/user/_EM_6018_XYZ_")
                .then()
                .statusCode(500)// io/swagger/petstore/data/UserData_74_lambda$deleteUser$0
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/api/v3/user/{username}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_49_deleteOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/data/UserData_74_lambda$deleteUser$0.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v3/user/_EM_2359_XYZ_")
                .then()
                .statusCode(500)// io/swagger/petstore/data/UserData_74_lambda$deleteUser$0
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/api/v3/user/{username}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_50_deleteOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/data/UserData_74_lambda$deleteUser$0.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_4303_XYZ_")
                .delete(baseUrlOfSut + "/api/v3/user/_EM_4302_XYZ_")
                .then()
                .statusCode(500)// io/swagger/petstore/data/UserData_74_lambda$deleteUser$0
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/api/v3/user/{username}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_51_deleteOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/data/UserData_74_lambda$deleteUser$0.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v3/user/_EM_4695_XYZ_?EMextraParam123=_EM_4696_XYZ_")
                .then()
                .statusCode(500)// io/swagger/petstore/data/UserData_74_lambda$deleteUser$0
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/api/v3/user/{username}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_52_deleteOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/data/UserData_74_lambda$deleteUser$0.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_6017_XYZ_")
                .delete(baseUrlOfSut + "/api/v3/user/_EM_6016_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(500)// io/swagger/petstore/data/UserData_74_lambda$deleteUser$0
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/api/v3/user/{username}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_53_deleteOnUserShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/swagger/petstore/data/UserData_74_lambda$deleteUser$0.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_8525_XYZ_")
                .delete(baseUrlOfSut + "/api/v3/user/_EM_8523_XYZ_?EMextraParam123=_EM_8524_XYZ_")
                .then()
                .statusCode(500)// io/swagger/petstore/data/UserData_74_lambda$deleteUser$0
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v3/pet/findByStatus
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_54_getOnPetFindByStatusWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.required. [Path '/17'] Object has missing required properties (["name"])
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v3/pet/findByStatus?" + 
                    "status=sold&" + 
                    "EMextraParam123=_EM_199_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(25))
                .body("[0].'category'.'name'", containsString("Dogs"))
                .body("[0].'name'", containsString("Dog 2"))
                .body("[0].'photoUrls'.size()", equalTo(2))
                .body("[0].'photoUrls'", hasItems("url1", "url2"))
                .body("[0].'tags'.size()", equalTo(2))
                .body("[0].'tags'[0].'name'", containsString("tag2"))
                .body("[0].'tags'[1].'name'", containsString("tag3"))
                .body("[0].'status'", containsString("sold"))
                .body("[1].'category'.'name'", containsString("_EM_6222_XYZ_"))
                .body("[1].'name'", containsString("_EM_6221_XYZ_"))
                .body("[1].'photoUrls'.size()", equalTo(1))
                .body("[1].'photoUrls'", hasItems("_EM_6223_XYZ_"))
                .body("[1].'tags'.size()", equalTo(0))
                .body("[1].'status'", containsString("sold"))
                .body("[2].'name'", containsString("2XsQl8BOys8E"))
                .body("[2].'photoUrls'.size()", equalTo(4))
                .body("[2].'photoUrls'", hasItems("P", "_EM_8341_XYZ_", "_EM_8342_XYZ_", "i3Sfk5d8v73"))
                .body("[2].'tags'.size()", equalTo(1))
                .body("[2].'tags'[0].'name'", containsString("CiVp1s4n"))
                .body("[2].'status'", containsString("sold"))
                ; // Skipping assertions on the remaining 22 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v3/pet/findByTags
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_55_getOnFindByTagsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.enum. [Path '/3/status'] Instance value ("vEL4dJ1jqNHF4") not found in enum (possible values: ["available","pending","sold"])
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_1026_XYZ_")
                .get(baseUrlOfSut + "/api/v3/pet/findByTags?" + 
                    "tags=tag3&tags=_EM_1032_XYZ_&tags=tag2&tags=doggie&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(6))
                .body("[0].'category'.'name'", containsString("Cats"))
                .body("[0].'name'", containsString("Cat 3"))
                .body("[0].'photoUrls'.size()", equalTo(2))
                .body("[0].'photoUrls'", hasItems("url1", "url2"))
                .body("[0].'tags'.size()", equalTo(2))
                .body("[0].'tags'[0].'name'", containsString("tag3"))
                .body("[0].'tags'[1].'name'", containsString("tag4"))
                .body("[0].'status'", containsString("pending"))
                .body("[1].'category'.'name'", containsString("Dogs"))
                .body("[1].'name'", containsString("Dog 2"))
                .body("[1].'photoUrls'.size()", equalTo(2))
                .body("[1].'photoUrls'", hasItems("url1", "url2"))
                .body("[1].'tags'.size()", equalTo(2))
                .body("[1].'tags'[0].'name'", containsString("tag2"))
                .body("[1].'tags'[1].'name'", containsString("tag3"))
                .body("[1].'status'", containsString("sold"))
                .body("[2].'category'.'name'", containsString("Dogs"))
                .body("[2].'name'", containsString("Dog 2"))
                .body("[2].'photoUrls'.size()", equalTo(2))
                .body("[2].'photoUrls'", hasItems("url1", "url2"))
                .body("[2].'tags'.size()", equalTo(2))
                .body("[2].'tags'[0].'name'", containsString("tag2"))
                .body("[2].'tags'[1].'name'", containsString("tag3"))
                .body("[2].'status'", containsString("sold"))
                ; // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v3/pet/{petId}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_56_getOnV3PetReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.enum. [Path '/status'] Instance value ("_EM_20177_XYZ_") not found in enum (possible values: ["available","pending","sold"])
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v3/pet/500")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("_EM_19492_XYZ_"))
                .body("'photoUrls'.size()", equalTo(0))
                .body("'tags'.size()", equalTo(1))
                .body("'tags'[0].'name'", containsString("_EM_1576_XYZ_"))
                .body("'status'", containsString("_EM_20177_XYZ_"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v3/user/logout
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_57_getOnLogoutReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v3/user/logout?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("User logged out"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) PUT:/api/v3/pet
    * 2 - (200) GET:/api/v3/pet/findByStatus
    * Found 1 potential fault of type-code 101
    * Using 2 examples:
    *   Dogs
    *   doggie
    */
    @Test(timeout = 60000)
    public void test_58_getOnPetFindByStatusReturnsMismatchResponseWithSchema() throws Exception {
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("id=998&name=doggie&category=%7B%22id%22%3A39%2C+%22name%22%3A%22Dogs%22%7D&photoUrls=%5B%5D&status=pending")
                .put(baseUrlOfSut + "/api/v3/pet")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'category'.'name'", containsString("Dogs"))
                .body("'name'", containsString("doggie"))
                .body("'photoUrls'.size()", equalTo(0))
                .body("'status'", containsString("pending"));
        String location_pet__2 = "/api/v3/pet" + "/" + res_0.extract().body().path("id").toString();
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. Instance type (object) does not match any allowed primitive type (allowed: ["array"])
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(resolveLocation(location_pet__2, baseUrlOfSut + "/api/v3/pet/findByStatus"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'category'.'name'", containsString("Dogs"))
                .body("'name'", containsString("doggie"))
                .body("'photoUrls'.size()", equalTo(0))
                .body("'status'", containsString("pending"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/api/v3/pet
    * 2 - (200) GET:/api/v3/pet/findByTags
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   doggie
    */
    @Test(timeout = 60000)
    public void test_59_getOnPetFindByTagsReturnsMismatchResponseWithSchema() throws Exception {
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/x-www-form-urlencoded")
                .body("id=173&name=doggie&photoUrls=%5B%22_EM_269_XYZ_%22%2C+%22cOkjv9AgraHO50D1%22%5D")
                .post(baseUrlOfSut + "/api/v3/pet")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("doggie"))
                .body("'photoUrls'.size()", equalTo(0));
        String location_pet__2 = "/api/v3/pet" + "/" + res_0.extract().body().path("id").toString();
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. Instance type (object) does not match any allowed primitive type (allowed: ["array"])
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(resolveLocation(location_pet__2, baseUrlOfSut + "/api/v3/pet/findByTags"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("doggie"))
                .body("'photoUrls'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v3/pet/findByStatus
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_60_getOnFindByStatusReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.required. [Path '/9'] Object has missing required properties (["name"])
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v3/pet/findByStatus?status=available")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(29))
                .body("[0].'category'.'name'", containsString("_EM_121_XYZ_"))
                .body("[0].'name'", containsString("9bOvtZ"))
                .body("[0].'photoUrls'.size()", equalTo(0))
                .body("[0].'status'", containsString("available"))
                .body("[1].'name'", containsString("doggie"))
                .body("[1].'photoUrls'.size()", equalTo(0))
                .body("[1].'status'", containsString("available"))
                .body("[2].'name'", containsString("jMBwjr1XIlFEwx1"))
                .body("[2].'photoUrls'.size()", equalTo(0))
                .body("[2].'tags'.size()", equalTo(0))
                .body("[2].'status'", containsString("available"))
                ; // Skipping assertions on the remaining 26 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/api/v3/pet
    * 2 - (200) GET:/api/v3/pet/findByStatus
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   10
    */
    @Test(timeout = 60000)
    public void test_61_getOnFindByStatusReturnsMismatchResponseWithSchema() throws Exception {
        
        Pet dto_Pet_1 = new Pet();
        dto_Pet_1.setId(10);
        dto_Pet_1.setName("_EM_23887_XYZ_");
        Category dto_Category_1 = new Category();
        dto_Category_1.setId(428);
        dto_Pet_1.setCategory(dto_Category_1);
        List<String> list_String_1 = new ArrayList<String>();
        list_String_1.add("");
        dto_Pet_1.setPhotourls(list_String_1);
        dto_Pet_1.setStatus("pending");
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(dto_Pet_1)
                .post(baseUrlOfSut + "/api/v3/pet")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("_EM_23887_XYZ_"))
                .body("'photoUrls'.size()", equalTo(1))
                .body("'photoUrls'", hasItems(""))
                .body("'tags'.size()", equalTo(0))
                .body("'status'", containsString("pending"));
        String location_pet__2 = "/api/v3/pet" + "/" + res_0.extract().body().path("id").toString();
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. Instance type (object) does not match any allowed primitive type (allowed: ["array"])
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(resolveLocation(location_pet__2, baseUrlOfSut + "/api/v3/pet/findByStatus?status=EVOMASTER"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("_EM_23887_XYZ_"))
                .body("'photoUrls'.size()", equalTo(1))
                .body("'photoUrls'", hasItems(""))
                .body("'tags'.size()", equalTo(0))
                .body("'status'", containsString("pending"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v3/pet/findByTags
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_62_getOnFindByTagsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.enum. [Path '/0/status'] Instance value ("") not found in enum (possible values: ["available","pending","sold"])
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v3/pet/findByTags?tags=&tags=_EM_25168_XYZ_&tags=doggie")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("m"))
                .body("[0].'photoUrls'.size()", equalTo(4))
                .body("[0].'photoUrls'", hasItems("nmXfENNkYk70", "k3WJk7ff", "_EM_24217_XYZ_", "R1dji"))
                .body("[0].'tags'.size()", equalTo(4))
                .body("[0].'tags'[0].'name'", containsString("hf"))
                .body("[0].'tags'[1].'name'", containsString("doggie"))
                .body("[0].'tags'[2].'name'", containsString("EgUlf6JSASsRddp"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("[0].'status'", containsString(""));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/v3/store/order
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   198772
    */
    @Test(timeout = 60000)
    public void test_63_postOnOrderReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.enum. [Path '/status'] Instance value ("EVOMASTER") not found in enum (possible values: ["placed","approved","delivered"])
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("id=734&petId=198772&quantity=474&status=EVOMASTER&complete=true")
                .post(baseUrlOfSut + "/api/v3/store/order")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'petId'", numberMatches(198772.0))
                .body("'quantity'", numberMatches(474.0))
                .body("'shipDate'", containsString("2025-10-05T22:41:54.043+00:00"))
                .body("'status'", containsString("EVOMASTER"))
                .body("'complete'", equalTo(true));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/v3/store/order
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   10
    */
    @Test(timeout = 60000)
    public void test_64_postOnOrderReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.enum. [Path '/status'] Instance value ("EVOMASTER") not found in enum (possible values: ["placed","approved","delivered"])
        Order dto_Order_1 = new Order();
        dto_Order_1.setId(10);
        dto_Order_1.setPetid(324);
        dto_Order_1.setStatus("EVOMASTER");
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(dto_Order_1)
                .post(baseUrlOfSut + "/api/v3/store/order")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'petId'", numberMatches(324.0))
                .body("'quantity'", numberMatches(0.0))
                .body("'status'", containsString("EVOMASTER"))
                .body("'complete'", equalTo(false));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/v3/pet/{petId}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_65_postOnPetReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.enum. [Path '/status'] Instance value ("_EM_20177_XYZ_") not found in enum (possible values: ["available","pending","sold"])
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/v3/pet/500?" + 
                    "name=_EM_19492_XYZ_&" + 
                    "status=_EM_20177_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("_EM_19492_XYZ_"))
                .body("'photoUrls'.size()", equalTo(0))
                .body("'tags'.size()", equalTo(1))
                .body("'tags'[0].'name'", containsString("_EM_1576_XYZ_"))
                .body("'status'", containsString("_EM_20177_XYZ_"));
    }
    
    
    /**
    * Calls:
    * (200) DELETE:/api/v3/pet/{petId}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_66_deleteOnV3PetWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("api_key", "_EM_3_XYZ_")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v3/pet/670?EMextraParam123=_EM_4_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Pet deleted"));
    }
    
    
    /**
    * Calls:
    * (200) DELETE:/api/v3/pet/{petId}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_67_deleteOnV3PetReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("api_key", "JWvO7dGAWvH6Y")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v3/pet/-3475")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Pet deleted"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/v3/pet/findByStatus
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_68_getOnFindByStatusReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_151_XYZ_")
                .get(baseUrlOfSut + "/api/v3/pet/findByStatus?EMextraParam123=_EM_150_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("No status provided. Try again?"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/v3/pet/findByStatus
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_69_getOnFindByStatusReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v3/pet/findByStatus?status=EVOMASTER")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Input error: query parameter `status value `EVOMASTER` is not in the allowable values `[available, pending, sold]`"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/v3/pet/findByTags
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_70_getOnFindByTagsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v3/pet/findByTags?" + 
                    "tags=&" + 
                    "EMextraParam123=_EM_1_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("No tags provided. Try again?"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/v3/pet/findByTags
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_71_getOnFindByTagsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_133_XYZ_")
                .get(baseUrlOfSut + "/api/v3/pet/findByTags?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("No tags provided. Try again?"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/v3/pet/{petId}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_72_postOnPetReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/v3/pet/159?" + 
                    "status=_EM_16_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("No Name provided. Try again?"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/v3/store/order
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_73_postOnStoreOrderWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/xml")
                .post(baseUrlOfSut + "/api/v3/store/order?EMextraParam123=_EM_17_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("No Order provided. Try again?"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/v3/user/createWithList
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_74_postOnCreateWithListReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        List<User> list_User_1 = new ArrayList<User>();
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(list_User_1)
                .post(baseUrlOfSut + "/api/v3/user/createWithList")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("No User provided. Try again?"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/v3/user/createWithList
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_75_postOnCreateWithListReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        List<User> list_User_1 = new ArrayList<User>();
        User dto_User_1 = new User();
        dto_User_1.setId(-1056662481);
        dto_User_1.setFirstname("first name 10");
        dto_User_1.setLastname("last name 10");
        dto_User_1.setEmail("_EM_14432_XYZ_");
        list_User_1.add(dto_User_1);
        User dto_User_2 = new User();
        dto_User_2.setUsername("ofqQQV9HgXLy6vH6");
        dto_User_2.setFirstname("bElYs3H_63E_nB_");
        dto_User_2.setLastname("beZwTbPOq3z");
        dto_User_2.setEmail("john@email.com");
        dto_User_2.setUserstatus(900);
        list_User_1.add(dto_User_2);
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .post(baseUrlOfSut + "/api/v3/user/createWithList")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("No User provided. Try again?"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/api/v3/user/{username}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_76_putOnUserReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/xml")
                .put(baseUrlOfSut + "/api/v3/user/_EM_46_XYZ_?EMextraParam123=_EM_51_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("No User provided. Try again?"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/api/v3/user/{username}
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   theUser
    */
    @Test(timeout = 60000)
    public void test_77_putOnUserReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/xml")
                .put(baseUrlOfSut + "/api/v3/user/user5?EMextraParam123=_EM_4705_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Input error: unable to convert input to io.swagger.petstore.model.User"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/api/v3/user/{username}
    * Found 1 potential fault of type-code 101
    * Using 2 examples:
    *   1
    *   James
    */
    @Test(timeout = 60000)
    public void test_78_putOnV3UserReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        User dto_User_1 = new User();
        dto_User_1.setId(616);
        dto_User_1.setUsername("_EM_21849_XYZ_");
        dto_User_1.setFirstname("_EM_8353_XYZ_");
        dto_User_1.setLastname("James");
        dto_User_1.setEmail("n");
        dto_User_1.setPassword("8MTPQ");
        dto_User_1.setPhone("PW5v7d9");
        dto_User_1.setUserstatus(1);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(dto_User_1)
                .put(baseUrlOfSut + "/api/v3/user/u%5Car1V")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/v3/pet/{petId}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_79_getOnPetReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_2_XYZ_")
                .get(baseUrlOfSut + "/api/v3/pet/270?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Pet not found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/v3/pet/{petId}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_80_getOnPetReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v3/pet/-1956904317?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Pet not found"));
    }
    
    
    /**
    * Calls:
    * (404) POST:/api/v3/pet/{petId}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_81_postOnPetReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/v3/pet/-1908629434?" + 
                    "name=_EM_12493_XYZ_&" + 
                    "status=_EM_6336_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Pet not found"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/api/v3/store/order
    * 2 - (200) GET:/api/v3/store/order/{orderId}
    * Found 2 potential faults of type-code 101
    * Using 1 example:
    *   10
    */
    @Test(timeout = 60000)
    public void test_82_getOnOrderReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.enum. [Path '/status'] Instance value ("EVOMASTER") not found in enum (possible values: ["placed","approved","delivered"])
        Order dto_Order_1 = new Order();
        dto_Order_1.setId(10);
        dto_Order_1.setPetid(324);
        dto_Order_1.setStatus("EVOMASTER");
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(dto_Order_1)
                .post(baseUrlOfSut + "/api/v3/store/order")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'petId'", numberMatches(324.0))
                .body("'quantity'", numberMatches(0.0))
                .body("'status'", containsString("EVOMASTER"))
                .body("'complete'", equalTo(false));
        String location_order__2 = "/api/v3/store/order" + "/" + res_0.extract().body().path("id").toString();
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.enum. [Path '/status'] Instance value ("EVOMASTER") not found in enum (possible values: ["placed","approved","delivered"])
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(resolveLocation(location_order__2, baseUrlOfSut + "/api/v3/store/order/-1036459952"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'petId'", numberMatches(324.0))
                .body("'quantity'", numberMatches(0.0))
                .body("'status'", containsString("EVOMASTER"))
                .body("'complete'", equalTo(false));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/v3/store/order/{orderId}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_83_getOnOrderReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v3/store/order/437")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Order not found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/v3/store/order/{orderId}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_84_getOnOrderReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v3/store/order/-32331")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Order not found"));
    }
    
    
    /**
    * Calls:
    * (415) POST:/api/v3/pet/{petId}/uploadImage
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_85_postOnUploadImageReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_15_XYZ_")
                .contentType("application/json")
                .body(" _EM_13_XYZ_ ")
                .post(baseUrlOfSut + "/api/v3/pet/453/uploadImage?EMextraParam123=_EM_14_XYZ_")
                .then()
                .statusCode(415)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(415.0))
                .body("'message'", containsString("HTTP 415 Unsupported Media Type"));
    }
    
    
    /**
    * Calls:
    * (415) POST:/api/v3/pet/{petId}/uploadImage
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_86_postOnPetUploadImageWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" _EM_13_XYZ_ ")
                .post(baseUrlOfSut + "/api/v3/pet/453/uploadImage?" + 
                    "additionalMetadata=_EM_12_XYZ_&" + 
                    "EMextraParam123=_EM_14_XYZ_")
                .then()
                .statusCode(415)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(415.0))
                .body("'message'", containsString("HTTP 415 Unsupported Media Type"));
    }
    
    
    /**
    * Calls:
    * (415) POST:/api/v3/pet/{petId}/uploadImage
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_87_postOnUploadImageReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" _EM_27671_XYZ_ ")
                .post(baseUrlOfSut + "/api/v3/pet/-8392397647281112527/uploadImage?additionalMetadata=S9X94gZ3_0seJMcV")
                .then()
                .statusCode(415)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(415.0))
                .body("'message'", containsString("HTTP 415 Unsupported Media Type"));
    }


}
