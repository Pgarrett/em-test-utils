/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  dto.*;
import  java.util.ArrayList;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-10-05T17:12:58.775-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 12 tests
 * <br>
*  Covered targets: 204
 * <br>
*  Used time: 0h 10m 14s
 * <br>
*  Needed budget for current results: 27%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.external.org.javiermf.features.ExternalEvoMasterController("/Users/pgarrett/evoMaster/EMB/jdk_8_maven/cs/rest/original/features-service/target/features-service-sut.jar");
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (500) GET:/products/{productName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_0_getOnProductCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/products/_EM_15_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/products/{productName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_1_deleteOnProductCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_17_XYZ_")
                .delete(baseUrlOfSut + "/products/J3R_67p?EMextraParam123=_EM_16_XYZ_")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) GET:/products/{productName}/features
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_2_getOnProductFeaturesCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products/sRp/features")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) POST:/products/{productName}/constraints/excludes
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_3_postOnExcludesCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("excludedFeature=yr60slJQnFEY1anX")
                .post(baseUrlOfSut + "/products/_EM_27_XYZ_/constraints/excludes")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) POST:/products/{productName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_4_postOnProductFeaturWithQueryParamCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/products/NwnWMSzUUZJ/features/UYudi5AKdUnV94Bt?EMextraParam123=42")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) POST:/products/{productName}/configurations/{configurationName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_5_postOnConfigurCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/_EM_22_XYZ_/configurations/cNdSmJO?EMextraParam123=_EM_23_XYZ_")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) POST:/products/{productName}/constraints/requires
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_6_postOnRequiresCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/x-www-form-urlencoded")
                .body("sourceFeature=_EM_25_XYZ_&requiredFeature=")
                .post(baseUrlOfSut + "/products/XfGZB6t/constraints/requires?EMextraParam123=_EM_26_XYZ_")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/products/{productName}/configurations/{configurationName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_7_deleteOnConfigurCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsConfigurationsDAO_71_deleteConfigurationForProduct.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_12_XYZ_")
                .delete(baseUrlOfSut + "/products/_EM_10_XYZ_/configurations/_EM_11_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsConfigurationsDAO_71_deleteConfigurationForProduct
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/products/{productName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_8_deleteOnProductFeaturWithQueryParamCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/products/qtvboYKgwY/features/76u3l1EWRma?EMextraParam123=42")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) GET:/products/{productName}/configurations/{configurationName}/features
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_9_getOnConfigurFeaturesCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/services/ProductsConfigurationsService_46_getConfigurationActivedFeaturesNames.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products/_EM_4_XYZ_/configurations/AP_6rbd/features")
                .then()
                .statusCode(500)// org/javiermf/features/services/ProductsConfigurationsService_46_getConfigurationActivedFeaturesNames
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) POST:/products/{productName}/configurations/{configurationName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_10_postOnConfigurFeaturCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/services/ProductsConfigurationsService_79_addFeatureFromConfiguration.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/products/PUxFcXyhUApQeBz/configurations/_EM_20_XYZ_/features/_EM_21_XYZ_")
                .then()
                .statusCode(500)// org/javiermf/features/services/ProductsConfigurationsService_79_addFeatureFromConfiguration
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/products/{productName}/configurations/{configurationName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_11_deleteOnConfigurFeaturCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/services/ProductsConfigurationsService_70_removeFeatureFromConfiguration.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/products/_EM_0_XYZ_/configurations/_EM_1_XYZ_/features/_EM_2_XYZ_")
                .then()
                .statusCode(500)// org/javiermf/features/services/ProductsConfigurationsService_70_removeFeatureFromConfiguration
                .assertThat()
                .contentType("text/html");
    }


}
