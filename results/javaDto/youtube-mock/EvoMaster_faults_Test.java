/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  dto.*;
import  java.util.ArrayList;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-10-05T19:52:40.886-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 33 tests
 * <br>
*  Covered targets: 757
 * <br>
*  Used time: 0h 10m 0s
 * <br>
*  Needed budget for current results: 85%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.external.youtube.ExternalEvoMasterController("/Users/pgarrett/evoMaster/EMB/jdk_8_maven/cs/rest/original/youtube-mock/target/youtube-mock-sut.jar");
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (400) GET:/api/search
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_0_getOnSearchReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/search?" + 
                    "channelId=MGUfLcWdV&" + 
                    "eventType=upcoming&" + 
                    "forContentOwner=false&" + 
                    "locationRadius=&" + 
                    "maxResults=11&" + 
                    "onBehalfOfContentOwner=bGBRZdrbBovR&" + 
                    "order=viewCount&" + 
                    "pageToken=Yw&" + 
                    "part=snippet&" + 
                    "publishedAfter=_EM_20266UXYZ_&" + 
                    "publishedBefore=_EM_58942_XYZ_&" + 
                    "q=hMif_tU7Zsi%3E&" + 
                    "regionCode=tR1QYZTf90dr3&" + 
                    "relevanceLanguage=MJ&" + 
                    "safeSearch=moderate&" + 
                    "topicId=HEHM99OPWaz&" + 
                    "type=video&" + 
                    "videoCaption=none&" + 
                    "videoDefinition=high&" + 
                    "videoDimension=3d&" + 
                    "videoDuration=any&" + 
                    "videoEmbeddable=any&" + 
                    "videoLicense=youtube&" + 
                    "videoSyndicated=true&" + 
                    "videoType=EVOMASTER")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'.'errors'.size()", equalTo(1))
                .body("'error'.'errors'[0].'message'", containsString("Bad Request"))
                .body("'error'.'errors'[0].'locationType'", containsString("parameter"))
                .body("'error'.'errors'[0].'location'", containsString(""))
                .body("'error'.'status'", numberMatches(400.0))
                .body("'error'.'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/search
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1_getOnSearchReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/search?" + 
                    "channelType=any&" + 
                    "forContentOwner=false&" + 
                    "forDeveloper=true&" + 
                    "forMine=false&" + 
                    "location=_EM_57_XYZ_&" + 
                    "locationRadius=_EM_58_XYZ_&" + 
                    "maxResults=44&" + 
                    "onBehalfOfContentOwner=&" + 
                    "order=title&" + 
                    "pageToken=_EM_29_XYZ_&" + 
                    "part=snippet&" + 
                    "publishedAfter=_EM_30_XYZ_&" + 
                    "relatedToVideoId=&" + 
                    "safeSearch=none&" + 
                    "topicId=Xtt3vSu2IbY&" + 
                    "videoCategoryId=_EM_35_XYZ_&" + 
                    "videoDefinition=any&" + 
                    "videoDimension=any&" + 
                    "videoDuration=long&" + 
                    "videoEmbeddable=any&" + 
                    "videoLicense=youtube&" + 
                    "videoSyndicated=any&" + 
                    "videoType=episode&" + 
                    "EMextraParam123=_EM_36_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'.'errors'.size()", equalTo(1))
                .body("'error'.'errors'[0].'domain'", containsString("youtube.parameter"))
                .body("'error'.'errors'[0].'reason'", containsString("incompatibleParameters"))
                .body("'error'.'errors'[0].'message'", containsString("Incompatible parameters specified in the request: forContentOwner, forDeveloper, forMine"))
                .body("'error'.'errors'[0].'locationType'", containsString("parameter"))
                .body("'error'.'errors'[0].'location'", containsString(""))
                .body("'error'.'status'", numberMatches(400.0))
                .body("'error'.'message'", containsString("Incompatible parameters specified in the request: forContentOwner, forDeveloper, forMine"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/search
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_2_getOnSearchReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/search?" + 
                    "channelId=MGUfLcWdV&" + 
                    "eventType=upcoming&" + 
                    "forContentOwner=false&" + 
                    "locationRadius=&" + 
                    "maxResults=7&" + 
                    "onBehalfOfContentOwner=%60GBRZdrbBovR&" + 
                    "order=EVOMASTER&" + 
                    "pageToken=Yw&" + 
                    "part=snippet&" + 
                    "publishedAfter=_EM_20286UXYZ_&" + 
                    "publishedBefore=_EM_58942_XYZ_&" + 
                    "q=hMif_tU7Zsi%3E&" + 
                    "regionCode=tR1QYZTf90dr3&" + 
                    "relevanceLanguage=OL&" + 
                    "safeSearch=none&" + 
                    "topicId=HEHM99OPWaz&" + 
                    "type=video&" + 
                    "videoCaption=EVOMASTER&" + 
                    "videoCategoryId=_EM_827_XYZ_&" + 
                    "videoDefinition=high&" + 
                    "videoDimension=3d&" + 
                    "videoDuration=any&" + 
                    "videoEmbeddable=any&" + 
                    "videoLicense=EVOMASTER&" + 
                    "videoSyndicated=true&" + 
                    "videoType=any")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'.'errors'.size()", equalTo(1))
                .body("'error'.'errors'[0].'domain'", containsString("global"))
                .body("'error'.'errors'[0].'reason'", containsString("invalidParameter"))
                .body("'error'.'errors'[0].'message'", containsString("Invalid string value: 'EVOMASTER'. Allowed values: [date, rating, relevance, title, videoCount, viewCount]"))
                .body("'error'.'errors'[0].'locationType'", containsString("parameter"))
                .body("'error'.'errors'[0].'location'", containsString("searchRequest.getOrder()"))
                .body("'error'.'status'", numberMatches(400.0))
                .body("'error'.'message'", containsString("Invalid string value: 'EVOMASTER'. Allowed values: [date, rating, relevance, title, videoCount, viewCount]"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/search
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_3_getOnSearchReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/search?" + 
                    "forDeveloper=false&" + 
                    "locationRadius=R5zGtp5wszrhg&" + 
                    "maxResults=42&" + 
                    "onBehalfOfContentOwner=K610k0mNON&" + 
                    "order=date&" + 
                    "pageToken=k&" + 
                    "part=snippet&" + 
                    "publishedAfter=_EM_28778_XYZ_&" + 
                    "q=jqrUwRbyvLfPJqEu&" + 
                    "relatedToVideoId=&" + 
                    "safeSearch=EVOMASTER&" + 
                    "videoType=any")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'.'errors'.size()", equalTo(1))
                .body("'error'.'errors'[0].'domain'", containsString("youtube.search"))
                .body("'error'.'errors'[0].'reason'", containsString("invalidSearchFilter"))
                .body("'error'.'errors'[0].'message'", containsString("The request contains an invalid combination of search filters and/or restrictions. Note that you must set the <code>type</code> parameter to <code>video</code> if you set either the <code>forContentOwner</code> or <code>forMine</code> parameters to <code>true</code>. You must also set the <code>type</code> parameter to <code>video</code> if you set a value for the <code>eventType</code>, <code>videoCaption</code>, <code>videoCategoryId</code>, <code>videoDefinition</code>, <code>videoDimension</code>, <code>videoDuration</code>, <code>videoEmbeddable</code>, <code>videoLicense</code>, <code>videoSyndicated</code>, or <code>videoType</code> parameters."))
                .body("'error'.'errors'[0].'locationType'", containsString("parameter"))
                .body("'error'.'errors'[0].'location'", containsString(""))
                .body("'error'.'status'", numberMatches(400.0))
                .body("'error'.'message'", containsString("The request contains an invalid combination of search filters and/or restrictions. Note that you must set the <code>type</code> parameter to <code>video</code> if you set either the <code>forContentOwner</code> or <code>forMine</code> parameters to <code>true</code>. You must also set the <code>type</code> parameter to <code>video</code> if you set a value for the <code>eventType</code>, <code>videoCaption</code>, <code>videoCategoryId</code>, <code>videoDefinition</code>, <code>videoDimension</code>, <code>videoDuration</code>, <code>videoEmbeddable</code>, <code>videoLicense</code>, <code>videoSyndicated</code>, or <code>videoType</code> parameters."));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/search
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_4_getOnSearchReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/search?" + 
                    "channelType=any&" + 
                    "eventType=completed&" + 
                    "forMine=false&" + 
                    "location=_EM_460_XYZ_&" + 
                    "locationRadius=OZmig9W_PE&" + 
                    "part=snippet&" + 
                    "publishedAfter=ekY&" + 
                    "q=_EM_463_XYZ_&" + 
                    "regionCode=0&" + 
                    "type=Q&" + 
                    "videoCaption=none&" + 
                    "videoDimension=EVOMASTER&" + 
                    "videoDuration=EVOMASTER&" + 
                    "videoSyndicated=any&" + 
                    "videoType=any&" + 
                    "EMextraParam123=_EM_465_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'.'errors'.size()", equalTo(1))
                .body("'error'.'errors'[0].'domain'", containsString("youtube.search"))
                .body("'error'.'errors'[0].'reason'", containsString("invalidSearchFilter"))
                .body("'error'.'errors'[0].'message'", containsString("The request contains an invalid combination of search filters and/or restrictions. Note that you must set the <code>type</code> parameter to <code>video</code> if you set either the <code>forContentOwner</code> or <code>forMine</code> parameters to <code>true</code>. You must also set the <code>type</code> parameter to <code>video</code> if you set a value for the <code>eventType</code>, <code>videoCaption</code>, <code>videoCategoryId</code>, <code>videoDefinition</code>, <code>videoDimension</code>, <code>videoDuration</code>, <code>videoEmbeddable</code>, <code>videoLicense</code>, <code>videoSyndicated</code>, or <code>videoType</code> parameters."))
                .body("'error'.'errors'[0].'locationType'", containsString("parameter"))
                .body("'error'.'errors'[0].'location'", containsString(""))
                .body("'error'.'status'", numberMatches(400.0))
                .body("'error'.'message'", containsString("The request contains an invalid combination of search filters and/or restrictions. Note that you must set the <code>type</code> parameter to <code>video</code> if you set either the <code>forContentOwner</code> or <code>forMine</code> parameters to <code>true</code>. You must also set the <code>type</code> parameter to <code>video</code> if you set a value for the <code>eventType</code>, <code>videoCaption</code>, <code>videoCategoryId</code>, <code>videoDefinition</code>, <code>videoDimension</code>, <code>videoDuration</code>, <code>videoEmbeddable</code>, <code>videoLicense</code>, <code>videoSyndicated</code>, or <code>videoType</code> parameters."));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/search
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_5_getOnApiSearchWithQueryParamsEmptyLocationAndEmptyLocationRadius() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/search?" + 
                    "channelId=M_SfLcWdV&" + 
                    "eventType=upcoming&" + 
                    "forContentOwner=false&" + 
                    "location=&" + 
                    "locationRadius=&" + 
                    "maxResults=0&" + 
                    "onBehalfOfContentOwner=bGBRZdrbBovR&" + 
                    "order=title&" + 
                    "pageToken=%5BsV&" + 
                    "part=snippet&" + 
                    "publishedAfter=BzWxyTXdBww&" + 
                    "publishedBefore=_EM_58942_XYZ_&" + 
                    "q=hMif_tU5ZsYB&" + 
                    "regionCode=tR1QYZTf90dr3&" + 
                    "relevanceLanguage=MJ&" + 
                    "safeSearch=EVOMASTER&" + 
                    "type=video&" + 
                    "videoCaption=closedCaption&" + 
                    "videoCategoryId=Et1&" + 
                    "videoDefinition=high&" + 
                    "videoDimension=3d&" + 
                    "videoDuration=EVOMASTER&" + 
                    "videoEmbeddable=true&" + 
                    "videoLicense=youtube&" + 
                    "videoSyndicated=any&" + 
                    "videoType=movie")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'.'errors'.size()", equalTo(1))
                .body("'error'.'errors'[0].'message'", containsString("Bad Request"))
                .body("'error'.'errors'[0].'locationType'", containsString("parameter"))
                .body("'error'.'errors'[0].'location'", containsString(""))
                .body("'error'.'status'", numberMatches(400.0))
                .body("'error'.'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/search
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_6_getOnSearchReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/search?" + 
                    "channelId=MGUfLcWdV&" + 
                    "eventType=upcoming&" + 
                    "forContentOwner=false&" + 
                    "locationRadius=&" + 
                    "onBehalfOfContentOwner=bGBRZdrbBovR&" + 
                    "order=relevance&" + 
                    "pageToken=YuV&" + 
                    "part=snippet&" + 
                    "publishedAfter=_EM_20266_XYZ_&" + 
                    "publishedBefore=_EM_58942_XYZ_&" + 
                    "q=hMif_tU5ZsYB&" + 
                    "regionCode=tR1QYZTf90dr3&" + 
                    "relevanceLanguage=MI&" + 
                    "safeSearch=EVOMASTER&" + 
                    "type=video&" + 
                    "videoCaption=closedCaption&" + 
                    "videoDefinition=high&" + 
                    "videoDimension=3d&" + 
                    "videoDuration=EVOMASTER&" + 
                    "videoEmbeddable=true&" + 
                    "videoLicense=youtube&" + 
                    "videoSyndicated=EVOMASTER&" + 
                    "videoType=movie")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'.'errors'.size()", equalTo(1))
                .body("'error'.'errors'[0].'message'", containsString("Bad Request"))
                .body("'error'.'errors'[0].'locationType'", containsString("parameter"))
                .body("'error'.'errors'[0].'location'", containsString(""))
                .body("'error'.'status'", numberMatches(400.0))
                .body("'error'.'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/search
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_7_getOnSearchReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_3574_XYZ_")
                .get(baseUrlOfSut + "/api/search?" + 
                    "channelId=OA0R7Kp&" + 
                    "channelType=show&" + 
                    "eventType=live&" + 
                    "locationRadius=wdt2Dr_&" + 
                    "maxResults=41&" + 
                    "order=viewCount&" + 
                    "pageToken=_EM_3569_XYZ_&" + 
                    "part=snippet&" + 
                    "publishedBefore=WbC9rC5x&" + 
                    "regionCode=m4&" + 
                    "relatedToVideoId=_EM_3597_XYZ_&" + 
                    "relevanceLanguage=YMMK7lVXYyuUf_X&" + 
                    "safeSearch=moderate&" + 
                    "type=video&" + 
                    "videoCaption=closedCaption&" + 
                    "videoDefinition=standard&" + 
                    "videoDimension=2d&" + 
                    "videoEmbeddable=any&" + 
                    "videoSyndicated=true&" + 
                    "videoType=episode&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'.'errors'.size()", equalTo(1))
                .body("'error'.'errors'[0].'domain'", containsString("youtube.search"))
                .body("'error'.'errors'[0].'reason'", containsString("invalidSearchFilter"))
                .body("'error'.'errors'[0].'message'", containsString("The request contains an invalid combination of search filters and/or restrictions. Note that you must set the <code>type</code> parameter to <code>video</code> if you set either the <code>forContentOwner</code> or <code>forMine</code> parameters to <code>true</code>. You must also set the <code>type</code> parameter to <code>video</code> if you set a value for the <code>eventType</code>, <code>videoCaption</code>, <code>videoCategoryId</code>, <code>videoDefinition</code>, <code>videoDimension</code>, <code>videoDuration</code>, <code>videoEmbeddable</code>, <code>videoLicense</code>, <code>videoSyndicated</code>, or <code>videoType</code> parameters."))
                .body("'error'.'errors'[0].'locationType'", containsString("parameter"))
                .body("'error'.'errors'[0].'location'", containsString(""))
                .body("'error'.'status'", numberMatches(400.0))
                .body("'error'.'message'", containsString("The request contains an invalid combination of search filters and/or restrictions. Note that you must set the <code>type</code> parameter to <code>video</code> if you set either the <code>forContentOwner</code> or <code>forMine</code> parameters to <code>true</code>. You must also set the <code>type</code> parameter to <code>video</code> if you set a value for the <code>eventType</code>, <code>videoCaption</code>, <code>videoCategoryId</code>, <code>videoDefinition</code>, <code>videoDimension</code>, <code>videoDuration</code>, <code>videoEmbeddable</code>, <code>videoLicense</code>, <code>videoSyndicated</code>, or <code>videoType</code> parameters."));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/search
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_8_getOnSearchReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/search?" + 
                    "channelId=MGWfLcWcVM&" + 
                    "eventType=upcoming&" + 
                    "forContentOwner=false&" + 
                    "locationRadius=&" + 
                    "maxResults=31&" + 
                    "onBehalfOfContentOwner=IQk&" + 
                    "pageToken=Wu&" + 
                    "part=snippet&" + 
                    "publishedAfter=_ELO%602U266UXYY&" + 
                    "publishedBefore=_EM_60035_XYZ_&" + 
                    "q=hMif_rU4ZsWB&" + 
                    "regionCode=tR1QUZTf90er3&" + 
                    "relevanceLanguage=OU&" + 
                    "safeSearch=EVOMASTER&" + 
                    "topicId=HEFM99UPWdz&" + 
                    "type=video&" + 
                    "videoCaption=closedCaption&" + 
                    "videoCategoryId=qp7AO8xIiQQxcZ&" + 
                    "videoDefinition=high&" + 
                    "videoDimension=any&" + 
                    "videoDuration=short&" + 
                    "videoEmbeddable=true&" + 
                    "videoLicense=creativeCommon&" + 
                    "videoSyndicated=EVOMASTER&" + 
                    "videoType=EVOMASTER")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'.'errors'.size()", equalTo(1))
                .body("'error'.'errors'[0].'message'", containsString("Bad Request"))
                .body("'error'.'errors'[0].'locationType'", containsString("parameter"))
                .body("'error'.'errors'[0].'location'", containsString(""))
                .body("'error'.'status'", numberMatches(400.0))
                .body("'error'.'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/search
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_9_getOnSearchReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/search?" + 
                    "channelId=MCUfLcWdV&" + 
                    "eventType=upcoming&" + 
                    "forContentOwner=false&" + 
                    "locationRadius=_EM_16362_XYZ_&" + 
                    "onBehalfOfContentOwner=bzBRZdrbwovR&" + 
                    "order=EVOMASTER&" + 
                    "pageToken=_EM_16363_XYZ_&" + 
                    "part=snippet&" + 
                    "publishedAfter=io&" + 
                    "publishedBefore=OTrN&" + 
                    "q=hMif_tU5ZsYB&" + 
                    "regionCode=tR1QYZTf90dr3&" + 
                    "relevanceLanguage=MM&" + 
                    "safeSearch=none&" + 
                    "type=video&" + 
                    "videoCaption=closedCaption&" + 
                    "videoDuration=EVOMASTER&" + 
                    "videoEmbeddable=any&" + 
                    "videoSyndicated=true&" + 
                    "videoType=movie&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'.'errors'.size()", equalTo(1))
                .body("'error'.'errors'[0].'domain'", containsString("youtube.search"))
                .body("'error'.'errors'[0].'reason'", containsString("invalidLocation"))
                .body("'error'.'errors'[0].'message'", containsString("Invalid location."))
                .body("'error'.'errors'[0].'locationType'", containsString("parameter"))
                .body("'error'.'errors'[0].'location'", containsString("location"))
                .body("'error'.'status'", numberMatches(400.0))
                .body("'error'.'message'", containsString("Invalid location."));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/search
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_10_getOnSearchReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/search?" + 
                    "channelId=_EM_821_XYZ_&" + 
                    "eventType=upcoming&" + 
                    "forContentOwner=true&" + 
                    "location=_EM_822_XYZ_&" + 
                    "locationRadius=dcJ&" + 
                    "onBehalfOfContentOwner=_EM_823_XYZ_&" + 
                    "order=EVOMASTER&" + 
                    "pageToken=_EM_824_XYZ_&" + 
                    "part=snippet&" + 
                    "publishedAfter=yo&" + 
                    "publishedBefore=OTrN&" + 
                    "regionCode=_EM_825_XYZ_&" + 
                    "relevanceLanguage=MM&" + 
                    "safeSearch=strict&" + 
                    "type=video&" + 
                    "videoCaption=closedCaption&" + 
                    "videoDuration=EVOMASTER&" + 
                    "videoEmbeddable=any&" + 
                    "videoSyndicated=any&" + 
                    "videoType=movie&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'.'errors'.size()", equalTo(1))
                .body("'error'.'errors'[0].'domain'", containsString("youtube.search"))
                .body("'error'.'errors'[0].'reason'", containsString("invalidSearchFilter"))
                .body("'error'.'errors'[0].'message'", containsString("The request contains an invalid combination of search filters and/or restrictions. Note that you must set the <code>type</code> parameter to <code>video</code> if you set either the <code>forContentOwner</code> or <code>forMine</code> parameters to <code>true</code>. You must also set the <code>type</code> parameter to <code>video</code> if you set a value for the <code>eventType</code>, <code>videoCaption</code>, <code>videoCategoryId</code>, <code>videoDefinition</code>, <code>videoDimension</code>, <code>videoDuration</code>, <code>videoEmbeddable</code>, <code>videoLicense</code>, <code>videoSyndicated</code>, or <code>videoType</code> parameters."))
                .body("'error'.'errors'[0].'locationType'", containsString("parameter"))
                .body("'error'.'errors'[0].'location'", containsString(""))
                .body("'error'.'status'", numberMatches(400.0))
                .body("'error'.'message'", containsString("The request contains an invalid combination of search filters and/or restrictions. Note that you must set the <code>type</code> parameter to <code>video</code> if you set either the <code>forContentOwner</code> or <code>forMine</code> parameters to <code>true</code>. You must also set the <code>type</code> parameter to <code>video</code> if you set a value for the <code>eventType</code>, <code>videoCaption</code>, <code>videoCategoryId</code>, <code>videoDefinition</code>, <code>videoDimension</code>, <code>videoDuration</code>, <code>videoEmbeddable</code>, <code>videoLicense</code>, <code>videoSyndicated</code>, or <code>videoType</code> parameters."));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/search
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_11_getOnSearchReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/search?" + 
                    "channelId=MGUfLcWdV&" + 
                    "eventType=upcoming&" + 
                    "forContentOwner=false&" + 
                    "locationRadius=&" + 
                    "onBehalfOfContentOwner=bGBRZdrbBovR&" + 
                    "order=rating&" + 
                    "pageToken=YuV&" + 
                    "part=snippet&" + 
                    "publishedAfter=_EM_20266_XYZ_&" + 
                    "publishedBefore=_EM_58942_XYZ_&" + 
                    "q=hMif_tU5ZsYB&" + 
                    "regionCode=tR1QYZTf90dr3&" + 
                    "relevanceLanguage=MI&" + 
                    "safeSearch=strict&" + 
                    "type=video&" + 
                    "videoCaption=closedCaption&" + 
                    "videoDefinition=high&" + 
                    "videoDimension=3d&" + 
                    "videoDuration=EVOMASTER&" + 
                    "videoEmbeddable=true&" + 
                    "videoLicense=youtube&" + 
                    "videoSyndicated=true&" + 
                    "videoType=movie")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'.'errors'.size()", equalTo(1))
                .body("'error'.'errors'[0].'message'", containsString("Bad Request"))
                .body("'error'.'errors'[0].'locationType'", containsString("parameter"))
                .body("'error'.'errors'[0].'location'", containsString(""))
                .body("'error'.'status'", numberMatches(400.0))
                .body("'error'.'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/search
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_12_getOnApiSearchWithQueryParamsForDeveloperEmptyPublishedBefore() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/search?" + 
                    "channelId=_EM_401_XYZ_&" + 
                    "forDeveloper=true&" + 
                    "locationRadius=_EM_403_XYZ_&" + 
                    "maxResults=23&" + 
                    "onBehalfOfContentOwner=_EM_404_XYZ_&" + 
                    "pageToken=_EM_405_XYZ_&" + 
                    "part=snippet&" + 
                    "publishedAfter=_EM_406_XYZ_&" + 
                    "publishedBefore=&" + 
                    "q=_EM_407_XYZ_&" + 
                    "regionCode=_EM_408_XYZ_&" + 
                    "relevanceLanguage=k2_SP5&" + 
                    "safeSearch=none&" + 
                    "type=_EM_410_XYZ_&" + 
                    "videoCaption=any&" + 
                    "videoEmbeddable=true&" + 
                    "videoLicense=youtube")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'.'errors'.size()", equalTo(1))
                .body("'error'.'errors'[0].'domain'", containsString("youtube.search"))
                .body("'error'.'errors'[0].'reason'", containsString("invalidSearchFilter"))
                .body("'error'.'errors'[0].'message'", containsString("The request contains an invalid combination of search filters and/or restrictions. Note that you must set the <code>type</code> parameter to <code>video</code> if you set either the <code>forContentOwner</code> or <code>forMine</code> parameters to <code>true</code>. You must also set the <code>type</code> parameter to <code>video</code> if you set a value for the <code>eventType</code>, <code>videoCaption</code>, <code>videoCategoryId</code>, <code>videoDefinition</code>, <code>videoDimension</code>, <code>videoDuration</code>, <code>videoEmbeddable</code>, <code>videoLicense</code>, <code>videoSyndicated</code>, or <code>videoType</code> parameters."))
                .body("'error'.'errors'[0].'locationType'", containsString("parameter"))
                .body("'error'.'errors'[0].'location'", containsString(""))
                .body("'error'.'status'", numberMatches(400.0))
                .body("'error'.'message'", containsString("The request contains an invalid combination of search filters and/or restrictions. Note that you must set the <code>type</code> parameter to <code>video</code> if you set either the <code>forContentOwner</code> or <code>forMine</code> parameters to <code>true</code>. You must also set the <code>type</code> parameter to <code>video</code> if you set a value for the <code>eventType</code>, <code>videoCaption</code>, <code>videoCategoryId</code>, <code>videoDefinition</code>, <code>videoDimension</code>, <code>videoDuration</code>, <code>videoEmbeddable</code>, <code>videoLicense</code>, <code>videoSyndicated</code>, or <code>videoType</code> parameters."));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/search
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_13_getOnSearchReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/search?" + 
                    "channelId=MGUfLcWdV&" + 
                    "eventType=upcoming&" + 
                    "forContentOwner=false&" + 
                    "locationRadius=&" + 
                    "onBehalfOfContentOwner=bzBRZdrbwovR&" + 
                    "order=date&" + 
                    "pageToken=YyV&" + 
                    "part=snippet&" + 
                    "publishedAfter=_EM_20266_XYZ_&" + 
                    "publishedBefore=_EM_58942_XYZ_&" + 
                    "q=hMif_tU5ZsYB&" + 
                    "regionCode=tR1QYZTf90dr3&" + 
                    "relevanceLanguage=MI&" + 
                    "safeSearch=none&" + 
                    "type=video&" + 
                    "videoCaption=closedCaption&" + 
                    "videoDefinition=high&" + 
                    "videoDimension=2d&" + 
                    "videoDuration=EVOMASTER&" + 
                    "videoEmbeddable=any&" + 
                    "videoLicense=youtube&" + 
                    "videoSyndicated=true&" + 
                    "videoType=movie")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'.'errors'.size()", equalTo(1))
                .body("'error'.'errors'[0].'message'", containsString("Bad Request"))
                .body("'error'.'errors'[0].'locationType'", containsString("parameter"))
                .body("'error'.'errors'[0].'location'", containsString(""))
                .body("'error'.'status'", numberMatches(400.0))
                .body("'error'.'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/search
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_14_getOnApiSearchWithQueryParamsForDeveloperAndForMineAndEmptyPageToken() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/search?" + 
                    "channelId=_EM_15_XYZ_&" + 
                    "eventType=upcoming&" + 
                    "forDeveloper=true&" + 
                    "forMine=true&" + 
                    "location=_EM_16_XYZ_&" + 
                    "locationRadius=Xrz&" + 
                    "onBehalfOfContentOwner=&" + 
                    "order=videoCount&" + 
                    "pageToken=&" + 
                    "part=EVOMASTER&" + 
                    "publishedBefore=UPbPXQYN3U9w4m3s&" + 
                    "q=_EM_18_XYZ_&" + 
                    "regionCode=_EM_19_XYZ_&" + 
                    "safeSearch=EVOMASTER&" + 
                    "topicId=_EM_20_XYZ_&" + 
                    "videoCategoryId=q0H6H1Pyu&" + 
                    "videoDefinition=EVOMASTER&" + 
                    "videoDimension=any&" + 
                    "videoDuration=EVOMASTER&" + 
                    "videoLicense=any")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'.'errors'.size()", equalTo(1))
                .body("'error'.'errors'[0].'domain'", containsString("youtube.part"))
                .body("'error'.'errors'[0].'reason'", containsString("unknownPart"))
                .body("'error'.'errors'[0].'message'", containsString("EVOMASTER"))
                .body("'error'.'errors'[0].'locationType'", containsString("parameter"))
                .body("'error'.'errors'[0].'location'", containsString("part"))
                .body("'error'.'status'", numberMatches(400.0))
                .body("'error'.'message'", containsString("EVOMASTER"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/search
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_15_getOnApiSearchWithQueryParamsEmptyOnBehalfOfContentOwner() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1903_XYZ_")
                .get(baseUrlOfSut + "/api/search?" + 
                    "forDeveloper=false&" + 
                    "locationRadius=_EM_1895_XYZ_&" + 
                    "maxResults=25&" + 
                    "onBehalfOfContentOwner=&" + 
                    "pageToken=x2&" + 
                    "part=snippet&" + 
                    "publishedBefore=_EM_1896_XYZ_&" + 
                    "regionCode=_EM_1898_XYZ_&" + 
                    "safeSearch=moderate&" + 
                    "type=t2FM&" + 
                    "videoSyndicated=any&" + 
                    "EMextraParam123=_EM_1902_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'.'errors'.size()", equalTo(1))
                .body("'error'.'errors'[0].'domain'", containsString("youtube.search"))
                .body("'error'.'errors'[0].'reason'", containsString("invalidSearchFilter"))
                .body("'error'.'errors'[0].'message'", containsString("The request contains an invalid combination of search filters and/or restrictions. Note that you must set the <code>type</code> parameter to <code>video</code> if you set either the <code>forContentOwner</code> or <code>forMine</code> parameters to <code>true</code>. You must also set the <code>type</code> parameter to <code>video</code> if you set a value for the <code>eventType</code>, <code>videoCaption</code>, <code>videoCategoryId</code>, <code>videoDefinition</code>, <code>videoDimension</code>, <code>videoDuration</code>, <code>videoEmbeddable</code>, <code>videoLicense</code>, <code>videoSyndicated</code>, or <code>videoType</code> parameters."))
                .body("'error'.'errors'[0].'locationType'", containsString("parameter"))
                .body("'error'.'errors'[0].'location'", containsString(""))
                .body("'error'.'status'", numberMatches(400.0))
                .body("'error'.'message'", containsString("The request contains an invalid combination of search filters and/or restrictions. Note that you must set the <code>type</code> parameter to <code>video</code> if you set either the <code>forContentOwner</code> or <code>forMine</code> parameters to <code>true</code>. You must also set the <code>type</code> parameter to <code>video</code> if you set a value for the <code>eventType</code>, <code>videoCaption</code>, <code>videoCategoryId</code>, <code>videoDefinition</code>, <code>videoDimension</code>, <code>videoDuration</code>, <code>videoEmbeddable</code>, <code>videoLicense</code>, <code>videoSyndicated</code>, or <code>videoType</code> parameters."));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/search
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_16_getOnSearchReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_457_XYZ_")
                .get(baseUrlOfSut + "/api/search?" + 
                    "channelId=_EM_448_XYZ_&" + 
                    "channelType=any&" + 
                    "eventType=completed&" + 
                    "forMine=true&" + 
                    "location=_EM_449_XYZ_&" + 
                    "maxResults=15&" + 
                    "onBehalfOfContentOwner=_EM_451_XYZ_&" + 
                    "order=rating&" + 
                    "pageToken=_0yEHjZr5bm&" + 
                    "part=snippet&" + 
                    "q=_EM_453_XYZ_&" + 
                    "relevanceLanguage=ffNmq&" + 
                    "type=_EM_455_XYZ_&" + 
                    "videoDefinition=any&" + 
                    "videoType=episode&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'.'errors'.size()", equalTo(1))
                .body("'error'.'errors'[0].'domain'", containsString("youtube.search"))
                .body("'error'.'errors'[0].'reason'", containsString("invalidSearchFilter"))
                .body("'error'.'errors'[0].'message'", containsString("The request contains an invalid combination of search filters and/or restrictions. Note that you must set the <code>type</code> parameter to <code>video</code> if you set either the <code>forContentOwner</code> or <code>forMine</code> parameters to <code>true</code>. You must also set the <code>type</code> parameter to <code>video</code> if you set a value for the <code>eventType</code>, <code>videoCaption</code>, <code>videoCategoryId</code>, <code>videoDefinition</code>, <code>videoDimension</code>, <code>videoDuration</code>, <code>videoEmbeddable</code>, <code>videoLicense</code>, <code>videoSyndicated</code>, or <code>videoType</code> parameters."))
                .body("'error'.'errors'[0].'locationType'", containsString("parameter"))
                .body("'error'.'errors'[0].'location'", containsString(""))
                .body("'error'.'status'", numberMatches(400.0))
                .body("'error'.'message'", containsString("The request contains an invalid combination of search filters and/or restrictions. Note that you must set the <code>type</code> parameter to <code>video</code> if you set either the <code>forContentOwner</code> or <code>forMine</code> parameters to <code>true</code>. You must also set the <code>type</code> parameter to <code>video</code> if you set a value for the <code>eventType</code>, <code>videoCaption</code>, <code>videoCategoryId</code>, <code>videoDefinition</code>, <code>videoDimension</code>, <code>videoDuration</code>, <code>videoEmbeddable</code>, <code>videoLicense</code>, <code>videoSyndicated</code>, or <code>videoType</code> parameters."));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/search
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_17_getOnSearchReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/search?" + 
                    "channelId=MGUfLcWdV&" + 
                    "eventType=upcoming&" + 
                    "forContentOwner=false&" + 
                    "locationRadius=&" + 
                    "maxResults=12&" + 
                    "onBehalfOfContentOwner=bGBRZdrbBovR&" + 
                    "order=videoCount&" + 
                    "pageToken=YwV&" + 
                    "part=snippet&" + 
                    "publishedAfter=_EM_20266UXYZ_&" + 
                    "publishedBefore=_EM_58942_XYZ_&" + 
                    "q=hMif_tU5ZsYB&" + 
                    "regionCode=tR1QYZTf90dr3&" + 
                    "relevanceLanguage=MJ&" + 
                    "safeSearch=moderate&" + 
                    "topicId=HEHM99OPWaz&" + 
                    "type=video&" + 
                    "videoCaption=none&" + 
                    "videoDefinition=high&" + 
                    "videoDimension=3d&" + 
                    "videoDuration=any&" + 
                    "videoEmbeddable=EVOMASTER&" + 
                    "videoLicense=youtube&" + 
                    "videoSyndicated=any&" + 
                    "videoType=EVOMASTER")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'.'errors'.size()", equalTo(1))
                .body("'error'.'errors'[0].'message'", containsString("Bad Request"))
                .body("'error'.'errors'[0].'locationType'", containsString("parameter"))
                .body("'error'.'errors'[0].'location'", containsString(""))
                .body("'error'.'status'", numberMatches(400.0))
                .body("'error'.'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/search
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_18_getOnApiSearchWithQueryParamsForContentOwnerEmptyOnBehalfOfContentOwner() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/search?" + 
                    "channelId=MGUfLcWdV&" + 
                    "eventType=completed&" + 
                    "forContentOwner=true&" + 
                    "location=k7_BtOy&" + 
                    "locationRadius=RgOQYh0VWCv&" + 
                    "maxResults=5&" + 
                    "onBehalfOfContentOwner=&" + 
                    "order=EVOMASTER&" + 
                    "pageToken=NbX&" + 
                    "part=snippet&" + 
                    "publishedAfter=AUDrc0v&" + 
                    "publishedBefore=_EM_21759_XYZ_&" + 
                    "q=YVx&" + 
                    "regionCode=W47DVsZLfJy5H&" + 
                    "relevanceLanguage=_EM_23430_XYZ_&" + 
                    "safeSearch=strict&" + 
                    "topicId=HEHM99OPWaz&" + 
                    "type=video%2Cchannel%2Cplaylist&" + 
                    "videoCaption=closedCaption&" + 
                    "videoCategoryId=_EM_827_XYZ_&" + 
                    "videoDefinition=EVOMASTER&" + 
                    "videoDimension=EVOMASTER&" + 
                    "videoDuration=any&" + 
                    "videoLicense=creativeCommon&" + 
                    "videoSyndicated=EVOMASTER&" + 
                    "videoType=EVOMASTER&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'.'errors'.size()", equalTo(1))
                .body("'error'.'errors'[0].'domain'", containsString("youtube.search"))
                .body("'error'.'errors'[0].'reason'", containsString("invalidSearchFilter"))
                .body("'error'.'errors'[0].'message'", containsString("The request contains an invalid combination of search filters and/or restrictions. Note that you must set the <code>type</code> parameter to <code>video</code> if you set either the <code>forContentOwner</code> or <code>forMine</code> parameters to <code>true</code>. You must also set the <code>type</code> parameter to <code>video</code> if you set a value for the <code>eventType</code>, <code>videoCaption</code>, <code>videoCategoryId</code>, <code>videoDefinition</code>, <code>videoDimension</code>, <code>videoDuration</code>, <code>videoEmbeddable</code>, <code>videoLicense</code>, <code>videoSyndicated</code>, or <code>videoType</code> parameters."))
                .body("'error'.'errors'[0].'locationType'", containsString("parameter"))
                .body("'error'.'errors'[0].'location'", containsString(""))
                .body("'error'.'status'", numberMatches(400.0))
                .body("'error'.'message'", containsString("The request contains an invalid combination of search filters and/or restrictions. Note that you must set the <code>type</code> parameter to <code>video</code> if you set either the <code>forContentOwner</code> or <code>forMine</code> parameters to <code>true</code>. You must also set the <code>type</code> parameter to <code>video</code> if you set a value for the <code>eventType</code>, <code>videoCaption</code>, <code>videoCategoryId</code>, <code>videoDefinition</code>, <code>videoDimension</code>, <code>videoDuration</code>, <code>videoEmbeddable</code>, <code>videoLicense</code>, <code>videoSyndicated</code>, or <code>videoType</code> parameters."));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/search
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_19_getOnSearchReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/search?" + 
                    "channelId=MGMfLUWdVU&" + 
                    "eventType=upcoming&" + 
                    "forContentOwner=false&" + 
                    "location=27_postfix&" + 
                    "locationRadius=&" + 
                    "maxResults=5&" + 
                    "onBehalfOfContentOwner=bzBRZdrbwkvR&" + 
                    "order=rating&" + 
                    "pageToken=YzN&" + 
                    "part=snippet&" + 
                    "publishedAfter=_EM_20266_XYZ_&" + 
                    "publishedBefore=_EM_42133_XYZ_&" + 
                    "q=_EM_36636_XYZ_&" + 
                    "regionCode=tR1QYZTf%290dr&" + 
                    "relevanceLanguage=QM&" + 
                    "safeSearch=moderate&" + 
                    "topicId=HEHM99OPWaz&" + 
                    "type=video&" + 
                    "videoCaption=EVOMASTER&" + 
                    "videoCategoryId=_EM_827_XYZ_&" + 
                    "videoDefinition=high&" + 
                    "videoDimension=EVOMASTER&" + 
                    "videoDuration=long&" + 
                    "videoEmbeddable=true&" + 
                    "videoLicense=any&" + 
                    "videoSyndicated=any&" + 
                    "videoType=episode")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'.'errors'.size()", equalTo(1))
                .body("'error'.'errors'[0].'domain'", containsString("youtube.search"))
                .body("'error'.'errors'[0].'reason'", containsString("invalidLocation"))
                .body("'error'.'errors'[0].'message'", containsString("Invalid location."))
                .body("'error'.'errors'[0].'locationType'", containsString("parameter"))
                .body("'error'.'errors'[0].'location'", containsString("location"))
                .body("'error'.'status'", numberMatches(400.0))
                .body("'error'.'message'", containsString("Invalid location."));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/search
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_20_getOnApiSearchWithQueryParamsForContentOwnerEmptyRelevanceLanguage() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/search?" + 
                    "eventType=live&" + 
                    "forContentOwner=true&" + 
                    "location=SpqU94z_yYgHWs3&" + 
                    "locationRadius=_EM_227_XYZ_&" + 
                    "maxResults=5&" + 
                    "onBehalfOfContentOwner=z78kNxT&" + 
                    "order=viewCount&" + 
                    "part=snippet&" + 
                    "relevanceLanguage=&" + 
                    "type=_EM_233_XYZ_&" + 
                    "videoCaption=any&" + 
                    "videoCategoryId=_EM_234_XYZ_&" + 
                    "videoDefinition=standard&" + 
                    "videoDimension=3d&" + 
                    "videoDuration=any&" + 
                    "videoEmbeddable=EVOMASTER&" + 
                    "videoLicense=EVOMASTER&" + 
                    "videoSyndicated=true&" + 
                    "videoType=episode&" + 
                    "EMextraParam123=_EM_235_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'.'errors'.size()", equalTo(1))
                .body("'error'.'errors'[0].'domain'", containsString("youtube.search"))
                .body("'error'.'errors'[0].'reason'", containsString("invalidSearchFilter"))
                .body("'error'.'errors'[0].'message'", containsString("The request contains an invalid combination of search filters and/or restrictions. Note that you must set the <code>type</code> parameter to <code>video</code> if you set either the <code>forContentOwner</code> or <code>forMine</code> parameters to <code>true</code>. You must also set the <code>type</code> parameter to <code>video</code> if you set a value for the <code>eventType</code>, <code>videoCaption</code>, <code>videoCategoryId</code>, <code>videoDefinition</code>, <code>videoDimension</code>, <code>videoDuration</code>, <code>videoEmbeddable</code>, <code>videoLicense</code>, <code>videoSyndicated</code>, or <code>videoType</code> parameters."))
                .body("'error'.'errors'[0].'locationType'", containsString("parameter"))
                .body("'error'.'errors'[0].'location'", containsString(""))
                .body("'error'.'status'", numberMatches(400.0))
                .body("'error'.'message'", containsString("The request contains an invalid combination of search filters and/or restrictions. Note that you must set the <code>type</code> parameter to <code>video</code> if you set either the <code>forContentOwner</code> or <code>forMine</code> parameters to <code>true</code>. You must also set the <code>type</code> parameter to <code>video</code> if you set a value for the <code>eventType</code>, <code>videoCaption</code>, <code>videoCategoryId</code>, <code>videoDefinition</code>, <code>videoDimension</code>, <code>videoDuration</code>, <code>videoEmbeddable</code>, <code>videoLicense</code>, <code>videoSyndicated</code>, or <code>videoType</code> parameters."));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/search
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_21_getOnSearchReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/search?" + 
                    "channelId=Ceebru9&" + 
                    "eventType=completed&" + 
                    "forContentOwner=false&" + 
                    "location=27&" + 
                    "locationRadius=HEHM9AOPWaz&" + 
                    "maxResults=3&" + 
                    "onBehalfOfContentOwner=my2X%60crcwovR&" + 
                    "order=relevance&" + 
                    "pageToken=%5DzV&" + 
                    "part=snippet&" + 
                    "publishedAfter=y&" + 
                    "publishedBefore=OTr&" + 
                    "q=_EM_20422_XYZ_&" + 
                    "regionCode=tR1QYZTf%290dr3&" + 
                    "relevanceLanguage=MQ&" + 
                    "safeSearch=EVOMASTER&" + 
                    "topicId=_EM_41397_XYZ_&" + 
                    "type=video&" + 
                    "videoCaption=EVOMASTER&" + 
                    "videoCategoryId=_EM_827_XYZ_&" + 
                    "videoDefinition=high&" + 
                    "videoDimension=2d&" + 
                    "videoDuration=EVOMASTER&" + 
                    "videoEmbeddable=EVOMASTER&" + 
                    "videoLicense=any&" + 
                    "videoSyndicated=true&" + 
                    "videoType=EVOMASTER")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'.'errors'.size()", equalTo(1))
                .body("'error'.'errors'[0].'domain'", containsString("youtube.search"))
                .body("'error'.'errors'[0].'reason'", containsString("invalidLocation"))
                .body("'error'.'errors'[0].'message'", containsString("Invalid location."))
                .body("'error'.'errors'[0].'locationType'", containsString("parameter"))
                .body("'error'.'errors'[0].'location'", containsString("location"))
                .body("'error'.'status'", numberMatches(400.0))
                .body("'error'.'message'", containsString("Invalid location."));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/search
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_22_getOnSearchReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/search?" + 
                    "channelId=MR9uBapcyw8jwFu&" + 
                    "eventType=completed&" + 
                    "locationRadius=1sKyY9&" + 
                    "maxResults=5&" + 
                    "order=relevance&" + 
                    "part=snippet&" + 
                    "publishedBefore=0D&" + 
                    "regionCode=_EM_72_XYZ_&" + 
                    "videoCategoryId=rrXs&" + 
                    "videoDuration=medium&" + 
                    "videoEmbeddable=true&" + 
                    "videoLicense=any&" + 
                    "videoSyndicated=EVOMASTER&" + 
                    "EMextraParam123=_EM_76_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'.'errors'.size()", equalTo(1))
                .body("'error'.'errors'[0].'domain'", containsString("youtube.search"))
                .body("'error'.'errors'[0].'reason'", containsString("invalidSearchFilter"))
                .body("'error'.'errors'[0].'message'", containsString("The request contains an invalid combination of search filters and/or restrictions. Note that you must set the <code>type</code> parameter to <code>video</code> if you set either the <code>forContentOwner</code> or <code>forMine</code> parameters to <code>true</code>. You must also set the <code>type</code> parameter to <code>video</code> if you set a value for the <code>eventType</code>, <code>videoCaption</code>, <code>videoCategoryId</code>, <code>videoDefinition</code>, <code>videoDimension</code>, <code>videoDuration</code>, <code>videoEmbeddable</code>, <code>videoLicense</code>, <code>videoSyndicated</code>, or <code>videoType</code> parameters."))
                .body("'error'.'errors'[0].'locationType'", containsString("parameter"))
                .body("'error'.'errors'[0].'location'", containsString(""))
                .body("'error'.'status'", numberMatches(400.0))
                .body("'error'.'message'", containsString("The request contains an invalid combination of search filters and/or restrictions. Note that you must set the <code>type</code> parameter to <code>video</code> if you set either the <code>forContentOwner</code> or <code>forMine</code> parameters to <code>true</code>. You must also set the <code>type</code> parameter to <code>video</code> if you set a value for the <code>eventType</code>, <code>videoCaption</code>, <code>videoCategoryId</code>, <code>videoDefinition</code>, <code>videoDimension</code>, <code>videoDuration</code>, <code>videoEmbeddable</code>, <code>videoLicense</code>, <code>videoSyndicated</code>, or <code>videoType</code> parameters."));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/search
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_23_getOnSearchReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_64_XYZ_")
                .get(baseUrlOfSut + "/api/search?" + 
                    "channelType=show&" + 
                    "forDeveloper=false&" + 
                    "forMine=true&" + 
                    "location=uQUUeHNs&" + 
                    "maxResults=25&" + 
                    "onBehalfOfContentOwner=_EM_60_XYZ_&" + 
                    "order=viewCount&" + 
                    "pageToken=GPo6&" + 
                    "part=snippet&" + 
                    "publishedAfter=1C&" + 
                    "q=r&" + 
                    "regionCode=_EM_61_XYZ_&" + 
                    "relatedToVideoId=_EM_62_XYZ_&" + 
                    "relevanceLanguage=_EM_63_XYZ_&" + 
                    "safeSearch=none&" + 
                    "topicId=Ky0vmzhqC5rUoP&" + 
                    "type=QkxgWvBIUqY&" + 
                    "videoCategoryId=BVkd&" + 
                    "videoDuration=medium&" + 
                    "videoLicense=youtube&" + 
                    "videoType=EVOMASTER&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'.'errors'.size()", equalTo(1))
                .body("'error'.'errors'[0].'domain'", containsString("youtube.parameter"))
                .body("'error'.'errors'[0].'reason'", containsString("incompatibleParameters"))
                .body("'error'.'errors'[0].'message'", containsString("Incompatible parameters specified in the request: forDeveloper, forMine, relatedTo"))
                .body("'error'.'errors'[0].'locationType'", containsString("parameter"))
                .body("'error'.'errors'[0].'location'", containsString(""))
                .body("'error'.'status'", numberMatches(400.0))
                .body("'error'.'message'", containsString("Incompatible parameters specified in the request: forDeveloper, forMine, relatedTo"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/search
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_24_getOnSearchReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/search?" + 
                    "channelType=any&" + 
                    "eventType=live&" + 
                    "location=_EM_3198_XYZ_&" + 
                    "pageToken=qowlo_M8ZdOata&" + 
                    "part=snippet&" + 
                    "publishedAfter=_EM_3199_XYZ_&" + 
                    "regionCode=_EM_3200_XYZ_&" + 
                    "relatedToVideoId=&" + 
                    "relevanceLanguage=&" + 
                    "topicId=cl79yg&" + 
                    "type=_EM_3201_XYZ_&" + 
                    "videoCategoryId=97eg_W5mNHyoWDIz&" + 
                    "videoDuration=long&" + 
                    "videoEmbeddable=EVOMASTER&" + 
                    "videoLicense=any&" + 
                    "videoSyndicated=true")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'.'errors'.size()", equalTo(1))
                .body("'error'.'errors'[0].'domain'", containsString("youtube.search"))
                .body("'error'.'errors'[0].'reason'", containsString("invalidSearchFilter"))
                .body("'error'.'errors'[0].'message'", containsString("The request contains an invalid combination of search filters and/or restrictions. Note that you must set the <code>type</code> parameter to <code>video</code> if you set either the <code>forContentOwner</code> or <code>forMine</code> parameters to <code>true</code>. You must also set the <code>type</code> parameter to <code>video</code> if you set a value for the <code>eventType</code>, <code>videoCaption</code>, <code>videoCategoryId</code>, <code>videoDefinition</code>, <code>videoDimension</code>, <code>videoDuration</code>, <code>videoEmbeddable</code>, <code>videoLicense</code>, <code>videoSyndicated</code>, or <code>videoType</code> parameters."))
                .body("'error'.'errors'[0].'locationType'", containsString("parameter"))
                .body("'error'.'errors'[0].'location'", containsString(""))
                .body("'error'.'status'", numberMatches(400.0))
                .body("'error'.'message'", containsString("The request contains an invalid combination of search filters and/or restrictions. Note that you must set the <code>type</code> parameter to <code>video</code> if you set either the <code>forContentOwner</code> or <code>forMine</code> parameters to <code>true</code>. You must also set the <code>type</code> parameter to <code>video</code> if you set a value for the <code>eventType</code>, <code>videoCaption</code>, <code>videoCategoryId</code>, <code>videoDefinition</code>, <code>videoDimension</code>, <code>videoDuration</code>, <code>videoEmbeddable</code>, <code>videoLicense</code>, <code>videoSyndicated</code>, or <code>videoType</code> parameters."));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/search
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_25_getOnSearchReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/search?" + 
                    "channelId=Ceebru9&" + 
                    "eventType=live&" + 
                    "forContentOwner=false&" + 
                    "location=-27&" + 
                    "locationRadius=HEHM9AOPWaz&" + 
                    "maxResults=3&" + 
                    "onBehalfOfContentOwner=m%C2%812X%60crcwovR&" + 
                    "order=title&" + 
                    "pageToken=%5DzV&" + 
                    "part=snippet&" + 
                    "publishedAfter=y&" + 
                    "publishedBefore=OTz&" + 
                    "q=_EM_20422_XYZ_&" + 
                    "regionCode=tR1QYZTf%290dr3&" + 
                    "relevanceLanguage=MQv&" + 
                    "safeSearch=moderate&" + 
                    "topicId=_EM_41397_XYZ_&" + 
                    "type=video&" + 
                    "videoCaption=EVOMASTER&" + 
                    "videoCategoryId=_EM_827_XYZ_&" + 
                    "videoDefinition=standard&" + 
                    "videoDimension=3d&" + 
                    "videoDuration=EVOMASTER&" + 
                    "videoEmbeddable=EVOMASTER&" + 
                    "videoLicense=creativeCommon&" + 
                    "videoSyndicated=true&" + 
                    "videoType=EVOMASTER")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'.'errors'.size()", equalTo(1))
                .body("'error'.'errors'[0].'domain'", containsString("youtube.search"))
                .body("'error'.'errors'[0].'reason'", containsString("invalidLocation"))
                .body("'error'.'errors'[0].'message'", containsString("Invalid location."))
                .body("'error'.'errors'[0].'locationType'", containsString("parameter"))
                .body("'error'.'errors'[0].'location'", containsString("location"))
                .body("'error'.'status'", numberMatches(400.0))
                .body("'error'.'message'", containsString("Invalid location."));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/search
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_26_getOnSearchReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/search?" + 
                    "channelId=MGUfLcWdVD&" + 
                    "eventType=upcoming&" + 
                    "forContentOwner=false&" + 
                    "location=_EM_822_XYZ_&" + 
                    "locationRadius=T&" + 
                    "onBehalfOfContentOwner=bzBRZdrbwovR&" + 
                    "order=date&" + 
                    "pageToken=YzV&" + 
                    "part=snippet&" + 
                    "publishedAfter=_EM_20266_XYZ_&" + 
                    "publishedBefore=OTr&" + 
                    "q=_EM_20422_XYZ_&" + 
                    "regionCode=tR1QYZTf%290dr3&" + 
                    "relevanceLanguage=MM&" + 
                    "safeSearch=strict&" + 
                    "type=video&" + 
                    "videoCaption=closedCaption&" + 
                    "videoDefinition=high&" + 
                    "videoDimension=any&" + 
                    "videoDuration=EVOMASTER&" + 
                    "videoEmbeddable=any&" + 
                    "videoLicense=youtube&" + 
                    "videoSyndicated=EVOMASTER&" + 
                    "videoType=EVOMASTER&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'.'errors'.size()", equalTo(1))
                .body("'error'.'errors'[0].'domain'", containsString("youtube.search"))
                .body("'error'.'errors'[0].'reason'", containsString("invalidLocation"))
                .body("'error'.'errors'[0].'message'", containsString("Invalid location."))
                .body("'error'.'errors'[0].'locationType'", containsString("parameter"))
                .body("'error'.'errors'[0].'location'", containsString("location"))
                .body("'error'.'status'", numberMatches(400.0))
                .body("'error'.'message'", containsString("Invalid location."));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/search
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_27_getOnSearchReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1183_XYZ_")
                .get(baseUrlOfSut + "/api/search?" + 
                    "channelType=EVOMASTER&" + 
                    "location=kqB388jsl9uCbX9z&" + 
                    "maxResults=6&" + 
                    "onBehalfOfContentOwner=_EM_1179_XYZ_&" + 
                    "part=snippet&" + 
                    "publishedAfter=_EM_1180_XYZ_&" + 
                    "publishedBefore=_EM_1181_XYZ_&" + 
                    "relatedToVideoId=Go&" + 
                    "relevanceLanguage=pCq4joliguybb&" + 
                    "safeSearch=EVOMASTER&" + 
                    "type=4Pc9WJXbLPB9toO&" + 
                    "videoDefinition=standard&" + 
                    "videoDimension=EVOMASTER&" + 
                    "videoEmbeddable=true&" + 
                    "videoSyndicated=EVOMASTER&" + 
                    "videoType=movie&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'.'errors'.size()", equalTo(1))
                .body("'error'.'errors'[0].'domain'", containsString("youtube.search"))
                .body("'error'.'errors'[0].'reason'", containsString("invalidSearchFilter"))
                .body("'error'.'errors'[0].'message'", containsString("The request contains an invalid combination of search filters and/or restrictions. Note that you must set the <code>type</code> parameter to <code>video</code> if you set either the <code>forContentOwner</code> or <code>forMine</code> parameters to <code>true</code>. You must also set the <code>type</code> parameter to <code>video</code> if you set a value for the <code>eventType</code>, <code>videoCaption</code>, <code>videoCategoryId</code>, <code>videoDefinition</code>, <code>videoDimension</code>, <code>videoDuration</code>, <code>videoEmbeddable</code>, <code>videoLicense</code>, <code>videoSyndicated</code>, or <code>videoType</code> parameters."))
                .body("'error'.'errors'[0].'locationType'", containsString("parameter"))
                .body("'error'.'errors'[0].'location'", containsString(""))
                .body("'error'.'status'", numberMatches(400.0))
                .body("'error'.'message'", containsString("The request contains an invalid combination of search filters and/or restrictions. Note that you must set the <code>type</code> parameter to <code>video</code> if you set either the <code>forContentOwner</code> or <code>forMine</code> parameters to <code>true</code>. You must also set the <code>type</code> parameter to <code>video</code> if you set a value for the <code>eventType</code>, <code>videoCaption</code>, <code>videoCategoryId</code>, <code>videoDefinition</code>, <code>videoDimension</code>, <code>videoDuration</code>, <code>videoEmbeddable</code>, <code>videoLicense</code>, <code>videoSyndicated</code>, or <code>videoType</code> parameters."));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/search
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_28_getOnApiSearchWithQueryParamsEmptyRelevanceLanguage() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/search?" + 
                    "channelId=G_aahA1ZIF5&" + 
                    "channelType=EVOMASTER&" + 
                    "locationRadius=9&" + 
                    "maxResults=44&" + 
                    "onBehalfOfContentOwner=gRDYL8Gy85tqJNdT&" + 
                    "order=rating&" + 
                    "part=snippet&" + 
                    "publishedBefore=_EM_492_XYZ_&" + 
                    "q=aW&" + 
                    "regionCode=_EM_493_XYZ_&" + 
                    "relevanceLanguage=&" + 
                    "videoCategoryId=DiUmHsOEFn&" + 
                    "videoDimension=EVOMASTER&" + 
                    "videoLicense=youtube&" + 
                    "videoType=EVOMASTER&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'.'errors'.size()", equalTo(1))
                .body("'error'.'errors'[0].'domain'", containsString("youtube.search"))
                .body("'error'.'errors'[0].'reason'", containsString("invalidSearchFilter"))
                .body("'error'.'errors'[0].'message'", containsString("The request contains an invalid combination of search filters and/or restrictions. Note that you must set the <code>type</code> parameter to <code>video</code> if you set either the <code>forContentOwner</code> or <code>forMine</code> parameters to <code>true</code>. You must also set the <code>type</code> parameter to <code>video</code> if you set a value for the <code>eventType</code>, <code>videoCaption</code>, <code>videoCategoryId</code>, <code>videoDefinition</code>, <code>videoDimension</code>, <code>videoDuration</code>, <code>videoEmbeddable</code>, <code>videoLicense</code>, <code>videoSyndicated</code>, or <code>videoType</code> parameters."))
                .body("'error'.'errors'[0].'locationType'", containsString("parameter"))
                .body("'error'.'errors'[0].'location'", containsString(""))
                .body("'error'.'status'", numberMatches(400.0))
                .body("'error'.'message'", containsString("The request contains an invalid combination of search filters and/or restrictions. Note that you must set the <code>type</code> parameter to <code>video</code> if you set either the <code>forContentOwner</code> or <code>forMine</code> parameters to <code>true</code>. You must also set the <code>type</code> parameter to <code>video</code> if you set a value for the <code>eventType</code>, <code>videoCaption</code>, <code>videoCategoryId</code>, <code>videoDefinition</code>, <code>videoDimension</code>, <code>videoDuration</code>, <code>videoEmbeddable</code>, <code>videoLicense</code>, <code>videoSyndicated</code>, or <code>videoType</code> parameters."));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/search
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_29_getOnSearchReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/search?" + 
                    "channelType=any&" + 
                    "forContentOwner=false&" + 
                    "forDeveloper=true&" + 
                    "location=ang0yewId9&" + 
                    "locationRadius=pgdsycB0z&" + 
                    "maxResults=12&" + 
                    "onBehalfOfContentOwner=&" + 
                    "order=title&" + 
                    "part=snippet&" + 
                    "safeSearch=none&" + 
                    "topicId=_EM_34_XYZ_&" + 
                    "videoCategoryId=_EM_35_XYZ_&" + 
                    "videoDimension=EVOMASTER&" + 
                    "videoEmbeddable=EVOMASTER&" + 
                    "videoLicense=youtube&" + 
                    "videoSyndicated=EVOMASTER&" + 
                    "EMextraParam123=_EM_36_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'.'errors'.size()", equalTo(1))
                .body("'error'.'errors'[0].'domain'", containsString("youtube.parameter"))
                .body("'error'.'errors'[0].'reason'", containsString("incompatibleParameters"))
                .body("'error'.'errors'[0].'message'", containsString("Incompatible parameters specified in the request: forContentOwner, forDeveloper"))
                .body("'error'.'errors'[0].'locationType'", containsString("parameter"))
                .body("'error'.'errors'[0].'location'", containsString(""))
                .body("'error'.'status'", numberMatches(400.0))
                .body("'error'.'message'", containsString("Incompatible parameters specified in the request: forContentOwner, forDeveloper"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/search
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_30_getOnSearchReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/search?" + 
                    "eventType=completed&" + 
                    "forMine=true&" + 
                    "location=_EM_85_XYZ_&" + 
                    "locationRadius=_EM_86_XYZ_&" + 
                    "maxResults=5&" + 
                    "onBehalfOfContentOwner=McaPK_iQS7pSW&" + 
                    "pageToken=_EM_87_XYZ_&" + 
                    "part=snippet&" + 
                    "q=_EM_90_XYZ_&" + 
                    "regionCode=8QetfoehMk0&" + 
                    "relevanceLanguage=w5gnks67re9MT9Gi&" + 
                    "topicId=NPD2t7r435qk&" + 
                    "videoDefinition=any&" + 
                    "videoEmbeddable=true&" + 
                    "videoSyndicated=any&" + 
                    "EMextraParam123=_EM_93_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'.'errors'.size()", equalTo(1))
                .body("'error'.'errors'[0].'domain'", containsString("youtube.search"))
                .body("'error'.'errors'[0].'reason'", containsString("invalidSearchFilter"))
                .body("'error'.'errors'[0].'message'", containsString("The request contains an invalid combination of search filters and/or restrictions. Note that you must set the <code>type</code> parameter to <code>video</code> if you set either the <code>forContentOwner</code> or <code>forMine</code> parameters to <code>true</code>. You must also set the <code>type</code> parameter to <code>video</code> if you set a value for the <code>eventType</code>, <code>videoCaption</code>, <code>videoCategoryId</code>, <code>videoDefinition</code>, <code>videoDimension</code>, <code>videoDuration</code>, <code>videoEmbeddable</code>, <code>videoLicense</code>, <code>videoSyndicated</code>, or <code>videoType</code> parameters."))
                .body("'error'.'errors'[0].'locationType'", containsString("parameter"))
                .body("'error'.'errors'[0].'location'", containsString(""))
                .body("'error'.'status'", numberMatches(400.0))
                .body("'error'.'message'", containsString("The request contains an invalid combination of search filters and/or restrictions. Note that you must set the <code>type</code> parameter to <code>video</code> if you set either the <code>forContentOwner</code> or <code>forMine</code> parameters to <code>true</code>. You must also set the <code>type</code> parameter to <code>video</code> if you set a value for the <code>eventType</code>, <code>videoCaption</code>, <code>videoCategoryId</code>, <code>videoDefinition</code>, <code>videoDimension</code>, <code>videoDuration</code>, <code>videoEmbeddable</code>, <code>videoLicense</code>, <code>videoSyndicated</code>, or <code>videoType</code> parameters."));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/search
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_31_getOnSearchReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/search?" + 
                    "channelId=MGUfLcWdV&" + 
                    "eventType=EVOMASTER&" + 
                    "forContentOwner=false&" + 
                    "location=_EM_822_XYZ_&" + 
                    "locationRadius=&" + 
                    "onBehalfOfContentOwner=_EM_20413_XYZ_&" + 
                    "order=EVOMASTER&" + 
                    "pageToken=N%5CV&" + 
                    "part=snippet&" + 
                    "publishedAfter=_EM_20266_XYZ_&" + 
                    "publishedBefore=OTr%3E&" + 
                    "q=_EM_20414_XYZ_&" + 
                    "regionCode=_EM_20415_XYZ_&" + 
                    "relevanceLanguage=MM&" + 
                    "safeSearch=none&" + 
                    "type=video&" + 
                    "videoCaption=closedCaption&" + 
                    "videoDefinition=high&" + 
                    "videoDimension=2d&" + 
                    "videoDuration=EVOMASTER&" + 
                    "videoEmbeddable=any&" + 
                    "videoLicense=EVOMASTER&" + 
                    "videoSyndicated=true&" + 
                    "videoType=EVOMASTER")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'.'errors'.size()", equalTo(1))
                .body("'error'.'errors'[0].'domain'", containsString("global"))
                .body("'error'.'errors'[0].'reason'", containsString("invalidParameter"))
                .body("'error'.'errors'[0].'message'", containsString("Invalid string value: 'EVOMASTER'. Allowed values: [completed, live, upcoming]"))
                .body("'error'.'errors'[0].'locationType'", containsString("parameter"))
                .body("'error'.'errors'[0].'location'", containsString("eventType"))
                .body("'error'.'status'", numberMatches(400.0))
                .body("'error'.'message'", containsString("Invalid string value: 'EVOMASTER'. Allowed values: [completed, live, upcoming]"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/search
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_32_getOnSearchReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1612_XYZ_")
                .get(baseUrlOfSut + "/api/search?" + 
                    "eventType=live&" + 
                    "forContentOwner=true&" + 
                    "location=OOKY&" + 
                    "maxResults=25&" + 
                    "part=snippet&" + 
                    "q=u&" + 
                    "safeSearch=EVOMASTER&" + 
                    "videoCaption=none&" + 
                    "videoType=any")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'.'errors'.size()", equalTo(1))
                .body("'error'.'errors'[0].'domain'", containsString("youtube.search"))
                .body("'error'.'errors'[0].'reason'", containsString("invalidSearchFilter"))
                .body("'error'.'errors'[0].'message'", containsString("The request contains an invalid combination of search filters and/or restrictions. Note that you must set the <code>type</code> parameter to <code>video</code> if you set either the <code>forContentOwner</code> or <code>forMine</code> parameters to <code>true</code>. You must also set the <code>type</code> parameter to <code>video</code> if you set a value for the <code>eventType</code>, <code>videoCaption</code>, <code>videoCategoryId</code>, <code>videoDefinition</code>, <code>videoDimension</code>, <code>videoDuration</code>, <code>videoEmbeddable</code>, <code>videoLicense</code>, <code>videoSyndicated</code>, or <code>videoType</code> parameters."))
                .body("'error'.'errors'[0].'locationType'", containsString("parameter"))
                .body("'error'.'errors'[0].'location'", containsString(""))
                .body("'error'.'status'", numberMatches(400.0))
                .body("'error'.'message'", containsString("The request contains an invalid combination of search filters and/or restrictions. Note that you must set the <code>type</code> parameter to <code>video</code> if you set either the <code>forContentOwner</code> or <code>forMine</code> parameters to <code>true</code>. You must also set the <code>type</code> parameter to <code>video</code> if you set a value for the <code>eventType</code>, <code>videoCaption</code>, <code>videoCategoryId</code>, <code>videoDefinition</code>, <code>videoDimension</code>, <code>videoDuration</code>, <code>videoEmbeddable</code>, <code>videoLicense</code>, <code>videoSyndicated</code>, or <code>videoType</code> parameters."));
    }


}
