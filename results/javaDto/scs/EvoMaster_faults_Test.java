/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  dto.*;
import  java.util.ArrayList;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-10-05T18:53:10.911-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 24 tests
 * <br>
*  Covered targets: 152
 * <br>
*  Used time: 0h 10m 1s
 * <br>
*  Needed budget for current results: 88%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.external.org.restscs.ExternalEvoMasterController("/Users/pgarrett/evoMaster/EMB/jdk_8_maven/cs/rest/artificial/scs/target/rest-scs-sut.jar");
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (400) GET:/api/pat/{txt}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_0_getOnPatReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/pat/{txt}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/N%5C9ir4SzKP;W")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/pat/{txt}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1_getOnApiPatWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.request.path.missing. No API path found that matches request '/api/pat/ftp//:d/mgk'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_3383_XYZ_")
                .get(baseUrlOfSut + "/api/pat/ftp//:d/mgk?EMextraParam123=_EM_3382_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/pat/ftp//:d/mgk"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/pat/{txt}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_2_getOnPatReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/;5M")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/pat/;5M"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/title/{sex}/{title}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_3_getOnWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/title/{sex}/{title}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/%5CcsJPVqW/DCUhIagWPbBYsQ?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/dateparse/{dayname}/{monthname}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_4_getOnWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/dateparse/{dayname}/{monthname}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/sun/JU%5C?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/notypevar/{i}/{s}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_5_getOnNotypevarReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/notypevar/{i}/{s}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/notypevar/34/%5C_a_eR")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/costfuns/{i}/{s}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_6_getOnCostfunReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/costfuns/{i}/{s}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/costfuns/0/CFbKIW23spY6oMCP%5C")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/pat/{txt}/{pat}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_7_getOnPatReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/pat/{txt}/{pat}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/YsIgM9TCFI%5Cp/FKMA")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/filesuffix/{directory}/{file}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_8_getOnFilesuffixReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/filesuffix/{directory}/{file}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/filesuffix/Yzag2Q:/nbU%5CHqc1mw2eSFAk")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/title/{sex}/{title}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_9_getOnTitlReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/EhFgng/;yTn0o4vgq=")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/title/EhFgng/;yTn0o4vgq="));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/dateparse/{dayname}/{monthname}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_10_getOnDateparsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/;RTAU/jun")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/dateparse/;RTAU/jun"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/filesuffix/{directory}/{file}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_11_getOnFilesuffixReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/filesuffix/;zag2Q6/nbUXHqcamw2eSFCk")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/filesuffix/;zag2Q6/nbUXHqcamw2eSFCk"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/text2txt/{word1}/{word2}/{word3}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_12_getOnText2txtReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. GET on path '/api/text2txt/{word1}/{word2}/{word3}' defines a response schema but no response body found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/text2txt/bY/the/_EMU218=1UXWZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/text2txt/{word1}/{word2}/{word3}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_13_getOnText2txtReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. GET on path '/api/text2txt/{word1}/{word2}/{word3}' defines a response schema but no response body found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/text2txt/see/zYa4eoIB7qz0d/_Ec%5B1D%3E26_XGY_")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/text2txt/{word1}/{word2}/{word3}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_14_getOnText2txtReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. GET on path '/api/text2txt/{word1}/{word2}/{word3}' defines a response schema but no response body found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/text2txt/_EM_5_XYZ_/_EM_6_XYZ_/GCQbtrfIGM3E?EMextraParam123=_EM_7_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/text2txt/{word1}/{word2}/{word3}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_15_getOnText2txtReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. GET on path '/api/text2txt/{word1}/{word2}/{word3}' defines a response schema but no response body found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/text2txt/bY/O%3E/Ate_KtD")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/text2txt/{word1}/{word2}/{word3}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_16_getOnText2txtReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. GET on path '/api/text2txt/{word1}/{word2}/{word3}' defines a response schema but no response body found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_458_XYZ_")
                .get(baseUrlOfSut + "/api/text2txt/_EM_454_XYZ_/_EM_455_XYZ_/_EM_456_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/text2txt/{word1}/{word2}/{word3}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_17_getOnText2txtReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. GET on path '/api/text2txt/{word1}/{word2}/{word3}' defines a response schema but no response body found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/text2txt/_EM_494_XYZ_/cPZw377B71vCj2D/D")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/text2txt/{word1}/{word2}/{word3}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_18_getOnText2txtReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. GET on path '/api/text2txt/{word1}/{word2}/{word3}' defines a response schema but no response body found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1114_XYZ_")
                .get(baseUrlOfSut + "/api/text2txt/_EM_1111_XYZ_/mgsXjzK/_EM_1112_XYZ_?EMextraParam123=_EM_1113_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/cookie/{name}/{val}/{site}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_19_getOnCookiReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/cookie/{name}/{val}/{site}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_24_XYZ_")
                .get(baseUrlOfSut + "/api/cookie/DjtFygbmZ/UhelW/Q%5C0Pe?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/text2txt/{word1}/{word2}/{word3}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_20_getOnText2txtReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/text2txt/{word1}/{word2}/{word3}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/text2txt/Drvn/i%5CI/_EM_3708_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/calc/{op}/{arg1}/{arg2}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_21_getOnCalcReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/calc/{op}/{arg1}/{arg2}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/calc/rO%5CP/0.0/702.167635446437")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/text2txt/{word1}/{word2}/{word3}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_22_getOnText2txtReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_429_XYZ_")
                .get(baseUrlOfSut + "/api/text2txt/_EM_4876_XYZ_/MaBbLo/%C2%85YF?EMextraParam123=_EM_428_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/text2txt/_EM_4876_XYZ_/MaBbLo/%C2%85YF"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/ordered4/{w}/{x}/{z}/{y}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_23_getOnOrdered4ReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/api/ordered4/{w}/{x}/{z}/{y}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ordered4/D0dXgz/7qwFb/e_71rpXBHq/%5CnAYOE")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }


}
