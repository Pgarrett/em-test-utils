/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  dto.*;
import  java.util.ArrayList;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-10-05T19:11:27.977-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 5 tests
 * <br>
*  Covered targets: 42
 * <br>
*  Used time: 0h 10m 57s
 * <br>
*  Needed budget for current results: 14%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static final SutHandler controller = new em.external.spring.actuator.demo.ExternalEvoMasterController("/Users/pgarrett/evoMaster/EMB/jdk_8_maven/cs/rest/original/spring-actuator-demo/target/spring-actuator-demo-sut.jar");
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (200) GET:/
    */
    @Test(timeout = 60000)
    public void test_0_getOnRootReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/?" + 
                    "name=_EM_1_XYZ_&" + 
                    "EMextraParam123=_EM_2_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Hello _EM_1_XYZ_!!"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/
    */
    @Test(timeout = 60000)
    public void test_1_getOnRootReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic YWN0dWF0b3I6YWN0dWF0b3I=") // actuator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/?" + 
                    "name=Guest&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Hello Guest!!"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/
    */
    @Test(timeout = 60000)
    public void test_2_getOnRootWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic YWN0dWF0b3I6YWN0dWF0b3I=") // actuator
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Hello Guest!!"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/slowApi
    */
    @Test(timeout = 60000)
    public void test_3_getOnSlowApiReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_0_XYZ_")
                .get(baseUrlOfSut + "/slowApi")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Result"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/slowApi
    */
    @Test(timeout = 60000)
    public void test_4_getOnSlowApiReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic YWN0dWF0b3I6YWN0dWF0b3I=") // actuator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/slowApi")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Result"));
    }


}
