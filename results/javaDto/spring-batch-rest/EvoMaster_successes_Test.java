/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  dto.*;
import  java.util.ArrayList;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-10-05T19:26:45.237-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 7 tests
 * <br>
*  Covered targets: 340
 * <br>
*  Used time: 0h 14m 29s
 * <br>
*  Needed budget for current results: 88%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static final SutHandler controller = new em.external.spring.batch.rest.ExternalEvoMasterController("/Users/pgarrett/evoMaster/EMB/jdk_8_maven/cs/rest/original/spring-batch-rest/example/api/target/spring-batch-rest-sut.jar");
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (200) GET:/jobs
    */
    @Test(timeout = 60000)
    public void test_0_getOnJobsReturnsObject() throws Exception {
        
        given().accept("application/hal+json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/jobs")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'_embedded'.'jobResourceList'.size()", equalTo(1))
                .body("'_embedded'.'jobResourceList'[0].'job'.'name'", containsString("personJob"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/jobExecutions
    */
    @Test(timeout = 60000)
    public void test_1_getOnJobExecutionsWithQueryParamReturnsObject() throws Exception {
        
        given().accept("application/hal+json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/jobExecutions?EMextraParam123=_EM_373_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'_embedded'.'jobExecutionResourceList'.size()", equalTo(3))
                .body("'_embedded'.'jobExecutionResourceList'[0].'jobExecution'.'jobId'", numberMatches(1022.0))
                .body("'_embedded'.'jobExecutionResourceList'[0].'jobExecution'.'jobName'", containsString("personJob"))
                .body("'_embedded'.'jobExecutionResourceList'[0].'jobExecution'.'startTime'", containsString("2025-10-05T19:23:14.665"))
                .body("'_embedded'.'jobExecutionResourceList'[0].'jobExecution'.'endTime'", containsString("2025-10-05T19:23:14.667"))
                .body("'_embedded'.'jobExecutionResourceList'[0].'jobExecution'.'exitCode'", containsString("COMPLETED"))
                .body("'_embedded'.'jobExecutionResourceList'[0].'jobExecution'.'exitDescription'", containsString(""))
                .body("'_embedded'.'jobExecutionResourceList'[0].'jobExecution'.'status'", containsString("COMPLETED"))
                .body("'_embedded'.'jobExecutionResourceList'[0].'jobExecution'.'exceptions'.size()", equalTo(0))
                .body("'_embedded'.'jobExecutionResourceList'[1].'jobExecution'.'jobId'", numberMatches(1021.0))
                .body("'_embedded'.'jobExecutionResourceList'[1].'jobExecution'.'jobName'", containsString("personJob"))
                .body("'_embedded'.'jobExecutionResourceList'[1].'jobExecution'.'startTime'", containsString("2025-10-05T19:22:14.45"))
                .body("'_embedded'.'jobExecutionResourceList'[1].'jobExecution'.'endTime'", containsString("2025-10-05T19:22:14.452"))
                .body("'_embedded'.'jobExecutionResourceList'[1].'jobExecution'.'exitCode'", containsString("COMPLETED"))
                .body("'_embedded'.'jobExecutionResourceList'[1].'jobExecution'.'exitDescription'", containsString(""))
                .body("'_embedded'.'jobExecutionResourceList'[1].'jobExecution'.'status'", containsString("COMPLETED"))
                .body("'_embedded'.'jobExecutionResourceList'[1].'jobExecution'.'exceptions'.size()", equalTo(0))
                .body("'_embedded'.'jobExecutionResourceList'[2].'jobExecution'.'jobId'", numberMatches(1020.0))
                .body("'_embedded'.'jobExecutionResourceList'[2].'jobExecution'.'jobName'", containsString("personJob"))
                .body("'_embedded'.'jobExecutionResourceList'[2].'jobExecution'.'startTime'", containsString("2025-10-05T19:22:14.434"))
                .body("'_embedded'.'jobExecutionResourceList'[2].'jobExecution'.'endTime'", containsString("2025-10-05T19:22:14.436"))
                .body("'_embedded'.'jobExecutionResourceList'[2].'jobExecution'.'exitCode'", containsString("COMPLETED"))
                .body("'_embedded'.'jobExecutionResourceList'[2].'jobExecution'.'exitDescription'", containsString(""))
                .body("'_embedded'.'jobExecutionResourceList'[2].'jobExecution'.'status'", containsString("COMPLETED"))
                .body("'_embedded'.'jobExecutionResourceList'[2].'jobExecution'.'exceptions'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/jobExecutions
    */
    @Test(timeout = 60000)
    public void test_2_getOnJobExecutionsWithQueryParamsNegativeLimitPerJobReturnsObject() throws Exception {
        
        given().accept("application/hal+json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/jobExecutions?" + 
                    "jobName=iAtoBv&" + 
                    "exitCode=_EM_1856_XYZ_&" + 
                    "limitPerJob=-261647")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json");
    }
    
    
    /**
    * Calls:
    * (200) GET:/jobExecutions
    */
    @Test(timeout = 60000)
    public void test_3_getOnJobExecutionsReturnsObject() throws Exception {
        
        given().accept("application/hal+json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/jobExecutions?" + 
                    "jobName=_EM_1915_XYZ_&" + 
                    "exitCode=05&" + 
                    "limitPerJob=976")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json");
    }
    
    
    /**
    * Calls:
    * (200) GET:/jobExecutions
    */
    @Test(timeout = 60000)
    public void test_4_getOnJobExecutionsReturnsObject() throws Exception {
        
        given().accept("application/hal+json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/jobExecutions?" + 
                    "jobName=_EM_238_XYZ_&" + 
                    "exitCode=_EM_239_XYZ_&" + 
                    "limitPerJob=3&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json");
    }
    
    
    /**
    * Calls:
    * (200) GET:/jobs/{jobName}
    */
    @Test(timeout = 60000)
    public void test_5_getOnJobReturnsObject() throws Exception {
        
        given().accept("application/hal+json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/jobs/_EM_1_XYZ_?EMextraParam123=_EM_2_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'job'.'name'", containsString("_EM_1_XYZ_"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/v3/api-docs
    */
    @Test(timeout = 60000)
    public void test_6_getOnApi_docsReturnsObject() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v3/api-docs")
                .then()
                .statusCode(200);
    }


}
