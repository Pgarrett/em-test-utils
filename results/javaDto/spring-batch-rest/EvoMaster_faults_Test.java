/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  dto.*;
import  java.util.ArrayList;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-10-05T19:26:45.214-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 12 tests
 * <br>
*  Covered targets: 572
 * <br>
*  Used time: 0h 14m 29s
 * <br>
*  Needed budget for current results: 88%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.external.spring.batch.rest.ExternalEvoMasterController("/Users/pgarrett/evoMaster/EMB/jdk_8_maven/cs/rest/original/spring-batch-rest/example/api/target/spring-batch-rest-sut.jar");
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (500) GET:/jobExecutions
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_0_getOnJobExecutionsShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. com/github/chrisgleissner/springbatchrest/api/core/jobexecution/provider/CachedJobExecutionProvider_55_lambda$getJobExecutions$2.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/jobExecutions'.
        given().accept("application/hal+json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/jobExecutions?" + 
                    "exitCode=COMPLETED&" + 
                    "limitPerJob=-1424593992&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(500)// com/github/chrisgleissner/springbatchrest/api/core/jobexecution/provider/CachedJobExecutionProvider_55_lambda$getJobExecutions$2
                .assertThat()
                .contentType("application/hal+json")
                .body("'status'", containsString("500 INTERNAL_SERVER_ERROR"))
                .body("'message'", containsString("-1424593992"))
                .body("'exception'", containsString("IllegalArgumentException"))
                .body("'detail'", containsString(""));
    }
    
    
    /**
    * Calls:
    * (500) GET:/jobExecutions
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_1_getOnJobExecutionsShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. com/github/chrisgleissner/springbatchrest/api/core/jobexecution/provider/CachedJobExecutionProvider$JobExecutions_73_getJobExecutions.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/jobExecutions'.
        given().accept("application/hal+json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/jobExecutions?" + 
                    "exitCode=_EM_2587_XYZ_&" + 
                    "limitPerJob=0")
                .then()
                .statusCode(500)// com/github/chrisgleissner/springbatchrest/api/core/jobexecution/provider/CachedJobExecutionProvider$JobExecutions_73_getJobExecutions
                .assertThat()
                .contentType("application/hal+json")
                .body("'status'", containsString("500 INTERNAL_SERVER_ERROR"))
                .body("'message'", nullValue())
                .body("'exception'", containsString("NullPointerException"))
                .body("'detail'", containsString(""));
    }
    
    
    /**
    * Calls:
    * (500) GET:/jobExecutions
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_2_getOnJobExecutionsShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. com/github/chrisgleissner/springbatchrest/api/core/jobexecution/provider/CachedJobExecutionProvider_50_getJobExecutions.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/jobExecutions'.
        given().accept("application/hal+json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/jobExecutions?" + 
                    "jobName=OM4%5BALKwj&" + 
                    "exitCode=_EM_428_XYZ_&" + 
                    "limitPerJob=-136314630")
                .then()
                .statusCode(500)// com/github/chrisgleissner/springbatchrest/api/core/jobexecution/provider/CachedJobExecutionProvider_50_getJobExecutions
                .assertThat()
                .contentType("application/hal+json")
                .body("'status'", containsString("500 INTERNAL_SERVER_ERROR"))
                .body("'message'", containsString("Unclosed character class near index 8\nOM4[ALKwj\n        ^"))
                .body("'exception'", containsString("PatternSyntaxException"))
                .body("'detail'", containsString(""));
    }
    
    
    /**
    * Calls:
    * (500) GET:/jobExecutions
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_3_getOnJobExecutionsShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. com/github/chrisgleissner/springbatchrest/api/core/jobexecution/provider/AllJobExecutionProvider_28_getJobExecutions.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/jobExecutions'.
        given().accept("application/hal+json")
                .header("x-EMextraHeader123", "_EM_1303_XYZ_")
                .get(baseUrlOfSut + "/jobExecutions?" + 
                    "jobName=%2Bsk5b&" + 
                    "exitCode=o&" + 
                    "limitPerJob=453")
                .then()
                .statusCode(500)// com/github/chrisgleissner/springbatchrest/api/core/jobexecution/provider/AllJobExecutionProvider_28_getJobExecutions
                .assertThat()
                .contentType("application/hal+json")
                .body("'status'", containsString("500 INTERNAL_SERVER_ERROR"))
                .body("'message'", containsString("Dangling meta character '+' near index 0\n+sk5b\n^"))
                .body("'exception'", containsString("PatternSyntaxException"))
                .body("'detail'", containsString(""));
    }
    
    
    /**
    * Calls:
    * (500) POST:/jobExecutions
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_4_postOnJobExecutionsShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. com/github/chrisgleissner/springbatchrest/util/core/AdHocStarter_95_start.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/jobExecutions'.
        JobConfig dto_JobConfig_1 = new JobConfig();
        dto_JobConfig_1.setProperties({
                    "_EM_8_XYZ_":{
                    "EM_tainted_map":"_EM_0_XYZ_"
                    }
                    ,
                    "_EM_9_XYZ_":{
                    "EM_tainted_map":"_EM_0_XYZ_"
                    }
                    ,
                    "_EM_10_XYZ_":{
                    "EM_tainted_map":"_EM_0_XYZ_"
                    }
                    });
        dto_JobConfig_1.setAsynchronous(false);
        
        given().accept("application/hal+json")
                .header("x-EMextraHeader123", "_EM_11_XYZ_")
                .contentType("application/json")
                .body(dto_JobConfig_1)
                .post(baseUrlOfSut + "/jobExecutions?EMextraParam123=42")
                .then()
                .statusCode(500)// com/github/chrisgleissner/springbatchrest/util/core/AdHocStarter_95_start
                .assertThat()
                .contentType("application/hal+json")
                .body("'status'", containsString("500 INTERNAL_SERVER_ERROR"))
                .body("'message'", containsString("Failed to start job 'null' with JobConfig(name=null, properties={_EM_8_XYZ_={EM_tainted_map=_EM_0_XYZ_}, _EM_9_XYZ_={EM_tainted_map=_EM_0_XYZ_}, _EM_10_XYZ_={EM_tainted_map=_EM_0_XYZ_}}, asynchronous=false). Reason: null"))
                .body("'exception'", containsString("RuntimeException"))
                .body("'detail'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) POST:/jobExecutions
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_5_postOnJobExecutionsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.format.date-time. [Path '/jobExecution/endTime'] String "2025-10-05T19:23:44.787" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        JobConfig dto_JobConfig_1 = new JobConfig();
        dto_JobConfig_1.setName("personJob");
        dto_JobConfig_1.setProperties({});
        dto_JobConfig_1.setAsynchronous(false);
        
        given().accept("application/hal+json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(dto_JobConfig_1)
                .post(baseUrlOfSut + "/jobExecutions?EMextraParam123=_EM_259_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'jobExecution'.'jobId'", numberMatches(1023.0))
                .body("'jobExecution'.'jobName'", containsString("personJob"))
                .body("'jobExecution'.'startTime'", containsString("2025-10-05T19:23:44.785"))
                .body("'jobExecution'.'endTime'", containsString("2025-10-05T19:23:44.787"))
                .body("'jobExecution'.'exitCode'", containsString("COMPLETED"))
                .body("'jobExecution'.'exitDescription'", containsString(""))
                .body("'jobExecution'.'status'", containsString("COMPLETED"))
                .body("'jobExecution'.'exceptions'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/jobExecutions
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_6_postOnJobExecutionsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/jobExecution/endTime'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        JobConfig dto_JobConfig_1 = new JobConfig();
        dto_JobConfig_1.setName("personJob");
        dto_JobConfig_1.setProperties({
                    "3yY2ycWU":{
                    "EM_tainted_map":"_EM_0_XYZ_"
                    }
                    ,
                    "WKqTh2":{
                    "EM_tainted_map":"_EM_0_XYZ_"
                    }
                    ,
                    "oRoRtdvGlfBl2F8":{
                    "EM_tainted_map":"_EM_0_XYZ_"
                    }
                    ,
                    "_EM_386_XYZ_":{
                    "EM_tainted_map":"_EM_0_XYZ_"
                    }
                    ,
                    "HvLYkB2v72w":{
                    "EM_tainted_map":"_EM_0_XYZ_"
                    }
                    });
        dto_JobConfig_1.setAsynchronous(true);
        
        given().accept("application/hal+json")
                .header("x-EMextraHeader123", "_EM_387_XYZ_")
                .contentType("application/json")
                .body(dto_JobConfig_1)
                .post(baseUrlOfSut + "/jobExecutions")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'jobExecution'.'jobId'", numberMatches(1024.0))
                .body("'jobExecution'.'jobName'", containsString("personJob"))
                .body("'jobExecution'.'startTime'", nullValue())
                .body("'jobExecution'.'endTime'", nullValue())
                .body("'jobExecution'.'exitCode'", containsString("UNKNOWN"))
                .body("'jobExecution'.'exitDescription'", containsString(""))
                .body("'jobExecution'.'status'", containsString("STARTING"))
                .body("'jobExecution'.'exceptions'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (400) POST:/jobExecutions
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_7_postOnJobExecutionsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/jobExecutions'.
        JobConfig dto_JobConfig_1 = new JobConfig();
        dto_JobConfig_1.setProperties({
                    "aWp":{
                    "EM_tainted_map":"_EM_0_XYZ_"
                    }
                    ,
                    "JA7A_pWUw0qxNsh":{
                    "EM_tainted_map":"_EM_0_XYZ_"
                    }
                    });
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .post(baseUrlOfSut + "/jobExecutions?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) POST:/jobExecutions
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_8_postOnJobExecutionsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/jobExecutions'.
        JobConfig dto_JobConfig_1 = new JobConfig();
        dto_JobConfig_1.setName("LAThW_c9Hb_IDgu");
        
        given().accept("application/hal+json")
                .header("x-EMextraHeader123", "_EM_110_XYZ_")
                .contentType("application/json")
                .body(dto_JobConfig_1)
                .post(baseUrlOfSut + "/jobExecutions")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/hal+json")
                .body("'status'", containsString("404 NOT_FOUND"))
                .body("'message'", containsString("No job configuration with the name [LAThW_c9Hb_IDgu] was registered"))
                .body("'exception'", containsString("NoSuchJobException"))
                .body("'detail'", containsString("Failed to start job 'LAThW_c9Hb_IDgu' with JobConfig(name=LAThW_c9Hb_IDgu, properties={}, asynchronous=false). Reason: No job configuration with the name [LAThW_c9Hb_IDgu] was registered"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/jobExecutions/{id}
    * Found 2 potential faults of type-code 101
    */
    @Test(timeout = 60000)
    public void test_9_getOnJobExecutReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/jobExecution/endTime'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.format.date-time. [Path '/jobExecution/startTime'] String "2025-10-05T19:12:19.57" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        given().accept("application/hal+json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/jobExecutions/0")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'jobExecution'.'jobId'", numberMatches(0.0))
                .body("'jobExecution'.'jobName'", containsString("personJob"))
                .body("'jobExecution'.'startTime'", containsString("2025-10-05T19:12:19.57"))
                .body("'jobExecution'.'endTime'", nullValue())
                .body("'jobExecution'.'exitCode'", containsString("UNKNOWN"))
                .body("'jobExecution'.'exitDescription'", containsString(""))
                .body("'jobExecution'.'status'", containsString("STARTED"))
                .body("'jobExecution'.'exceptions'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (400) GET:/jobs/{jobName}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_10_getOnJobReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/jobs/{jobName}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/jobs/%60%5C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (404) GET:/jobExecutions/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_11_getOnJobExecutWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/jobExecutions/{id}'.
        given().accept("application/hal+json")
                .header("x-EMextraHeader123", "_EM_22_XYZ_")
                .get(baseUrlOfSut + "/jobExecutions/-268434509?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/hal+json")
                .body("'status'", containsString("404 NOT_FOUND"))
                .body("'message'", containsString("Could not find job execution with ID -268434509"))
                .body("'exception'", containsString("NoSuchJobExecutionException"))
                .body("'detail'", containsString(""));
    }


}
