import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-02-12T11:28:48.118-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 205 tests
 * <br>
*  Covered targets: 1846
 * <br>
*  Used time: 0h 15m 0s
 * <br>
*  Needed budget for current results: 85%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.embedded.eu.fayder.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (500) GET:/rest/v2/alpha
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_0_getOnAlphaShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. eu/fayder/restcountries/v2/rest/CountryRestV2_268_getCountriesJson GET:/rest/v2/alpha
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "fields=_EM_16142_XYZ_&" + 
                    "codes=GkjgY2cBXdA%3A%3BDdU")
                .then()
                .statusCode(500)// eu/fayder/restcountries/v2/rest/CountryRestV2_268_getCountriesJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'message'", containsString("Internal Server Error"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/all
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_1_getOnV1AllReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/all -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("[0].'name'", containsString("Afghanistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".af"))
                .body("[0].'alpha2Code'", containsString("AF"))
                .body("[0].'alpha3Code'", containsString("AFG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("93"))
                .body("[0].'capital'", containsString("Kabul"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("AF", "Afġānistān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(2.60231E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(33.0))
                .body("[0].'latlng'[1]", numberMatches(65.0))
                .body("[0].'demonym'", containsString("Afghan"))
                .body("[0].'area'", numberMatches(652230.0))
                .body("[0].'gini'", numberMatches(27.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:30"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("IRN", "PAK", "TKM", "UZB", "TJK", "CHN"))
                .body("[0].'nativeName'", containsString("افغانستان"))
                .body("[0].'numericCode'", containsString("004"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AFN"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("ps", "uz", "tk"))
                .body("[0].'translations'.'de'", containsString("Afghanistan"))
                .body("[0].'translations'.'es'", containsString("Afganistán"))
                .body("[0].'translations'.'fr'", containsString("Afghanistan"))
                .body("[0].'translations'.'ja'", containsString("アフガニスタン"))
                .body("[0].'translations'.'it'", containsString("Afghanistan"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Åland Islands"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ax"))
                .body("[1].'alpha2Code'", containsString("AX"))
                .body("[1].'alpha3Code'", containsString("ALA"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("358"))
                .body("[1].'capital'", containsString("Mariehamn"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("AX", "Aaland", "Aland", "Ahvenanmaa"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Northern Europe"))
                .body("[1].'population'", numberMatches(28875.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(60.116667))
                .body("[1].'latlng'[1]", numberMatches(19.9))
                .body("[1].'demonym'", containsString("Ålandish"))
                .body("[1].'area'", numberMatches(1580.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+02:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Åland"))
                .body("[1].'numericCode'", containsString("248"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("EUR"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("sv"))
                .body("[1].'translations'.'de'", containsString("Åland"))
                .body("[1].'translations'.'es'", containsString("Alandia"))
                .body("[1].'translations'.'fr'", containsString("Åland"))
                .body("[1].'translations'.'ja'", containsString("オーランド諸島"))
                .body("[1].'translations'.'it'", containsString("Isole Aland"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Albania"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".al"))
                .body("[2].'alpha2Code'", containsString("AL"))
                .body("[2].'alpha3Code'", containsString("ALB"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("355"))
                .body("[2].'capital'", containsString("Tirana"))
                .body("[2].'altSpellings'.size()", equalTo(4))
                .body("[2].'altSpellings'", hasItems("AL", "Shqipëri", "Shqipëria", "Shqipnia"))
                .body("[2].'region'", containsString("Europe"))
                .body("[2].'subregion'", containsString("Southern Europe"))
                .body("[2].'population'", numberMatches(2893005.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(41.0))
                .body("[2].'latlng'[1]", numberMatches(20.0))
                .body("[2].'demonym'", containsString("Albanian"))
                .body("[2].'area'", numberMatches(28748.0))
                .body("[2].'gini'", numberMatches(34.5))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(4))
                .body("[2].'borders'", hasItems("MNE", "GRC", "MKD", "KOS"))
                .body("[2].'nativeName'", containsString("Shqipëria"))
                .body("[2].'numericCode'", containsString("008"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("ALL"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("sq"))
                .body("[2].'translations'.'de'", containsString("Albanien"))
                .body("[2].'translations'.'es'", containsString("Albania"))
                .body("[2].'translations'.'fr'", containsString("Albanie"))
                .body("[2].'translations'.'ja'", containsString("アルバニア"))
                .body("[2].'translations'.'it'", containsString("Albania"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_2_getOnAllReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/all -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/all?fields=_EM_12564_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_3_getOnV2AllWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/all -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/all?" + 
                    "fields=_EM_13387_XYZ_&" + 
                    "EMextraParam123=_EM_13388_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_4_getOnAllReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/all -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/all?fields=_EM_15791_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_5_getOnAllReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/all -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/all?fields=_EM_16121_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_6_getOnAllReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/all -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_16863_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/all?fields=_EM_16861_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_7_getOnAllReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/all -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/all?fields=_EM_28596_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_8_getOnAllReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/all -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/all?fields=d0b4AAsP")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_9_getOnAllReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/all -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/all?fields=translations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("[0].'translations'.'br'", containsString("Afeganistão"))
                .body("[0].'translations'.'pt'", containsString("Afeganistão"))
                .body("[0].'translations'.'nl'", containsString("Afghanistan"))
                .body("[0].'translations'.'hr'", containsString("Afganistan"))
                .body("[0].'translations'.'fa'", containsString("افغانستان"))
                .body("[0].'translations'.'de'", containsString("Afghanistan"))
                .body("[0].'translations'.'es'", containsString("Afganistán"))
                .body("[0].'translations'.'fr'", containsString("Afghanistan"))
                .body("[0].'translations'.'ja'", containsString("アフガニスタン"))
                .body("[0].'translations'.'it'", containsString("Afghanistan"))
                .body("[1].'translations'.'br'", containsString("Ilhas de Aland"))
                .body("[1].'translations'.'pt'", containsString("Ilhas de Aland"))
                .body("[1].'translations'.'nl'", containsString("Ålandeilanden"))
                .body("[1].'translations'.'hr'", containsString("Ålandski otoci"))
                .body("[1].'translations'.'fa'", containsString("جزایر الند"))
                .body("[1].'translations'.'de'", containsString("Åland"))
                .body("[1].'translations'.'es'", containsString("Alandia"))
                .body("[1].'translations'.'fr'", containsString("Åland"))
                .body("[1].'translations'.'ja'", containsString("オーランド諸島"))
                .body("[1].'translations'.'it'", containsString("Isole Aland"))
                .body("[2].'translations'.'br'", containsString("Albânia"))
                .body("[2].'translations'.'pt'", containsString("Albânia"))
                .body("[2].'translations'.'nl'", containsString("Albanië"))
                .body("[2].'translations'.'hr'", containsString("Albanija"))
                .body("[2].'translations'.'fa'", containsString("آلبانی"))
                .body("[2].'translations'.'de'", containsString("Albanien"))
                .body("[2].'translations'.'es'", containsString("Albania"))
                .body("[2].'translations'.'fr'", containsString("Albanie"))
                .body("[2].'translations'.'ja'", containsString("アルバニア"))
                .body("[2].'translations'.'it'", containsString("Albania"))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_10_getOnAllReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/all -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/all?fields=alpha2Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("[0].'alpha2Code'", containsString("AF"))
                .body("[1].'alpha2Code'", containsString("AX"))
                .body("[2].'alpha2Code'", containsString("AL"))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_11_getOnAllReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/all -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/all?fields=_EM_53384_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_12_getOnAllReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/all -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_14_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/all?EMextraParam123=_EM_13_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("[0].'name'", containsString("Afghanistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".af"))
                .body("[0].'alpha2Code'", containsString("AF"))
                .body("[0].'alpha3Code'", containsString("AFG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("93"))
                .body("[0].'capital'", containsString("Kabul"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("AF", "Afġānistān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(2.7657145E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(33.0))
                .body("[0].'latlng'[1]", numberMatches(65.0))
                .body("[0].'demonym'", containsString("Afghan"))
                .body("[0].'area'", numberMatches(652230.0))
                .body("[0].'gini'", numberMatches(27.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:30"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("IRN", "PAK", "TKM", "UZB", "TJK", "CHN"))
                .body("[0].'nativeName'", containsString("افغانستان"))
                .body("[0].'numericCode'", containsString("004"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("AFN"))
                .body("[0].'currencies'[0].'name'", containsString("Afghan afghani"))
                .body("[0].'currencies'[0].'symbol'", containsString("؋"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'[0].'iso639_1'", containsString("ps"))
                .body("[0].'languages'[0].'iso639_2'", containsString("pus"))
                .body("[0].'languages'[0].'name'", containsString("Pashto"))
                .body("[0].'languages'[0].'nativeName'", containsString("پښتو"))
                .body("[0].'languages'[1].'iso639_1'", containsString("uz"))
                .body("[0].'languages'[1].'iso639_2'", containsString("uzb"))
                .body("[0].'languages'[1].'name'", containsString("Uzbek"))
                .body("[0].'languages'[1].'nativeName'", containsString("Oʻzbek"))
                .body("[0].'languages'[2].'iso639_1'", containsString("tk"))
                .body("[0].'languages'[2].'iso639_2'", containsString("tuk"))
                .body("[0].'languages'[2].'name'", containsString("Turkmen"))
                .body("[0].'languages'[2].'nativeName'", containsString("Türkmen"))
                .body("[0].'translations'.'de'", containsString("Afghanistan"))
                .body("[0].'translations'.'es'", containsString("Afganistán"))
                .body("[0].'translations'.'fr'", containsString("Afghanistan"))
                .body("[0].'translations'.'ja'", containsString("アフガニスタン"))
                .body("[0].'translations'.'it'", containsString("Afghanistan"))
                .body("[0].'translations'.'br'", containsString("Afeganistão"))
                .body("[0].'translations'.'pt'", containsString("Afeganistão"))
                .body("[0].'translations'.'nl'", containsString("Afghanistan"))
                .body("[0].'translations'.'hr'", containsString("Afganistan"))
                .body("[0].'translations'.'fa'", containsString("افغانستان"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/afg.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("SAARC"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("South Asian Association for Regional Cooperation"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("AFG"))
                .body("[1].'name'", containsString("Åland Islands"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ax"))
                .body("[1].'alpha2Code'", containsString("AX"))
                .body("[1].'alpha3Code'", containsString("ALA"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("358"))
                .body("[1].'capital'", containsString("Mariehamn"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("AX", "Aaland", "Aland", "Ahvenanmaa"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Northern Europe"))
                .body("[1].'population'", numberMatches(28875.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(60.116667))
                .body("[1].'latlng'[1]", numberMatches(19.9))
                .body("[1].'demonym'", containsString("Ålandish"))
                .body("[1].'area'", numberMatches(1580.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+02:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Åland"))
                .body("[1].'numericCode'", containsString("248"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("EUR"))
                .body("[1].'currencies'[0].'name'", containsString("Euro"))
                .body("[1].'currencies'[0].'symbol'", containsString("€"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'[0].'iso639_1'", containsString("sv"))
                .body("[1].'languages'[0].'iso639_2'", containsString("swe"))
                .body("[1].'languages'[0].'name'", containsString("Swedish"))
                .body("[1].'languages'[0].'nativeName'", containsString("svenska"))
                .body("[1].'translations'.'de'", containsString("Åland"))
                .body("[1].'translations'.'es'", containsString("Alandia"))
                .body("[1].'translations'.'fr'", containsString("Åland"))
                .body("[1].'translations'.'ja'", containsString("オーランド諸島"))
                .body("[1].'translations'.'it'", containsString("Isole Aland"))
                .body("[1].'translations'.'br'", containsString("Ilhas de Aland"))
                .body("[1].'translations'.'pt'", containsString("Ilhas de Aland"))
                .body("[1].'translations'.'nl'", containsString("Ålandeilanden"))
                .body("[1].'translations'.'hr'", containsString("Ålandski otoci"))
                .body("[1].'translations'.'fa'", containsString("جزایر الند"))
                .body("[1].'flag'", containsString("https://restcountries.eu/data/ala.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[0].'acronym'", containsString("EU"))
                .body("[1].'regionalBlocs'[0].'name'", containsString("European Union"))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[1].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[1].'cioc'", containsString(""))
                .body("[2].'name'", containsString("Albania"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".al"))
                .body("[2].'alpha2Code'", containsString("AL"))
                .body("[2].'alpha3Code'", containsString("ALB"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("355"))
                .body("[2].'capital'", containsString("Tirana"))
                .body("[2].'altSpellings'.size()", equalTo(4))
                .body("[2].'altSpellings'", hasItems("AL", "Shqipëri", "Shqipëria", "Shqipnia"))
                .body("[2].'region'", containsString("Europe"))
                .body("[2].'subregion'", containsString("Southern Europe"))
                .body("[2].'population'", numberMatches(2886026.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(41.0))
                .body("[2].'latlng'[1]", numberMatches(20.0))
                .body("[2].'demonym'", containsString("Albanian"))
                .body("[2].'area'", numberMatches(28748.0))
                .body("[2].'gini'", numberMatches(34.5))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(4))
                .body("[2].'borders'", hasItems("MNE", "GRC", "MKD", "KOS"))
                .body("[2].'nativeName'", containsString("Shqipëria"))
                .body("[2].'numericCode'", containsString("008"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'[0].'code'", containsString("ALL"))
                .body("[2].'currencies'[0].'name'", containsString("Albanian lek"))
                .body("[2].'currencies'[0].'symbol'", containsString("L"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'[0].'iso639_1'", containsString("sq"))
                .body("[2].'languages'[0].'iso639_2'", containsString("sqi"))
                .body("[2].'languages'[0].'name'", containsString("Albanian"))
                .body("[2].'languages'[0].'nativeName'", containsString("Shqip"))
                .body("[2].'translations'.'de'", containsString("Albanien"))
                .body("[2].'translations'.'es'", containsString("Albania"))
                .body("[2].'translations'.'fr'", containsString("Albanie"))
                .body("[2].'translations'.'ja'", containsString("アルバニア"))
                .body("[2].'translations'.'it'", containsString("Albania"))
                .body("[2].'translations'.'br'", containsString("Albânia"))
                .body("[2].'translations'.'pt'", containsString("Albânia"))
                .body("[2].'translations'.'nl'", containsString("Albanië"))
                .body("[2].'translations'.'hr'", containsString("Albanija"))
                .body("[2].'translations'.'fa'", containsString("آلبانی"))
                .body("[2].'flag'", containsString("https://restcountries.eu/data/alb.svg"))
                .body("[2].'regionalBlocs'.size()", equalTo(1))
                .body("[2].'regionalBlocs'[0].'acronym'", containsString("CEFTA"))
                .body("[2].'regionalBlocs'[0].'name'", containsString("Central European Free Trade Agreement"))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[2].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[2].'cioc'", containsString("ALB"))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_13_getOnV1SubregionWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/subregion/{subregion} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/Eastern%20Asia?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(8))
                .body("[0].'name'", containsString("China"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cn"))
                .body("[0].'alpha2Code'", containsString("CN"))
                .body("[0].'alpha3Code'", containsString("CHN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("86"))
                .body("[0].'capital'", containsString("Beijing"))
                .body("[0].'altSpellings'.size()", equalTo(7))
                .body("[0].'altSpellings'", hasItems("CN", "Zhōngguó", "Zhongguo", "Zhonghua", "People's Republic of China", "中华人民共和国", "Zhōnghuá Rénmín Gònghéguó"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Eastern Asia"))
                .body("[0].'population'", numberMatches(1.37159E9))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(35.0))
                .body("[0].'latlng'[1]", numberMatches(105.0))
                .body("[0].'demonym'", containsString("Chinese"))
                .body("[0].'area'", numberMatches(9640011.0))
                .body("[0].'gini'", numberMatches(47.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(15))
                .body("[0].'borders'", hasItems("AFG", "BTN", "MMR", "HKG", "IND", "KAZ", "PRK", "KGZ", "LAO", "MAC", "MNG", "PAK", "RUS", "TJK", "VNM"))
                .body("[0].'nativeName'", containsString("中国"))
                .body("[0].'numericCode'", containsString("156"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("CNY"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("zh"))
                .body("[0].'translations'.'de'", containsString("China"))
                .body("[0].'translations'.'es'", containsString("China"))
                .body("[0].'translations'.'fr'", containsString("Chine"))
                .body("[0].'translations'.'ja'", containsString("中国"))
                .body("[0].'translations'.'it'", containsString("Cina"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Hong Kong"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".hk"))
                .body("[1].'alpha2Code'", containsString("HK"))
                .body("[1].'alpha3Code'", containsString("HKG"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("852"))
                .body("[1].'capital'", containsString("City of Victoria"))
                .body("[1].'altSpellings'.size()", equalTo(2))
                .body("[1].'altSpellings'", hasItems("HK", "香港"))
                .body("[1].'region'", containsString("Asia"))
                .body("[1].'subregion'", containsString("Eastern Asia"))
                .body("[1].'population'", numberMatches(7298600.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(22.25))
                .body("[1].'latlng'[1]", numberMatches(114.16666666))
                .body("[1].'demonym'", containsString("Chinese"))
                .body("[1].'area'", numberMatches(1104.0))
                .body("[1].'gini'", numberMatches(53.3))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+08:00"))
                .body("[1].'borders'.size()", equalTo(1))
                .body("[1].'borders'", hasItems("CHN"))
                .body("[1].'nativeName'", containsString("香港"))
                .body("[1].'numericCode'", containsString("344"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("HKD"))
                .body("[1].'languages'.size()", equalTo(2))
                .body("[1].'languages'", hasItems("en", "zh"))
                .body("[1].'translations'.'de'", containsString("Hong Kong"))
                .body("[1].'translations'.'es'", containsString("Hong Kong"))
                .body("[1].'translations'.'fr'", containsString("Hong Kong"))
                .body("[1].'translations'.'ja'", containsString("香港"))
                .body("[1].'translations'.'it'", containsString("Hong Kong"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Japan"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".jp"))
                .body("[2].'alpha2Code'", containsString("JP"))
                .body("[2].'alpha3Code'", containsString("JPN"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("81"))
                .body("[2].'capital'", containsString("Tokyo"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("JP", "Nippon", "Nihon"))
                .body("[2].'region'", containsString("Asia"))
                .body("[2].'subregion'", containsString("Eastern Asia"))
                .body("[2].'population'", numberMatches(1.26865E8))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(36.0))
                .body("[2].'latlng'[1]", numberMatches(138.0))
                .body("[2].'demonym'", containsString("Japanese"))
                .body("[2].'area'", numberMatches(377930.0))
                .body("[2].'gini'", numberMatches(38.1))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+09:00"))
                .body("[2].'borders'.size()", equalTo(0))
                .body("[2].'nativeName'", containsString("日本"))
                .body("[2].'numericCode'", containsString("392"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("JPY"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("ja"))
                .body("[2].'translations'.'de'", containsString("Japan"))
                .body("[2].'translations'.'es'", containsString("Japón"))
                .body("[2].'translations'.'fr'", containsString("Japon"))
                .body("[2].'translations'.'ja'", containsString("日本"))
                .body("[2].'translations'.'it'", containsString("Giappone"))
                .body("[2].'relevance'", containsString("2.5"))
                ; // Skipping assertions on the remaining 5 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_14_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/region/oceania")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(27))
                .body("[0].'name'", containsString("American Samoa"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".as"))
                .body("[0].'alpha2Code'", containsString("AS"))
                .body("[0].'alpha3Code'", containsString("ASM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Pago Pago"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("AS", "Amerika Sāmoa", "Amelika Sāmoa", "Sāmoa Amelika"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Polynesia"))
                .body("[0].'population'", numberMatches(55519.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-14.33333333))
                .body("[0].'latlng'[1]", numberMatches(-170.0))
                .body("[0].'demonym'", containsString("American Samoan"))
                .body("[0].'area'", numberMatches(199.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-11:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("American Samoa"))
                .body("[0].'numericCode'", containsString("016"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "sm"))
                .body("[0].'translations'.'de'", containsString("Amerikanisch-Samoa"))
                .body("[0].'translations'.'es'", containsString("Samoa Americana"))
                .body("[0].'translations'.'fr'", containsString("Samoa américaines"))
                .body("[0].'translations'.'ja'", containsString("アメリカ領サモア"))
                .body("[0].'translations'.'it'", containsString("Samoa Americane"))
                .body("[0].'relevance'", containsString("0.5"))
                .body("[1].'name'", containsString("Australia"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".au"))
                .body("[1].'alpha2Code'", containsString("AU"))
                .body("[1].'alpha3Code'", containsString("AUS"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("61"))
                .body("[1].'capital'", containsString("Canberra"))
                .body("[1].'altSpellings'.size()", equalTo(1))
                .body("[1].'altSpellings'", hasItems("AU"))
                .body("[1].'region'", containsString("Oceania"))
                .body("[1].'subregion'", containsString("Australia and New Zealand"))
                .body("[1].'population'", numberMatches(2.38688E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-27.0))
                .body("[1].'latlng'[1]", numberMatches(133.0))
                .body("[1].'demonym'", containsString("Australian"))
                .body("[1].'area'", numberMatches(7692024.0))
                .body("[1].'gini'", numberMatches(30.5))
                .body("[1].'timezones'.size()", equalTo(8))
                .body("[1].'timezones'", hasItems("UTC+05:00", "UTC+06:30", "UTC+07:00", "UTC+08:00", "UTC+09:30", "UTC+10:00", "UTC+10:30", "UTC+11:30"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Australia"))
                .body("[1].'numericCode'", containsString("036"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("AUD"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("en"))
                .body("[1].'translations'.'de'", containsString("Australien"))
                .body("[1].'translations'.'es'", containsString("Australia"))
                .body("[1].'translations'.'fr'", containsString("Australie"))
                .body("[1].'translations'.'ja'", containsString("オーストラリア"))
                .body("[1].'translations'.'it'", containsString("Australia"))
                .body("[1].'relevance'", containsString("1.5"))
                .body("[2].'name'", containsString("Christmas Island"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".cx"))
                .body("[2].'alpha2Code'", containsString("CX"))
                .body("[2].'alpha3Code'", containsString("CXR"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("61"))
                .body("[2].'capital'", containsString("Flying Fish Cove"))
                .body("[2].'altSpellings'.size()", equalTo(2))
                .body("[2].'altSpellings'", hasItems("CX", "Territory of Christmas Island"))
                .body("[2].'region'", containsString("Oceania"))
                .body("[2].'subregion'", containsString("Australia and New Zealand"))
                .body("[2].'population'", numberMatches(2072.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(-10.5))
                .body("[2].'latlng'[1]", numberMatches(105.66666666))
                .body("[2].'demonym'", containsString("Christmas Island"))
                .body("[2].'area'", numberMatches(135.0))
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+07:00"))
                .body("[2].'borders'.size()", equalTo(0))
                .body("[2].'nativeName'", containsString("Christmas Island"))
                .body("[2].'numericCode'", containsString("162"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("AUD"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("en"))
                .body("[2].'translations'.'de'", containsString("Weihnachtsinsel"))
                .body("[2].'translations'.'es'", containsString("Isla de Navidad"))
                .body("[2].'translations'.'fr'", containsString("Île Christmas"))
                .body("[2].'translations'.'ja'", containsString("クリスマス島"))
                .body("[2].'translations'.'it'", containsString("Isola di Natale"))
                .body("[2].'relevance'", containsString("0.5"))
                ; // Skipping assertions on the remaining 24 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_15_getOnV1RegionWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/region/americas?EMextraParam123=_EM_322_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(57))
                .body("[0].'name'", containsString("Anguilla"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ai"))
                .body("[0].'alpha2Code'", containsString("AI"))
                .body("[0].'alpha3Code'", containsString("AIA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("The Valley"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("AI"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(13452.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(18.25))
                .body("[0].'latlng'[1]", numberMatches(-63.16666666))
                .body("[0].'demonym'", containsString("Anguillian"))
                .body("[0].'area'", numberMatches(91.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Anguilla"))
                .body("[0].'numericCode'", containsString("660"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("XCD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Anguilla"))
                .body("[0].'translations'.'es'", containsString("Anguilla"))
                .body("[0].'translations'.'fr'", containsString("Anguilla"))
                .body("[0].'translations'.'ja'", containsString("アンギラ"))
                .body("[0].'translations'.'it'", containsString("Anguilla"))
                .body("[0].'relevance'", containsString("0.5"))
                .body("[1].'name'", containsString("Antigua and Barbuda"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ag"))
                .body("[1].'alpha2Code'", containsString("AG"))
                .body("[1].'alpha3Code'", containsString("ATG"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("1"))
                .body("[1].'capital'", containsString("Saint John's"))
                .body("[1].'altSpellings'.size()", equalTo(1))
                .body("[1].'altSpellings'", hasItems("AG"))
                .body("[1].'region'", containsString("Americas"))
                .body("[1].'subregion'", containsString("Caribbean"))
                .body("[1].'population'", numberMatches(86295.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(17.05))
                .body("[1].'latlng'[1]", numberMatches(-61.8))
                .body("[1].'demonym'", containsString("Antiguan, Barbudan"))
                .body("[1].'area'", numberMatches(442.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC-04:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Antigua and Barbuda"))
                .body("[1].'numericCode'", containsString("028"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("XCD"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("en"))
                .body("[1].'translations'.'de'", containsString("Antigua und Barbuda"))
                .body("[1].'translations'.'es'", containsString("Antigua y Barbuda"))
                .body("[1].'translations'.'fr'", containsString("Antigua-et-Barbuda"))
                .body("[1].'translations'.'ja'", containsString("アンティグア・バーブーダ"))
                .body("[1].'translations'.'it'", containsString("Antigua e Barbuda"))
                .body("[1].'relevance'", containsString("0.5"))
                .body("[2].'name'", containsString("Argentina"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".ar"))
                .body("[2].'alpha2Code'", containsString("AR"))
                .body("[2].'alpha3Code'", containsString("ARG"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("54"))
                .body("[2].'capital'", containsString("Buenos Aires"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("AR", "Argentine Republic", "República Argentina"))
                .body("[2].'region'", containsString("Americas"))
                .body("[2].'subregion'", containsString("South America"))
                .body("[2].'population'", numberMatches(4.3131966E7))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(-34.0))
                .body("[2].'latlng'[1]", numberMatches(-64.0))
                .body("[2].'demonym'", containsString("Argentinean"))
                .body("[2].'area'", numberMatches(2780400.0))
                .body("[2].'gini'", numberMatches(44.5))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC-03:00"))
                .body("[2].'borders'.size()", equalTo(5))
                .body("[2].'borders'", hasItems("BOL", "BRA", "CHL", "PRY", "URY"))
                .body("[2].'nativeName'", containsString("Argentina"))
                .body("[2].'numericCode'", containsString("032"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("ARS"))
                .body("[2].'languages'.size()", equalTo(2))
                .body("[2].'languages'", hasItems("es", "gn"))
                .body("[2].'translations'.'de'", containsString("Argentinien"))
                .body("[2].'translations'.'es'", containsString("Argentina"))
                .body("[2].'translations'.'fr'", containsString("Argentine"))
                .body("[2].'translations'.'ja'", containsString("アルゼンチン"))
                .body("[2].'translations'.'it'", containsString("Argentina"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 54 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_16_getOnV1CapitWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/capital/{capital} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/capital/Tunis?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Tunisia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".tn"))
                .body("[0].'alpha2Code'", containsString("TN"))
                .body("[0].'alpha3Code'", containsString("TUN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("216"))
                .body("[0].'capital'", containsString("Tunis"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("TN", "Republic of Tunisia", "al-Jumhūriyyah at-Tūnisiyyah"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Northern Africa"))
                .body("[0].'population'", numberMatches(1.0982754E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(34.0))
                .body("[0].'latlng'[1]", numberMatches(9.0))
                .body("[0].'demonym'", containsString("Tunisian"))
                .body("[0].'area'", numberMatches(163610.0))
                .body("[0].'gini'", numberMatches(41.4))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("DZA", "LBY"))
                .body("[0].'nativeName'", containsString("تونس"))
                .body("[0].'numericCode'", containsString("788"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("TND"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Tunesien"))
                .body("[0].'translations'.'es'", containsString("Túnez"))
                .body("[0].'translations'.'fr'", containsString("Tunisie"))
                .body("[0].'translations'.'ja'", containsString("チュニジア"))
                .body("[0].'translations'.'it'", containsString("Tunisia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_17_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/he?EMextraParam123=_EM_3397_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Israel"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".il"))
                .body("[0].'alpha2Code'", containsString("IL"))
                .body("[0].'alpha3Code'", containsString("ISR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("972"))
                .body("[0].'capital'", containsString("Jerusalem"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("IL", "State of Israel", "Medīnat Yisrā'el"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(8371600.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(31.5))
                .body("[0].'latlng'[1]", numberMatches(34.75))
                .body("[0].'demonym'", containsString("Israeli"))
                .body("[0].'area'", numberMatches(20770.0))
                .body("[0].'gini'", numberMatches(39.2))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("EGY", "JOR", "LBN", "SYR"))
                .body("[0].'nativeName'", containsString("יִשְׂרָאֵל"))
                .body("[0].'numericCode'", containsString("376"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ILS"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("he", "ar"))
                .body("[0].'translations'.'de'", containsString("Israel"))
                .body("[0].'translations'.'es'", containsString("Israel"))
                .body("[0].'translations'.'fr'", containsString("Israël"))
                .body("[0].'translations'.'ja'", containsString("イスラエル"))
                .body("[0].'translations'.'it'", containsString("Israele"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_18_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Nordkorea")
                .get(baseUrlOfSut + "/rest/v1/lang/pl?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Poland"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".pl"))
                .body("[0].'alpha2Code'", containsString("PL"))
                .body("[0].'alpha3Code'", containsString("POL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("48"))
                .body("[0].'capital'", containsString("Warsaw"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("PL", "Republic of Poland", "Rzeczpospolita Polska"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(3.8484E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(52.0))
                .body("[0].'latlng'[1]", numberMatches(20.0))
                .body("[0].'demonym'", containsString("Polish"))
                .body("[0].'area'", numberMatches(312679.0))
                .body("[0].'gini'", numberMatches(34.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(7))
                .body("[0].'borders'", hasItems("BLR", "CZE", "DEU", "LTU", "RUS", "SVK", "UKR"))
                .body("[0].'nativeName'", containsString("Polska"))
                .body("[0].'numericCode'", containsString("616"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("PLN"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("pl"))
                .body("[0].'translations'.'de'", containsString("Polen"))
                .body("[0].'translations'.'es'", containsString("Polonia"))
                .body("[0].'translations'.'fr'", containsString("Pologne"))
                .body("[0].'translations'.'ja'", containsString("ポーランド"))
                .body("[0].'translations'.'it'", containsString("Polonia"))
                .body("[0].'relevance'", containsString("1.25"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_19_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/ay?EMextraParam123=_EM_3282_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Bolivia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bo"))
                .body("[0].'alpha2Code'", containsString("BO"))
                .body("[0].'alpha3Code'", containsString("BOL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("591"))
                .body("[0].'capital'", containsString("Sucre"))
                .body("[0].'altSpellings'.size()", equalTo(8))
                .body("[0].'altSpellings'", hasItems("BO", "Buliwya", "Wuliwya", "Plurinational State of Bolivia", "Estado Plurinacional de Bolivia", "Buliwya Mamallaqta", "Wuliwya Suyu", "Tetã Volívia"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(1.1410651E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-17.0))
                .body("[0].'latlng'[1]", numberMatches(-65.0))
                .body("[0].'demonym'", containsString("Bolivian"))
                .body("[0].'area'", numberMatches(1098581.0))
                .body("[0].'gini'", numberMatches(56.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("ARG", "BRA", "CHL", "PRY", "PER"))
                .body("[0].'nativeName'", containsString("Bolivia"))
                .body("[0].'numericCode'", containsString("068"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'", hasItems("BOB", "BOV"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("es", "ay", "qu"))
                .body("[0].'translations'.'de'", containsString("Bolivien"))
                .body("[0].'translations'.'es'", containsString("Bolivia"))
                .body("[0].'translations'.'fr'", containsString("Bolivie"))
                .body("[0].'translations'.'ja'", containsString("ボリビア多民族国"))
                .body("[0].'translations'.'it'", containsString("Bolivia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_20_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/fr?EMextraParam123=_EM_3397_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(45))
                .body("[0].'name'", containsString("Belgium"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".be"))
                .body("[0].'alpha2Code'", containsString("BE"))
                .body("[0].'alpha3Code'", containsString("BEL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("32"))
                .body("[0].'capital'", containsString("Brussels"))
                .body("[0].'altSpellings'.size()", equalTo(9))
                .body("[0].'altSpellings'", hasItems("BE", "België", "Belgie", "Belgien", "Belgique", "Kingdom of Belgium", "Koninkrijk België", "Royaume de Belgique", "Königreich Belgien"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(1.124833E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(50.83333333))
                .body("[0].'latlng'[1]", numberMatches(4.0))
                .body("[0].'demonym'", containsString("Belgian"))
                .body("[0].'area'", numberMatches(30528.0))
                .body("[0].'gini'", numberMatches(33.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("FRA", "DEU", "LUX", "NLD"))
                .body("[0].'nativeName'", containsString("België"))
                .body("[0].'numericCode'", containsString("056"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("nl", "fr", "de"))
                .body("[0].'translations'.'de'", containsString("Belgien"))
                .body("[0].'translations'.'es'", containsString("Bélgica"))
                .body("[0].'translations'.'fr'", containsString("Belgique"))
                .body("[0].'translations'.'ja'", containsString("ベルギー"))
                .body("[0].'translations'.'it'", containsString("Belgio"))
                .body("[0].'relevance'", containsString("1.5"))
                .body("[1].'name'", containsString("Benin"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".bj"))
                .body("[1].'alpha2Code'", containsString("BJ"))
                .body("[1].'alpha3Code'", containsString("BEN"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("229"))
                .body("[1].'capital'", containsString("Porto-Novo"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("BJ", "Republic of Benin", "République du Bénin"))
                .body("[1].'region'", containsString("Africa"))
                .body("[1].'subregion'", containsString("Western Africa"))
                .body("[1].'population'", numberMatches(1.0315244E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(9.5))
                .body("[1].'latlng'[1]", numberMatches(2.25))
                .body("[1].'demonym'", containsString("Beninese"))
                .body("[1].'area'", numberMatches(112622.0))
                .body("[1].'gini'", numberMatches(38.6))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+01:00"))
                .body("[1].'borders'.size()", equalTo(4))
                .body("[1].'borders'", hasItems("BFA", "NER", "NGA", "TGO"))
                .body("[1].'nativeName'", containsString("Bénin"))
                .body("[1].'numericCode'", containsString("204"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("XOF"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("fr"))
                .body("[1].'translations'.'de'", containsString("Benin"))
                .body("[1].'translations'.'es'", containsString("Benín"))
                .body("[1].'translations'.'fr'", containsString("Bénin"))
                .body("[1].'translations'.'ja'", containsString("ベナン"))
                .body("[1].'translations'.'it'", containsString("Benin"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Burkina Faso"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".bf"))
                .body("[2].'alpha2Code'", containsString("BF"))
                .body("[2].'alpha3Code'", containsString("BFA"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("226"))
                .body("[2].'capital'", containsString("Ouagadougou"))
                .body("[2].'altSpellings'.size()", equalTo(1))
                .body("[2].'altSpellings'", hasItems("BF"))
                .body("[2].'region'", containsString("Africa"))
                .body("[2].'subregion'", containsString("Western Africa"))
                .body("[2].'population'", numberMatches(1.8450494E7))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(13.0))
                .body("[2].'latlng'[1]", numberMatches(-2.0))
                .body("[2].'demonym'", containsString("Burkinabe"))
                .body("[2].'area'", numberMatches(272967.0))
                .body("[2].'gini'", numberMatches(39.8))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC"))
                .body("[2].'borders'.size()", equalTo(6))
                .body("[2].'borders'", hasItems("BEN", "CIV", "GHA", "MLI", "NER", "TGO"))
                .body("[2].'nativeName'", containsString("Burkina Faso"))
                .body("[2].'numericCode'", containsString("854"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("XOF"))
                .body("[2].'languages'.size()", equalTo(2))
                .body("[2].'languages'", hasItems("fr", "ff"))
                .body("[2].'translations'.'de'", containsString("Burkina Faso"))
                .body("[2].'translations'.'es'", containsString("Burkina Faso"))
                .body("[2].'translations'.'fr'", containsString("Burkina Faso"))
                .body("[2].'translations'.'ja'", containsString("ブルキナファソ"))
                .body("[2].'translations'.'it'", containsString("Burkina Faso"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 42 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_21_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Nordkorea")
                .get(baseUrlOfSut + "/rest/v1/lang/ps?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Afghanistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".af"))
                .body("[0].'alpha2Code'", containsString("AF"))
                .body("[0].'alpha3Code'", containsString("AFG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("93"))
                .body("[0].'capital'", containsString("Kabul"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("AF", "Afġānistān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(2.60231E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(33.0))
                .body("[0].'latlng'[1]", numberMatches(65.0))
                .body("[0].'demonym'", containsString("Afghan"))
                .body("[0].'area'", numberMatches(652230.0))
                .body("[0].'gini'", numberMatches(27.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:30"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("IRN", "PAK", "TKM", "UZB", "TJK", "CHN"))
                .body("[0].'nativeName'", containsString("افغانستان"))
                .body("[0].'numericCode'", containsString("004"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AFN"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("ps", "uz", "tk"))
                .body("[0].'translations'.'de'", containsString("Afghanistan"))
                .body("[0].'translations'.'es'", containsString("Afganistán"))
                .body("[0].'translations'.'fr'", containsString("Afghanistan"))
                .body("[0].'translations'.'ja'", containsString("アフガニスタン"))
                .body("[0].'translations'.'it'", containsString("Afghanistan"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_22_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Nordkorea")
                .get(baseUrlOfSut + "/rest/v1/lang/pt?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(9))
                .body("[0].'name'", containsString("Angola"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ao"))
                .body("[0].'alpha2Code'", containsString("AO"))
                .body("[0].'alpha3Code'", containsString("AGO"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("244"))
                .body("[0].'capital'", containsString("Luanda"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("AO", "República de Angola", "ʁɛpublika de an'ɡɔla"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Middle Africa"))
                .body("[0].'population'", numberMatches(2.4383301E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-12.5))
                .body("[0].'latlng'[1]", numberMatches(18.5))
                .body("[0].'demonym'", containsString("Angolan"))
                .body("[0].'area'", numberMatches(1246700.0))
                .body("[0].'gini'", numberMatches(58.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("COG", "COD", "ZMB", "NAM"))
                .body("[0].'nativeName'", containsString("Angola"))
                .body("[0].'numericCode'", containsString("024"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AOA"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("pt"))
                .body("[0].'translations'.'de'", containsString("Angola"))
                .body("[0].'translations'.'es'", containsString("Angola"))
                .body("[0].'translations'.'fr'", containsString("Angola"))
                .body("[0].'translations'.'ja'", containsString("アンゴラ"))
                .body("[0].'translations'.'it'", containsString("Angola"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Brazil"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".br"))
                .body("[1].'alpha2Code'", containsString("BR"))
                .body("[1].'alpha3Code'", containsString("BRA"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("55"))
                .body("[1].'capital'", containsString("Brasília"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("BR", "Brasil", "Federative Republic of Brazil", "República Federativa do Brasil"))
                .body("[1].'region'", containsString("Americas"))
                .body("[1].'subregion'", containsString("South America"))
                .body("[1].'population'", numberMatches(2.04772E8))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-10.0))
                .body("[1].'latlng'[1]", numberMatches(-55.0))
                .body("[1].'demonym'", containsString("Brazilian"))
                .body("[1].'area'", numberMatches(8515767.0))
                .body("[1].'gini'", numberMatches(54.7))
                .body("[1].'timezones'.size()", equalTo(4))
                .body("[1].'timezones'", hasItems("UTC-05:00", "UTC-04:00", "UTC-03:00", "UTC-02:00"))
                .body("[1].'borders'.size()", equalTo(10))
                .body("[1].'borders'", hasItems("ARG", "BOL", "COL", "GUF", "GUY", "PRY", "PER", "SUR", "URY", "VEN"))
                .body("[1].'nativeName'", containsString("Brasil"))
                .body("[1].'numericCode'", containsString("076"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("BRL"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("pt"))
                .body("[1].'translations'.'de'", containsString("Brasilien"))
                .body("[1].'translations'.'es'", containsString("Brasil"))
                .body("[1].'translations'.'fr'", containsString("Brésil"))
                .body("[1].'translations'.'ja'", containsString("ブラジル"))
                .body("[1].'translations'.'it'", containsString("Brasile"))
                .body("[1].'relevance'", containsString("2"))
                .body("[2].'name'", containsString("Cape Verde"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".cv"))
                .body("[2].'alpha2Code'", containsString("CV"))
                .body("[2].'alpha3Code'", containsString("CPV"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("238"))
                .body("[2].'capital'", containsString("Praia"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("CV", "Republic of Cabo Verde", "República de Cabo Verde"))
                .body("[2].'region'", containsString("Africa"))
                .body("[2].'subregion'", containsString("Western Africa"))
                .body("[2].'population'", numberMatches(524833.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(16.0))
                .body("[2].'latlng'[1]", numberMatches(-24.0))
                .body("[2].'demonym'", containsString("Cape Verdian"))
                .body("[2].'area'", numberMatches(4033.0))
                .body("[2].'gini'", numberMatches(50.5))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC-01:00"))
                .body("[2].'borders'.size()", equalTo(0))
                .body("[2].'nativeName'", containsString("Cabo Verde"))
                .body("[2].'numericCode'", containsString("132"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("CVE"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("pt"))
                .body("[2].'translations'.'de'", containsString("Kap Verde"))
                .body("[2].'translations'.'es'", containsString("Cabo Verde"))
                .body("[2].'translations'.'fr'", containsString("Cap Vert"))
                .body("[2].'translations'.'ja'", containsString("カーボベルデ"))
                .body("[2].'translations'.'it'", containsString("Capo Verde"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 6 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_23_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/qu?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Bolivia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bo"))
                .body("[0].'alpha2Code'", containsString("BO"))
                .body("[0].'alpha3Code'", containsString("BOL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("591"))
                .body("[0].'capital'", containsString("Sucre"))
                .body("[0].'altSpellings'.size()", equalTo(8))
                .body("[0].'altSpellings'", hasItems("BO", "Buliwya", "Wuliwya", "Plurinational State of Bolivia", "Estado Plurinacional de Bolivia", "Buliwya Mamallaqta", "Wuliwya Suyu", "Tetã Volívia"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(1.1410651E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-17.0))
                .body("[0].'latlng'[1]", numberMatches(-65.0))
                .body("[0].'demonym'", containsString("Bolivian"))
                .body("[0].'area'", numberMatches(1098581.0))
                .body("[0].'gini'", numberMatches(56.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("ARG", "BRA", "CHL", "PRY", "PER"))
                .body("[0].'nativeName'", containsString("Bolivia"))
                .body("[0].'numericCode'", containsString("068"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'", hasItems("BOB", "BOV"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("es", "ay", "qu"))
                .body("[0].'translations'.'de'", containsString("Bolivien"))
                .body("[0].'translations'.'es'", containsString("Bolivia"))
                .body("[0].'translations'.'fr'", containsString("Bolivie"))
                .body("[0].'translations'.'ja'", containsString("ボリビア多民族国"))
                .body("[0].'translations'.'it'", containsString("Bolivia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_24_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_3398_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/lang/ga?EMextraParam123=_EM_3397_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Republic of Ireland"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ie"))
                .body("[0].'alpha2Code'", containsString("IE"))
                .body("[0].'alpha3Code'", containsString("IRL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("353"))
                .body("[0].'capital'", containsString("Dublin"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("IE", "Éire", "Republic of Ireland", "Poblacht na hÉireann"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(6378000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(53.0))
                .body("[0].'latlng'[1]", numberMatches(-8.0))
                .body("[0].'demonym'", containsString("Irish"))
                .body("[0].'area'", numberMatches(70273.0))
                .body("[0].'gini'", numberMatches(34.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("GBR"))
                .body("[0].'nativeName'", containsString("Éire"))
                .body("[0].'numericCode'", containsString("372"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("ga", "en"))
                .body("[0].'translations'.'de'", containsString("Irland"))
                .body("[0].'translations'.'es'", containsString("Irlanda"))
                .body("[0].'translations'.'fr'", containsString("Irlande"))
                .body("[0].'translations'.'ja'", containsString("アイルランド"))
                .body("[0].'translations'.'it'", containsString("Irlanda"))
                .body("[0].'relevance'", containsString("1.2"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_25_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Nordkorea")
                .get(baseUrlOfSut + "/rest/v1/lang/rn")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Burundi"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bi"))
                .body("[0].'alpha2Code'", containsString("BI"))
                .body("[0].'alpha3Code'", containsString("BDI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("257"))
                .body("[0].'capital'", containsString("Bujumbura"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("BI", "Republic of Burundi", "Republika y'Uburundi", "République du Burundi"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(9823827.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-3.5))
                .body("[0].'latlng'[1]", numberMatches(30.0))
                .body("[0].'demonym'", containsString("Burundian"))
                .body("[0].'area'", numberMatches(27834.0))
                .body("[0].'gini'", numberMatches(33.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("COD", "RWA", "TZA"))
                .body("[0].'nativeName'", containsString("Burundi"))
                .body("[0].'numericCode'", containsString("108"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BIF"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fr", "rn"))
                .body("[0].'translations'.'de'", containsString("Burundi"))
                .body("[0].'translations'.'es'", containsString("Burundi"))
                .body("[0].'translations'.'fr'", containsString("Burundi"))
                .body("[0].'translations'.'ja'", containsString("ブルンジ"))
                .body("[0].'translations'.'it'", containsString("Burundi"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_26_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_3398_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/lang/gn?EMextraParam123=_EM_3397_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("Argentina"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ar"))
                .body("[0].'alpha2Code'", containsString("AR"))
                .body("[0].'alpha3Code'", containsString("ARG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("54"))
                .body("[0].'capital'", containsString("Buenos Aires"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("AR", "Argentine Republic", "República Argentina"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(4.3131966E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-34.0))
                .body("[0].'latlng'[1]", numberMatches(-64.0))
                .body("[0].'demonym'", containsString("Argentinean"))
                .body("[0].'area'", numberMatches(2780400.0))
                .body("[0].'gini'", numberMatches(44.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-03:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("BOL", "BRA", "CHL", "PRY", "URY"))
                .body("[0].'nativeName'", containsString("Argentina"))
                .body("[0].'numericCode'", containsString("032"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ARS"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("es", "gn"))
                .body("[0].'translations'.'de'", containsString("Argentinien"))
                .body("[0].'translations'.'es'", containsString("Argentina"))
                .body("[0].'translations'.'fr'", containsString("Argentine"))
                .body("[0].'translations'.'ja'", containsString("アルゼンチン"))
                .body("[0].'translations'.'it'", containsString("Argentina"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Paraguay"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".py"))
                .body("[1].'alpha2Code'", containsString("PY"))
                .body("[1].'alpha3Code'", containsString("PRY"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("595"))
                .body("[1].'capital'", containsString("Asunción"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("PY", "Republic of Paraguay", "República del Paraguay", "Tetã Paraguái"))
                .body("[1].'region'", containsString("Americas"))
                .body("[1].'subregion'", containsString("South America"))
                .body("[1].'population'", numberMatches(7003406.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-23.0))
                .body("[1].'latlng'[1]", numberMatches(-58.0))
                .body("[1].'demonym'", containsString("Paraguayan"))
                .body("[1].'area'", numberMatches(406752.0))
                .body("[1].'gini'", numberMatches(52.4))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC-04:00"))
                .body("[1].'borders'.size()", equalTo(3))
                .body("[1].'borders'", hasItems("ARG", "BOL", "BRA"))
                .body("[1].'nativeName'", containsString("Paraguay"))
                .body("[1].'numericCode'", containsString("600"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("PYG"))
                .body("[1].'languages'.size()", equalTo(2))
                .body("[1].'languages'", hasItems("es", "gn"))
                .body("[1].'translations'.'de'", containsString("Paraguay"))
                .body("[1].'translations'.'es'", containsString("Paraguay"))
                .body("[1].'translations'.'fr'", containsString("Paraguay"))
                .body("[1].'translations'.'ja'", containsString("パラグアイ"))
                .body("[1].'translations'.'it'", containsString("Paraguay"))
                .body("[1].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_27_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Nordkorea")
                .get(baseUrlOfSut + "/rest/v1/lang/ro?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("Moldova"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".md"))
                .body("[0].'alpha2Code'", containsString("MD"))
                .body("[0].'alpha3Code'", containsString("MDA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("373"))
                .body("[0].'capital'", containsString("Chișinău"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("MD", "Republic of Moldova", "Republica Moldova"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(3555200.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(47.0))
                .body("[0].'latlng'[1]", numberMatches(29.0))
                .body("[0].'demonym'", containsString("Moldovan"))
                .body("[0].'area'", numberMatches(33846.0))
                .body("[0].'gini'", numberMatches(33.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("ROU", "UKR"))
                .body("[0].'nativeName'", containsString("Moldova"))
                .body("[0].'numericCode'", containsString("498"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MDL"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ro"))
                .body("[0].'translations'.'de'", containsString("Moldawie"))
                .body("[0].'translations'.'es'", containsString("Moldavia"))
                .body("[0].'translations'.'fr'", containsString("Moldavie"))
                .body("[0].'translations'.'ja'", containsString("モルドバ共和国"))
                .body("[0].'translations'.'it'", containsString("Moldavia"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Romania"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ro"))
                .body("[1].'alpha2Code'", containsString("RO"))
                .body("[1].'alpha3Code'", containsString("ROU"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("40"))
                .body("[1].'capital'", containsString("Bucharest"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("RO", "Rumania", "Roumania", "România"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Eastern Europe"))
                .body("[1].'population'", numberMatches(1.9942642E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(46.0))
                .body("[1].'latlng'[1]", numberMatches(25.0))
                .body("[1].'demonym'", containsString("Romanian"))
                .body("[1].'area'", numberMatches(238391.0))
                .body("[1].'gini'", numberMatches(30.0))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+02:00"))
                .body("[1].'borders'.size()", equalTo(5))
                .body("[1].'borders'", hasItems("BGR", "HUN", "MDA", "SRB", "UKR"))
                .body("[1].'nativeName'", containsString("România"))
                .body("[1].'numericCode'", containsString("642"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("RON"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("ro"))
                .body("[1].'translations'.'de'", containsString("Rumänien"))
                .body("[1].'translations'.'es'", containsString("Rumania"))
                .body("[1].'translations'.'fr'", containsString("Roumanie"))
                .body("[1].'translations'.'ja'", containsString("ルーマニア"))
                .body("[1].'translations'.'it'", containsString("Romania"))
                .body("[1].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_28_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_3398_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/lang/gv")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Isle of Man"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".im"))
                .body("[0].'alpha2Code'", containsString("IM"))
                .body("[0].'alpha3Code'", containsString("IMN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("44"))
                .body("[0].'capital'", containsString("Douglas"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("IM", "Ellan Vannin", "Mann", "Mannin"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(84497.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(54.25))
                .body("[0].'latlng'[1]", numberMatches(-4.5))
                .body("[0].'demonym'", containsString("Manx"))
                .body("[0].'area'", numberMatches(572.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+00:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Isle of Man"))
                .body("[0].'numericCode'", containsString("833"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("GBP"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "gv"))
                .body("[0].'translations'.'de'", containsString("Insel Man"))
                .body("[0].'translations'.'es'", containsString("Isla de Man"))
                .body("[0].'translations'.'fr'", containsString("Île de Man"))
                .body("[0].'translations'.'ja'", containsString("マン島"))
                .body("[0].'translations'.'it'", containsString("Isola di Man"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_29_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/az?EMextraParam123=_EM_3282_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Azerbaijan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".az"))
                .body("[0].'alpha2Code'", containsString("AZ"))
                .body("[0].'alpha3Code'", containsString("AZE"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("994"))
                .body("[0].'capital'", containsString("Baku"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("AZ", "Republic of Azerbaijan", "Azərbaycan Respublikası"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(9636300.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(40.5))
                .body("[0].'latlng'[1]", numberMatches(47.5))
                .body("[0].'demonym'", containsString("Azerbaijani"))
                .body("[0].'area'", numberMatches(86600.0))
                .body("[0].'gini'", numberMatches(33.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("ARM", "GEO", "IRN", "RUS", "TUR"))
                .body("[0].'nativeName'", containsString("Azərbaycan"))
                .body("[0].'numericCode'", containsString("031"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AZN"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("az"))
                .body("[0].'translations'.'de'", containsString("Aserbaidschan"))
                .body("[0].'translations'.'es'", containsString("Azerbaiyán"))
                .body("[0].'translations'.'fr'", containsString("Azerbaïdjan"))
                .body("[0].'translations'.'ja'", containsString("アゼルバイジャン"))
                .body("[0].'translations'.'it'", containsString("Azerbaijan"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_30_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_3398_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/lang/hi")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("Fiji"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".fj"))
                .body("[0].'alpha2Code'", containsString("FJ"))
                .body("[0].'alpha3Code'", containsString("FJI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("679"))
                .body("[0].'capital'", containsString("Suva"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("FJ", "Viti", "Republic of Fiji", "Matanitu ko Viti", "Fijī Gaṇarājya"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Melanesia"))
                .body("[0].'population'", numberMatches(859178.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-18.0))
                .body("[0].'latlng'[1]", numberMatches(175.0))
                .body("[0].'demonym'", containsString("Fijian"))
                .body("[0].'area'", numberMatches(18272.0))
                .body("[0].'gini'", numberMatches(42.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+12:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Fiji"))
                .body("[0].'numericCode'", containsString("242"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("FJD"))
                .body("[0].'languages'.size()", equalTo(4))
                .body("[0].'languages'", hasItems("en", "fj", "hi", "ur"))
                .body("[0].'translations'.'de'", containsString("Fidschi"))
                .body("[0].'translations'.'es'", containsString("Fiyi"))
                .body("[0].'translations'.'fr'", containsString("Fidji"))
                .body("[0].'translations'.'ja'", containsString("フィジー"))
                .body("[0].'translations'.'it'", containsString("Figi"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("India"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".in"))
                .body("[1].'alpha2Code'", containsString("IN"))
                .body("[1].'alpha3Code'", containsString("IND"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("91"))
                .body("[1].'capital'", containsString("New Delhi"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("IN", "Bhārat", "Republic of India", "Bharat Ganrajya"))
                .body("[1].'region'", containsString("Asia"))
                .body("[1].'subregion'", containsString("Southern Asia"))
                .body("[1].'population'", numberMatches(1.27584E9))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(20.0))
                .body("[1].'latlng'[1]", numberMatches(77.0))
                .body("[1].'demonym'", containsString("Indian"))
                .body("[1].'area'", numberMatches(3287590.0))
                .body("[1].'gini'", numberMatches(33.4))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+05:30"))
                .body("[1].'borders'.size()", equalTo(8))
                .body("[1].'borders'", hasItems("AFG", "BGD", "BTN", "MMR", "CHN", "NPL", "PAK", "LKA"))
                .body("[1].'nativeName'", containsString("भारत"))
                .body("[1].'numericCode'", containsString("356"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("INR"))
                .body("[1].'languages'.size()", equalTo(2))
                .body("[1].'languages'", hasItems("hi", "en"))
                .body("[1].'translations'.'de'", containsString("Indien"))
                .body("[1].'translations'.'es'", containsString("India"))
                .body("[1].'translations'.'fr'", containsString("Inde"))
                .body("[1].'translations'.'ja'", containsString("インド"))
                .body("[1].'translations'.'it'", containsString("India"))
                .body("[1].'relevance'", containsString("3"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/alpha
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_31_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/alpha -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/alpha?" + 
                    "codes=fEG_3D%3BC_X%5E%5D_&" + 
                    "EMextraParam123=_EM_1629_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0]", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_32_getOnV1CallingcodWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/callingcode/{callingcode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/248?EMextraParam123=_EM_385_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Seychelles"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sc"))
                .body("[0].'alpha2Code'", containsString("SC"))
                .body("[0].'alpha3Code'", containsString("SYC"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("248"))
                .body("[0].'capital'", containsString("Victoria"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("SC", "Republic of Seychelles", "Repiblik Sesel", "République des Seychelles"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(89949.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-4.58333333))
                .body("[0].'latlng'[1]", numberMatches(55.66666666))
                .body("[0].'demonym'", containsString("Seychellois"))
                .body("[0].'area'", numberMatches(452.0))
                .body("[0].'gini'", numberMatches(65.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Seychelles"))
                .body("[0].'numericCode'", containsString("690"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("SCR"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("fr", "en"))
                .body("[0].'translations'.'de'", containsString("Seychellen"))
                .body("[0].'translations'.'es'", containsString("Seychelles"))
                .body("[0].'translations'.'fr'", containsString("Seychelles"))
                .body("[0].'translations'.'ja'", containsString("セーシェル"))
                .body("[0].'translations'.'it'", containsString("Seychelles"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/alpha/{alphacode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_33_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/alpha/{alphacode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/alpha/WS")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("Samoa"))
                .body("'topLevelDomain'.size()", equalTo(1))
                .body("'topLevelDomain'", hasItems(".ws"))
                .body("'alpha2Code'", containsString("WS"))
                .body("'alpha3Code'", containsString("WSM"))
                .body("'callingCodes'.size()", equalTo(1))
                .body("'callingCodes'", hasItems("685"))
                .body("'capital'", containsString("Apia"))
                .body("'altSpellings'.size()", equalTo(3))
                .body("'altSpellings'", hasItems("WS", "Independent State of Samoa", "Malo Saʻoloto Tutoʻatasi o Sāmoa"))
                .body("'region'", containsString("Oceania"))
                .body("'subregion'", containsString("Polynesia"))
                .body("'population'", numberMatches(187820.0))
                .body("'latlng'.size()", equalTo(2))
                .body("'latlng'[0]", numberMatches(-13.58333333))
                .body("'latlng'[1]", numberMatches(-172.33333333))
                .body("'demonym'", containsString("Samoan"))
                .body("'area'", numberMatches(2842.0))
                .body("'gini'", nullValue())
                .body("'timezones'.size()", equalTo(1))
                .body("'timezones'", hasItems("UTC+13:00"))
                .body("'borders'.size()", equalTo(0))
                .body("'nativeName'", containsString("Samoa"))
                .body("'numericCode'", containsString("882"))
                .body("'currencies'.size()", equalTo(1))
                .body("'currencies'", hasItems("WST"))
                .body("'languages'.size()", equalTo(2))
                .body("'languages'", hasItems("sm", "en"))
                .body("'translations'.'de'", containsString("Samoa"))
                .body("'translations'.'es'", containsString("Samoa"))
                .body("'translations'.'fr'", containsString("Samoa"))
                .body("'translations'.'ja'", containsString("サモア"))
                .body("'translations'.'it'", containsString("Samoa"))
                .body("'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/alpha
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_34_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/alpha -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/alpha?codes=KES")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0]", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/currency/{currency}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_35_getOnCurrencReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/currency/{currency} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/currency/MOP?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Macau"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mo"))
                .body("[0].'alpha2Code'", containsString("MO"))
                .body("[0].'alpha3Code'", containsString("MAC"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("853"))
                .body("[0].'capital'", containsString(""))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("MO", "澳门", "Macao Special Administrative Region of the People's Republic of China", "中華人民共和國澳門特別行政區", "Região Administrativa Especial de Macau da República Popular da China"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Eastern Asia"))
                .body("[0].'population'", numberMatches(642900.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(22.16666666))
                .body("[0].'latlng'[1]", numberMatches(113.55))
                .body("[0].'demonym'", containsString("Chinese"))
                .body("[0].'area'", numberMatches(30.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("CHN"))
                .body("[0].'nativeName'", containsString("澳門"))
                .body("[0].'numericCode'", containsString("446"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MOP"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("zh", "pt"))
                .body("[0].'translations'.'de'", containsString("Macao"))
                .body("[0].'translations'.'es'", containsString("Macao"))
                .body("[0].'translations'.'fr'", containsString("Macao"))
                .body("[0].'translations'.'ja'", containsString("マカオ"))
                .body("[0].'translations'.'it'", containsString("Macao"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_36_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_673_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "codes=STD&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0]", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_37_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha/{alphacode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha/SX?" + 
                    "fields=_EM_115_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_38_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha/{alphacode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha/PA?fields=topLevelDomain")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'topLevelDomain'.size()", equalTo(1))
                .body("'topLevelDomain'", hasItems(".pa"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_39_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha/{alphacode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Ruanda")
                .get(baseUrlOfSut + "/rest/v2/alpha/SX?" + 
                    "fields=G&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_40_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha/{alphacode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/alpha/QA?fields=_EM_2875_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_41_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha/{alphacode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_3202_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/alpha/SJ?" + 
                    "fields=capital&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'capital'", containsString("Longyearbyen"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_42_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha/{alphacode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha/SJ?" + 
                    "fields=name&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("Svalbard and Jan Mayen"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_43_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha/{alphacode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha/NU?fields=alpha2Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'alpha2Code'", containsString("NU"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_44_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha/{alphacode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha/LV?fields=3K46L0vppDZF")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_45_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha/{alphacode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha/NU?fields=alpha3Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'alpha3Code'", containsString("NIU"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_46_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/Asia?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(50))
                .body("[0].'name'", containsString("Afghanistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".af"))
                .body("[0].'alpha2Code'", containsString("AF"))
                .body("[0].'alpha3Code'", containsString("AFG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("93"))
                .body("[0].'capital'", containsString("Kabul"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("AF", "Afġānistān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(2.7657145E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(33.0))
                .body("[0].'latlng'[1]", numberMatches(65.0))
                .body("[0].'demonym'", containsString("Afghan"))
                .body("[0].'area'", numberMatches(652230.0))
                .body("[0].'gini'", numberMatches(27.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:30"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("IRN", "PAK", "TKM", "UZB", "TJK", "CHN"))
                .body("[0].'nativeName'", containsString("افغانستان"))
                .body("[0].'numericCode'", containsString("004"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("AFN"))
                .body("[0].'currencies'[0].'name'", containsString("Afghan afghani"))
                .body("[0].'currencies'[0].'symbol'", containsString("؋"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'[0].'iso639_1'", containsString("ps"))
                .body("[0].'languages'[0].'iso639_2'", containsString("pus"))
                .body("[0].'languages'[0].'name'", containsString("Pashto"))
                .body("[0].'languages'[0].'nativeName'", containsString("پښتو"))
                .body("[0].'languages'[1].'iso639_1'", containsString("uz"))
                .body("[0].'languages'[1].'iso639_2'", containsString("uzb"))
                .body("[0].'languages'[1].'name'", containsString("Uzbek"))
                .body("[0].'languages'[1].'nativeName'", containsString("Oʻzbek"))
                .body("[0].'languages'[2].'iso639_1'", containsString("tk"))
                .body("[0].'languages'[2].'iso639_2'", containsString("tuk"))
                .body("[0].'languages'[2].'name'", containsString("Turkmen"))
                .body("[0].'languages'[2].'nativeName'", containsString("Türkmen"))
                .body("[0].'translations'.'de'", containsString("Afghanistan"))
                .body("[0].'translations'.'es'", containsString("Afganistán"))
                .body("[0].'translations'.'fr'", containsString("Afghanistan"))
                .body("[0].'translations'.'ja'", containsString("アフガニスタン"))
                .body("[0].'translations'.'it'", containsString("Afghanistan"))
                .body("[0].'translations'.'br'", containsString("Afeganistão"))
                .body("[0].'translations'.'pt'", containsString("Afeganistão"))
                .body("[0].'translations'.'nl'", containsString("Afghanistan"))
                .body("[0].'translations'.'hr'", containsString("Afganistan"))
                .body("[0].'translations'.'fa'", containsString("افغانستان"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/afg.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("SAARC"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("South Asian Association for Regional Cooperation"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("AFG"))
                .body("[1].'name'", containsString("Armenia"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".am"))
                .body("[1].'alpha2Code'", containsString("AM"))
                .body("[1].'alpha3Code'", containsString("ARM"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("374"))
                .body("[1].'capital'", containsString("Yerevan"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("AM", "Hayastan", "Republic of Armenia", "Հայաստանի Հանրապետություն"))
                .body("[1].'region'", containsString("Asia"))
                .body("[1].'subregion'", containsString("Western Asia"))
                .body("[1].'population'", numberMatches(2994400.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(40.0))
                .body("[1].'latlng'[1]", numberMatches(45.0))
                .body("[1].'demonym'", containsString("Armenian"))
                .body("[1].'area'", numberMatches(29743.0))
                .body("[1].'gini'", numberMatches(30.9))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+04:00"))
                .body("[1].'borders'.size()", equalTo(4))
                .body("[1].'borders'", hasItems("AZE", "GEO", "IRN", "TUR"))
                .body("[1].'nativeName'", containsString("Հայաստան"))
                .body("[1].'numericCode'", containsString("051"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("AMD"))
                .body("[1].'currencies'[0].'name'", containsString("Armenian dram"))
                .body("[1].'currencies'[0].'symbol'", nullValue())
                .body("[1].'languages'.size()", equalTo(2))
                .body("[1].'languages'[0].'iso639_1'", containsString("hy"))
                .body("[1].'languages'[0].'iso639_2'", containsString("hye"))
                .body("[1].'languages'[0].'name'", containsString("Armenian"))
                .body("[1].'languages'[0].'nativeName'", containsString("Հայերեն"))
                .body("[1].'languages'[1].'iso639_1'", containsString("ru"))
                .body("[1].'languages'[1].'iso639_2'", containsString("rus"))
                .body("[1].'languages'[1].'name'", containsString("Russian"))
                .body("[1].'languages'[1].'nativeName'", containsString("Русский"))
                .body("[1].'translations'.'de'", containsString("Armenien"))
                .body("[1].'translations'.'es'", containsString("Armenia"))
                .body("[1].'translations'.'fr'", containsString("Arménie"))
                .body("[1].'translations'.'ja'", containsString("アルメニア"))
                .body("[1].'translations'.'it'", containsString("Armenia"))
                .body("[1].'translations'.'br'", containsString("Armênia"))
                .body("[1].'translations'.'pt'", containsString("Arménia"))
                .body("[1].'translations'.'nl'", containsString("Armenië"))
                .body("[1].'translations'.'hr'", containsString("Armenija"))
                .body("[1].'translations'.'fa'", containsString("ارمنستان"))
                .body("[1].'flag'", containsString("https://restcountries.eu/data/arm.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[0].'acronym'", containsString("EEU"))
                .body("[1].'regionalBlocs'[0].'name'", containsString("Eurasian Economic Union"))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'", hasItems("EAEU"))
                .body("[1].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[1].'cioc'", containsString("ARM"))
                .body("[2].'name'", containsString("Azerbaijan"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".az"))
                .body("[2].'alpha2Code'", containsString("AZ"))
                .body("[2].'alpha3Code'", containsString("AZE"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("994"))
                .body("[2].'capital'", containsString("Baku"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("AZ", "Republic of Azerbaijan", "Azərbaycan Respublikası"))
                .body("[2].'region'", containsString("Asia"))
                .body("[2].'subregion'", containsString("Western Asia"))
                .body("[2].'population'", numberMatches(9730500.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(40.5))
                .body("[2].'latlng'[1]", numberMatches(47.5))
                .body("[2].'demonym'", containsString("Azerbaijani"))
                .body("[2].'area'", numberMatches(86600.0))
                .body("[2].'gini'", numberMatches(33.7))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+04:00"))
                .body("[2].'borders'.size()", equalTo(5))
                .body("[2].'borders'", hasItems("ARM", "GEO", "IRN", "RUS", "TUR"))
                .body("[2].'nativeName'", containsString("Azərbaycan"))
                .body("[2].'numericCode'", containsString("031"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'[0].'code'", containsString("AZN"))
                .body("[2].'currencies'[0].'name'", containsString("Azerbaijani manat"))
                .body("[2].'currencies'[0].'symbol'", nullValue())
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'[0].'iso639_1'", containsString("az"))
                .body("[2].'languages'[0].'iso639_2'", containsString("aze"))
                .body("[2].'languages'[0].'name'", containsString("Azerbaijani"))
                .body("[2].'languages'[0].'nativeName'", containsString("azərbaycan dili"))
                .body("[2].'translations'.'de'", containsString("Aserbaidschan"))
                .body("[2].'translations'.'es'", containsString("Azerbaiyán"))
                .body("[2].'translations'.'fr'", containsString("Azerbaïdjan"))
                .body("[2].'translations'.'ja'", containsString("アゼルバイジャン"))
                .body("[2].'translations'.'it'", containsString("Azerbaijan"))
                .body("[2].'translations'.'br'", containsString("Azerbaijão"))
                .body("[2].'translations'.'pt'", containsString("Azerbaijão"))
                .body("[2].'translations'.'nl'", containsString("Azerbeidzjan"))
                .body("[2].'translations'.'hr'", containsString("Azerbajdžan"))
                .body("[2].'translations'.'fa'", containsString("آذربایجان"))
                .body("[2].'flag'", containsString("https://restcountries.eu/data/aze.svg"))
                .body("[2].'regionalBlocs'.size()", equalTo(0))
                .body("[2].'cioc'", containsString("AZE"))
                ; // Skipping assertions on the remaining 47 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_47_getOnSubregionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/subregion/{subregion} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/South%20America?EMextraParam123=_EM_27_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(15))
                .body("[0].'name'", containsString("Argentina"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ar"))
                .body("[0].'alpha2Code'", containsString("AR"))
                .body("[0].'alpha3Code'", containsString("ARG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("54"))
                .body("[0].'capital'", containsString("Buenos Aires"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("AR", "Argentine Republic", "República Argentina"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(4.35904E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-34.0))
                .body("[0].'latlng'[1]", numberMatches(-64.0))
                .body("[0].'demonym'", containsString("Argentinean"))
                .body("[0].'area'", numberMatches(2780400.0))
                .body("[0].'gini'", numberMatches(44.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-03:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("BOL", "BRA", "CHL", "PRY", "URY"))
                .body("[0].'nativeName'", containsString("Argentina"))
                .body("[0].'numericCode'", containsString("032"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("ARS"))
                .body("[0].'currencies'[0].'name'", containsString("Argentine peso"))
                .body("[0].'currencies'[0].'symbol'", containsString("$"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("es"))
                .body("[0].'languages'[0].'iso639_2'", containsString("spa"))
                .body("[0].'languages'[0].'name'", containsString("Spanish"))
                .body("[0].'languages'[0].'nativeName'", containsString("Español"))
                .body("[0].'languages'[1].'iso639_1'", containsString("gn"))
                .body("[0].'languages'[1].'iso639_2'", containsString("grn"))
                .body("[0].'languages'[1].'name'", containsString("Guaraní"))
                .body("[0].'languages'[1].'nativeName'", containsString("Avañe'ẽ"))
                .body("[0].'translations'.'de'", containsString("Argentinien"))
                .body("[0].'translations'.'es'", containsString("Argentina"))
                .body("[0].'translations'.'fr'", containsString("Argentine"))
                .body("[0].'translations'.'ja'", containsString("アルゼンチン"))
                .body("[0].'translations'.'it'", containsString("Argentina"))
                .body("[0].'translations'.'br'", containsString("Argentina"))
                .body("[0].'translations'.'pt'", containsString("Argentina"))
                .body("[0].'translations'.'nl'", containsString("Argentinië"))
                .body("[0].'translations'.'hr'", containsString("Argentina"))
                .body("[0].'translations'.'fa'", containsString("آرژانتین"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/arg.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("USAN"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Union of South American Nations"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(3))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'", hasItems("UNASUR", "UNASUL", "UZAN"))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(4))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("Unión de Naciones Suramericanas", "União de Nações Sul-Americanas", "Unie van Zuid-Amerikaanse Naties", "South American Union"))
                .body("[0].'cioc'", containsString("ARG"))
                .body("[1].'name'", containsString("Bolivia (Plurinational State of)"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".bo"))
                .body("[1].'alpha2Code'", containsString("BO"))
                .body("[1].'alpha3Code'", containsString("BOL"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("591"))
                .body("[1].'capital'", containsString("Sucre"))
                .body("[1].'altSpellings'.size()", equalTo(8))
                .body("[1].'altSpellings'", hasItems("BO", "Buliwya", "Wuliwya", "Plurinational State of Bolivia", "Estado Plurinacional de Bolivia", "Buliwya Mamallaqta", "Wuliwya Suyu", "Tetã Volívia"))
                .body("[1].'region'", containsString("Americas"))
                .body("[1].'subregion'", containsString("South America"))
                .body("[1].'population'", numberMatches(1.0985059E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-17.0))
                .body("[1].'latlng'[1]", numberMatches(-65.0))
                .body("[1].'demonym'", containsString("Bolivian"))
                .body("[1].'area'", numberMatches(1098581.0))
                .body("[1].'gini'", numberMatches(56.3))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC-04:00"))
                .body("[1].'borders'.size()", equalTo(5))
                .body("[1].'borders'", hasItems("ARG", "BRA", "CHL", "PRY", "PER"))
                .body("[1].'nativeName'", containsString("Bolivia"))
                .body("[1].'numericCode'", containsString("068"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("BOB"))
                .body("[1].'currencies'[0].'name'", containsString("Bolivian boliviano"))
                .body("[1].'currencies'[0].'symbol'", containsString("Bs."))
                .body("[1].'languages'.size()", equalTo(3))
                .body("[1].'languages'[0].'iso639_1'", containsString("es"))
                .body("[1].'languages'[0].'iso639_2'", containsString("spa"))
                .body("[1].'languages'[0].'name'", containsString("Spanish"))
                .body("[1].'languages'[0].'nativeName'", containsString("Español"))
                .body("[1].'languages'[1].'iso639_1'", containsString("ay"))
                .body("[1].'languages'[1].'iso639_2'", containsString("aym"))
                .body("[1].'languages'[1].'name'", containsString("Aymara"))
                .body("[1].'languages'[1].'nativeName'", containsString("aymar aru"))
                .body("[1].'languages'[2].'iso639_1'", containsString("qu"))
                .body("[1].'languages'[2].'iso639_2'", containsString("que"))
                .body("[1].'languages'[2].'name'", containsString("Quechua"))
                .body("[1].'languages'[2].'nativeName'", containsString("Runa Simi"))
                .body("[1].'translations'.'de'", containsString("Bolivien"))
                .body("[1].'translations'.'es'", containsString("Bolivia"))
                .body("[1].'translations'.'fr'", containsString("Bolivie"))
                .body("[1].'translations'.'ja'", containsString("ボリビア多民族国"))
                .body("[1].'translations'.'it'", containsString("Bolivia"))
                .body("[1].'translations'.'br'", containsString("Bolívia"))
                .body("[1].'translations'.'pt'", containsString("Bolívia"))
                .body("[1].'translations'.'nl'", containsString("Bolivia"))
                .body("[1].'translations'.'hr'", containsString("Bolivija"))
                .body("[1].'translations'.'fa'", containsString("بولیوی"))
                .body("[1].'flag'", containsString("https://restcountries.eu/data/bol.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[0].'acronym'", containsString("USAN"))
                .body("[1].'regionalBlocs'[0].'name'", containsString("Union of South American Nations"))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(3))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'", hasItems("UNASUR", "UNASUL", "UZAN"))
                .body("[1].'regionalBlocs'[0].'otherNames'.size()", equalTo(4))
                .body("[1].'regionalBlocs'[0].'otherNames'", hasItems("Unión de Naciones Suramericanas", "União de Nações Sul-Americanas", "Unie van Zuid-Amerikaanse Naties", "South American Union"))
                .body("[1].'cioc'", containsString("BOL"))
                .body("[2].'name'", containsString("Brazil"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".br"))
                .body("[2].'alpha2Code'", containsString("BR"))
                .body("[2].'alpha3Code'", containsString("BRA"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("55"))
                .body("[2].'capital'", containsString("Brasília"))
                .body("[2].'altSpellings'.size()", equalTo(4))
                .body("[2].'altSpellings'", hasItems("BR", "Brasil", "Federative Republic of Brazil", "República Federativa do Brasil"))
                .body("[2].'region'", containsString("Americas"))
                .body("[2].'subregion'", containsString("South America"))
                .body("[2].'population'", numberMatches(2.06135893E8))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(-10.0))
                .body("[2].'latlng'[1]", numberMatches(-55.0))
                .body("[2].'demonym'", containsString("Brazilian"))
                .body("[2].'area'", numberMatches(8515767.0))
                .body("[2].'gini'", numberMatches(54.7))
                .body("[2].'timezones'.size()", equalTo(4))
                .body("[2].'timezones'", hasItems("UTC-05:00", "UTC-04:00", "UTC-03:00", "UTC-02:00"))
                .body("[2].'borders'.size()", equalTo(10))
                .body("[2].'borders'", hasItems("ARG", "BOL", "COL", "GUF", "GUY", "PRY", "PER", "SUR", "URY", "VEN"))
                .body("[2].'nativeName'", containsString("Brasil"))
                .body("[2].'numericCode'", containsString("076"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'[0].'code'", containsString("BRL"))
                .body("[2].'currencies'[0].'name'", containsString("Brazilian real"))
                .body("[2].'currencies'[0].'symbol'", containsString("R$"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'[0].'iso639_1'", containsString("pt"))
                .body("[2].'languages'[0].'iso639_2'", containsString("por"))
                .body("[2].'languages'[0].'name'", containsString("Portuguese"))
                .body("[2].'languages'[0].'nativeName'", containsString("Português"))
                .body("[2].'translations'.'de'", containsString("Brasilien"))
                .body("[2].'translations'.'es'", containsString("Brasil"))
                .body("[2].'translations'.'fr'", containsString("Brésil"))
                .body("[2].'translations'.'ja'", containsString("ブラジル"))
                .body("[2].'translations'.'it'", containsString("Brasile"))
                .body("[2].'translations'.'br'", containsString("Brasil"))
                .body("[2].'translations'.'pt'", containsString("Brasil"))
                .body("[2].'translations'.'nl'", containsString("Brazilië"))
                .body("[2].'translations'.'hr'", containsString("Brazil"))
                .body("[2].'translations'.'fa'", containsString("برزیل"))
                .body("[2].'flag'", containsString("https://restcountries.eu/data/bra.svg"))
                .body("[2].'regionalBlocs'.size()", equalTo(1))
                .body("[2].'regionalBlocs'[0].'acronym'", containsString("USAN"))
                .body("[2].'regionalBlocs'[0].'name'", containsString("Union of South American Nations"))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(3))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'", hasItems("UNASUR", "UNASUL", "UZAN"))
                .body("[2].'regionalBlocs'[0].'otherNames'.size()", equalTo(4))
                .body("[2].'regionalBlocs'[0].'otherNames'", hasItems("Unión de Naciones Suramericanas", "União de Nações Sul-Americanas", "Unie van Zuid-Amerikaanse Naties", "South American Union"))
                .body("[2].'cioc'", containsString("BRA"))
                ; // Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_48_getOnSubregionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/subregion/{subregion} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_904_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/subregion/Northern%20Africa?fields=alpha3Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(7))
                .body("[0].'alpha3Code'", containsString("DZA"))
                .body("[1].'alpha3Code'", containsString("EGY"))
                .body("[2].'alpha3Code'", containsString("LBY"))
                ; // Skipping assertions on the remaining 4 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_49_getOnSubregionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/subregion/{subregion} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/subregion/Central%20Asia?" + 
                    "fields=%3B&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_50_getOnSubregionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/subregion/{subregion} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/Melanesia?" + 
                    "fields=alpha2Code&" + 
                    "EMextraParam123=_EM_4151_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'alpha2Code'", containsString("FJ"))
                .body("[1].'alpha2Code'", containsString("NC"))
                .body("[2].'alpha2Code'", containsString("PG"))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_51_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/region/Oceania?fields=yPMybxXtjbjBT")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(27))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 24 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_52_getOnSubregionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/subregion/{subregion} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_6078_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/subregion/Northern%20Africa?fields=_EM_6077_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(7))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 4 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_53_getOnSubregionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/subregion/{subregion} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/subregion/Polynesia?" + 
                    "fields=region&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(10))
                .body("[0].'region'", containsString("Oceania"))
                .body("[1].'region'", containsString("Oceania"))
                .body("[2].'region'", containsString("Oceania"))
                ; // Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_54_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/Europe?fields=callingCodes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(53))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("358"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("355"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("376"))
                ; // Skipping assertions on the remaining 50 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_55_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/Europe?fields=capital")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(53))
                .body("[0].'capital'", containsString("Mariehamn"))
                .body("[1].'capital'", containsString("Tirana"))
                .body("[2].'capital'", containsString("Andorra la Vella"))
                ; // Skipping assertions on the remaining 50 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_56_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/Europe?fields=region")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(53))
                .body("[0].'region'", containsString("Europe"))
                .body("[1].'region'", containsString("Europe"))
                .body("[2].'region'", containsString("Europe"))
                ; // Skipping assertions on the remaining 50 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_57_getOnSubregionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/subregion/{subregion} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/Northern%20Africa?fields=topLevelDomain")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(7))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".dz"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".eg"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".ly"))
                ; // Skipping assertions on the remaining 4 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_58_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha/{alphacode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2862_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/alpha/BEL?fields=_EM_11705_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_59_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/americas?fields=rk_W%7DKFM")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(57))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 54 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_60_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/africa?fields=alpha3Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(60))
                .body("[0].'alpha3Code'", containsString("DZA"))
                .body("[1].'alpha3Code'", containsString("AGO"))
                .body("[2].'alpha3Code'", containsString("BEN"))
                ; // Skipping assertions on the remaining 57 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_61_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/asia?fields=topLevelDomain")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(50))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".af"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".am"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".az"))
                ; // Skipping assertions on the remaining 47 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_62_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/asia?fields=translations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(50))
                .body("[0].'translations'.'br'", containsString("Afeganistão"))
                .body("[0].'translations'.'pt'", containsString("Afeganistão"))
                .body("[0].'translations'.'nl'", containsString("Afghanistan"))
                .body("[0].'translations'.'hr'", containsString("Afganistan"))
                .body("[0].'translations'.'fa'", containsString("افغانستان"))
                .body("[0].'translations'.'de'", containsString("Afghanistan"))
                .body("[0].'translations'.'es'", containsString("Afganistán"))
                .body("[0].'translations'.'fr'", containsString("Afghanistan"))
                .body("[0].'translations'.'ja'", containsString("アフガニスタン"))
                .body("[0].'translations'.'it'", containsString("Afghanistan"))
                .body("[1].'translations'.'br'", containsString("Armênia"))
                .body("[1].'translations'.'pt'", containsString("Arménia"))
                .body("[1].'translations'.'nl'", containsString("Armenië"))
                .body("[1].'translations'.'hr'", containsString("Armenija"))
                .body("[1].'translations'.'fa'", containsString("ارمنستان"))
                .body("[1].'translations'.'de'", containsString("Armenien"))
                .body("[1].'translations'.'es'", containsString("Armenia"))
                .body("[1].'translations'.'fr'", containsString("Arménie"))
                .body("[1].'translations'.'ja'", containsString("アルメニア"))
                .body("[1].'translations'.'it'", containsString("Armenia"))
                .body("[2].'translations'.'br'", containsString("Azerbaijão"))
                .body("[2].'translations'.'pt'", containsString("Azerbaijão"))
                .body("[2].'translations'.'nl'", containsString("Azerbeidzjan"))
                .body("[2].'translations'.'hr'", containsString("Azerbajdžan"))
                .body("[2].'translations'.'fa'", containsString("آذربایجان"))
                .body("[2].'translations'.'de'", containsString("Aserbaidschan"))
                .body("[2].'translations'.'es'", containsString("Azerbaiyán"))
                .body("[2].'translations'.'fr'", containsString("Azerbaïdjan"))
                .body("[2].'translations'.'ja'", containsString("アゼルバイジャン"))
                .body("[2].'translations'.'it'", containsString("Azerbaijan"))
                ; // Skipping assertions on the remaining 47 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_63_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/europe?fields=translations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(53))
                .body("[0].'translations'.'br'", containsString("Ilhas de Aland"))
                .body("[0].'translations'.'pt'", containsString("Ilhas de Aland"))
                .body("[0].'translations'.'nl'", containsString("Ålandeilanden"))
                .body("[0].'translations'.'hr'", containsString("Ålandski otoci"))
                .body("[0].'translations'.'fa'", containsString("جزایر الند"))
                .body("[0].'translations'.'de'", containsString("Åland"))
                .body("[0].'translations'.'es'", containsString("Alandia"))
                .body("[0].'translations'.'fr'", containsString("Åland"))
                .body("[0].'translations'.'ja'", containsString("オーランド諸島"))
                .body("[0].'translations'.'it'", containsString("Isole Aland"))
                .body("[1].'translations'.'br'", containsString("Albânia"))
                .body("[1].'translations'.'pt'", containsString("Albânia"))
                .body("[1].'translations'.'nl'", containsString("Albanië"))
                .body("[1].'translations'.'hr'", containsString("Albanija"))
                .body("[1].'translations'.'fa'", containsString("آلبانی"))
                .body("[1].'translations'.'de'", containsString("Albanien"))
                .body("[1].'translations'.'es'", containsString("Albania"))
                .body("[1].'translations'.'fr'", containsString("Albanie"))
                .body("[1].'translations'.'ja'", containsString("アルバニア"))
                .body("[1].'translations'.'it'", containsString("Albania"))
                .body("[2].'translations'.'br'", containsString("Andorra"))
                .body("[2].'translations'.'pt'", containsString("Andorra"))
                .body("[2].'translations'.'nl'", containsString("Andorra"))
                .body("[2].'translations'.'hr'", containsString("Andora"))
                .body("[2].'translations'.'fa'", containsString("آندورا"))
                .body("[2].'translations'.'de'", containsString("Andorra"))
                .body("[2].'translations'.'es'", containsString("Andorra"))
                .body("[2].'translations'.'fr'", containsString("Andorre"))
                .body("[2].'translations'.'ja'", containsString("アンドラ"))
                .body("[2].'translations'.'it'", containsString("Andorra"))
                ; // Skipping assertions on the remaining 50 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_64_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/oceania?fields=translations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(27))
                .body("[0].'translations'.'br'", containsString("Samoa Americana"))
                .body("[0].'translations'.'pt'", containsString("Samoa Americana"))
                .body("[0].'translations'.'nl'", containsString("Amerikaans Samoa"))
                .body("[0].'translations'.'hr'", containsString("Američka Samoa"))
                .body("[0].'translations'.'fa'", containsString("ساموآی آمریکا"))
                .body("[0].'translations'.'de'", containsString("Amerikanisch-Samoa"))
                .body("[0].'translations'.'es'", containsString("Samoa Americana"))
                .body("[0].'translations'.'fr'", containsString("Samoa américaines"))
                .body("[0].'translations'.'ja'", containsString("アメリカ領サモア"))
                .body("[0].'translations'.'it'", containsString("Samoa Americane"))
                .body("[1].'translations'.'br'", containsString("Austrália"))
                .body("[1].'translations'.'pt'", containsString("Austrália"))
                .body("[1].'translations'.'nl'", containsString("Australië"))
                .body("[1].'translations'.'hr'", containsString("Australija"))
                .body("[1].'translations'.'fa'", containsString("استرالیا"))
                .body("[1].'translations'.'de'", containsString("Australien"))
                .body("[1].'translations'.'es'", containsString("Australia"))
                .body("[1].'translations'.'fr'", containsString("Australie"))
                .body("[1].'translations'.'ja'", containsString("オーストラリア"))
                .body("[1].'translations'.'it'", containsString("Australia"))
                .body("[2].'translations'.'br'", containsString("Ilha Christmas"))
                .body("[2].'translations'.'pt'", containsString("Ilha do Natal"))
                .body("[2].'translations'.'nl'", containsString("Christmaseiland"))
                .body("[2].'translations'.'hr'", containsString("Božićni otok"))
                .body("[2].'translations'.'fa'", containsString("جزیره کریسمس"))
                .body("[2].'translations'.'de'", containsString("Weihnachtsinsel"))
                .body("[2].'translations'.'es'", containsString("Isla de Navidad"))
                .body("[2].'translations'.'fr'", containsString("Île Christmas"))
                .body("[2].'translations'.'ja'", containsString("クリスマス島"))
                .body("[2].'translations'.'it'", containsString("Isola di Natale"))
                ; // Skipping assertions on the remaining 24 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_65_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/polar?fields=alpha2Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha2Code'", containsString("AQ"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_66_getOnV2AlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha/{alphacode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Ruanda")
                .get(baseUrlOfSut + "/rest/v2/alpha/SX")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("Sint Maarten (Dutch part)"))
                .body("'topLevelDomain'.size()", equalTo(1))
                .body("'topLevelDomain'", hasItems(".sx"))
                .body("'alpha2Code'", containsString("SX"))
                .body("'alpha3Code'", containsString("SXM"))
                .body("'callingCodes'.size()", equalTo(1))
                .body("'callingCodes'", hasItems("1"))
                .body("'capital'", containsString("Philipsburg"))
                .body("'altSpellings'.size()", equalTo(1))
                .body("'altSpellings'", hasItems("SX"))
                .body("'region'", containsString("Americas"))
                .body("'subregion'", containsString("Caribbean"))
                .body("'population'", numberMatches(38247.0))
                .body("'latlng'.size()", equalTo(2))
                .body("'latlng'[0]", numberMatches(18.033333))
                .body("'latlng'[1]", numberMatches(-63.05))
                .body("'demonym'", containsString("Dutch"))
                .body("'area'", numberMatches(34.0))
                .body("'gini'", nullValue())
                .body("'timezones'.size()", equalTo(1))
                .body("'timezones'", hasItems("UTC-04:00"))
                .body("'borders'.size()", equalTo(1))
                .body("'borders'", hasItems("MAF"))
                .body("'nativeName'", containsString("Sint Maarten"))
                .body("'numericCode'", containsString("534"))
                .body("'currencies'.size()", equalTo(1))
                .body("'currencies'[0].'code'", containsString("ANG"))
                .body("'currencies'[0].'name'", containsString("Netherlands Antillean guilder"))
                .body("'currencies'[0].'symbol'", containsString("ƒ"))
                .body("'languages'.size()", equalTo(2))
                .body("'languages'[0].'iso639_1'", containsString("nl"))
                .body("'languages'[0].'iso639_2'", containsString("nld"))
                .body("'languages'[0].'name'", containsString("Dutch"))
                .body("'languages'[0].'nativeName'", containsString("Nederlands"))
                .body("'languages'[1].'iso639_1'", containsString("en"))
                .body("'languages'[1].'iso639_2'", containsString("eng"))
                .body("'languages'[1].'name'", containsString("English"))
                .body("'languages'[1].'nativeName'", containsString("English"))
                .body("'translations'.'de'", containsString("Sint Maarten (niederl. Teil)"))
                .body("'translations'.'es'", nullValue())
                .body("'translations'.'fr'", containsString("Saint Martin (partie néerlandaise)"))
                .body("'translations'.'ja'", nullValue())
                .body("'translations'.'it'", containsString("Saint Martin (parte olandese)"))
                .body("'translations'.'br'", containsString("Sint Maarten"))
                .body("'translations'.'pt'", containsString("São Martinho"))
                .body("'translations'.'nl'", containsString("Sint Maarten"))
                .body("'translations'.'hr'", nullValue())
                .body("'translations'.'fa'", containsString("سینت مارتن"))
                .body("'flag'", containsString("https://restcountries.eu/data/sxm.svg"))
                .body("'regionalBlocs'.size()", equalTo(0))
                .body("'cioc'", containsString(""));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_67_getOnV2CapitWithQueryParamsEmptyFieldsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/capital/{capital} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2084_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/capital/City%20of%20San%20Marino?" + 
                    "fields=&" + 
                    "EMextraParam123=_EM_2083_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("San Marino"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sm"))
                .body("[0].'alpha2Code'", containsString("SM"))
                .body("[0].'alpha3Code'", containsString("SMR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("378"))
                .body("[0].'capital'", containsString("City of San Marino"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("SM", "Republic of San Marino", "Repubblica di San Marino"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(33005.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(43.76666666))
                .body("[0].'latlng'[1]", numberMatches(12.41666666))
                .body("[0].'demonym'", containsString("Sammarinese"))
                .body("[0].'area'", numberMatches(61.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("ITA"))
                .body("[0].'nativeName'", containsString("San Marino"))
                .body("[0].'numericCode'", containsString("674"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("EUR"))
                .body("[0].'currencies'[0].'name'", containsString("Euro"))
                .body("[0].'currencies'[0].'symbol'", containsString("€"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("it"))
                .body("[0].'languages'[0].'iso639_2'", containsString("ita"))
                .body("[0].'languages'[0].'name'", containsString("Italian"))
                .body("[0].'languages'[0].'nativeName'", containsString("Italiano"))
                .body("[0].'translations'.'de'", containsString("San Marino"))
                .body("[0].'translations'.'es'", containsString("San Marino"))
                .body("[0].'translations'.'fr'", containsString("Saint-Marin"))
                .body("[0].'translations'.'ja'", containsString("サンマリノ"))
                .body("[0].'translations'.'it'", containsString("San Marino"))
                .body("[0].'translations'.'br'", containsString("San Marino"))
                .body("[0].'translations'.'pt'", containsString("São Marinho"))
                .body("[0].'translations'.'nl'", containsString("San Marino"))
                .body("[0].'translations'.'hr'", containsString("San Marino"))
                .body("[0].'translations'.'fa'", containsString("سان مارینو"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/smr.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("SMR"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_68_getOnDemonymReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/demonym/{demonym} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_160_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/demonym/Solomon%20Islander?" + 
                    "fields=_EM_159_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_69_getOnV2DemonymReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/demonym/{demonym} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/demonym/Montenegrin")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Montenegro"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".me"))
                .body("[0].'alpha2Code'", containsString("ME"))
                .body("[0].'alpha3Code'", containsString("MNE"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("382"))
                .body("[0].'capital'", containsString("Podgorica"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("ME", "Crna Gora"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(621810.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(42.5))
                .body("[0].'latlng'[1]", numberMatches(19.3))
                .body("[0].'demonym'", containsString("Montenegrin"))
                .body("[0].'area'", numberMatches(13812.0))
                .body("[0].'gini'", numberMatches(30.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("ALB", "BIH", "HRV", "KOS", "SRB"))
                .body("[0].'nativeName'", containsString("Црна Гора"))
                .body("[0].'numericCode'", containsString("499"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("EUR"))
                .body("[0].'currencies'[0].'name'", containsString("Euro"))
                .body("[0].'currencies'[0].'symbol'", containsString("€"))
                .body("[0].'languages'.size()", equalTo(4))
                .body("[0].'languages'[0].'iso639_1'", containsString("sr"))
                .body("[0].'languages'[0].'iso639_2'", containsString("srp"))
                .body("[0].'languages'[0].'name'", containsString("Serbian"))
                .body("[0].'languages'[0].'nativeName'", containsString("српски језик"))
                .body("[0].'languages'[1].'iso639_1'", containsString("bs"))
                .body("[0].'languages'[1].'iso639_2'", containsString("bos"))
                .body("[0].'languages'[1].'name'", containsString("Bosnian"))
                .body("[0].'languages'[1].'nativeName'", containsString("bosanski jezik"))
                .body("[0].'languages'[2].'iso639_1'", containsString("sq"))
                .body("[0].'languages'[2].'iso639_2'", containsString("sqi"))
                .body("[0].'languages'[2].'name'", containsString("Albanian"))
                .body("[0].'languages'[2].'nativeName'", containsString("Shqip"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("[0].'translations'.'de'", containsString("Montenegro"))
                .body("[0].'translations'.'es'", containsString("Montenegro"))
                .body("[0].'translations'.'fr'", containsString("Monténégro"))
                .body("[0].'translations'.'ja'", containsString("モンテネグロ"))
                .body("[0].'translations'.'it'", containsString("Montenegro"))
                .body("[0].'translations'.'br'", containsString("Montenegro"))
                .body("[0].'translations'.'pt'", containsString("Montenegro"))
                .body("[0].'translations'.'nl'", containsString("Montenegro"))
                .body("[0].'translations'.'hr'", containsString("Crna Gora"))
                .body("[0].'translations'.'fa'", containsString("مونته‌نگرو"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/mne.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("CEFTA"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Central European Free Trade Agreement"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("MNE"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_70_getOnDemonymReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/demonym/{demonym} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/Wallis%20and%20Futuna%20Islander?" + 
                    "fields=_EM_2781_XYZ_&" + 
                    "EMextraParam123=_EM_2744_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_71_getOnDemonymReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/demonym/{demonym} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/Swedish?" + 
                    "fields=_EM_14713_XYZ_&" + 
                    "EMextraParam123=_EM_14714_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_72_getOnDemonymReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/demonym/{demonym} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/Vietnamese?fields=topLevelDomain")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".vn"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_73_getOnDemonymReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/demonym/{demonym} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/Ugandan?fields=alpha3Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha3Code'", containsString("UGA"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_74_getOnDemonymReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/demonym/{demonym} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/Thai?fields=alpha2Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha2Code'", containsString("TH"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_75_getOnDemonymReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/demonym/{demonym} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/Vietnamese?fields=subregion")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'subregion'", containsString("South-Eastern Asia"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_76_getOnDemonymReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/demonym/{demonym} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/Palauan?fields=WF8GyhuhLNB")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_77_getOnCapitReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/capital/{capital} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/Abu%20Dhabi?" + 
                    "fields=_EM_22_XYZ_&" + 
                    "EMextraParam123=_EM_23_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_78_getOnCapitReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/capital/{capital} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/capital/Manila")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Philippines"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ph"))
                .body("[0].'alpha2Code'", containsString("PH"))
                .body("[0].'alpha3Code'", containsString("PHL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("63"))
                .body("[0].'capital'", containsString("Manila"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("PH", "Republic of the Philippines", "Repúblika ng Pilipinas"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("South-Eastern Asia"))
                .body("[0].'population'", numberMatches(1.032798E8))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(13.0))
                .body("[0].'latlng'[1]", numberMatches(122.0))
                .body("[0].'demonym'", containsString("Filipino"))
                .body("[0].'area'", numberMatches(342353.0))
                .body("[0].'gini'", numberMatches(43.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Pilipinas"))
                .body("[0].'numericCode'", containsString("608"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("PHP"))
                .body("[0].'currencies'[0].'name'", containsString("Philippine peso"))
                .body("[0].'currencies'[0].'symbol'", containsString("₱"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("en"))
                .body("[0].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[0].'name'", containsString("English"))
                .body("[0].'languages'[0].'nativeName'", containsString("English"))
                .body("[0].'translations'.'de'", containsString("Philippinen"))
                .body("[0].'translations'.'es'", containsString("Filipinas"))
                .body("[0].'translations'.'fr'", containsString("Philippines"))
                .body("[0].'translations'.'ja'", containsString("フィリピン"))
                .body("[0].'translations'.'it'", containsString("Filippine"))
                .body("[0].'translations'.'br'", containsString("Filipinas"))
                .body("[0].'translations'.'pt'", containsString("Filipinas"))
                .body("[0].'translations'.'nl'", containsString("Filipijnen"))
                .body("[0].'translations'.'hr'", containsString("Filipini"))
                .body("[0].'translations'.'fa'", containsString("جزایر الندفیلیپین"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/phl.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("ASEAN"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Association of Southeast Asian Nations"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("PHI"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_79_getOnCapitReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/capital/{capital} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/Pristina?fields=region")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'region'", containsString("Europe"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_80_getOnCapitReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/capital/{capital} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_8959_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/capital/Nuku'alofa?" + 
                    "fields=YRcNip&" + 
                    "EMextraParam123=_EM_8958_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_81_getOnCapitReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/capital/{capital} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/Lobamba?" + 
                    "fields=_EM_9074_XYZ_&" + 
                    "EMextraParam123=_EM_9075_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_82_getOnCapitReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/capital/{capital} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/Pristina?fields=name")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Republic of Kosovo"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_83_getOnCapitReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/capital/{capital} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/Pyongyang?fields=topLevelDomain")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".kp"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_84_getOnCallingcodReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/callingcode/{callingcode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Salomonen")
                .get(baseUrlOfSut + "/rest/v2/callingcode/974?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Qatar"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".qa"))
                .body("[0].'alpha2Code'", containsString("QA"))
                .body("[0].'alpha3Code'", containsString("QAT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("974"))
                .body("[0].'capital'", containsString("Doha"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("QA", "State of Qatar", "Dawlat Qaṭar"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(2587564.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(25.5))
                .body("[0].'latlng'[1]", numberMatches(51.25))
                .body("[0].'demonym'", containsString("Qatari"))
                .body("[0].'area'", numberMatches(11586.0))
                .body("[0].'gini'", numberMatches(41.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("SAU"))
                .body("[0].'nativeName'", containsString("قطر"))
                .body("[0].'numericCode'", containsString("634"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("QAR"))
                .body("[0].'currencies'[0].'name'", containsString("Qatari riyal"))
                .body("[0].'currencies'[0].'symbol'", containsString("ر.ق"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("ar"))
                .body("[0].'languages'[0].'iso639_2'", containsString("ara"))
                .body("[0].'languages'[0].'name'", containsString("Arabic"))
                .body("[0].'languages'[0].'nativeName'", containsString("العربية"))
                .body("[0].'translations'.'de'", containsString("Katar"))
                .body("[0].'translations'.'es'", containsString("Catar"))
                .body("[0].'translations'.'fr'", containsString("Qatar"))
                .body("[0].'translations'.'ja'", containsString("カタール"))
                .body("[0].'translations'.'it'", containsString("Qatar"))
                .body("[0].'translations'.'br'", containsString("Catar"))
                .body("[0].'translations'.'pt'", containsString("Catar"))
                .body("[0].'translations'.'nl'", containsString("Qatar"))
                .body("[0].'translations'.'hr'", containsString("Katar"))
                .body("[0].'translations'.'fa'", containsString("قطر"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/qat.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("AL"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Arab League"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(3))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("جامعة الدول العربية", "Jāmiʻat ad-Duwal al-ʻArabīyah", "League of Arab States"))
                .body("[0].'cioc'", containsString("QAT"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_85_getOnCallingcodReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/callingcode/{callingcode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_835_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/callingcode/509?fields=_EM_833_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_86_getOnCapitReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/capital/{capital} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/riga?fields=altSpellings")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("LV", "Republic of Latvia", "Latvijas Republika"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_87_getOnCallingcodReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/callingcode/{callingcode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/callingcode/63?fields=_EM_3064_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_88_getOnCallingcodReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/callingcode/{callingcode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/238?fields=CkLjNZQn7QeB8")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_89_getOnCallingcodReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/callingcode/{callingcode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/40?fields=_EM_14518_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_90_getOnCallingcodReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/callingcode/{callingcode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/callingcode/40?fields=alpha2Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha2Code'", containsString("RO"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_91_getOnCallingcodReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/callingcode/{callingcode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/27?fields=alpha3Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha3Code'", containsString("ZAF"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_92_getOnCallingcodReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/callingcode/{callingcode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/290?fields=capital")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'capital'", containsString("Jamestown"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_93_getOnCallingcodReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/callingcode/{callingcode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/383?fields=_EM_27021_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_94_getOnCallingcodReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/callingcode/{callingcode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/680?fields=5unQpUOLmEZoZ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_95_getOnCallingcodReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/callingcode/{callingcode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/222?fields=Rz4Hx2sYl")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_96_getOnCapitReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/capital/{capital} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/ouagadougou?fields=translations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'translations'.'br'", containsString("Burkina Faso"))
                .body("[0].'translations'.'pt'", containsString("Burquina Faso"))
                .body("[0].'translations'.'nl'", containsString("Burkina Faso"))
                .body("[0].'translations'.'hr'", containsString("Burkina Faso"))
                .body("[0].'translations'.'fa'", containsString("بورکینافاسو"))
                .body("[0].'translations'.'de'", containsString("Burkina Faso"))
                .body("[0].'translations'.'es'", containsString("Burkina Faso"))
                .body("[0].'translations'.'fr'", containsString("Burkina Faso"))
                .body("[0].'translations'.'ja'", containsString("ブルキナファソ"))
                .body("[0].'translations'.'it'", containsString("Burkina Faso"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_97_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/lang/Fi?EMextraParam123=_EM_2341_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Finland"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".fi"))
                .body("[0].'alpha2Code'", containsString("FI"))
                .body("[0].'alpha3Code'", containsString("FIN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("358"))
                .body("[0].'capital'", containsString("Helsinki"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("FI", "Suomi", "Republic of Finland", "Suomen tasavalta", "Republiken Finland"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(5491817.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(64.0))
                .body("[0].'latlng'[1]", numberMatches(26.0))
                .body("[0].'demonym'", containsString("Finnish"))
                .body("[0].'area'", numberMatches(338424.0))
                .body("[0].'gini'", numberMatches(26.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("NOR", "SWE", "RUS"))
                .body("[0].'nativeName'", containsString("Suomi"))
                .body("[0].'numericCode'", containsString("246"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("EUR"))
                .body("[0].'currencies'[0].'name'", containsString("Euro"))
                .body("[0].'currencies'[0].'symbol'", containsString("€"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("fi"))
                .body("[0].'languages'[0].'iso639_2'", containsString("fin"))
                .body("[0].'languages'[0].'name'", containsString("Finnish"))
                .body("[0].'languages'[0].'nativeName'", containsString("suomi"))
                .body("[0].'languages'[1].'iso639_1'", containsString("sv"))
                .body("[0].'languages'[1].'iso639_2'", containsString("swe"))
                .body("[0].'languages'[1].'name'", containsString("Swedish"))
                .body("[0].'languages'[1].'nativeName'", containsString("svenska"))
                .body("[0].'translations'.'de'", containsString("Finnland"))
                .body("[0].'translations'.'es'", containsString("Finlandia"))
                .body("[0].'translations'.'fr'", containsString("Finlande"))
                .body("[0].'translations'.'ja'", containsString("フィンランド"))
                .body("[0].'translations'.'it'", containsString("Finlandia"))
                .body("[0].'translations'.'br'", containsString("Finlândia"))
                .body("[0].'translations'.'pt'", containsString("Finlândia"))
                .body("[0].'translations'.'nl'", containsString("Finland"))
                .body("[0].'translations'.'hr'", containsString("Finska"))
                .body("[0].'translations'.'fa'", containsString("فنلاند"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/fin.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("EU"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("European Union"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("FIN"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_98_getOnCurrencReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/currency/{currency} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_180_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/currency/MOP?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Macao"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mo"))
                .body("[0].'alpha2Code'", containsString("MO"))
                .body("[0].'alpha3Code'", containsString("MAC"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("853"))
                .body("[0].'capital'", containsString(""))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("MO", "澳门", "Macao Special Administrative Region of the People's Republic of China", "中華人民共和國澳門特別行政區", "Região Administrativa Especial de Macau da República Popular da China"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Eastern Asia"))
                .body("[0].'population'", numberMatches(649100.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(22.16666666))
                .body("[0].'latlng'[1]", numberMatches(113.55))
                .body("[0].'demonym'", containsString("Chinese"))
                .body("[0].'area'", numberMatches(30.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("CHN"))
                .body("[0].'nativeName'", containsString("澳門"))
                .body("[0].'numericCode'", containsString("446"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("MOP"))
                .body("[0].'currencies'[0].'name'", containsString("Macanese pataca"))
                .body("[0].'currencies'[0].'symbol'", containsString("P"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("zh"))
                .body("[0].'languages'[0].'iso639_2'", containsString("zho"))
                .body("[0].'languages'[0].'name'", containsString("Chinese"))
                .body("[0].'languages'[0].'nativeName'", containsString("中文 (Zhōngwén)"))
                .body("[0].'languages'[1].'iso639_1'", containsString("pt"))
                .body("[0].'languages'[1].'iso639_2'", containsString("por"))
                .body("[0].'languages'[1].'name'", containsString("Portuguese"))
                .body("[0].'languages'[1].'nativeName'", containsString("Português"))
                .body("[0].'translations'.'de'", containsString("Macao"))
                .body("[0].'translations'.'es'", containsString("Macao"))
                .body("[0].'translations'.'fr'", containsString("Macao"))
                .body("[0].'translations'.'ja'", containsString("マカオ"))
                .body("[0].'translations'.'it'", containsString("Macao"))
                .body("[0].'translations'.'br'", containsString("Macau"))
                .body("[0].'translations'.'pt'", containsString("Macau"))
                .body("[0].'translations'.'nl'", containsString("Macao"))
                .body("[0].'translations'.'hr'", containsString("Makao"))
                .body("[0].'translations'.'fa'", containsString("مکائو"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/mac.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString(""));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_99_getOnV2LangWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1033_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/lang/KAT?" + 
                    "fields=_EM_11021_XYZ_&" + 
                    "EMextraParam123=_EM_1032_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_100_getOnV1NameReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/name/{name} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/Bm")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Bermuda"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bm"))
                .body("[0].'alpha2Code'", containsString("BM"))
                .body("[0].'alpha3Code'", containsString("BMU"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Hamilton"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("BM", "The Islands of Bermuda", "The Bermudas", "Somers Isles"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Northern America"))
                .body("[0].'population'", numberMatches(64237.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(32.33333333))
                .body("[0].'latlng'[1]", numberMatches(-64.75))
                .body("[0].'demonym'", containsString("Bermudian"))
                .body("[0].'area'", numberMatches(54.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Bermuda"))
                .body("[0].'numericCode'", containsString("060"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BMD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Bermuda"))
                .body("[0].'translations'.'es'", containsString("Bermudas"))
                .body("[0].'translations'.'fr'", containsString("Bermudes"))
                .body("[0].'translations'.'ja'", containsString("バミューダ"))
                .body("[0].'translations'.'it'", containsString("Bermuda"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_101_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/lang/KAL?fields=_EM_11027_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_102_getOnV2AlphaWithQueryParamsEmptyFieldsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha/{alphacode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha/CH?" + 
                    "fields=&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("Switzerland"))
                .body("'topLevelDomain'.size()", equalTo(1))
                .body("'topLevelDomain'", hasItems(".ch"))
                .body("'alpha2Code'", containsString("CH"))
                .body("'alpha3Code'", containsString("CHE"))
                .body("'callingCodes'.size()", equalTo(1))
                .body("'callingCodes'", hasItems("41"))
                .body("'capital'", containsString("Bern"))
                .body("'altSpellings'.size()", equalTo(6))
                .body("'altSpellings'", hasItems("CH", "Swiss Confederation", "Schweiz", "Suisse", "Svizzera", "Svizra"))
                .body("'region'", containsString("Europe"))
                .body("'subregion'", containsString("Western Europe"))
                .body("'population'", numberMatches(8341600.0))
                .body("'latlng'.size()", equalTo(2))
                .body("'latlng'[0]", numberMatches(47.0))
                .body("'latlng'[1]", numberMatches(8.0))
                .body("'demonym'", containsString("Swiss"))
                .body("'area'", numberMatches(41284.0))
                .body("'gini'", numberMatches(33.7))
                .body("'timezones'.size()", equalTo(1))
                .body("'timezones'", hasItems("UTC+01:00"))
                .body("'borders'.size()", equalTo(5))
                .body("'borders'", hasItems("AUT", "FRA", "ITA", "LIE", "DEU"))
                .body("'nativeName'", containsString("Schweiz"))
                .body("'numericCode'", containsString("756"))
                .body("'currencies'.size()", equalTo(1))
                .body("'currencies'[0].'code'", containsString("CHF"))
                .body("'currencies'[0].'name'", containsString("Swiss franc"))
                .body("'currencies'[0].'symbol'", containsString("Fr"))
                .body("'languages'.size()", equalTo(3))
                .body("'languages'[0].'iso639_1'", containsString("de"))
                .body("'languages'[0].'iso639_2'", containsString("deu"))
                .body("'languages'[0].'name'", containsString("German"))
                .body("'languages'[0].'nativeName'", containsString("Deutsch"))
                .body("'languages'[1].'iso639_1'", containsString("fr"))
                .body("'languages'[1].'iso639_2'", containsString("fra"))
                .body("'languages'[1].'name'", containsString("French"))
                .body("'languages'[1].'nativeName'", containsString("français"))
                .body("'languages'[2].'iso639_1'", containsString("it"))
                .body("'languages'[2].'iso639_2'", containsString("ita"))
                .body("'languages'[2].'name'", containsString("Italian"))
                .body("'languages'[2].'nativeName'", containsString("Italiano"))
                .body("'translations'.'de'", containsString("Schweiz"))
                .body("'translations'.'es'", containsString("Suiza"))
                .body("'translations'.'fr'", containsString("Suisse"))
                .body("'translations'.'ja'", containsString("スイス"))
                .body("'translations'.'it'", containsString("Svizzera"))
                .body("'translations'.'br'", containsString("Suíça"))
                .body("'translations'.'pt'", containsString("Suíça"))
                .body("'translations'.'nl'", containsString("Zwitserland"))
                .body("'translations'.'hr'", containsString("Švicarska"))
                .body("'translations'.'fa'", containsString("سوئیس"))
                .body("'flag'", containsString("https://restcountries.eu/data/che.svg"))
                .body("'regionalBlocs'.size()", equalTo(1))
                .body("'regionalBlocs'[0].'acronym'", containsString("EFTA"))
                .body("'regionalBlocs'[0].'name'", containsString("European Free Trade Association"))
                .body("'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("'cioc'", containsString("SUI"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_103_getOnNameReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/name/{name} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/Poland?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Poland"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".pl"))
                .body("[0].'alpha2Code'", containsString("PL"))
                .body("[0].'alpha3Code'", containsString("POL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("48"))
                .body("[0].'capital'", containsString("Warsaw"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("PL", "Republic of Poland", "Rzeczpospolita Polska"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(3.8484E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(52.0))
                .body("[0].'latlng'[1]", numberMatches(20.0))
                .body("[0].'demonym'", containsString("Polish"))
                .body("[0].'area'", numberMatches(312679.0))
                .body("[0].'gini'", numberMatches(34.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(7))
                .body("[0].'borders'", hasItems("BLR", "CZE", "DEU", "LTU", "RUS", "SVK", "UKR"))
                .body("[0].'nativeName'", containsString("Polska"))
                .body("[0].'numericCode'", containsString("616"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("PLN"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("pl"))
                .body("[0].'translations'.'de'", containsString("Polen"))
                .body("[0].'translations'.'es'", containsString("Polonia"))
                .body("[0].'translations'.'fr'", containsString("Pologne"))
                .body("[0].'translations'.'ja'", containsString("ポーランド"))
                .body("[0].'translations'.'it'", containsString("Polonia"))
                .body("[0].'relevance'", containsString("1.25"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_104_getOnV1NameWithQueryParamsFullTextReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/name/{name} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Saint Vincent und die Grenadinen")
                .get(baseUrlOfSut + "/rest/v1/name/Bm?" + 
                    "fullText=true&" + 
                    "EMextraParam123=_EM_545_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Bermuda"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bm"))
                .body("[0].'alpha2Code'", containsString("BM"))
                .body("[0].'alpha3Code'", containsString("BMU"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Hamilton"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("BM", "The Islands of Bermuda", "The Bermudas", "Somers Isles"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Northern America"))
                .body("[0].'population'", numberMatches(64237.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(32.33333333))
                .body("[0].'latlng'[1]", numberMatches(-64.75))
                .body("[0].'demonym'", containsString("Bermudian"))
                .body("[0].'area'", numberMatches(54.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Bermuda"))
                .body("[0].'numericCode'", containsString("060"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BMD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Bermuda"))
                .body("[0].'translations'.'es'", containsString("Bermudas"))
                .body("[0].'translations'.'fr'", containsString("Bermudes"))
                .body("[0].'translations'.'ja'", containsString("バミューダ"))
                .body("[0].'translations'.'it'", containsString("Bermuda"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_105_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/SICA?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(8))
                .body("[0].'name'", containsString("Belize"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bz"))
                .body("[0].'alpha2Code'", containsString("BZ"))
                .body("[0].'alpha3Code'", containsString("BLZ"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("501"))
                .body("[0].'capital'", containsString("Belmopan"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("BZ"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Central America"))
                .body("[0].'population'", numberMatches(370300.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(17.25))
                .body("[0].'latlng'[1]", numberMatches(-88.75))
                .body("[0].'demonym'", containsString("Belizean"))
                .body("[0].'area'", numberMatches(22966.0))
                .body("[0].'gini'", numberMatches(53.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-06:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("GTM", "MEX"))
                .body("[0].'nativeName'", containsString("Belize"))
                .body("[0].'numericCode'", containsString("084"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("BZD"))
                .body("[0].'currencies'[0].'name'", containsString("Belize dollar"))
                .body("[0].'currencies'[0].'symbol'", containsString("$"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("en"))
                .body("[0].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[0].'name'", containsString("English"))
                .body("[0].'languages'[0].'nativeName'", containsString("English"))
                .body("[0].'languages'[1].'iso639_1'", containsString("es"))
                .body("[0].'languages'[1].'iso639_2'", containsString("spa"))
                .body("[0].'languages'[1].'name'", containsString("Spanish"))
                .body("[0].'languages'[1].'nativeName'", containsString("Español"))
                .body("[0].'translations'.'de'", containsString("Belize"))
                .body("[0].'translations'.'es'", containsString("Belice"))
                .body("[0].'translations'.'fr'", containsString("Belize"))
                .body("[0].'translations'.'ja'", containsString("ベリーズ"))
                .body("[0].'translations'.'it'", containsString("Belize"))
                .body("[0].'translations'.'br'", containsString("Belize"))
                .body("[0].'translations'.'pt'", containsString("Belize"))
                .body("[0].'translations'.'nl'", containsString("Belize"))
                .body("[0].'translations'.'hr'", containsString("Belize"))
                .body("[0].'translations'.'fa'", containsString("بلیز"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/blz.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(2))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("CARICOM"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Caribbean Community"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(3))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("Comunidad del Caribe", "Communauté Caribéenne", "Caribische Gemeenschap"))
                .body("[0].'regionalBlocs'[1].'acronym'", containsString("CAIS"))
                .body("[0].'regionalBlocs'[1].'name'", containsString("Central American Integration System"))
                .body("[0].'regionalBlocs'[1].'otherAcronyms'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[1].'otherAcronyms'", hasItems("SICA"))
                .body("[0].'regionalBlocs'[1].'otherNames'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[1].'otherNames'", hasItems("Sistema de la Integración Centroamericana,"))
                .body("[0].'cioc'", containsString("BIZ"))
                .body("[1].'name'", containsString("Costa Rica"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".cr"))
                .body("[1].'alpha2Code'", containsString("CR"))
                .body("[1].'alpha3Code'", containsString("CRI"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("506"))
                .body("[1].'capital'", containsString("San José"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("CR", "Republic of Costa Rica", "República de Costa Rica"))
                .body("[1].'region'", containsString("Americas"))
                .body("[1].'subregion'", containsString("Central America"))
                .body("[1].'population'", numberMatches(4890379.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(10.0))
                .body("[1].'latlng'[1]", numberMatches(-84.0))
                .body("[1].'demonym'", containsString("Costa Rican"))
                .body("[1].'area'", numberMatches(51100.0))
                .body("[1].'gini'", numberMatches(50.7))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC-06:00"))
                .body("[1].'borders'.size()", equalTo(2))
                .body("[1].'borders'", hasItems("NIC", "PAN"))
                .body("[1].'nativeName'", containsString("Costa Rica"))
                .body("[1].'numericCode'", containsString("188"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("CRC"))
                .body("[1].'currencies'[0].'name'", containsString("Costa Rican colón"))
                .body("[1].'currencies'[0].'symbol'", containsString("₡"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'[0].'iso639_1'", containsString("es"))
                .body("[1].'languages'[0].'iso639_2'", containsString("spa"))
                .body("[1].'languages'[0].'name'", containsString("Spanish"))
                .body("[1].'languages'[0].'nativeName'", containsString("Español"))
                .body("[1].'translations'.'de'", containsString("Costa Rica"))
                .body("[1].'translations'.'es'", containsString("Costa Rica"))
                .body("[1].'translations'.'fr'", containsString("Costa Rica"))
                .body("[1].'translations'.'ja'", containsString("コスタリカ"))
                .body("[1].'translations'.'it'", containsString("Costa Rica"))
                .body("[1].'translations'.'br'", containsString("Costa Rica"))
                .body("[1].'translations'.'pt'", containsString("Costa Rica"))
                .body("[1].'translations'.'nl'", containsString("Costa Rica"))
                .body("[1].'translations'.'hr'", containsString("Kostarika"))
                .body("[1].'translations'.'fa'", containsString("کاستاریکا"))
                .body("[1].'flag'", containsString("https://restcountries.eu/data/cri.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[0].'acronym'", containsString("CAIS"))
                .body("[1].'regionalBlocs'[0].'name'", containsString("Central American Integration System"))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'", hasItems("SICA"))
                .body("[1].'regionalBlocs'[0].'otherNames'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[0].'otherNames'", hasItems("Sistema de la Integración Centroamericana,"))
                .body("[1].'cioc'", containsString("CRC"))
                .body("[2].'name'", containsString("Dominican Republic"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".do"))
                .body("[2].'alpha2Code'", containsString("DO"))
                .body("[2].'alpha3Code'", containsString("DOM"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("1"))
                .body("[2].'capital'", containsString("Santo Domingo"))
                .body("[2].'altSpellings'.size()", equalTo(1))
                .body("[2].'altSpellings'", hasItems("DO"))
                .body("[2].'region'", containsString("Americas"))
                .body("[2].'subregion'", containsString("Caribbean"))
                .body("[2].'population'", numberMatches(1.0075045E7))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(19.0))
                .body("[2].'latlng'[1]", numberMatches(-70.66666666))
                .body("[2].'demonym'", containsString("Dominican"))
                .body("[2].'area'", numberMatches(48671.0))
                .body("[2].'gini'", numberMatches(47.2))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC-04:00"))
                .body("[2].'borders'.size()", equalTo(1))
                .body("[2].'borders'", hasItems("HTI"))
                .body("[2].'nativeName'", containsString("República Dominicana"))
                .body("[2].'numericCode'", containsString("214"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'[0].'code'", containsString("DOP"))
                .body("[2].'currencies'[0].'name'", containsString("Dominican peso"))
                .body("[2].'currencies'[0].'symbol'", containsString("$"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'[0].'iso639_1'", containsString("es"))
                .body("[2].'languages'[0].'iso639_2'", containsString("spa"))
                .body("[2].'languages'[0].'name'", containsString("Spanish"))
                .body("[2].'languages'[0].'nativeName'", containsString("Español"))
                .body("[2].'translations'.'de'", containsString("Dominikanische Republik"))
                .body("[2].'translations'.'es'", containsString("República Dominicana"))
                .body("[2].'translations'.'fr'", containsString("République dominicaine"))
                .body("[2].'translations'.'ja'", containsString("ドミニカ共和国"))
                .body("[2].'translations'.'it'", containsString("Repubblica Dominicana"))
                .body("[2].'translations'.'br'", containsString("República Dominicana"))
                .body("[2].'translations'.'pt'", containsString("República Dominicana"))
                .body("[2].'translations'.'nl'", containsString("Dominicaanse Republiek"))
                .body("[2].'translations'.'hr'", containsString("Dominikanska Republika"))
                .body("[2].'translations'.'fa'", containsString("جمهوری دومینیکن"))
                .body("[2].'flag'", containsString("https://restcountries.eu/data/dom.svg"))
                .body("[2].'regionalBlocs'.size()", equalTo(2))
                .body("[2].'regionalBlocs'[0].'acronym'", containsString("CARICOM"))
                .body("[2].'regionalBlocs'[0].'name'", containsString("Caribbean Community"))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[2].'regionalBlocs'[0].'otherNames'.size()", equalTo(3))
                .body("[2].'regionalBlocs'[0].'otherNames'", hasItems("Comunidad del Caribe", "Communauté Caribéenne", "Caribische Gemeenschap"))
                .body("[2].'regionalBlocs'[1].'acronym'", containsString("CAIS"))
                .body("[2].'regionalBlocs'[1].'name'", containsString("Central American Integration System"))
                .body("[2].'regionalBlocs'[1].'otherAcronyms'.size()", equalTo(1))
                .body("[2].'regionalBlocs'[1].'otherAcronyms'", hasItems("SICA"))
                .body("[2].'regionalBlocs'[1].'otherNames'.size()", equalTo(1))
                .body("[2].'regionalBlocs'[1].'otherNames'", hasItems("Sistema de la Integración Centroamericana,"))
                .body("[2].'cioc'", containsString("DOM"))
                ; // Skipping assertions on the remaining 5 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_106_getOnNameReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/name/{name} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/Sudan?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("South Sudan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ss"))
                .body("[0].'alpha2Code'", containsString("SS"))
                .body("[0].'alpha3Code'", containsString("SSD"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("211"))
                .body("[0].'capital'", containsString("Juba"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("SS"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Middle Africa"))
                .body("[0].'population'", numberMatches(1.1892934E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(7.0))
                .body("[0].'latlng'[1]", numberMatches(30.0))
                .body("[0].'demonym'", containsString("South Sudanese"))
                .body("[0].'area'", numberMatches(619745.0))
                .body("[0].'gini'", numberMatches(45.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("CAF", "COD", "ETH", "KEN", "SDN", "UGA"))
                .body("[0].'nativeName'", containsString("South Sudan"))
                .body("[0].'numericCode'", containsString("728"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("SSP"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Südsudan"))
                .body("[0].'translations'.'es'", containsString("Sudán del Sur"))
                .body("[0].'translations'.'fr'", containsString("Soudan du Sud"))
                .body("[0].'translations'.'ja'", containsString("南スーダン"))
                .body("[0].'translations'.'it'", containsString("Sudan del sud"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Sudan"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".sd"))
                .body("[1].'alpha2Code'", containsString("SD"))
                .body("[1].'alpha3Code'", containsString("SDN"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("249"))
                .body("[1].'capital'", containsString("Khartoum"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("SD", "Republic of the Sudan", "Jumhūrīyat as-Sūdān"))
                .body("[1].'region'", containsString("Africa"))
                .body("[1].'subregion'", containsString("Northern Africa"))
                .body("[1].'population'", numberMatches(3.8435252E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(15.0))
                .body("[1].'latlng'[1]", numberMatches(30.0))
                .body("[1].'demonym'", containsString("Sudanese"))
                .body("[1].'area'", numberMatches(1886068.0))
                .body("[1].'gini'", numberMatches(35.3))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+03:00"))
                .body("[1].'borders'.size()", equalTo(7))
                .body("[1].'borders'", hasItems("CAF", "TCD", "EGY", "ERI", "ETH", "LBY", "SSD"))
                .body("[1].'nativeName'", containsString("السودان"))
                .body("[1].'numericCode'", containsString("729"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("SDG"))
                .body("[1].'languages'.size()", equalTo(2))
                .body("[1].'languages'", hasItems("ar", "en"))
                .body("[1].'translations'.'de'", containsString("Sudan"))
                .body("[1].'translations'.'es'", containsString("Sudán"))
                .body("[1].'translations'.'fr'", containsString("Soudan"))
                .body("[1].'translations'.'ja'", containsString("スーダン"))
                .body("[1].'translations'.'it'", containsString("Sudan"))
                .body("[1].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_107_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/USAN?fields=or1NGea")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(15))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_108_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2168_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/UNASUR?fields=CseDOYj8XlTjU")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(15))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_109_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/AU?fields=alpha2Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(60))
                .body("[0].'alpha2Code'", containsString("DZ"))
                .body("[1].'alpha2Code'", containsString("AO"))
                .body("[2].'alpha2Code'", containsString("BJ"))
                ; // Skipping assertions on the remaining 57 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_110_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2168_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/UNASUL?" + 
                    "fields=capital&" + 
                    "EMextraParam123=_EM_2167_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(15))
                .body("[0].'capital'", containsString("Buenos Aires"))
                .body("[1].'capital'", containsString("Sucre"))
                .body("[2].'capital'", containsString("Brasília"))
                ; // Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_111_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Senegal")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/UZAN?" + 
                    "fields=_EM_4841_XYZ_&" + 
                    "EMextraParam123=_EM_3066_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(15))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_112_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/AL?" + 
                    "fields=translations&" + 
                    "EMextraParam123=_EM_3066_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(22))
                .body("[0].'translations'.'br'", containsString("Argélia"))
                .body("[0].'translations'.'pt'", containsString("Argélia"))
                .body("[0].'translations'.'nl'", containsString("Algerije"))
                .body("[0].'translations'.'hr'", containsString("Alžir"))
                .body("[0].'translations'.'fa'", containsString("الجزایر"))
                .body("[0].'translations'.'de'", containsString("Algerien"))
                .body("[0].'translations'.'es'", containsString("Argelia"))
                .body("[0].'translations'.'fr'", containsString("Algérie"))
                .body("[0].'translations'.'ja'", containsString("アルジェリア"))
                .body("[0].'translations'.'it'", containsString("Algeria"))
                .body("[1].'translations'.'br'", containsString("Bahrein"))
                .body("[1].'translations'.'pt'", containsString("Barém"))
                .body("[1].'translations'.'nl'", containsString("Bahrein"))
                .body("[1].'translations'.'hr'", containsString("Bahrein"))
                .body("[1].'translations'.'fa'", containsString("بحرین"))
                .body("[1].'translations'.'de'", containsString("Bahrain"))
                .body("[1].'translations'.'es'", containsString("Bahrein"))
                .body("[1].'translations'.'fr'", containsString("Bahreïn"))
                .body("[1].'translations'.'ja'", containsString("バーレーン"))
                .body("[1].'translations'.'it'", containsString("Bahrein"))
                .body("[2].'translations'.'br'", containsString("Comores"))
                .body("[2].'translations'.'pt'", containsString("Comores"))
                .body("[2].'translations'.'nl'", containsString("Comoren"))
                .body("[2].'translations'.'hr'", containsString("Komori"))
                .body("[2].'translations'.'fa'", containsString("کومور"))
                .body("[2].'translations'.'de'", containsString("Union der Komoren"))
                .body("[2].'translations'.'es'", containsString("Comoras"))
                .body("[2].'translations'.'fr'", containsString("Comores"))
                .body("[2].'translations'.'ja'", containsString("コモロ"))
                .body("[2].'translations'.'it'", containsString("Comore"))
                ; // Skipping assertions on the remaining 19 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_113_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2168_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/UNASUL?" + 
                    "fields=name&" + 
                    "EMextraParam123=_EM_2167_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(15))
                .body("[0].'name'", containsString("Argentina"))
                .body("[1].'name'", containsString("Bolivia (Plurinational State of)"))
                .body("[2].'name'", containsString("Brazil"))
                ; // Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_114_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/UNASUL?fields=region")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(15))
                .body("[0].'region'", containsString("Americas"))
                .body("[1].'region'", containsString("Americas"))
                .body("[2].'region'", containsString("Americas"))
                ; // Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_115_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Senegal")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/ASEAN?" + 
                    "fields=alpha2Code&" + 
                    "EMextraParam123=_EM_3066_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(10))
                .body("[0].'alpha2Code'", containsString("BN"))
                .body("[1].'alpha2Code'", containsString("KH"))
                .body("[2].'alpha2Code'", containsString("ID"))
                ; // Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_116_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2168_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/UNASUL?fields=subregion")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(15))
                .body("[0].'subregion'", containsString("South America"))
                .body("[1].'subregion'", containsString("South America"))
                .body("[2].'subregion'", containsString("South America"))
                ; // Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_117_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/CAIS?" + 
                    "fields=alpha2Code&" + 
                    "EMextraParam123=_EM_3066_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(8))
                .body("[0].'alpha2Code'", containsString("BZ"))
                .body("[1].'alpha2Code'", containsString("CR"))
                .body("[2].'alpha2Code'", containsString("DO"))
                ; // Skipping assertions on the remaining 5 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_118_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Senegal")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/CAIS?fields=alpha3Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(8))
                .body("[0].'alpha3Code'", containsString("BLZ"))
                .body("[1].'alpha3Code'", containsString("CRI"))
                .body("[2].'alpha3Code'", containsString("DOM"))
                ; // Skipping assertions on the remaining 5 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_119_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/CARICOM?fields=altSpellings")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(15))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("AG"))
                .body("[1].'altSpellings'.size()", equalTo(2))
                .body("[1].'altSpellings'", hasItems("BS", "Commonwealth of the Bahamas"))
                .body("[2].'altSpellings'.size()", equalTo(1))
                .body("[2].'altSpellings'", hasItems("BB"))
                ; // Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_120_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Senegal")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/CEFTA?" + 
                    "fields=altSpellings&" + 
                    "EMextraParam123=_EM_3066_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(7))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("AL", "Shqipëri", "Shqipëria", "Shqipnia"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("BA", "Bosnia-Herzegovina", "Босна и Херцеговина"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("MK", "Republic of Macedonia", "Република Македонија"))
                ; // Skipping assertions on the remaining 4 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_121_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2168_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/UNASUL?" + 
                    "fields=topLevelDomain&" + 
                    "EMextraParam123=_EM_2167_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(15))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ar"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".bo"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".br"))
                ; // Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_122_getOnCurrencReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/currency/{currency} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/SAR?fields=vW")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_123_getOnCurrencReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/currency/{currency} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/TND?fields=name")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Tunisia"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_124_getOnCurrencReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/currency/{currency} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/currency/SOS?" + 
                    "fields=ihpHlvU8C3nQ&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_125_getOnCurrencReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/currency/{currency} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_5229_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/currency/RWF?fields=subregion")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'subregion'", containsString("Eastern Africa"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_126_getOnCurrencReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/currency/{currency} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/PHP?fields=_EM_26422_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_127_getOnCurrencReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/currency/{currency} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/SHP?" + 
                    "fields=_EM_12151_XYZ_&" + 
                    "EMextraParam123=_EM_12152_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_128_getOnCurrencReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/currency/{currency} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/MDL?" + 
                    "fields=alpha3Code&" + 
                    "EMextraParam123=_EM_12874_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha3Code'", containsString("MDA"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_129_getOnCurrencReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/currency/{currency} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_18080_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/currency/TZS?fields=_EM_18079_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_130_getOnCurrencReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/currency/{currency} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/TMT?fields=alpha2Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha2Code'", containsString("TM"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_131_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_522_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "fields=_EM_521_XYZ_&" + 
                    "codes=lS&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_132_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "fields=translations&" + 
                    "codes=HU")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'translations'.'br'", containsString("Hungria"))
                .body("[0].'translations'.'pt'", containsString("Hungria"))
                .body("[0].'translations'.'nl'", containsString("Hongarije"))
                .body("[0].'translations'.'hr'", containsString("Mađarska"))
                .body("[0].'translations'.'fa'", containsString("مجارستان"))
                .body("[0].'translations'.'de'", containsString("Ungarn"))
                .body("[0].'translations'.'es'", containsString("Hungría"))
                .body("[0].'translations'.'fr'", containsString("Hongrie"))
                .body("[0].'translations'.'ja'", containsString("ハンガリー"))
                .body("[0].'translations'.'it'", containsString("Ungheria"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_133_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "fields=subregion&" + 
                    "codes=MNP")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'subregion'", containsString("Micronesia"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_134_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "fields=region&" + 
                    "codes=MNP")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'region'", containsString("Oceania"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_135_getOnNameReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/name/{name} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/Sint%20Maarten?" + 
                    "fields=topLevelDomain&" + 
                    "EMextraParam123=_EM_18585_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sx"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_136_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "fields=topLevelDomain&" + 
                    "codes=MNP")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mp"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_137_getOnNameReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/name/{name} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/Slovakia?" + 
                    "fields=_EM_8003_XYZ_&" + 
                    "fullText=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_138_getOnNameReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/name/{name} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/name/Tuvalu?" + 
                    "fields=_EM_19053_XYZ_&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_139_getOnNameReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/name/{name} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/United%20Arab%20Emirate?" + 
                    "fields=translations&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'translations'.'br'", containsString("Emirados árabes Unidos"))
                .body("[0].'translations'.'pt'", containsString("Emirados árabes Unidos"))
                .body("[0].'translations'.'nl'", containsString("Verenigde Arabische Emiraten"))
                .body("[0].'translations'.'hr'", containsString("Ujedinjeni Arapski Emirati"))
                .body("[0].'translations'.'fa'", containsString("امارات متحده عربی"))
                .body("[0].'translations'.'de'", containsString("Vereinigte Arabische Emirate"))
                .body("[0].'translations'.'es'", containsString("Emiratos Árabes Unidos"))
                .body("[0].'translations'.'fr'", containsString("Émirats arabes unis"))
                .body("[0].'translations'.'ja'", containsString("アラブ首長国連邦"))
                .body("[0].'translations'.'it'", containsString("Emirati Arabi Uniti"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_140_getOnNameReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/name/{name} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/Trinidad%20and%20Tobago?" + 
                    "fields=name&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Trinidad and Tobago"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_141_getOnV2NameWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/name/{name} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/Togo?fields=region")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'region'", containsString("Africa"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_142_getOnNameReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/name/{name} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Pitcairn")
                .get(baseUrlOfSut + "/rest/v2/name/Réunion?" + 
                    "fullText=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Réunion"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".re"))
                .body("[0].'alpha2Code'", containsString("RE"))
                .body("[0].'alpha3Code'", containsString("REU"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("262"))
                .body("[0].'capital'", containsString("Saint-Denis"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("RE", "Reunion"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(840974.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-21.15))
                .body("[0].'latlng'[1]", numberMatches(55.5))
                .body("[0].'demonym'", containsString("French"))
                .body("[0].'area'", nullValue())
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("La Réunion"))
                .body("[0].'numericCode'", containsString("638"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("EUR"))
                .body("[0].'currencies'[0].'name'", containsString("Euro"))
                .body("[0].'currencies'[0].'symbol'", containsString("€"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("fr"))
                .body("[0].'languages'[0].'iso639_2'", containsString("fra"))
                .body("[0].'languages'[0].'name'", containsString("French"))
                .body("[0].'languages'[0].'nativeName'", containsString("français"))
                .body("[0].'translations'.'de'", containsString("Réunion"))
                .body("[0].'translations'.'es'", containsString("Reunión"))
                .body("[0].'translations'.'fr'", containsString("Réunion"))
                .body("[0].'translations'.'ja'", containsString("レユニオン"))
                .body("[0].'translations'.'it'", containsString("Riunione"))
                .body("[0].'translations'.'br'", containsString("Reunião"))
                .body("[0].'translations'.'pt'", containsString("Reunião"))
                .body("[0].'translations'.'nl'", containsString("Réunion"))
                .body("[0].'translations'.'hr'", containsString("Réunion"))
                .body("[0].'translations'.'fa'", containsString("رئونیون"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/reu.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[0].'cioc'", containsString(""));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_143_getOnNameReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/name/{name} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/danmark?" + 
                    "fields=vnyUeq&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_144_getOnNameReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/name/{name} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/Northern%20Mariana%20Islands?" + 
                    "fields=alpha2Code&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha2Code'", containsString("MP"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_145_getOnNameReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/name/{name} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/dawlat%20libya?" + 
                    "fields=vnyUeq&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_146_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/region/kZ%5CaQ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_147_getOnSubregionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/subregion/{subregion} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/eu%60nrKOia%20%5Cdc@NFKZZealaHl")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_148_getOnCapitReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/capital/{capital} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/Mani%5Ca")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/currency/{currency}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_149_getOnV1CurrencReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/currency/{currency} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/currency/WS%5C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/alpha/{alphacode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_150_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/alpha/{alphacode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/alpha/%5CK")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_151_getOnCallingcodReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/callingcode/{callingcode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/4%5C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_152_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/jEOAAUXk%5C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_153_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/EUI%5Cq?fields=BTwhEf9_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_154_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha/{alphacode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha/B%5C?fields=2n")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_155_getOnCapitReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/capital/{capital} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/Kathman%5Cu")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_156_getOnDemonymReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/demonym/{demonym} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/Ta%5Czhik?fields=_EM_15628_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_157_getOnV2CallingcodReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/callingcode/{callingcode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/9%5C7")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_158_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/lang/k%5C?fields=Cp9syBRJQ6Qfa")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_159_getOnCurrencReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/currency/{currency} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/%5CND?fields=region")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_160_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/Po%5Car?fields=alpha3Code")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_161_getOnSubregionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/subregion/{subregion} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/%5BM%5CaC2sLa?fields=alpha3Code")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_162_getOnSubregionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/subregion/{subregion} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/%5BM%5CaC2sLa?fields=altSpellings")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_163_getOnNameReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/name/{name} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/Trinida%5C%20and%20Tobago?" + 
                    "fields=region&" + 
                    "fullText=false")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/alpha
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_164_getOnV1AlphaWithQueryParamEmptyCodesReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/alpha -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Swasiland")
                .get(baseUrlOfSut + "/rest/v1/alpha?codes=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/alpha/{alphacode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_165_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/alpha/{alphacode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/alpha/K?EMextraParam123=_EM_0_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/alpha
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_166_getOnV2AlphaWithQueryParamsEmptyCodesReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "fields=HJ5T&" + 
                    "codes=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/currency/{currency}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_167_getOnCurrencReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/currency/{currency} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/currency/B0fWymHByT?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_168_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha/{alphacode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_325_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/alpha/R?fields=_EM_323_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/alpha
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_169_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/alpha -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_623_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/alpha?" + 
                    "codes=f&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_170_getOnCurrencReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/currency/{currency} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/currency/_EM_18_XYZ_?" + 
                    "fields=_ZKh8NZ3mdAOmfP&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/alpha/{alphacode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_171_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/alpha/{alphacode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/alpha/hBeWV6owMCZ9?EMextraParam123=_EM_0_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/alpha
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_172_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1248_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "fields=_EM_1247_XYZ_&" + 
                    "codes=E")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_173_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha/{alphacode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/alpha/9kim2UGI7KdhcduS?EMextraParam123=_EM_1_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/alpha
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_174_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/alpha -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/alpha?" + 
                    "codes=nHqD&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/alpha
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_175_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_17_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/alpha?codes=_EM_16_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_176_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/lang/P5ngYAcC?fields=_EM_29_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_177_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/region/_EM_7_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_178_getOnSubregionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/subregion/{subregion} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Népal")
                .get(baseUrlOfSut + "/rest/v1/subregion/_EM_9_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_179_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/Eurqpe?fields=name")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_180_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/_EM_53771_XYZ_?fields=subregion")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_181_getOnSubregionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/subregion/{subregion} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_24190_XYZ_?fields=name")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_182_getOnDemonymReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/demonym/{demonym} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/Panamania?fields=Ul%40HJ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_183_getOnDemonymReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/demonym/{demonym} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_14715_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_14737_XYZ_?fields=translations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_184_getOnCapitReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/capital/{capital} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_813_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_811_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_185_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_10_XYZ_?EMextraParam123=_EM_11_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_186_getOnCapitReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/capital/{capital} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_44_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_187_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_453_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_188_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/f7IfM_K7bRne8?EMextraParam123=_EM_1874_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_189_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_1999_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_190_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_3511_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_191_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/lang/pWMkX")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_192_getOnCallingcodReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/callingcode/{callingcode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_2035_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_193_getOnCallingcodReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/callingcode/{callingcode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_21_XYZ_?fields=_EM_20_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_194_getOnCallingcodReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/callingcode/{callingcode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/h?fields=name")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/alpha/{alphacode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_195_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/alpha/{alphacode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/alpha/ZE?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_196_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/lang/GBL?EMextraParam123=_EM_1032_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_197_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha/{alphacode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha/h29?fields=_EM_1373_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/currency/{currency}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_198_getOnCurrencReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/currency/{currency} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/currency/Phc?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_199_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/NJE4iidH6aS?fields=_EM_4555_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_200_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/_EM_4685_XYZ_?fields=1gH")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_201_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/_EM_5728_XYZ_?fields=_EM_5727_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_202_getOnCurrencReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/currency/{currency} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/CHE?EMextraParam123=_EM_182_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_203_getOnNameReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/name/{name} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/name/cT7Xvs?" + 
                    "fullText=true&" + 
                    "EMextraParam123=_EM_19_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_204_getOnV1NameWithQueryParamFullTextReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/name/{name} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_598_XYZ_?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }


}
