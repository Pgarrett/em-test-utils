/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-08-18T23:13:55.765-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 58 tests
 * <br>
*  Covered targets: 171
 * <br>
*  Used time: 0h 15m 59s
 * <br>
*  Needed budget for current results: 82%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static String baseUrlOfSut = "http://localhost:8080";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    /**
    * Calls:
    * (500) GET:/rest/v2/alpha
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_0_getOnAlphaShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. null.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "fields=KP&" + 
                    "codes=KRW")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'message'", containsString("Internal Server Error"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/alpha?codes=AUD")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0]", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_2_getOnV2AllReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("[0].'name'", containsString("Afghanistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".af"))
                .body("[0].'alpha2Code'", containsString("AF"))
                .body("[0].'alpha3Code'", containsString("AFG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("93"))
                .body("[0].'capital'", containsString("Kabul"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("AF", "Afġānistān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(2.7657145E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(33.0))
                .body("[0].'latlng'[1]", numberMatches(65.0))
                .body("[0].'demonym'", containsString("Afghan"))
                .body("[0].'area'", numberMatches(652230.0))
                .body("[0].'gini'", numberMatches(27.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:30"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("IRN", "PAK", "TKM", "UZB", "TJK", "CHN"))
                .body("[0].'nativeName'", containsString("افغانستان"))
                .body("[0].'numericCode'", containsString("004"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("AFN"))
                .body("[0].'currencies'[0].'name'", containsString("Afghan afghani"))
                .body("[0].'currencies'[0].'symbol'", containsString("؋"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'[0].'iso639_1'", containsString("ps"))
                .body("[0].'languages'[0].'iso639_2'", containsString("pus"))
                .body("[0].'languages'[0].'name'", containsString("Pashto"))
                .body("[0].'languages'[0].'nativeName'", containsString("پښتو"))
                .body("[0].'languages'[1].'iso639_1'", containsString("uz"))
                .body("[0].'languages'[1].'iso639_2'", containsString("uzb"))
                .body("[0].'languages'[1].'name'", containsString("Uzbek"))
                .body("[0].'languages'[1].'nativeName'", containsString("Oʻzbek"))
                .body("[0].'languages'[2].'iso639_1'", containsString("tk"))
                .body("[0].'languages'[2].'iso639_2'", containsString("tuk"))
                .body("[0].'languages'[2].'name'", containsString("Turkmen"))
                .body("[0].'languages'[2].'nativeName'", containsString("Türkmen"))
                .body("[0].'translations'.'de'", containsString("Afghanistan"))
                .body("[0].'translations'.'es'", containsString("Afganistán"))
                .body("[0].'translations'.'fr'", containsString("Afghanistan"))
                .body("[0].'translations'.'ja'", containsString("アフガニスタン"))
                .body("[0].'translations'.'it'", containsString("Afghanistan"))
                .body("[0].'translations'.'br'", containsString("Afeganistão"))
                .body("[0].'translations'.'pt'", containsString("Afeganistão"))
                .body("[0].'translations'.'nl'", containsString("Afghanistan"))
                .body("[0].'translations'.'hr'", containsString("Afganistan"))
                .body("[0].'translations'.'fa'", containsString("افغانستان"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/afg.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("SAARC"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("South Asian Association for Regional Cooperation"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("AFG"))
                .body("[1].'name'", containsString("Åland Islands"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ax"))
                .body("[1].'alpha2Code'", containsString("AX"))
                .body("[1].'alpha3Code'", containsString("ALA"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("358"))
                .body("[1].'capital'", containsString("Mariehamn"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("AX", "Aaland", "Aland", "Ahvenanmaa"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Northern Europe"))
                .body("[1].'population'", numberMatches(28875.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(60.116667))
                .body("[1].'latlng'[1]", numberMatches(19.9))
                .body("[1].'demonym'", containsString("Ålandish"))
                .body("[1].'area'", numberMatches(1580.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+02:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Åland"))
                .body("[1].'numericCode'", containsString("248"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("EUR"))
                .body("[1].'currencies'[0].'name'", containsString("Euro"))
                .body("[1].'currencies'[0].'symbol'", containsString("€"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'[0].'iso639_1'", containsString("sv"))
                .body("[1].'languages'[0].'iso639_2'", containsString("swe"))
                .body("[1].'languages'[0].'name'", containsString("Swedish"))
                .body("[1].'languages'[0].'nativeName'", containsString("svenska"))
                .body("[1].'translations'.'de'", containsString("Åland"))
                .body("[1].'translations'.'es'", containsString("Alandia"))
                .body("[1].'translations'.'fr'", containsString("Åland"))
                .body("[1].'translations'.'ja'", containsString("オーランド諸島"))
                .body("[1].'translations'.'it'", containsString("Isole Aland"))
                .body("[1].'translations'.'br'", containsString("Ilhas de Aland"))
                .body("[1].'translations'.'pt'", containsString("Ilhas de Aland"))
                .body("[1].'translations'.'nl'", containsString("Ålandeilanden"))
                .body("[1].'translations'.'hr'", containsString("Ålandski otoci"))
                .body("[1].'translations'.'fa'", containsString("جزایر الند"))
                .body("[1].'flag'", containsString("https://restcountries.eu/data/ala.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[0].'acronym'", containsString("EU"))
                .body("[1].'regionalBlocs'[0].'name'", containsString("European Union"))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[1].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[1].'cioc'", containsString(""))
                .body("[2].'name'", containsString("Albania"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".al"))
                .body("[2].'alpha2Code'", containsString("AL"))
                .body("[2].'alpha3Code'", containsString("ALB"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("355"))
                .body("[2].'capital'", containsString("Tirana"))
                .body("[2].'altSpellings'.size()", equalTo(4))
                .body("[2].'altSpellings'", hasItems("AL", "Shqipëri", "Shqipëria", "Shqipnia"))
                .body("[2].'region'", containsString("Europe"))
                .body("[2].'subregion'", containsString("Southern Europe"))
                .body("[2].'population'", numberMatches(2886026.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(41.0))
                .body("[2].'latlng'[1]", numberMatches(20.0))
                .body("[2].'demonym'", containsString("Albanian"))
                .body("[2].'area'", numberMatches(28748.0))
                .body("[2].'gini'", numberMatches(34.5))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(4))
                .body("[2].'borders'", hasItems("MNE", "GRC", "MKD", "KOS"))
                .body("[2].'nativeName'", containsString("Shqipëria"))
                .body("[2].'numericCode'", containsString("008"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'[0].'code'", containsString("ALL"))
                .body("[2].'currencies'[0].'name'", containsString("Albanian lek"))
                .body("[2].'currencies'[0].'symbol'", containsString("L"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'[0].'iso639_1'", containsString("sq"))
                .body("[2].'languages'[0].'iso639_2'", containsString("sqi"))
                .body("[2].'languages'[0].'name'", containsString("Albanian"))
                .body("[2].'languages'[0].'nativeName'", containsString("Shqip"))
                .body("[2].'translations'.'de'", containsString("Albanien"))
                .body("[2].'translations'.'es'", containsString("Albania"))
                .body("[2].'translations'.'fr'", containsString("Albanie"))
                .body("[2].'translations'.'ja'", containsString("アルバニア"))
                .body("[2].'translations'.'it'", containsString("Albania"))
                .body("[2].'translations'.'br'", containsString("Albânia"))
                .body("[2].'translations'.'pt'", containsString("Albânia"))
                .body("[2].'translations'.'nl'", containsString("Albanië"))
                .body("[2].'translations'.'hr'", containsString("Albanija"))
                .body("[2].'translations'.'fa'", containsString("آلبانی"))
                .body("[2].'flag'", containsString("https://restcountries.eu/data/alb.svg"))
                .body("[2].'regionalBlocs'.size()", equalTo(1))
                .body("[2].'regionalBlocs'[0].'acronym'", containsString("CEFTA"))
                .body("[2].'regionalBlocs'[0].'name'", containsString("Central European Free Trade Agreement"))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[2].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[2].'cioc'", containsString("ALB"))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/alpha
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_3_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/alpha?codes=VUV")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0]", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/all
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_4_getOnV1AllReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("[0].'name'", containsString("Afghanistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".af"))
                .body("[0].'alpha2Code'", containsString("AF"))
                .body("[0].'alpha3Code'", containsString("AFG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("93"))
                .body("[0].'capital'", containsString("Kabul"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("AF", "Afġānistān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(2.60231E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(33.0))
                .body("[0].'latlng'[1]", numberMatches(65.0))
                .body("[0].'demonym'", containsString("Afghan"))
                .body("[0].'area'", numberMatches(652230.0))
                .body("[0].'gini'", numberMatches(27.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:30"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("IRN", "PAK", "TKM", "UZB", "TJK", "CHN"))
                .body("[0].'nativeName'", containsString("افغانستان"))
                .body("[0].'numericCode'", containsString("004"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AFN"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("ps", "uz", "tk"))
                .body("[0].'translations'.'de'", containsString("Afghanistan"))
                .body("[0].'translations'.'es'", containsString("Afganistán"))
                .body("[0].'translations'.'fr'", containsString("Afghanistan"))
                .body("[0].'translations'.'ja'", containsString("アフガニスタン"))
                .body("[0].'translations'.'it'", containsString("Afghanistan"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Åland Islands"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ax"))
                .body("[1].'alpha2Code'", containsString("AX"))
                .body("[1].'alpha3Code'", containsString("ALA"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("358"))
                .body("[1].'capital'", containsString("Mariehamn"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("AX", "Aaland", "Aland", "Ahvenanmaa"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Northern Europe"))
                .body("[1].'population'", numberMatches(28875.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(60.116667))
                .body("[1].'latlng'[1]", numberMatches(19.9))
                .body("[1].'demonym'", containsString("Ålandish"))
                .body("[1].'area'", numberMatches(1580.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+02:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Åland"))
                .body("[1].'numericCode'", containsString("248"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("EUR"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("sv"))
                .body("[1].'translations'.'de'", containsString("Åland"))
                .body("[1].'translations'.'es'", containsString("Alandia"))
                .body("[1].'translations'.'fr'", containsString("Åland"))
                .body("[1].'translations'.'ja'", containsString("オーランド諸島"))
                .body("[1].'translations'.'it'", containsString("Isole Aland"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Albania"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".al"))
                .body("[2].'alpha2Code'", containsString("AL"))
                .body("[2].'alpha3Code'", containsString("ALB"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("355"))
                .body("[2].'capital'", containsString("Tirana"))
                .body("[2].'altSpellings'.size()", equalTo(4))
                .body("[2].'altSpellings'", hasItems("AL", "Shqipëri", "Shqipëria", "Shqipnia"))
                .body("[2].'region'", containsString("Europe"))
                .body("[2].'subregion'", containsString("Southern Europe"))
                .body("[2].'population'", numberMatches(2893005.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(41.0))
                .body("[2].'latlng'[1]", numberMatches(20.0))
                .body("[2].'demonym'", containsString("Albanian"))
                .body("[2].'area'", numberMatches(28748.0))
                .body("[2].'gini'", numberMatches(34.5))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(4))
                .body("[2].'borders'", hasItems("MNE", "GRC", "MKD", "KOS"))
                .body("[2].'nativeName'", containsString("Shqipëria"))
                .body("[2].'numericCode'", containsString("008"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("ALL"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("sq"))
                .body("[2].'translations'.'de'", containsString("Albanien"))
                .body("[2].'translations'.'es'", containsString("Albania"))
                .body("[2].'translations'.'fr'", containsString("Albanie"))
                .body("[2].'translations'.'ja'", containsString("アルバニア"))
                .body("[2].'translations'.'it'", containsString("Albania"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_5_getOnV2AllWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/all?fields=nXAsGgq1")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/alpha
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_6_getOnV2AlphaWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "fields=Ro820ipwchQ&" + 
                    "codes=K")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/alpha
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_7_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/alpha?codes=N8TfT4n6cb")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_8_getOnV2DemonymWithQueryParamEmptyFieldsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/demonym/Norfolk%20Islander?fields=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Norfolk Island"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".nf"))
                .body("[0].'alpha2Code'", containsString("NF"))
                .body("[0].'alpha3Code'", containsString("NFK"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("672"))
                .body("[0].'capital'", containsString("Kingston"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("NF", "Territory of Norfolk Island", "Teratri of Norf'k Ailen"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Australia and New Zealand"))
                .body("[0].'population'", numberMatches(2302.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-29.03333333))
                .body("[0].'latlng'[1]", numberMatches(167.95))
                .body("[0].'demonym'", containsString("Norfolk Islander"))
                .body("[0].'area'", numberMatches(36.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+11:30"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Norfolk Island"))
                .body("[0].'numericCode'", containsString("574"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("AUD"))
                .body("[0].'currencies'[0].'name'", containsString("Australian dollar"))
                .body("[0].'currencies'[0].'symbol'", containsString("$"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("en"))
                .body("[0].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[0].'name'", containsString("English"))
                .body("[0].'languages'[0].'nativeName'", containsString("English"))
                .body("[0].'translations'.'de'", containsString("Norfolkinsel"))
                .body("[0].'translations'.'es'", containsString("Isla de Norfolk"))
                .body("[0].'translations'.'fr'", containsString("Île de Norfolk"))
                .body("[0].'translations'.'ja'", containsString("ノーフォーク島"))
                .body("[0].'translations'.'it'", containsString("Isola Norfolk"))
                .body("[0].'translations'.'br'", containsString("Ilha Norfolk"))
                .body("[0].'translations'.'pt'", containsString("Ilha Norfolk"))
                .body("[0].'translations'.'nl'", containsString("Norfolkeiland"))
                .body("[0].'translations'.'hr'", containsString("Otok Norfolk"))
                .body("[0].'translations'.'fa'", containsString("جزیره نورفک"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/nfk.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString(""));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_9_getOnV2SubregionWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/subregion/Central%20Asia?fields=iD6GpeoWI")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_10_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/subregion/Northern%20America")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(6))
                .body("[0].'name'", containsString("Bermuda"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bm"))
                .body("[0].'alpha2Code'", containsString("BM"))
                .body("[0].'alpha3Code'", containsString("BMU"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Hamilton"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("BM", "The Islands of Bermuda", "The Bermudas", "Somers Isles"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Northern America"))
                .body("[0].'population'", numberMatches(61954.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(32.33333333))
                .body("[0].'latlng'[1]", numberMatches(-64.75))
                .body("[0].'demonym'", containsString("Bermudian"))
                .body("[0].'area'", numberMatches(54.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Bermuda"))
                .body("[0].'numericCode'", containsString("060"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("BMD"))
                .body("[0].'currencies'[0].'name'", containsString("Bermudian dollar"))
                .body("[0].'currencies'[0].'symbol'", containsString("$"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("en"))
                .body("[0].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[0].'name'", containsString("English"))
                .body("[0].'languages'[0].'nativeName'", containsString("English"))
                .body("[0].'translations'.'de'", containsString("Bermuda"))
                .body("[0].'translations'.'es'", containsString("Bermudas"))
                .body("[0].'translations'.'fr'", containsString("Bermudes"))
                .body("[0].'translations'.'ja'", containsString("バミューダ"))
                .body("[0].'translations'.'it'", containsString("Bermuda"))
                .body("[0].'translations'.'br'", containsString("Bermudas"))
                .body("[0].'translations'.'pt'", containsString("Bermudas"))
                .body("[0].'translations'.'nl'", containsString("Bermuda"))
                .body("[0].'translations'.'hr'", containsString("Bermudi"))
                .body("[0].'translations'.'fa'", containsString("برمودا"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/bmu.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("BER"))
                .body("[1].'name'", containsString("United States Minor Outlying Islands"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".us"))
                .body("[1].'alpha2Code'", containsString("UM"))
                .body("[1].'alpha3Code'", containsString("UMI"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("1"))
                .body("[1].'capital'", containsString(""))
                .body("[1].'altSpellings'.size()", equalTo(1))
                .body("[1].'altSpellings'", hasItems("UM"))
                .body("[1].'region'", containsString("Americas"))
                .body("[1].'subregion'", containsString("Northern America"))
                .body("[1].'population'", numberMatches(300.0))
                .body("[1].'latlng'.size()", equalTo(0))
                .body("[1].'demonym'", containsString("American"))
                .body("[1].'area'", nullValue())
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(3))
                .body("[1].'timezones'", hasItems("UTC-11:00", "UTC-10:00", "UTC+12:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("United States Minor Outlying Islands"))
                .body("[1].'numericCode'", containsString("581"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("USD"))
                .body("[1].'currencies'[0].'name'", containsString("United States Dollar"))
                .body("[1].'currencies'[0].'symbol'", containsString("$"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'[0].'iso639_1'", containsString("en"))
                .body("[1].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[1].'languages'[0].'name'", containsString("English"))
                .body("[1].'languages'[0].'nativeName'", containsString("English"))
                .body("[1].'translations'.'de'", containsString("Kleinere Inselbesitzungen der Vereinigten Staaten"))
                .body("[1].'translations'.'es'", containsString("Islas Ultramarinas Menores de Estados Unidos"))
                .body("[1].'translations'.'fr'", containsString("Îles mineures éloignées des États-Unis"))
                .body("[1].'translations'.'ja'", containsString("合衆国領有小離島"))
                .body("[1].'translations'.'it'", containsString("Isole minori esterne degli Stati Uniti d'America"))
                .body("[1].'translations'.'br'", containsString("Ilhas Menores Distantes dos Estados Unidos"))
                .body("[1].'translations'.'pt'", containsString("Ilhas Menores Distantes dos Estados Unidos"))
                .body("[1].'translations'.'nl'", containsString("Kleine afgelegen eilanden van de Verenigde Staten"))
                .body("[1].'translations'.'hr'", containsString("Mali udaljeni otoci SAD-a"))
                .body("[1].'translations'.'fa'", containsString("جزایر کوچک حاشیه‌ای ایالات متحده آمریکا"))
                .body("[1].'flag'", containsString("https://restcountries.eu/data/umi.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(0))
                .body("[1].'cioc'", containsString(""))
                .body("[2].'name'", containsString("Canada"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".ca"))
                .body("[2].'alpha2Code'", containsString("CA"))
                .body("[2].'alpha3Code'", containsString("CAN"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("1"))
                .body("[2].'capital'", containsString("Ottawa"))
                .body("[2].'altSpellings'.size()", equalTo(1))
                .body("[2].'altSpellings'", hasItems("CA"))
                .body("[2].'region'", containsString("Americas"))
                .body("[2].'subregion'", containsString("Northern America"))
                .body("[2].'population'", numberMatches(3.6155487E7))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(60.0))
                .body("[2].'latlng'[1]", numberMatches(-95.0))
                .body("[2].'demonym'", containsString("Canadian"))
                .body("[2].'area'", numberMatches(9984670.0))
                .body("[2].'gini'", numberMatches(32.6))
                .body("[2].'timezones'.size()", equalTo(6))
                .body("[2].'timezones'", hasItems("UTC-08:00", "UTC-07:00", "UTC-06:00", "UTC-05:00", "UTC-04:00", "UTC-03:30"))
                .body("[2].'borders'.size()", equalTo(1))
                .body("[2].'borders'", hasItems("USA"))
                .body("[2].'nativeName'", containsString("Canada"))
                .body("[2].'numericCode'", containsString("124"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'[0].'code'", containsString("CAD"))
                .body("[2].'currencies'[0].'name'", containsString("Canadian dollar"))
                .body("[2].'currencies'[0].'symbol'", containsString("$"))
                .body("[2].'languages'.size()", equalTo(2))
                .body("[2].'languages'[0].'iso639_1'", containsString("en"))
                .body("[2].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[2].'languages'[0].'name'", containsString("English"))
                .body("[2].'languages'[0].'nativeName'", containsString("English"))
                .body("[2].'languages'[1].'iso639_1'", containsString("fr"))
                .body("[2].'languages'[1].'iso639_2'", containsString("fra"))
                .body("[2].'languages'[1].'name'", containsString("French"))
                .body("[2].'languages'[1].'nativeName'", containsString("français"))
                .body("[2].'translations'.'de'", containsString("Kanada"))
                .body("[2].'translations'.'es'", containsString("Canadá"))
                .body("[2].'translations'.'fr'", containsString("Canada"))
                .body("[2].'translations'.'ja'", containsString("カナダ"))
                .body("[2].'translations'.'it'", containsString("Canada"))
                .body("[2].'translations'.'br'", containsString("Canadá"))
                .body("[2].'translations'.'pt'", containsString("Canadá"))
                .body("[2].'translations'.'nl'", containsString("Canada"))
                .body("[2].'translations'.'hr'", containsString("Kanada"))
                .body("[2].'translations'.'fa'", containsString("کانادا"))
                .body("[2].'flag'", containsString("https://restcountries.eu/data/can.svg"))
                .body("[2].'regionalBlocs'.size()", equalTo(1))
                .body("[2].'regionalBlocs'[0].'acronym'", containsString("NAFTA"))
                .body("[2].'regionalBlocs'[0].'name'", containsString("North American Free Trade Agreement"))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[2].'regionalBlocs'[0].'otherNames'.size()", equalTo(2))
                .body("[2].'regionalBlocs'[0].'otherNames'", hasItems("Tratado de Libre Comercio de América del Norte", "Accord de Libre-échange Nord-Américain"))
                .body("[2].'cioc'", containsString("CAN"))
                ; // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_11_getOnV2RegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/region/Africa")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(60))
                .body("[0].'name'", containsString("Algeria"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".dz"))
                .body("[0].'alpha2Code'", containsString("DZ"))
                .body("[0].'alpha3Code'", containsString("DZA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("213"))
                .body("[0].'capital'", containsString("Algiers"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("DZ", "Dzayer", "Algérie"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Northern Africa"))
                .body("[0].'population'", numberMatches(4.04E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(28.0))
                .body("[0].'latlng'[1]", numberMatches(3.0))
                .body("[0].'demonym'", containsString("Algerian"))
                .body("[0].'area'", numberMatches(2381741.0))
                .body("[0].'gini'", numberMatches(35.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(7))
                .body("[0].'borders'", hasItems("TUN", "LBY", "NER", "ESH", "MRT", "MLI", "MAR"))
                .body("[0].'nativeName'", containsString("الجزائر"))
                .body("[0].'numericCode'", containsString("012"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("DZD"))
                .body("[0].'currencies'[0].'name'", containsString("Algerian dinar"))
                .body("[0].'currencies'[0].'symbol'", containsString("د.ج"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("ar"))
                .body("[0].'languages'[0].'iso639_2'", containsString("ara"))
                .body("[0].'languages'[0].'name'", containsString("Arabic"))
                .body("[0].'languages'[0].'nativeName'", containsString("العربية"))
                .body("[0].'translations'.'de'", containsString("Algerien"))
                .body("[0].'translations'.'es'", containsString("Argelia"))
                .body("[0].'translations'.'fr'", containsString("Algérie"))
                .body("[0].'translations'.'ja'", containsString("アルジェリア"))
                .body("[0].'translations'.'it'", containsString("Algeria"))
                .body("[0].'translations'.'br'", containsString("Argélia"))
                .body("[0].'translations'.'pt'", containsString("Argélia"))
                .body("[0].'translations'.'nl'", containsString("Algerije"))
                .body("[0].'translations'.'hr'", containsString("Alžir"))
                .body("[0].'translations'.'fa'", containsString("الجزایر"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/dza.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(2))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[0].'regionalBlocs'[1].'acronym'", containsString("AL"))
                .body("[0].'regionalBlocs'[1].'name'", containsString("Arab League"))
                .body("[0].'regionalBlocs'[1].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[1].'otherNames'.size()", equalTo(3))
                .body("[0].'regionalBlocs'[1].'otherNames'", hasItems("جامعة الدول العربية", "Jāmiʻat ad-Duwal al-ʻArabīyah", "League of Arab States"))
                .body("[0].'cioc'", containsString("ALG"))
                .body("[1].'name'", containsString("Angola"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ao"))
                .body("[1].'alpha2Code'", containsString("AO"))
                .body("[1].'alpha3Code'", containsString("AGO"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("244"))
                .body("[1].'capital'", containsString("Luanda"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("AO", "República de Angola", "ʁɛpublika de an'ɡɔla"))
                .body("[1].'region'", containsString("Africa"))
                .body("[1].'subregion'", containsString("Middle Africa"))
                .body("[1].'population'", numberMatches(2.5868E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-12.5))
                .body("[1].'latlng'[1]", numberMatches(18.5))
                .body("[1].'demonym'", containsString("Angolan"))
                .body("[1].'area'", numberMatches(1246700.0))
                .body("[1].'gini'", numberMatches(58.6))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+01:00"))
                .body("[1].'borders'.size()", equalTo(4))
                .body("[1].'borders'", hasItems("COG", "COD", "ZMB", "NAM"))
                .body("[1].'nativeName'", containsString("Angola"))
                .body("[1].'numericCode'", containsString("024"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("AOA"))
                .body("[1].'currencies'[0].'name'", containsString("Angolan kwanza"))
                .body("[1].'currencies'[0].'symbol'", containsString("Kz"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'[0].'iso639_1'", containsString("pt"))
                .body("[1].'languages'[0].'iso639_2'", containsString("por"))
                .body("[1].'languages'[0].'name'", containsString("Portuguese"))
                .body("[1].'languages'[0].'nativeName'", containsString("Português"))
                .body("[1].'translations'.'de'", containsString("Angola"))
                .body("[1].'translations'.'es'", containsString("Angola"))
                .body("[1].'translations'.'fr'", containsString("Angola"))
                .body("[1].'translations'.'ja'", containsString("アンゴラ"))
                .body("[1].'translations'.'it'", containsString("Angola"))
                .body("[1].'translations'.'br'", containsString("Angola"))
                .body("[1].'translations'.'pt'", containsString("Angola"))
                .body("[1].'translations'.'nl'", containsString("Angola"))
                .body("[1].'translations'.'hr'", containsString("Angola"))
                .body("[1].'translations'.'fa'", containsString("آنگولا"))
                .body("[1].'flag'", containsString("https://restcountries.eu/data/ago.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[1].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[1].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[1].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[1].'cioc'", containsString("ANG"))
                .body("[2].'name'", containsString("Benin"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".bj"))
                .body("[2].'alpha2Code'", containsString("BJ"))
                .body("[2].'alpha3Code'", containsString("BEN"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("229"))
                .body("[2].'capital'", containsString("Porto-Novo"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("BJ", "Republic of Benin", "République du Bénin"))
                .body("[2].'region'", containsString("Africa"))
                .body("[2].'subregion'", containsString("Western Africa"))
                .body("[2].'population'", numberMatches(1.0653654E7))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(9.5))
                .body("[2].'latlng'[1]", numberMatches(2.25))
                .body("[2].'demonym'", containsString("Beninese"))
                .body("[2].'area'", numberMatches(112622.0))
                .body("[2].'gini'", numberMatches(38.6))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(4))
                .body("[2].'borders'", hasItems("BFA", "NER", "NGA", "TGO"))
                .body("[2].'nativeName'", containsString("Bénin"))
                .body("[2].'numericCode'", containsString("204"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'[0].'code'", containsString("XOF"))
                .body("[2].'currencies'[0].'name'", containsString("West African CFA franc"))
                .body("[2].'currencies'[0].'symbol'", containsString("Fr"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'[0].'iso639_1'", containsString("fr"))
                .body("[2].'languages'[0].'iso639_2'", containsString("fra"))
                .body("[2].'languages'[0].'name'", containsString("French"))
                .body("[2].'languages'[0].'nativeName'", containsString("français"))
                .body("[2].'translations'.'de'", containsString("Benin"))
                .body("[2].'translations'.'es'", containsString("Benín"))
                .body("[2].'translations'.'fr'", containsString("Bénin"))
                .body("[2].'translations'.'ja'", containsString("ベナン"))
                .body("[2].'translations'.'it'", containsString("Benin"))
                .body("[2].'translations'.'br'", containsString("Benin"))
                .body("[2].'translations'.'pt'", containsString("Benim"))
                .body("[2].'translations'.'nl'", containsString("Benin"))
                .body("[2].'translations'.'hr'", containsString("Benin"))
                .body("[2].'translations'.'fa'", containsString("بنین"))
                .body("[2].'flag'", containsString("https://restcountries.eu/data/ben.svg"))
                .body("[2].'regionalBlocs'.size()", equalTo(1))
                .body("[2].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[2].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[2].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[2].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[2].'cioc'", containsString("BEN"))
                ; // Skipping assertions on the remaining 57 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_12_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/region/Asia?fields=nQZ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(50))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 47 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_13_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/capital/Port%20Moresby")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Papua New Guinea"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".pg"))
                .body("[0].'alpha2Code'", containsString("PG"))
                .body("[0].'alpha3Code'", containsString("PNG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("675"))
                .body("[0].'capital'", containsString("Port Moresby"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("PG", "Independent State of Papua New Guinea", "Independen Stet bilong Papua Niugini"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Melanesia"))
                .body("[0].'population'", numberMatches(8083700.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-6.0))
                .body("[0].'latlng'[1]", numberMatches(147.0))
                .body("[0].'demonym'", containsString("Papua New Guinean"))
                .body("[0].'area'", numberMatches(462840.0))
                .body("[0].'gini'", numberMatches(50.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+10:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("IDN"))
                .body("[0].'nativeName'", containsString("Papua Niugini"))
                .body("[0].'numericCode'", containsString("598"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("PGK"))
                .body("[0].'currencies'[0].'name'", containsString("Papua New Guinean kina"))
                .body("[0].'currencies'[0].'symbol'", containsString("K"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("en"))
                .body("[0].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[0].'name'", containsString("English"))
                .body("[0].'languages'[0].'nativeName'", containsString("English"))
                .body("[0].'translations'.'de'", containsString("Papua-Neuguinea"))
                .body("[0].'translations'.'es'", containsString("Papúa Nueva Guinea"))
                .body("[0].'translations'.'fr'", containsString("Papouasie-Nouvelle-Guinée"))
                .body("[0].'translations'.'ja'", containsString("パプアニューギニア"))
                .body("[0].'translations'.'it'", containsString("Papua Nuova Guinea"))
                .body("[0].'translations'.'br'", containsString("Papua Nova Guiné"))
                .body("[0].'translations'.'pt'", containsString("Papua Nova Guiné"))
                .body("[0].'translations'.'nl'", containsString("Papoea-Nieuw-Guinea"))
                .body("[0].'translations'.'hr'", containsString("Papua Nova Gvineja"))
                .body("[0].'translations'.'fa'", containsString("پاپوآ گینه نو"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/png.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("PNG"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_14_getOnV2CallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/callingcode/594")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("French Guiana"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gf"))
                .body("[0].'alpha2Code'", containsString("GF"))
                .body("[0].'alpha3Code'", containsString("GUF"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("594"))
                .body("[0].'capital'", containsString("Cayenne"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("GF", "Guiana", "Guyane"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(254541.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(4.0))
                .body("[0].'latlng'[1]", numberMatches(-53.0))
                .body("[0].'demonym'", containsString(""))
                .body("[0].'area'", nullValue())
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-03:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("BRA", "SUR"))
                .body("[0].'nativeName'", containsString("Guyane française"))
                .body("[0].'numericCode'", containsString("254"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("EUR"))
                .body("[0].'currencies'[0].'name'", containsString("Euro"))
                .body("[0].'currencies'[0].'symbol'", containsString("€"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("fr"))
                .body("[0].'languages'[0].'iso639_2'", containsString("fra"))
                .body("[0].'languages'[0].'name'", containsString("French"))
                .body("[0].'languages'[0].'nativeName'", containsString("français"))
                .body("[0].'translations'.'de'", containsString("Französisch Guyana"))
                .body("[0].'translations'.'es'", containsString("Guayana Francesa"))
                .body("[0].'translations'.'fr'", containsString("Guayane"))
                .body("[0].'translations'.'ja'", containsString("フランス領ギアナ"))
                .body("[0].'translations'.'it'", containsString("Guyana francese"))
                .body("[0].'translations'.'br'", containsString("Guiana Francesa"))
                .body("[0].'translations'.'pt'", containsString("Guiana Francesa"))
                .body("[0].'translations'.'nl'", containsString("Frans-Guyana"))
                .body("[0].'translations'.'hr'", containsString("Francuska Gvajana"))
                .body("[0].'translations'.'fa'", containsString("گویان فرانسه"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/guf.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(2))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("USAN"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Union of South American Nations"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(3))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'", hasItems("UNASUR", "UNASUL", "UZAN"))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(4))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("Unión de Naciones Suramericanas", "União de Nações Sul-Americanas", "Unie van Zuid-Amerikaanse Naties", "South American Union"))
                .body("[0].'regionalBlocs'[1].'acronym'", containsString("EU"))
                .body("[0].'regionalBlocs'[1].'name'", containsString("European Union"))
                .body("[0].'regionalBlocs'[1].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[1].'otherNames'.size()", equalTo(0))
                .body("[0].'cioc'", containsString(""));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_15_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/callingcode/227?fields=4iKyfd")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_16_getOnV2NameWithQueryParamsFullTextReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/name/Portugal?" + 
                    "fields=z&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_17_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/name/Taiwan?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Taiwan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".tw"))
                .body("[0].'alpha2Code'", containsString("TW"))
                .body("[0].'alpha3Code'", containsString("TWN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("886"))
                .body("[0].'capital'", containsString("Taipei"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("TW", "Táiwān", "Republic of China", "中華民國", "Zhōnghuá Mínguó"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Eastern Asia"))
                .body("[0].'population'", numberMatches(2.3503349E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(23.5))
                .body("[0].'latlng'[1]", numberMatches(121.0))
                .body("[0].'demonym'", containsString("Taiwanese"))
                .body("[0].'area'", numberMatches(36193.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+08:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("臺灣"))
                .body("[0].'numericCode'", containsString("158"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("TWD"))
                .body("[0].'currencies'[0].'name'", containsString("New Taiwan dollar"))
                .body("[0].'currencies'[0].'symbol'", containsString("$"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("zh"))
                .body("[0].'languages'[0].'iso639_2'", containsString("zho"))
                .body("[0].'languages'[0].'name'", containsString("Chinese"))
                .body("[0].'languages'[0].'nativeName'", containsString("中文 (Zhōngwén)"))
                .body("[0].'translations'.'de'", containsString("Taiwan"))
                .body("[0].'translations'.'es'", containsString("Taiwán"))
                .body("[0].'translations'.'fr'", containsString("Taïwan"))
                .body("[0].'translations'.'ja'", containsString("台湾（中華民国）"))
                .body("[0].'translations'.'it'", containsString("Taiwan"))
                .body("[0].'translations'.'br'", containsString("Taiwan"))
                .body("[0].'translations'.'pt'", containsString("Taiwan"))
                .body("[0].'translations'.'nl'", containsString("Taiwan"))
                .body("[0].'translations'.'hr'", containsString("Tajvan"))
                .body("[0].'translations'.'fa'", containsString("تایوان"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/twn.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("TPE"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_18_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/currency/MDL?fields=BRWU")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_19_getOnV2AlphaWithQueryParamEmptyFieldsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/alpha/SZ?fields=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("Swaziland"))
                .body("'topLevelDomain'.size()", equalTo(1))
                .body("'topLevelDomain'", hasItems(".sz"))
                .body("'alpha2Code'", containsString("SZ"))
                .body("'alpha3Code'", containsString("SWZ"))
                .body("'callingCodes'.size()", equalTo(1))
                .body("'callingCodes'", hasItems("268"))
                .body("'capital'", containsString("Lobamba"))
                .body("'altSpellings'.size()", equalTo(6))
                .body("'altSpellings'", hasItems("SZ", "weSwatini", "Swatini", "Ngwane", "Kingdom of Swaziland", "Umbuso waseSwatini"))
                .body("'region'", containsString("Africa"))
                .body("'subregion'", containsString("Southern Africa"))
                .body("'population'", numberMatches(1132657.0))
                .body("'latlng'.size()", equalTo(2))
                .body("'latlng'[0]", numberMatches(-26.5))
                .body("'latlng'[1]", numberMatches(31.5))
                .body("'demonym'", containsString("Swazi"))
                .body("'area'", numberMatches(17364.0))
                .body("'gini'", numberMatches(51.5))
                .body("'timezones'.size()", equalTo(1))
                .body("'timezones'", hasItems("UTC+02:00"))
                .body("'borders'.size()", equalTo(2))
                .body("'borders'", hasItems("MOZ", "ZAF"))
                .body("'nativeName'", containsString("Swaziland"))
                .body("'numericCode'", containsString("748"))
                .body("'currencies'.size()", equalTo(1))
                .body("'currencies'[0].'code'", containsString("SZL"))
                .body("'currencies'[0].'name'", containsString("Swazi lilangeni"))
                .body("'currencies'[0].'symbol'", containsString("L"))
                .body("'languages'.size()", equalTo(2))
                .body("'languages'[0].'iso639_1'", containsString("en"))
                .body("'languages'[0].'iso639_2'", containsString("eng"))
                .body("'languages'[0].'name'", containsString("English"))
                .body("'languages'[0].'nativeName'", containsString("English"))
                .body("'languages'[1].'iso639_1'", containsString("ss"))
                .body("'languages'[1].'iso639_2'", containsString("ssw"))
                .body("'languages'[1].'name'", containsString("Swati"))
                .body("'languages'[1].'nativeName'", containsString("SiSwati"))
                .body("'translations'.'de'", containsString("Swasiland"))
                .body("'translations'.'es'", containsString("Suazilandia"))
                .body("'translations'.'fr'", containsString("Swaziland"))
                .body("'translations'.'ja'", containsString("スワジランド"))
                .body("'translations'.'it'", containsString("Swaziland"))
                .body("'translations'.'br'", containsString("Suazilândia"))
                .body("'translations'.'pt'", containsString("Suazilândia"))
                .body("'translations'.'nl'", containsString("Swaziland"))
                .body("'translations'.'hr'", containsString("Svazi"))
                .body("'translations'.'fa'", containsString("سوازیلند"))
                .body("'flag'", containsString("https://restcountries.eu/data/swz.svg"))
                .body("'regionalBlocs'.size()", equalTo(1))
                .body("'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("'cioc'", containsString("SWZ"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_20_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/subregion/South%20America")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(15))
                .body("[0].'name'", containsString("Argentina"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ar"))
                .body("[0].'alpha2Code'", containsString("AR"))
                .body("[0].'alpha3Code'", containsString("ARG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("54"))
                .body("[0].'capital'", containsString("Buenos Aires"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("AR", "Argentine Republic", "República Argentina"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(4.3131966E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-34.0))
                .body("[0].'latlng'[1]", numberMatches(-64.0))
                .body("[0].'demonym'", containsString("Argentinean"))
                .body("[0].'area'", numberMatches(2780400.0))
                .body("[0].'gini'", numberMatches(44.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-03:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("BOL", "BRA", "CHL", "PRY", "URY"))
                .body("[0].'nativeName'", containsString("Argentina"))
                .body("[0].'numericCode'", containsString("032"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ARS"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("es", "gn"))
                .body("[0].'translations'.'de'", containsString("Argentinien"))
                .body("[0].'translations'.'es'", containsString("Argentina"))
                .body("[0].'translations'.'fr'", containsString("Argentine"))
                .body("[0].'translations'.'ja'", containsString("アルゼンチン"))
                .body("[0].'translations'.'it'", containsString("Argentina"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Bolivia"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".bo"))
                .body("[1].'alpha2Code'", containsString("BO"))
                .body("[1].'alpha3Code'", containsString("BOL"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("591"))
                .body("[1].'capital'", containsString("Sucre"))
                .body("[1].'altSpellings'.size()", equalTo(8))
                .body("[1].'altSpellings'", hasItems("BO", "Buliwya", "Wuliwya", "Plurinational State of Bolivia", "Estado Plurinacional de Bolivia", "Buliwya Mamallaqta", "Wuliwya Suyu", "Tetã Volívia"))
                .body("[1].'region'", containsString("Americas"))
                .body("[1].'subregion'", containsString("South America"))
                .body("[1].'population'", numberMatches(1.1410651E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-17.0))
                .body("[1].'latlng'[1]", numberMatches(-65.0))
                .body("[1].'demonym'", containsString("Bolivian"))
                .body("[1].'area'", numberMatches(1098581.0))
                .body("[1].'gini'", numberMatches(56.3))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC-04:00"))
                .body("[1].'borders'.size()", equalTo(5))
                .body("[1].'borders'", hasItems("ARG", "BRA", "CHL", "PRY", "PER"))
                .body("[1].'nativeName'", containsString("Bolivia"))
                .body("[1].'numericCode'", containsString("068"))
                .body("[1].'currencies'.size()", equalTo(2))
                .body("[1].'currencies'", hasItems("BOB", "BOV"))
                .body("[1].'languages'.size()", equalTo(3))
                .body("[1].'languages'", hasItems("es", "ay", "qu"))
                .body("[1].'translations'.'de'", containsString("Bolivien"))
                .body("[1].'translations'.'es'", containsString("Bolivia"))
                .body("[1].'translations'.'fr'", containsString("Bolivie"))
                .body("[1].'translations'.'ja'", containsString("ボリビア多民族国"))
                .body("[1].'translations'.'it'", containsString("Bolivia"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Brazil"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".br"))
                .body("[2].'alpha2Code'", containsString("BR"))
                .body("[2].'alpha3Code'", containsString("BRA"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("55"))
                .body("[2].'capital'", containsString("Brasília"))
                .body("[2].'altSpellings'.size()", equalTo(4))
                .body("[2].'altSpellings'", hasItems("BR", "Brasil", "Federative Republic of Brazil", "República Federativa do Brasil"))
                .body("[2].'region'", containsString("Americas"))
                .body("[2].'subregion'", containsString("South America"))
                .body("[2].'population'", numberMatches(2.04772E8))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(-10.0))
                .body("[2].'latlng'[1]", numberMatches(-55.0))
                .body("[2].'demonym'", containsString("Brazilian"))
                .body("[2].'area'", numberMatches(8515767.0))
                .body("[2].'gini'", numberMatches(54.7))
                .body("[2].'timezones'.size()", equalTo(4))
                .body("[2].'timezones'", hasItems("UTC-05:00", "UTC-04:00", "UTC-03:00", "UTC-02:00"))
                .body("[2].'borders'.size()", equalTo(10))
                .body("[2].'borders'", hasItems("ARG", "BOL", "COL", "GUF", "GUY", "PRY", "PER", "SUR", "URY", "VEN"))
                .body("[2].'nativeName'", containsString("Brasil"))
                .body("[2].'numericCode'", containsString("076"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("BRL"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("pt"))
                .body("[2].'translations'.'de'", containsString("Brasilien"))
                .body("[2].'translations'.'es'", containsString("Brasil"))
                .body("[2].'translations'.'fr'", containsString("Brésil"))
                .body("[2].'translations'.'ja'", containsString("ブラジル"))
                .body("[2].'translations'.'it'", containsString("Brasile"))
                .body("[2].'relevance'", containsString("2"))
                ; // Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_21_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/region/Polar")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Antarctica"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".aq"))
                .body("[0].'alpha2Code'", containsString("AQ"))
                .body("[0].'alpha3Code'", containsString("ATA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("672"))
                .body("[0].'capital'", containsString(""))
                .body("[0].'altSpellings'.size()", equalTo(0))
                .body("[0].'region'", containsString("Polar"))
                .body("[0].'subregion'", containsString(""))
                .body("[0].'population'", numberMatches(1000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-74.65))
                .body("[0].'latlng'[1]", numberMatches(4.48))
                .body("[0].'demonym'", containsString(""))
                .body("[0].'area'", numberMatches(1.4E7))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(8))
                .body("[0].'timezones'", hasItems("UTC-03:00", "UTC+03:00", "UTC+05:00", "UTC+06:00", "UTC+07:00", "UTC+08:00", "UTC+10:00", "UTC+12:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Antarctica"))
                .body("[0].'numericCode'", containsString("010"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'", hasItems("AUD", "GBP"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Antarktika"))
                .body("[0].'translations'.'es'", containsString("Antártida"))
                .body("[0].'translations'.'fr'", containsString("Antarctique"))
                .body("[0].'translations'.'ja'", containsString("南極大陸"))
                .body("[0].'translations'.'it'", containsString("Antartide"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_22_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/capital/Hanoi")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Vietnam"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".vn"))
                .body("[0].'alpha2Code'", containsString("VN"))
                .body("[0].'alpha3Code'", containsString("VNM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("84"))
                .body("[0].'capital'", containsString("Hanoi"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("VN", "Socialist Republic of Vietnam", "Cộng hòa Xã hội chủ nghĩa Việt Nam"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("South-Eastern Asia"))
                .body("[0].'population'", numberMatches(9.1812E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(16.16666666))
                .body("[0].'latlng'[1]", numberMatches(107.83333333))
                .body("[0].'demonym'", containsString("Vietnamese"))
                .body("[0].'area'", numberMatches(331212.0))
                .body("[0].'gini'", numberMatches(35.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+07:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("KHM", "CHN", "LAO"))
                .body("[0].'nativeName'", containsString("Việt Nam"))
                .body("[0].'numericCode'", containsString("704"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("VND"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("vi"))
                .body("[0].'translations'.'de'", containsString("Vietnam"))
                .body("[0].'translations'.'es'", containsString("Vietnam"))
                .body("[0].'translations'.'fr'", containsString("Viêt Nam"))
                .body("[0].'translations'.'ja'", containsString("ベトナム"))
                .body("[0].'translations'.'it'", containsString("Vietnam"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_23_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/callingcode/64")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("New Zealand"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".nz"))
                .body("[0].'alpha2Code'", containsString("NZ"))
                .body("[0].'alpha3Code'", containsString("NZL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("64"))
                .body("[0].'capital'", containsString("Wellington"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("NZ", "Aotearoa"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Australia and New Zealand"))
                .body("[0].'population'", numberMatches(4609440.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-41.0))
                .body("[0].'latlng'[1]", numberMatches(174.0))
                .body("[0].'demonym'", containsString("New Zealander"))
                .body("[0].'area'", numberMatches(270467.0))
                .body("[0].'gini'", numberMatches(36.2))
                .body("[0].'timezones'.size()", equalTo(5))
                .body("[0].'timezones'", hasItems("UTC-11:00", "UTC-10:00", "UTC+12:00", "UTC+12:45", "UTC+13:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("New Zealand"))
                .body("[0].'numericCode'", containsString("554"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("NZD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "mi"))
                .body("[0].'translations'.'de'", containsString("Neuseeland"))
                .body("[0].'translations'.'es'", containsString("Nueva Zelanda"))
                .body("[0].'translations'.'fr'", containsString("Nouvelle-Zélande"))
                .body("[0].'translations'.'ja'", containsString("ニュージーランド"))
                .body("[0].'translations'.'it'", containsString("Nuova Zelanda"))
                .body("[0].'relevance'", containsString("1.0"))
                .body("[1].'name'", containsString("Pitcairn Islands"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".pn"))
                .body("[1].'alpha2Code'", containsString("PN"))
                .body("[1].'alpha3Code'", containsString("PCN"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("64"))
                .body("[1].'capital'", containsString("Adamstown"))
                .body("[1].'altSpellings'.size()", equalTo(2))
                .body("[1].'altSpellings'", hasItems("PN", "Pitcairn Henderson Ducie and Oeno Islands"))
                .body("[1].'region'", containsString("Oceania"))
                .body("[1].'subregion'", containsString("Polynesia"))
                .body("[1].'population'", numberMatches(56.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-25.06666666))
                .body("[1].'latlng'[1]", numberMatches(-130.1))
                .body("[1].'demonym'", containsString("Pitcairn Islander"))
                .body("[1].'area'", numberMatches(47.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC-08:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Pitcairn Islands"))
                .body("[1].'numericCode'", containsString("612"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("NZD"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("en"))
                .body("[1].'translations'.'de'", containsString("Pitcairn"))
                .body("[1].'translations'.'es'", containsString("Islas Pitcairn"))
                .body("[1].'translations'.'fr'", containsString("Îles Pitcairn"))
                .body("[1].'translations'.'ja'", containsString("ピトケアン"))
                .body("[1].'translations'.'it'", containsString("Isole Pitcairn"))
                .body("[1].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_24_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/name/Zambia?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Zambia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".zm"))
                .body("[0].'alpha2Code'", containsString("ZM"))
                .body("[0].'alpha3Code'", containsString("ZMB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("260"))
                .body("[0].'capital'", containsString("Lusaka"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("ZM", "Republic of Zambia"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(1.5473905E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-15.0))
                .body("[0].'latlng'[1]", numberMatches(30.0))
                .body("[0].'demonym'", containsString("Zambian"))
                .body("[0].'area'", numberMatches(752612.0))
                .body("[0].'gini'", numberMatches(54.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(8))
                .body("[0].'borders'", hasItems("AGO", "BWA", "COD", "MWI", "MOZ", "NAM", "TZA", "ZWE"))
                .body("[0].'nativeName'", containsString("Zambia"))
                .body("[0].'numericCode'", containsString("894"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ZMW"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Sambia"))
                .body("[0].'translations'.'es'", containsString("Zambia"))
                .body("[0].'translations'.'fr'", containsString("Zambie"))
                .body("[0].'translations'.'ja'", containsString("ザンビア"))
                .body("[0].'translations'.'it'", containsString("Zambia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_25_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/currency/STD")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("São Tomé and Príncipe"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".st"))
                .body("[0].'alpha2Code'", containsString("ST"))
                .body("[0].'alpha3Code'", containsString("STP"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("239"))
                .body("[0].'capital'", containsString("São Tomé"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("ST", "Democratic Republic of São Tomé and Príncipe", "República Democrática de São Tomé e Príncipe"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Middle Africa"))
                .body("[0].'population'", numberMatches(187356.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(1.0))
                .body("[0].'latlng'[1]", numberMatches(7.0))
                .body("[0].'demonym'", containsString("Sao Tomean"))
                .body("[0].'area'", numberMatches(964.0))
                .body("[0].'gini'", numberMatches(50.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("São Tomé e Príncipe"))
                .body("[0].'numericCode'", containsString("678"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("STD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("pt"))
                .body("[0].'translations'.'de'", containsString("São Tomé und Príncipe"))
                .body("[0].'translations'.'es'", containsString("Santo Tomé y Príncipe"))
                .body("[0].'translations'.'fr'", containsString("Sao Tomé-et-Principe"))
                .body("[0].'translations'.'ja'", containsString("サントメ・プリンシペ"))
                .body("[0].'translations'.'it'", containsString("São Tomé e Príncipe"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_26_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/alpha/TM")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("Turkmenistan"))
                .body("'topLevelDomain'.size()", equalTo(1))
                .body("'topLevelDomain'", hasItems(".tm"))
                .body("'alpha2Code'", containsString("TM"))
                .body("'alpha3Code'", containsString("TKM"))
                .body("'callingCodes'.size()", equalTo(1))
                .body("'callingCodes'", hasItems("993"))
                .body("'capital'", containsString("Ashgabat"))
                .body("'altSpellings'.size()", equalTo(1))
                .body("'altSpellings'", hasItems("TM"))
                .body("'region'", containsString("Asia"))
                .body("'subregion'", containsString("Central Asia"))
                .body("'population'", numberMatches(4751120.0))
                .body("'latlng'.size()", equalTo(2))
                .body("'latlng'[0]", numberMatches(40.0))
                .body("'latlng'[1]", numberMatches(60.0))
                .body("'demonym'", containsString("Turkmen"))
                .body("'area'", numberMatches(488100.0))
                .body("'gini'", numberMatches(40.8))
                .body("'timezones'.size()", equalTo(1))
                .body("'timezones'", hasItems("UTC+05:00"))
                .body("'borders'.size()", equalTo(4))
                .body("'borders'", hasItems("AFG", "IRN", "KAZ", "UZB"))
                .body("'nativeName'", containsString("Türkmenistan"))
                .body("'numericCode'", containsString("795"))
                .body("'currencies'.size()", equalTo(1))
                .body("'currencies'", hasItems("TMT"))
                .body("'languages'.size()", equalTo(2))
                .body("'languages'", hasItems("tk", "ru"))
                .body("'translations'.'de'", containsString("Turkmenistan"))
                .body("'translations'.'es'", containsString("Turkmenistán"))
                .body("'translations'.'fr'", containsString("Turkménistan"))
                .body("'translations'.'ja'", containsString("トルクメニスタン"))
                .body("'translations'.'it'", containsString("Turkmenistan"))
                .body("'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_27_getOnV1NameWithQueryParamFullTextReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/name/Ecuador?fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Ecuador"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ec"))
                .body("[0].'alpha2Code'", containsString("EC"))
                .body("[0].'alpha3Code'", containsString("ECU"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("593"))
                .body("[0].'capital'", containsString("Quito"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("EC", "Republic of Ecuador", "República del Ecuador"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(1.60275E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-2.0))
                .body("[0].'latlng'[1]", numberMatches(-77.5))
                .body("[0].'demonym'", containsString("Ecuadorean"))
                .body("[0].'area'", numberMatches(276841.0))
                .body("[0].'gini'", numberMatches(49.3))
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC-06:00", "UTC-05:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("COL", "PER"))
                .body("[0].'nativeName'", containsString("Ecuador"))
                .body("[0].'numericCode'", containsString("218"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("es"))
                .body("[0].'translations'.'de'", containsString("Ecuador"))
                .body("[0].'translations'.'es'", containsString("Ecuador"))
                .body("[0].'translations'.'fr'", containsString("Équateur"))
                .body("[0].'translations'.'ja'", containsString("エクアドル"))
                .body("[0].'translations'.'it'", containsString("Ecuador"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_28_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/alpha/UA")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("Ukraine"))
                .body("'topLevelDomain'.size()", equalTo(1))
                .body("'topLevelDomain'", hasItems(".ua"))
                .body("'alpha2Code'", containsString("UA"))
                .body("'alpha3Code'", containsString("UKR"))
                .body("'callingCodes'.size()", equalTo(1))
                .body("'callingCodes'", hasItems("380"))
                .body("'capital'", containsString("Kiev"))
                .body("'altSpellings'.size()", equalTo(2))
                .body("'altSpellings'", hasItems("UA", "Ukrayina"))
                .body("'region'", containsString("Europe"))
                .body("'subregion'", containsString("Eastern Europe"))
                .body("'population'", numberMatches(4.2692393E7))
                .body("'latlng'.size()", equalTo(2))
                .body("'latlng'[0]", numberMatches(49.0))
                .body("'latlng'[1]", numberMatches(32.0))
                .body("'demonym'", containsString("Ukrainian"))
                .body("'area'", numberMatches(603700.0))
                .body("'gini'", numberMatches(26.4))
                .body("'timezones'.size()", equalTo(1))
                .body("'timezones'", hasItems("UTC+02:00"))
                .body("'borders'.size()", equalTo(7))
                .body("'borders'", hasItems("BLR", "HUN", "MDA", "POL", "ROU", "RUS", "SVK"))
                .body("'nativeName'", containsString("Україна"))
                .body("'numericCode'", containsString("804"))
                .body("'currencies'.size()", equalTo(1))
                .body("'currencies'[0].'code'", containsString("UAH"))
                .body("'currencies'[0].'name'", containsString("Ukrainian hryvnia"))
                .body("'currencies'[0].'symbol'", containsString("₴"))
                .body("'languages'.size()", equalTo(1))
                .body("'languages'[0].'iso639_1'", containsString("uk"))
                .body("'languages'[0].'iso639_2'", containsString("ukr"))
                .body("'languages'[0].'name'", containsString("Ukrainian"))
                .body("'languages'[0].'nativeName'", containsString("Українська"))
                .body("'translations'.'de'", containsString("Ukraine"))
                .body("'translations'.'es'", containsString("Ucrania"))
                .body("'translations'.'fr'", containsString("Ukraine"))
                .body("'translations'.'ja'", containsString("ウクライナ"))
                .body("'translations'.'it'", containsString("Ucraina"))
                .body("'translations'.'br'", containsString("Ucrânia"))
                .body("'translations'.'pt'", containsString("Ucrânia"))
                .body("'translations'.'nl'", containsString("Oekraïne"))
                .body("'translations'.'hr'", containsString("Ukrajina"))
                .body("'translations'.'fa'", containsString("وکراین"))
                .body("'flag'", containsString("https://restcountries.eu/data/ukr.svg"))
                .body("'regionalBlocs'.size()", equalTo(0))
                .body("'cioc'", containsString("UKR"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_29_getOnV1NameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/name/Slovakia")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Slovakia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sk"))
                .body("[0].'alpha2Code'", containsString("SK"))
                .body("[0].'alpha3Code'", containsString("SVK"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("421"))
                .body("[0].'capital'", containsString("Bratislava"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("SK", "Slovak Republic", "Slovenská republika"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(5421349.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(48.66666666))
                .body("[0].'latlng'[1]", numberMatches(19.5))
                .body("[0].'demonym'", containsString("Slovak"))
                .body("[0].'area'", numberMatches(49037.0))
                .body("[0].'gini'", numberMatches(26.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("AUT", "CZE", "HUN", "POL", "UKR"))
                .body("[0].'nativeName'", containsString("Slovensko"))
                .body("[0].'numericCode'", containsString("703"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("sk"))
                .body("[0].'translations'.'de'", containsString("Slowakei"))
                .body("[0].'translations'.'es'", containsString("República Eslovaca"))
                .body("[0].'translations'.'fr'", containsString("Slovaquie"))
                .body("[0].'translations'.'ja'", containsString("スロバキア"))
                .body("[0].'translations'.'it'", containsString("Slovacchia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_30_getOnV2DemonymReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/demonym/Nauruan")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Nauru"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".nr"))
                .body("[0].'alpha2Code'", containsString("NR"))
                .body("[0].'alpha3Code'", containsString("NRU"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("674"))
                .body("[0].'capital'", containsString("Yaren"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("NR", "Naoero", "Pleasant Island", "Republic of Nauru", "Ripublik Naoero"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Micronesia"))
                .body("[0].'population'", numberMatches(10084.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-0.53333333))
                .body("[0].'latlng'[1]", numberMatches(166.91666666))
                .body("[0].'demonym'", containsString("Nauruan"))
                .body("[0].'area'", numberMatches(21.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+12:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Nauru"))
                .body("[0].'numericCode'", containsString("520"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'[0].'code'", containsString("AUD"))
                .body("[0].'currencies'[0].'name'", containsString("Australian dollar"))
                .body("[0].'currencies'[0].'symbol'", containsString("$"))
                .body("[0].'currencies'[1].'code'", containsString("(none)"))
                .body("[0].'currencies'[1].'name'", nullValue())
                .body("[0].'currencies'[1].'symbol'", containsString("$"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("en"))
                .body("[0].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[0].'name'", containsString("English"))
                .body("[0].'languages'[0].'nativeName'", containsString("English"))
                .body("[0].'languages'[1].'iso639_1'", containsString("na"))
                .body("[0].'languages'[1].'iso639_2'", containsString("nau"))
                .body("[0].'languages'[1].'name'", containsString("Nauruan"))
                .body("[0].'languages'[1].'nativeName'", containsString("Dorerin Naoero"))
                .body("[0].'translations'.'de'", containsString("Nauru"))
                .body("[0].'translations'.'es'", containsString("Nauru"))
                .body("[0].'translations'.'fr'", containsString("Nauru"))
                .body("[0].'translations'.'ja'", containsString("ナウル"))
                .body("[0].'translations'.'it'", containsString("Nauru"))
                .body("[0].'translations'.'br'", containsString("Nauru"))
                .body("[0].'translations'.'pt'", containsString("Nauru"))
                .body("[0].'translations'.'nl'", containsString("Nauru"))
                .body("[0].'translations'.'hr'", containsString("Nauru"))
                .body("[0].'translations'.'fa'", containsString("نائورو"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/nru.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("NRU"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_31_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/currency/ZMW")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Zambia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".zm"))
                .body("[0].'alpha2Code'", containsString("ZM"))
                .body("[0].'alpha3Code'", containsString("ZMB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("260"))
                .body("[0].'capital'", containsString("Lusaka"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("ZM", "Republic of Zambia"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(1.5933883E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-15.0))
                .body("[0].'latlng'[1]", numberMatches(30.0))
                .body("[0].'demonym'", containsString("Zambian"))
                .body("[0].'area'", numberMatches(752612.0))
                .body("[0].'gini'", numberMatches(54.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(8))
                .body("[0].'borders'", hasItems("AGO", "BWA", "COD", "MWI", "MOZ", "NAM", "TZA", "ZWE"))
                .body("[0].'nativeName'", containsString("Zambia"))
                .body("[0].'numericCode'", containsString("894"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("ZMW"))
                .body("[0].'currencies'[0].'name'", containsString("Zambian kwacha"))
                .body("[0].'currencies'[0].'symbol'", containsString("ZK"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("en"))
                .body("[0].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[0].'name'", containsString("English"))
                .body("[0].'languages'[0].'nativeName'", containsString("English"))
                .body("[0].'translations'.'de'", containsString("Sambia"))
                .body("[0].'translations'.'es'", containsString("Zambia"))
                .body("[0].'translations'.'fr'", containsString("Zambie"))
                .body("[0].'translations'.'ja'", containsString("ザンビア"))
                .body("[0].'translations'.'it'", containsString("Zambia"))
                .body("[0].'translations'.'br'", containsString("Zâmbia"))
                .body("[0].'translations'.'pt'", containsString("Zâmbia"))
                .body("[0].'translations'.'nl'", containsString("Zambia"))
                .body("[0].'translations'.'hr'", containsString("Zambija"))
                .body("[0].'translations'.'fa'", containsString("زامبیا"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/zmb.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[0].'cioc'", containsString("ZAM"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_32_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/name/American%20Samoa?fields=X")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_33_getOnV2CapitWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/capital/Doha?fields=F3rC9Mgo5")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_34_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/name/Syria?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Syrian Arab Republic"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sy"))
                .body("[0].'alpha2Code'", containsString("SY"))
                .body("[0].'alpha3Code'", containsString("SYR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("963"))
                .body("[0].'capital'", containsString("Damascus"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("SY", "Syrian Arab Republic", "Al-Jumhūrīyah Al-ʻArabīyah As-Sūrīyah"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(1.8564E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(35.0))
                .body("[0].'latlng'[1]", numberMatches(38.0))
                .body("[0].'demonym'", containsString("Syrian"))
                .body("[0].'area'", numberMatches(185180.0))
                .body("[0].'gini'", numberMatches(35.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("IRQ", "ISR", "JOR", "LBN", "TUR"))
                .body("[0].'nativeName'", containsString("سوريا"))
                .body("[0].'numericCode'", containsString("760"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("SYP"))
                .body("[0].'currencies'[0].'name'", containsString("Syrian pound"))
                .body("[0].'currencies'[0].'symbol'", containsString("£"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("ar"))
                .body("[0].'languages'[0].'iso639_2'", containsString("ara"))
                .body("[0].'languages'[0].'name'", containsString("Arabic"))
                .body("[0].'languages'[0].'nativeName'", containsString("العربية"))
                .body("[0].'translations'.'de'", containsString("Syrien"))
                .body("[0].'translations'.'es'", containsString("Siria"))
                .body("[0].'translations'.'fr'", containsString("Syrie"))
                .body("[0].'translations'.'ja'", containsString("シリア・アラブ共和国"))
                .body("[0].'translations'.'it'", containsString("Siria"))
                .body("[0].'translations'.'br'", containsString("Síria"))
                .body("[0].'translations'.'pt'", containsString("Síria"))
                .body("[0].'translations'.'nl'", containsString("Syrië"))
                .body("[0].'translations'.'hr'", containsString("Sirija"))
                .body("[0].'translations'.'fa'", containsString("سوریه"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/syr.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("AL"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Arab League"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(3))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("جامعة الدول العربية", "Jāmiʻat ad-Duwal al-ʻArabīyah", "League of Arab States"))
                .body("[0].'cioc'", containsString("SYR"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_35_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/currency/KHFvBnVtSgxRnF?fields=2GZivo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_36_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/alpha/CVI9L69K8RZKvF18?fields=_8IQHVOBXTKr")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_37_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/currency/REkv")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_38_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/alpha/0Bjzbs")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_39_getOnV2RegionalblocWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/W8MeVQ8c?fields=3P1HrUHFBp40BiG")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_40_getOnV2DemonymWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/demonym/KEyje?fields=nThhEDROr0nwfu")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_41_getOnV2LangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/lang/WCmjTYb0NPvj")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_42_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/subregion/AILRZ3V")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_43_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/region/1R3?fields=58X7bUzTju2p83")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_44_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/capital/wlGYrFDVh8")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_45_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/callingcode/D2YHWhjXcnY?fields=opLEmOT2lgXXrF4")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_46_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/name/VA0xFehsr?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_47_getOnV1LangReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/lang/L")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_48_getOnSubregionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/subregion/Fjk")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/region/{region}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_49_getOnRegionReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/region/xU6v6t")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_50_getOnCapitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/capital/OgARJTze")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_51_getOnCallingcodReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/callingcode/kDOowII__YZmZXr")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_52_getOnNameReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/name/ZKgQ85AIv5?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_53_getOnV2LangWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/lang/I4sXKziPP?fields=Ue")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_54_getOnV2RegionalblocReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/Africa")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_55_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v1/currency/cqq")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_56_getOnCurrencReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/currency/UYI")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_57_getOnAlphaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/rest/v2/alpha/qeT")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }


}
