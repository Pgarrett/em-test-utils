import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-02-16T15:42:45.711-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 70 tests
 * <br>
*  Covered targets: 352
 * <br>
*  Used time: 0h 15m 1s
 * <br>
*  Needed budget for current results: 75%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.embedded.uk.gov.pay.api.app.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments/{paymentId}/refunds
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_0_getOnPaymentRefundsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments/{paymentId}/refunds
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/refunds -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/refunds -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "_EM_116_XYZ_")
                .get(baseUrlOfSut + "/v1/payments/TNM1IGVWLop6e/refunds")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments/{paymentId}/refunds/{refundId}
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_1_getOnRefundShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments/{paymentId}/refunds/{refundId}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/refunds/{refundId} -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/refunds/{refundId} -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "dpKxD1VfkzCDeh")
                .header("X-Forwarded-For", "7393MnV")
                .header("x-forwarded-for", "8q5bTIafzUF")
                .get(baseUrlOfSut + "/v1/payments/qqveRm/refunds/pJbfEVh?" + 
                    "from_settled_date=_EM_5283_XYZ_&" + 
                    "from_date=dn62c_b")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments/{paymentId}/refunds/{refundId}
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_2_getOnRefundShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments/{paymentId}/refunds/{refundId}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/refunds/{refundId} -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/refunds/{refundId} -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "_EM_5294_XYZ_")
                .header("x-forwarded-for", "_EM_5295_XYZ_")
                .get(baseUrlOfSut + "/v1/payments/_EM_5291_XYZ_/refunds/QvG2f6p79U4aSj4?" + 
                    "display_size=_EM_5298_XYZ_&" + 
                    "page=_EM_5299_XYZ_")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments/{paymentId}/events
    * Found 3 potential faults. Type-codes: 100, 200
    * Using 1 example:
    *   hu20sqlact5260q2nanm0q8u93
    */
    @Test(timeout = 60000)
    public void test_3_getOnEventsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments/{paymentId}/events
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/events -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/events -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("X-Forwarded-For", "8JSaSD")
                .get(baseUrlOfSut + "/v1/payments/hu20sqlact5260q2nanm0q8u93/events?" + 
                    "from_settled_date=3LGjCjVMiwjSw&" + 
                    "to_date=04iR5Z3gRCMI")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    * Using 2 examples:
    *   Joe.Bogs@example.org
    *   New passport application
    */
    @Test(timeout = 60000)
    public void test_4_postOnPaymentsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 717, " + 
                    " \"reference\": \"mB6rA6zp5YfquO\", " + 
                    " \"description\": \"New passport application\", " + 
                    " \"email\": \"Joe.Bogs@example.org\", " + 
                    " \"return_url\": \"_EM_96835_XYZ_\", " + 
                    " \"delayed_capture\": false " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments?" + 
                    "from_date=ZY3i7Mmy5DoacVw&" + 
                    "to_date=7&" + 
                    "page=7dE35H")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments/{paymentId}/events
    * Found 3 potential faults. Type-codes: 100, 200
    * Using 1 example:
    *   hu20sqlact5260q2nanm0q8u93
    */
    @Test(timeout = 60000)
    public void test_5_getOnEventsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments/{paymentId}/events
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/events -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/events -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "sOWBbTP_")
                .header("x-forwarded-for", "FAw2jqlq")
                .get(baseUrlOfSut + "/v1/payments/hu20sqlact5260q2nanm0q8u93/events?" + 
                    "from_settled_date=_EM_111115_XYZ_&" + 
                    "from_date=wSvgHc&" + 
                    "to_date=ApprG&" + 
                    "display_size=_EM_111117_XYZ_&" + 
                    "page=T7buw4At")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments/{paymentId}/events
    * Found 3 potential faults. Type-codes: 100, 200
    * Using 1 example:
    *   hu20sqlact5260q2nanm0q8u93
    */
    @Test(timeout = 60000)
    public void test_6_getOnPaymentEventsWithQueryParamsEmptyFrom_dateShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments/{paymentId}/events
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/events -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/events -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("X-Forwarded-For", "6lRPQvoTHFSeE")
                .get(baseUrlOfSut + "/v1/payments/hu20sqlact5260q2nanm0q8u93/events?" + 
                    "from_settled_date=CHpF2u88OFiSo&" + 
                    "from_date=&" + 
                    "page=_EM_114269_XYZ_")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments/{paymentId}/events
    * Found 3 potential faults. Type-codes: 100, 200
    * Using 1 example:
    *   hu20sqlact5260q2nanm0q8u93
    */
    @Test(timeout = 60000)
    public void test_7_getOnEventsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments/{paymentId}/events
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/events -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/events -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v1/payments/hu20sqlact5260q2nanm0q8u93/events?" + 
                    "to_date=ApprG&" + 
                    "display_size=_EM_111117_XYZ_")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    * Using 1 example:
    *   https://service-name.gov.uk/transactions/12345
    */
    @Test(timeout = 60000)
    public void test_8_postOnPaymentsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "iGa2HnB")
                .header("X-Request-Id", "_EM_97651_XYZ_")
                .header("x-forwarded-for", "_EM_97652_XYZ_")
                .header("X-Forwarded-For", "_EM_97653_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 74, " + 
                    " \"reference\": \"_EM_97646_XYZ_\", " + 
                    " \"description\": \"_EM_97647_XYZ_\", " + 
                    " \"return_url\": \"https://service-name.gov.uk/transactions/12345\", " + 
                    " \"delayed_capture\": false, " + 
                    " \"metadata\": { " + 
                    " \"_EM_97648_XYZ_\": { " + 
                    " \"EM_tainted_map\": \"_EM_0_XYZ_\" " + 
                    " }, " + 
                    " \"_EM_97649_XYZ_\": { " + 
                    " \"EM_tainted_map\": \"_EM_0_XYZ_\" " + 
                    " } " + 
                    " }, " + 
                    " \"prefilled_cardholder_details\": { " + 
                    " \"cardholder_name\": \"DAVwTyoQ_q9s\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments?" + 
                    "state=YRJY5&" + 
                    "cardholder_name=_RTRwEFt")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments/{paymentId}/cancel
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_9_postOnPaymentCancelWithQueryParamsEmptyPageShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments/{paymentId}/cancel
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/cancel -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/cancel -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "_EM_18317_XYZ_")
                .header("X-Request-Id", "5oSSxJN")
                .header("x-forwarded-for", "")
                .post(baseUrlOfSut + "/v1/payments/_EM_18315_XYZ_/cancel?" + 
                    "from_settled_date=_EM_18319_XYZ_&" + 
                    "display_size=_EM_18320_XYZ_&" + 
                    "card_brand=_EM_18321_XYZ_&" + 
                    "page=")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments/{paymentId}/cancel
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_10_postOnCancelShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments/{paymentId}/cancel
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/cancel -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/cancel -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/v1/payments/_EM_119255_XYZ_/cancel?" + 
                    "from_settled_date=lo&" + 
                    "to_date=OHb7dPy6Ttz8X&" + 
                    "display_size=nZ&" + 
                    "page=vm&" + 
                    "cardholder_name=iC01p&" + 
                    "email=1MVCFoKOC5r")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments/{paymentId}/cancel
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_11_postOnPaymentCancelWithQueryParamsEmptyCardholder_name() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments/{paymentId}/cancel
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/cancel -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/cancel -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "_EM_18317_XYZ_")
                .header("X-Request-Id", "5oSSxJN")
                .header("x-forwarded-for", "_EM_24244_XYZ_")
                .header("X-Forwarded-For", "_EM_18318_XYZ_")
                .post(baseUrlOfSut + "/v1/payments/_EM_18315_XYZ_/cancel?" + 
                    "EMextraParam123=_EM_18316_XYZ_&" + 
                    "from_settled_date=ArdiK3Hs0r2&" + 
                    "from_date=AXiyR9L1gEXWOz&" + 
                    "to_date=6Eql&" + 
                    "display_size=EXTtxLDi5RY&" + 
                    "card_brand=_EM_18321_XYZ_&" + 
                    "page=_EM_24245_XYZ_&" + 
                    "cardholder_name=&" + 
                    "email=12bLuoNq%3DLZy")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_12_postOnPaymentsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("X-Forwarded-For", "_EM_114075_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 398, " + 
                    " \"reference\": \"Lh2MwSg3\", " + 
                    " \"description\": \"_EM_114070_XYZ_\", " + 
                    " \"language\": \"EVOMASTER\", " + 
                    " \"return_url\": \"8ofbe5yQfdPnz\", " + 
                    " \"metadata\": { " + 
                    " \"tnHyLnaZ8kRQtb\": { " + 
                    " \"EM_tainted_map\": \"_EM_0_XYZ_\" " + 
                    " }, " + 
                    " \"_EM_114071_XYZ_\": { " + 
                    " \"EM_tainted_map\": \"_EM_0_XYZ_\" " + 
                    " }, " + 
                    " \"_EM_114072_XYZ_\": { " + 
                    " \"EM_tainted_map\": \"_EM_0_XYZ_\" " + 
                    " }, " + 
                    " \"Hk4U\": { " + 
                    " \"EM_tainted_map\": \"_EM_0_XYZ_\" " + 
                    " } " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments?" + 
                    "from_settled_date=dlHzvLzU2UuM6z&" + 
                    "to_date=cy6&" + 
                    "card_brand=_EM_114076_XYZ_&" + 
                    "state=_EM_114077_XYZ_&" + 
                    "page=aa093rPs1KCGNcZL&" + 
                    "cardholder_name=_EM_114078_XYZ_")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments/{paymentId}/cancel
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_13_postOnPaymentCancelWithQueryParamsEmptyFrom_dateShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments/{paymentId}/cancel
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/cancel -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/cancel -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("X-Request-Id", "L")
                .post(baseUrlOfSut + "/v1/payments/S_jXIcrn/cancel?" + 
                    "from_date=&" + 
                    "to_date=_1DWS5u7MU&" + 
                    "card_brand=zvwnLReOx&" + 
                    "page=3eyNzoctY8i7GC&" + 
                    "email=hkT7oJ9frWx5")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments/{paymentId}
    * Found 3 potential faults. Type-codes: 100, 200
    * Using 1 example:
    *   hu20sqlact5260q2nanm0q8u93
    */
    @Test(timeout = 60000)
    public void test_14_getOnPaymentShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments/{paymentId}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId} -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId} -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("X-Forwarded-For", "uQYuXVwF")
                .get(baseUrlOfSut + "/v1/payments/hu20sqlact5260q2nanm0q8u93?" + 
                    "card_brand=_EM_104074_XYZ_&" + 
                    "page=_EM_104075_XYZ_&" + 
                    "first_digits_card_number=_EM_104076_XYZ_")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments/{paymentId}
    * Found 3 potential faults. Type-codes: 100, 200
    * Using 1 example:
    *   hu20sqlact5260q2nanm0q8u93
    */
    @Test(timeout = 60000)
    public void test_15_getOnV1PaymentWithQueryParamsEmptyReferenceShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments/{paymentId}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId} -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId} -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("X-Request-Id", "BrjCG0mE")
                .header("x-forwarded-for", "4X")
                .get(baseUrlOfSut + "/v1/payments/hu20sqlact5260q2nanm0q8u93?" + 
                    "reference=&" + 
                    "from_settled_date=8&" + 
                    "first_digits_card_number=JqrVl_ZBYR")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments/{paymentId}
    * Found 3 potential faults. Type-codes: 100, 200
    * Using 1 example:
    *   hu20sqlact5260q2nanm0q8u93
    */
    @Test(timeout = 60000)
    public void test_16_getOnPaymentShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments/{paymentId}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId} -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId} -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("X-Request-Id", "_EM_105317_XYZ_")
                .get(baseUrlOfSut + "/v1/payments/hu20sqlact5260q2nanm0q8u93?" + 
                    "reference=l8fdfqgvdpj&" + 
                    "first_digits_card_number=_EM_105320_XYZ_&" + 
                    "cardholder_name=s")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments/{paymentId}
    * Found 3 potential faults. Type-codes: 100, 200
    * Using 1 example:
    *   hu20sqlact5260q2nanm0q8u93
    */
    @Test(timeout = 60000)
    public void test_17_getOnPaymentShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments/{paymentId}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId} -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId} -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "_EM_107631_XYZ_")
                .get(baseUrlOfSut + "/v1/payments/hu20sqlact5260q2nanm0q8u93?" + 
                    "to_date=_EM_107634_XYZ_&" + 
                    "card_brand=OStCg&" + 
                    "page=_0C0zhSmZZ")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/refunds
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_18_getOnV1RefundsWithQueryParamsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/refunds
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/refunds -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/refunds -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "LPlyDfu")
                .header("X-Request-Id", "_EM_12034_XYZ_")
                .header("X-Forwarded-For", "_EM_12035_XYZ_")
                .get(baseUrlOfSut + "/v1/refunds?" + 
                    "from_date=_EM_12030_XYZ_&" + 
                    "page=_EM_12032_XYZ_&" + 
                    "display_size=GER7NuNfN5&" + 
                    "EMextraParam123=42&" + 
                    "email=_EM_12037_XYZ_")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments/{paymentId}/cancel
    * Found 3 potential faults. Type-codes: 100, 200
    * Using 1 example:
    *   hu20sqlact5260q2nanm0q8u93
    */
    @Test(timeout = 60000)
    public void test_19_postOnCancelShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments/{paymentId}/cancel
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/cancel -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/cancel -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "0qNRY")
                .header("X-Request-Id", "9UQHgYThSwg")
                .header("X-Forwarded-For", "KKt")
                .post(baseUrlOfSut + "/v1/payments/hu20sqlact5260q2nanm0q8u93/cancel?" + 
                    "from_settled_date=QFhx7ROSRTeKOAi&" + 
                    "to_date=_EM_124866_XYZ_&" + 
                    "card_brand=j_iWdXppG&" + 
                    "cardholder_name=w1j2L9bJ")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments/{paymentId}/capture
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_20_postOnPaymentCaptureWithQueryParamsEmptyDisplay_sizeShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments/{paymentId}/capture
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/capture -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/capture -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "_EM_21684_XYZ_")
                .header("X-Request-Id", "_EM_21685_XYZ_")
                .header("x-forwarded-for", "3cZVrSuF_EslmHD")
                .header("X-Forwarded-For", "_EM_21686_XYZ_")
                .post(baseUrlOfSut + "/v1/payments/Mc/capture?" + 
                    "display_size=&" + 
                    "last_digits_card_number=_EM_21687_XYZ_&" + 
                    "from_settled_date=CZvcf9U6cC9h&" + 
                    "to_settled_date=D9qj34KTlbV5GMU&" + 
                    "to_date=tqHPydh&" + 
                    "first_digits_card_number=MlwdicVNe4j1KKpG")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments/{paymentId}/capture
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_21_postOnPaymentCaptureWithQueryParamsEmptyTo_settled_date() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments/{paymentId}/capture
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/capture -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/capture -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "GLt2GKw4PNhs0AW")
                .header("X-Request-Id", "F0ExnVt8Fa")
                .post(baseUrlOfSut + "/v1/payments/_EM_76196_XYZ_/capture?" + 
                    "to_settled_date=&" + 
                    "to_date=_EM_76201_XYZ_&" + 
                    "first_digits_card_number=kcXoWYUwI9a8")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments/{paymentId}/capture
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_22_postOnPaymentCaptureWithQueryParamsEmptyLast_digits_card_number() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments/{paymentId}/capture
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/capture -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/capture -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "GLt2GKw4PNhs0AW")
                .header("X-Request-Id", "F0ExnVt8Fa")
                .post(baseUrlOfSut + "/v1/payments/1/capture?" + 
                    "display_size=JQZe7cDSj2&" + 
                    "reference=w&" + 
                    "last_digits_card_number=&" + 
                    "from_settled_date=_EM_76200_XYZ_&" + 
                    "to_settled_date=f&" + 
                    "to_date=_EM_76201_XYZ_&" + 
                    "state=Fe&" + 
                    "first_digits_card_number=kcXoWYUwI9a8&" + 
                    "email=_EM_76971_XYZ_&" + 
                    "cardholder_name=_V1dDEJM")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments/{paymentId}/capture
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_23_postOnCaptureShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments/{paymentId}/capture
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/capture -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/capture -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("X-Request-Id", "PaQ0YWm")
                .header("X-Forwarded-For", "_EM_117276_XYZ_")
                .post(baseUrlOfSut + "/v1/payments/vp/capture?" + 
                    "display_size=LaG3w852O6NQxx&" + 
                    "last_digits_card_number=_D&" + 
                    "first_digits_card_number=_EM_117277_XYZ_")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments/{paymentId}/capture
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_24_postOnCaptureShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments/{paymentId}/capture
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/capture -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/capture -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("X-Request-Id", "l566JNax")
                .header("X-Forwarded-For", "2kUtzdAWck_Gy")
                .post(baseUrlOfSut + "/v1/payments/_EM_24457_XYZ_/capture?" + 
                    "EMextraParam123=s2_dcMfd&" + 
                    "display_size=_EM_24460_XYZ_&" + 
                    "last_digits_card_number=Q4oru&" + 
                    "to_date=ZQ_w1MOrc8lzFnD6&" + 
                    "cardholder_name=_EM_24463_XYZ_")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    * Using 3 examples:
    *   AB1 2CD
    *   address line 2
    *   https://service-name.gov.uk/transactions/12345
    */
    @Test(timeout = 60000)
    public void test_25_postOnV1PaymentsWithQueryParamsEmptyCardholder_nameShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "_EM_109419_XYZ_")
                .header("X-Request-Id", "_EM_109420_XYZ_")
                .header("x-forwarded-for", "_EM_109421_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 613, " + 
                    " \"reference\": \"LEBhHAEEHgXq\", " + 
                    " \"description\": \"_EM_109414_XYZ_\", " + 
                    " \"email\": \"GPljTolpyzoq4Y\", " + 
                    " \"return_url\": \"https://service-name.gov.uk/transactions/12345\", " + 
                    " \"delayed_capture\": false, " + 
                    " \"moto\": true, " + 
                    " \"prefilled_cardholder_details\": { " + 
                    " \"billing_address\": { " + 
                    " \"line2\": \"address line 2\", " + 
                    " \"postcode\": \"AB1 2CD\", " + 
                    " \"city\": \"tD\", " + 
                    " \"country\": \"Ze1XpOh\" " + 
                    " } " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments?" + 
                    "card_brand=_EM_109423_XYZ_&" + 
                    "state=_EM_109424_XYZ_&" + 
                    "cardholder_name=")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    * Using 3 examples:
    *   12000
    *   12345
    *   Joe.Bogs@example.org
    */
    @Test(timeout = 60000)
    public void test_26_postOnV1PaymentsWithQueryParamsEmptyCard_brandShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "Q0")
                .header("x-forwarded-for", "GYZk8_F")
                .header("X-Forwarded-For", "QbVaChtZPgeB")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 12000, " + 
                    " \"reference\": \"12345\", " + 
                    " \"description\": \"vvmMo0_ah1\", " + 
                    " \"email\": \"Joe.Bogs@example.org\", " + 
                    " \"return_url\": \"xRZM\", " + 
                    " \"delayed_capture\": false, " + 
                    " \"moto\": false " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments?" + 
                    "last_digits_card_number=SvFMokPM&" + 
                    "from_settled_date=oqOlT&" + 
                    "card_brand=&" + 
                    "page=xHRmwKs&" + 
                    "cardholder_name=oN")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments/{paymentId}/refunds
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_27_postOnRefundsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments/{paymentId}/refunds
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/refunds -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/refunds -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-forwarded-for", "bGA")
                .header("X-Forwarded-For", "_EM_97362_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 9999387, " + 
                    " \"refund_amount_available\": 491 " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments/z2FOI9y/refunds?" + 
                    "reference=dEjut_WV&" + 
                    "from_settled_date=5Qr33&" + 
                    "card_brand=O5d&" + 
                    "state=_EM_97364_XYZ_&" + 
                    "page=ZRpYAPqgOLV&" + 
                    "from_date=_EM_97365_XYZ_&" + 
                    "to_date=_EM_97366_XYZ_")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments/{paymentId}/refunds
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_28_postOnRefundsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments/{paymentId}/refunds
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/refunds -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/refunds -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("X-Request-Id", "g")
                .header("x-forwarded-for", "XrYmu8tBP")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 9999924 " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments/o7I9cbwI/refunds?" + 
                    "reference=SPdBzwpObGRm&" + 
                    "cardholder_name=_EM_116050_XYZ_&" + 
                    "to_date=4URBK8lM5NUVzL")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments/{paymentId}/refunds
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_29_postOnRefundsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments/{paymentId}/refunds
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/refunds -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/refunds -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "1")
                .header("X-Request-Id", "gfW4l3Vs4h")
                .header("x-forwarded-for", "_EM_70229_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 9999374 " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments/_EM_70228_XYZ_/refunds?" + 
                    "reference=dJ0BKh5Ju3&" + 
                    "to_settled_date=a_m78WdnOwRN&" + 
                    "state=WS&" + 
                    "cardholder_name=hfYd5rUi8eUG1cv&" + 
                    "from_date=_EM_70231_XYZ_&" + 
                    "display_size=FpYf")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments/{paymentId}/refunds
    * Found 3 potential faults. Type-codes: 100, 200
    * Using 1 example:
    *   200000
    */
    @Test(timeout = 60000)
    public void test_30_postOnRefundsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments/{paymentId}/refunds
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/refunds -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/refunds -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "_EM_65553_XYZ_")
                .header("X-Request-Id", "6_m6Vbg0CzZB")
                .header("X-Forwarded-For", "bSH6J")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 904, " + 
                    " \"refund_amount_available\": 200000 " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments/_new9vCGATFYm/refunds?" + 
                    "card_brand=5CP5B1i0sveL38&" + 
                    "state=_EM_65557_XYZ_&" + 
                    "page=_EM_65558_XYZ_&" + 
                    "to_date=GZgLPaT5IP")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    * Using 4 examples:
    *   12000
    *   12345
    *   address city
    *   address line 1
    */
    @Test(timeout = 60000)
    public void test_31_postOnPaymentsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-forwarded-for", "sjI8o_uwgcl")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 12000, " + 
                    " \"reference\": \"12345\", " + 
                    " \"description\": \"6mW5OoxqLG8G9M9\", " + 
                    " \"return_url\": \"r9pKTXE1ZZW\", " + 
                    " \"delayed_capture\": false, " + 
                    " \"metadata\": { " + 
                    " \"_EM_136891_XYZ_\": { " + 
                    " \"EM_tainted_map\": \"_EM_0_XYZ_\" " + 
                    " } " + 
                    " }, " + 
                    " \"prefilled_cardholder_details\": { " + 
                    " \"billing_address\": { " + 
                    " \"line1\": \"address line 1\", " + 
                    " \"postcode\": \"m5ZKIMNU0\", " + 
                    " \"city\": \"address city\", " + 
                    " \"country\": \"leFh7bs3HmYCN\" " + 
                    " } " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments?" + 
                    "last_digits_card_number=LRbj&" + 
                    "state=EDcFZM2LZ8oB6&" + 
                    "cardholder_name=on74NxsZ")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    * Using 4 examples:
    *   12345
    *   GB
    *   J. Bogs
    *   address line 2
    */
    @Test(timeout = 60000)
    public void test_32_postOnPaymentsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "98fV")
                .header("x-forwarded-for", "_EM_101957_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 353, " + 
                    " \"reference\": \"12345\", " + 
                    " \"description\": \"\", " + 
                    " \"return_url\": \"D8runAlJQ4CQ\", " + 
                    " \"delayed_capture\": true, " + 
                    " \"prefilled_cardholder_details\": { " + 
                    " \"cardholder_name\": \"J. Bogs\", " + 
                    " \"billing_address\": { " + 
                    " \"line1\": \"_EM_101954_XYZ_\", " + 
                    " \"line2\": \"address line 2\", " + 
                    " \"postcode\": \"6d\", " + 
                    " \"country\": \"GB\" " + 
                    " } " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments?" + 
                    "card_brand=adVJ&" + 
                    "state=_EM_101959_XYZ_&" + 
                    "page=_EM_101960_XYZ_")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments/{paymentId}/refunds
    * Found 3 potential faults. Type-codes: 100, 200
    * Using 1 example:
    *   200000
    */
    @Test(timeout = 60000)
    public void test_33_postOnRefundsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments/{paymentId}/refunds
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/refunds -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/refunds -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "_EM_65553_XYZ_")
                .header("X-Request-Id", "_EM_95654_XYZ_")
                .header("X-Forwarded-For", "bSH6J")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 904, " + 
                    " \"refund_amount_available\": 200000 " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments/_EM_95653_XYZ_/refunds?" + 
                    "to_settled_date=_EM_65556_XYZ_&" + 
                    "card_brand=5CP5B1i0sveL38&" + 
                    "state=NCRNXVTVtV9&" + 
                    "page=Q&" + 
                    "cardholder_name=_EM_65559_XYZ_&" + 
                    "from_date=_EM_95655_XYZ_&" + 
                    "to_date=GZgLPaT5IP&" + 
                    "display_size=7YDVD_j")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_34_getOnPaymentsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v1/payments?" + 
                    "reference=4wwl5kT3c5Id3u&" + 
                    "email=gnKEIxZsEWy&" + 
                    "first_digits_card_number=I1byqDP_fi20")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_35_getOnPaymentsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "_EM_898_XYZ_")
                .header("x-request-id", "Z")
                .header("X-Request-Id", "_EM_899_XYZ_")
                .header("X-Forwarded-For", "G9k")
                .get(baseUrlOfSut + "/v1/payments?" + 
                    "reference=_EM_891_XYZ_&" + 
                    "state=cancelled&" + 
                    "from_date=_EM_893_XYZ_&" + 
                    "to_date=a4Lz&" + 
                    "display_size=_EM_895_XYZ_&" + 
                    "cardholder_name=_EM_896_XYZ_")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_36_getOnPaymentsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "_EM_792_XYZ_")
                .header("X-Request-Id", "_EM_668_XYZ_")
                .header("X-Forwarded-For", "_EM_669_XYZ_")
                .header("x-forwarded-for", "_EM_670_XYZ_")
                .get(baseUrlOfSut + "/v1/payments?" + 
                    "email=vuqTL52pOKMeuD&" + 
                    "state=error&" + 
                    "to_date=_EM_790_XYZ_&" + 
                    "page=_EM_664_XYZ_&" + 
                    "display_size=Z&" + 
                    "cardholder_name=_EM_666_XYZ_&" + 
                    "first_digits_card_number=lSK&" + 
                    "last_digits_card_number=_EM_791_XYZ_&" + 
                    "from_settled_date=P0")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_37_getOnPaymentsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "osYnKBs")
                .header("X-Forwarded-For", "_EM_1097_XYZ_")
                .header("x-forwarded-for", "_EM_1098_XYZ_")
                .get(baseUrlOfSut + "/v1/payments?" + 
                    "state=created&" + 
                    "card_brand=_EM_1089_XYZ_&" + 
                    "page=_EM_1090_XYZ_&" + 
                    "cardholder_name=G7ejDWsaDwP&" + 
                    "first_digits_card_number=_EM_1092_XYZ_&" + 
                    "to_settled_date=msutAh_qER3zFll")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_38_getOnPaymentsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "_EM_10_XYZ_")
                .header("X-Forwarded-For", "udwg1Fx")
                .get(baseUrlOfSut + "/v1/payments?" + 
                    "state=created&" + 
                    "card_brand=Umw9xoYE1N3&" + 
                    "to_date=x1DNsCdRIeghW&" + 
                    "page=vieS54&" + 
                    "last_digits_card_number=MUQWg&" + 
                    "to_settled_date=WamBl3Y")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_39_getOnPaymentsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("X-Request-Id", "_EM_4133_XYZ_")
                .header("X-Forwarded-For", "bsih")
                .get(baseUrlOfSut + "/v1/payments?" + 
                    "reference=NOkiSpt_KfrV4AcF&" + 
                    "email=xc2T7G7gDc&" + 
                    "state=EVOMASTER&" + 
                    "display_size=_EM_4130_XYZ_&" + 
                    "first_digits_card_number=5G93j&" + 
                    "last_digits_card_number=fUAXSz9LyVGqyk")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_40_getOnPaymentsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "s0tdB3HoE3RY")
                .header("X-Request-Id", "_EM_4451_XYZ_")
                .header("X-Forwarded-For", "ezvOiBWQALe0")
                .get(baseUrlOfSut + "/v1/payments?" + 
                    "reference=uEjbq9k8Qnv&" + 
                    "state=started&" + 
                    "card_brand=FUHiPJLZ&" + 
                    "from_date=DsQANcFY&" + 
                    "display_size=_EM_4448_XYZ_&" + 
                    "cardholder_name=gQNWzIy5BgYF6A5&" + 
                    "last_digits_card_number=_EM_4449_XYZ_")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_41_getOnPaymentsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "_EM_792_XYZ_")
                .header("X-Request-Id", "M31Ihp25CE_4")
                .header("X-Forwarded-For", "R")
                .header("x-forwarded-for", "JFo")
                .get(baseUrlOfSut + "/v1/payments?" + 
                    "email=vuqTL52pOKMeuD&" + 
                    "state=failed&" + 
                    "to_date=_EM_790_XYZ_&" + 
                    "page=4Eb07pwIt&" + 
                    "display_size=Z&" + 
                    "cardholder_name=M9hJS%5E&" + 
                    "first_digits_card_number=_EM_1589_XYZ_&" + 
                    "last_digits_card_number=_EM_1590_XYZ_&" + 
                    "from_settled_date=P0&" + 
                    "to_settled_date=gnRlWkao&" + 
                    "EMextraParam123=essHy9IIK2Su")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_42_getOnPaymentsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "8u9PiQEI_Yr")
                .get(baseUrlOfSut + "/v1/payments?" + 
                    "email=QfQULjH2FSIH&" + 
                    "state=submitted&" + 
                    "page=_EM_1605_XYZ_&" + 
                    "first_digits_card_number=YU1tuW7vN86QKf&" + 
                    "to_settled_date=_EM_1607_XYZ_")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_43_getOnV1PaymentsWithQueryParamsEmptyTo_dateShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "_EM_2268_XYZ_")
                .header("X-Request-Id", "f")
                .header("X-Forwarded-For", "_EM_2270_XYZ_")
                .header("x-forwarded-for", "4SQ")
                .get(baseUrlOfSut + "/v1/payments?" + 
                    "reference=Wjl&" + 
                    "email=0Ch0qjKY0LrrlZNf&" + 
                    "state=success&" + 
                    "to_date=&" + 
                    "page=_EM_2264_XYZ_&" + 
                    "display_size=_EM_2265_XYZ_&" + 
                    "cardholder_name=nuc28u&" + 
                    "first_digits_card_number=lW8wND5vt&" + 
                    "last_digits_card_number=_EM_2266_XYZ_")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/v1/payments/{paymentId}/refunds
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_44_getOnRefundsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/refunds -> GET on path '/v1/payments/{paymentId}/refunds' defines a response schema but no response body found.
        given().accept("*/*")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "]")
                .header("X-Request-Id", "b5x")
                .header("X-Forwarded-For", "")
                .header("x-forwarded-for", "")
                .get(baseUrlOfSut + "/v1/payments/zhDgv6kCV/refunds")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/v1/payments/{paymentId}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_45_getOnPaymentReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId} -> GET on path '/v1/payments/{paymentId}' defines a response schema but no response body found.
        given().accept("*/*")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "ek_YU1N5pXLa")
                .header("X-Request-Id", "Xm_zSc8Wsr3x")
                .header("X-Forwarded-For", "")
                .header("x-forwarded-for", "")
                .get(baseUrlOfSut + "/v1/payments/g6Y")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/v1/payments/{paymentId}/refunds/{refundId}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_46_getOnPaymentRefundWithQueryParamsEmptyPageReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/refunds/{refundId} -> GET on path '/v1/payments/{paymentId}/refunds/{refundId}' defines a response schema but no response body found.
        given().accept("*/*")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "5i3DHQMXPJfI")
                .header("X-Forwarded-For", "")
                .header("x-forwarded-for", "")
                .get(baseUrlOfSut + "/v1/payments/xHhX0u3m4eD/refunds/VqrYdvcU?" + 
                    "from_settled_date=fsh&" + 
                    "from_date=_EM_134173_XYZ_&" + 
                    "to_date=_EM_134128_XYZ_&" + 
                    "display_size=f93k0wuQChYZWmRA&" + 
                    "page=")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) POST:/v1/payments
    * Found 1 potential fault of type-code 200
    * Using 1 example:
    *   12345
    */
    @Test(timeout = 60000)
    public void test_47_postOnV1PaymentsWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments -> Response status 200 not defined for path '/v1/payments'.
        given().accept("*/*")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "JMoAi")
                .header("x-forwarded-for", "")
                .header("X-Forwarded-For", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 35, " + 
                    " \"reference\": \"12345\", " + 
                    " \"description\": \"do8jzXF\", " + 
                    " \"language\": \"cy\", " + 
                    " \"email\": \"MtenVtiE\", " + 
                    " \"return_url\": \"i\", " + 
                    " \"delayed_capture\": true, " + 
                    " \"moto\": true, " + 
                    " \"prefilled_cardholder_details\": {} " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments?page=F_M")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/v1/refunds
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_48_getOnRefundsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/refunds -> GET on path '/v1/refunds' defines a response schema but no response body found.
        given().accept("*/*")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "42")
                .header("x-request-id", "ZKuF9xJOzvCfqT")
                .header("X-Forwarded-For", "")
                .header("x-forwarded-for", "")
                .get(baseUrlOfSut + "/v1/refunds?" + 
                    "from_settled_date=LNQRxuG&" + 
                    "page=_EM_30532_XYZ_&" + 
                    "EMextraParam123=_EM_30533_XYZ_&" + 
                    "card_brand=A4J01lWGc&" + 
                    "state=_EM_30534_XYZ_&" + 
                    "cardholder_name=hEKtTd78&" + 
                    "email=RFmYM9pGiHExB7C")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/v1/refunds
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_49_getOnRefundsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/refunds -> GET on path '/v1/refunds' defines a response schema but no response body found.
        given().accept("*/*")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "7qYAh91l9sZSieYd")
                .header("X-Request-Id", "_EM_91340_XYZ_")
                .header("X-Forwarded-For", "")
                .header("x-forwarded-for", "")
                .get(baseUrlOfSut + "/v1/refunds?" + 
                    "to_date=_EM_91338_XYZ_&" + 
                    "to_settled_date=ccG7Lcgc&" + 
                    "cardholder_name=l")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/v1/payments/{paymentId}/capture
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_50_postOnCaptureReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/capture -> Response Content-Type header 'text/html;charset=iso-8859-1' does not match any allowed types. Must be one of: [application/json].
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "Voo")
                .header("X-Request-Id", "fo")
                .header("x-forwarded-for", "_EM_2507_XYZ_")
                .header("X-Forwarded-For", "foo")
                .post(baseUrlOfSut + "/v1/payments/_EM_14_XYZ_/capture?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) POST:/v1/payments/{paymentId}/cancel
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_51_postOnCancelReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/cancel -> Response Content-Type header 'text/html;charset=iso-8859-1' does not match any allowed types. Must be one of: [application/json].
        given().accept("*/*")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "42")
                .header("x-request-id", "foo")
                .header("X-Request-Id", "fo")
                .header("x-forwarded-for", "fo")
                .header("X-Forwarded-For", "foo")
                .post(baseUrlOfSut + "/v1/payments/l/cancel")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/v1/payments/{paymentId}/refunds
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_52_getOnRefundsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/refunds -> Response status 400 not defined for path '/v1/payments/{paymentId}/refunds'.
        given().accept("*/*")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "42")
                .header("x-request-id", "RrGMWAOXU_HvSP")
                .header("X-Request-Id", "7Ot0aQF1zX")
                .header("X-Forwarded-For", "5e1Xu")
                .header("x-forwarded-for", "ed4ync9PF")
                .get(baseUrlOfSut + "/v1/payments/QK9MP/refunds")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) POST:/v1/payments/{paymentId}/refunds
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_53_postOnRefundsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/refunds -> Response status 400 not defined for path '/v1/payments/{paymentId}/refunds'.
        given().accept("*/*")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "_EM_11700_XYZ_")
                .header("X-Request-Id", "foo")
                .header("x-forwarded-for", "fo")
                .header("X-Forwarded-For", "_EM_11701_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 1, " + 
                    " \"refund_amount_available\": 9999235 " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments/_EM_8025_XYZ_/refunds")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) POST:/v1/payments
    * Found 1 potential fault of type-code 200
    * Using 1 example:
    *   J. Bogs
    */
    @Test(timeout = 60000)
    public void test_54_postOnPaymentsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments -> Response Content-Type header 'text/html;charset=iso-8859-1' does not match any allowed types. Must be one of: [application/json].
        given().accept("*/*")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "_EM_2007_XYZ_")
                .header("x-request-id", "_EM_3088_XYZ_")
                .header("X-Request-Id", "foo")
                .header("x-forwarded-for", "fo")
                .header("X-Forwarded-For", "fo")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 10, " + 
                    " \"reference\": \"QjK6yROn_xEQppTi\", " + 
                    " \"description\": \"_EM_2003_XYZ_\", " + 
                    " \"language\": \"cy\", " + 
                    " \"email\": \"_EM_2004_XYZ_\", " + 
                    " \"return_url\": \"QnR1\", " + 
                    " \"moto\": false, " + 
                    " \"metadata\": { " + 
                    " \"dr\": { " + 
                    " \"EM_tainted_map\": \"_EM_0_XYZ_\" " + 
                    " }, " + 
                    " \"E\": { " + 
                    " \"EM_tainted_map\": \"_EM_0_XYZ_\" " + 
                    " } " + 
                    " }, " + 
                    " \"prefilled_cardholder_details\": { " + 
                    " \"cardholder_name\": \"J. Bogs\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/v1/payments/{paymentId}/refunds/{refundId}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_55_getOnPaymentRefundWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/refunds/{refundId} -> Response status 400 not defined for path '/v1/payments/{paymentId}/refunds/{refundId}'.
        given().accept("*/*")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("X-Request-Id", "A0Kl2yUAHKBsM")
                .header("X-Forwarded-For", "kJog7hpV_aBbG0G")
                .get(baseUrlOfSut + "/v1/payments/oI/refunds/_AHOeGSL2giz7z?" + 
                    "from_settled_date=FpCNdsgNNLomI&" + 
                    "from_date=_EM_111533_XYZ_&" + 
                    "to_date=oC19Hot5fRF9K4r&" + 
                    "display_size=fZ9MqAwOrQseXCvv&" + 
                    "page=ce7X")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/v1/payments/{paymentId}/events
    * Found 1 potential fault of type-code 200
    * Using 1 example:
    *   hu20sqlact5260q2nanm0q8u93
    */
    @Test(timeout = 60000)
    public void test_56_getOnPaymentEventsWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/events -> Response status 400 not defined for path '/v1/payments/{paymentId}/events'.
        given().accept("*/*")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "42")
                .header("x-request-id", "4JjURXcHqtVm")
                .header("X-Request-Id", "_EM_21691_XYZ_")
                .header("X-Forwarded-For", "_EM_21692_XYZ_")
                .header("x-forwarded-for", "_EM_35910_XYZ_")
                .get(baseUrlOfSut + "/v1/payments/hu20sqlact5260q2nanm0q8u93/events?" + 
                    "EMextraParam123=zqQkI_DP8p&" + 
                    "from_settled_date=WElwIq&" + 
                    "from_date=_EM_21693_XYZ_&" + 
                    "to_date=C%C2%89UZpXhXGCFZXp&" + 
                    "display_size=_EM_35911_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/v1/payments
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_57_getOnPaymentsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> Response status 400 not defined for path '/v1/payments'.
        given().accept("*/*")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "u")
                .header("X-Request-Id", "_EM_28957_XYZ_")
                .header("X-Forwarded-For", "RRd1MWz0")
                .header("x-forwarded-for", "A")
                .get(baseUrlOfSut + "/v1/payments?" + 
                    "reference=6B0lNDlh4PF&" + 
                    "email=_x5_xFIqslJju5&" + 
                    "card_brand=TmahWWUamqoI0I&" + 
                    "cardholder_name=_EM_28954_XYZ_&" + 
                    "first_digits_card_number=S3XfZhA4Gk&" + 
                    "last_digits_card_number=Qb&" + 
                    "from_settled_date=_EM_28955_XYZ_&" + 
                    "to_settled_date=d_IXC")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (401) GET:/v1/payments/{paymentId}/refunds/{refundId}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_58_getOnPaymentRefundReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/refunds/{refundId} -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v1/payments/JB/refunds/_EM_1_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'servlet'", containsString("jersey"))
                .body("'message'", containsString("Unauthorized"))
                .body("'url'", containsString("/v1/payments/JB/refunds/_EM_1_XYZ_"))
                .body("'status'", containsString("401"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/v1/payments/{paymentId}/events
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_59_getOnPaymentEventsWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/events -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v1/payments/_EM_2_XYZ_/events?EMextraParam123=_EM_3_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'servlet'", containsString("jersey"))
                .body("'message'", containsString("Unauthorized"))
                .body("'url'", containsString("/v1/payments/_EM_2_XYZ_/events"))
                .body("'status'", containsString("401"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/v1/payments/{paymentId}/refunds
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_60_getOnPaymentRefundsWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/refunds -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v1/payments/1A7QYlmTxYt/refunds?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'servlet'", containsString("jersey"))
                .body("'message'", containsString("Unauthorized"))
                .body("'url'", containsString("/v1/payments/1A7QYlmTxYt/refunds"))
                .body("'status'", containsString("401"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/v1/payments/{paymentId}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_61_getOnPaymentReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId} -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v1/payments/IaxB9")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'servlet'", containsString("jersey"))
                .body("'message'", containsString("Unauthorized"))
                .body("'url'", containsString("/v1/payments/IaxB9"))
                .body("'status'", containsString("401"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/v1/payments
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_62_postOnPaymentsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_20_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 5, " + 
                    " \"reference\": \"8t4sDWKL6\", " + 
                    " \"description\": \"_EM_16_XYZ_\", " + 
                    " \"return_url\": \"4bHe7Rm8r9lFGGy6\", " + 
                    " \"delayed_capture\": true " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'servlet'", containsString("jersey"))
                .body("'message'", containsString("Unauthorized"))
                .body("'url'", containsString("/v1/payments"))
                .body("'status'", containsString("401"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/v1/payments/{paymentId}/cancel
    * Found 1 potential fault of type-code 200
    * Using 1 example:
    *   hu20sqlact5260q2nanm0q8u93
    */
    @Test(timeout = 60000)
    public void test_63_postOnCancelReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/cancel -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/v1/payments/hu20sqlact5260q2nanm0q8u93/cancel")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'servlet'", containsString("jersey"))
                .body("'message'", containsString("Unauthorized"))
                .body("'url'", containsString("/v1/payments/hu20sqlact5260q2nanm0q8u93/cancel"))
                .body("'status'", containsString("401"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/v1/payments/{paymentId}/capture
    * Found 1 potential fault of type-code 200
    * Using 1 example:
    *   hu20sqlact5260q2nanm0q8u93
    */
    @Test(timeout = 60000)
    public void test_64_postOnCaptureReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/capture -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/v1/payments/hu20sqlact5260q2nanm0q8u93/capture?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'servlet'", containsString("jersey"))
                .body("'message'", containsString("Unauthorized"))
                .body("'url'", containsString("/v1/payments/hu20sqlact5260q2nanm0q8u93/capture"))
                .body("'status'", containsString("401"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/v1/payments/{paymentId}/refunds
    * Found 1 potential fault of type-code 200
    * Using 1 example:
    *   150000
    */
    @Test(timeout = 60000)
    public void test_65_postOnRefundsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/refunds -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 150000, " + 
                    " \"refund_amount_available\": 770 " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments/hpQ6/refunds")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'servlet'", containsString("jersey"))
                .body("'message'", containsString("Unauthorized"))
                .body("'url'", containsString("/v1/payments/hpQ6/refunds"))
                .body("'status'", containsString("401"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/v1/refunds
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_66_getOnRefundsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/refunds -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v1/refunds?" + 
                    "to_settled_date=rE219uh5XgKpa5X9&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'servlet'", containsString("jersey"))
                .body("'message'", containsString("Unauthorized"))
                .body("'url'", containsString("/v1/refunds"))
                .body("'status'", containsString("401"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/v1/payments
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_67_getOnPaymentsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "_XWUfSN9ysAs")
                .header("X-Request-Id", "QdYAvf_f7l7L2")
                .header("X-Forwarded-For", "IzwklVG")
                .header("x-forwarded-for", "GtqHehlG4EB")
                .get(baseUrlOfSut + "/v1/payments?" + 
                    "reference=N1QbxN9hHpx&" + 
                    "email=_EM_86635_XYZ_&" + 
                    "state=EVOMASTER&" + 
                    "card_brand=NKJ_8s3SJ&" + 
                    "to_date=t6cg1b6z1PC&" + 
                    "display_size=GUWc&" + 
                    "from_settled_date=9AosGGLy")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'servlet'", containsString("jersey"))
                .body("'message'", containsString("Unauthorized"))
                .body("'url'", containsString("/v1/payments"))
                .body("'status'", containsString("401"));
    }
    
    
    /**
    * Calls:
    * (404) POST:/v1/payments/{paymentId}/refunds
    * Found 2 potential faults of type-code 200
    */
    @Test(timeout = 60000)
    public void test_68_postOnRefundsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/refunds -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/refunds -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "fno")
                .header("X-Request-Id", "foo")
                .header("x-forwarded-for", "fQyTntq_aN3")
                .header("X-Forwarded-For", "_EM_21248_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 179, " + 
                    " \"refund_amount_available\": 9868179 " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments/;Ls/refunds")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(404.0))
                .body("'message'", containsString("HTTP 404 Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) POST:/v1/payments/{paymentId}/capture
    * Found 2 potential faults of type-code 200
    */
    @Test(timeout = 60000)
    public void test_69_postOnPaymentCaptureWithQueryParamsEmptyLast_digits_card_number() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/capture -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/capture -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "GLt2GKw4PNhs0AW")
                .header("X-Request-Id", "F0ExnVt8Fa")
                .post(baseUrlOfSut + "/v1/payments/;/capture?" + 
                    "display_size=JQVe7cDSj2&" + 
                    "reference=w&" + 
                    "last_digits_card_number=&" + 
                    "from_settled_date=_EM_76200_XYZ_&" + 
                    "to_settled_date=f&" + 
                    "to_date=_EM_76201_XYZ_&" + 
                    "state=Fe&" + 
                    "first_digits_card_number=kcXoWYUwI9a8&" + 
                    "email=_EM_76971_XYZ_&" + 
                    "cardholder_name=_V1dDEJM")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(404.0))
                .body("'message'", containsString("HTTP 404 Not Found"));
    }


}
