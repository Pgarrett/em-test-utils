import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-02-12T10:28:56.578-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 21 tests
 * <br>
*  Covered targets: 201
 * <br>
*  Used time: 0h 15m 0s
 * <br>
*  Needed budget for current results: 59%
 * <br>
*  This file contains test cases that represent failed calls, but not indicative of faults.
*/
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.org.tsdes.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("NEWS_ENTITY"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (400) PUT:/news/{id}
    */
    @Test(timeout = 60000)
    public void test_0_putOnNewReturns400() throws Exception {
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .put(baseUrlOfSut + "/news/966?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'message'", containsString("Required request body is missing: public org.springframework.http.ResponseEntity<java.lang.Object> org.tsdes.spring.examples.news.api.NewsRestApi.update(java.lang.String,org.tsdes.spring.examples.news.dto.NewsDto)"))
                .body("'path'", containsString("/news/966"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/news/{id}/text
    */
    @Test(timeout = 60000)
    public void test_1_putOnTextReturns400() throws Exception {
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "_EM_4448_XYZ_")
                .contentType("text/plain")
                .body()
                .put(baseUrlOfSut + "/news/994/text?" + 
                    "country=_EM_4449_XYZ_&" + 
                    "authorId=_EM_4450_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'message'", containsString("Required request body is missing: public org.springframework.http.ResponseEntity<java.lang.Object> org.tsdes.spring.examples.news.api.NewsRestApi.updateText(java.lang.Long,java.lang.String)"))
                .body("'path'", containsString("/news/994/text"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/news/{id}
    */
    @Test(timeout = 60000)
    public void test_2_deleteOnNewReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/news/_EM_2_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/news/{id}
    */
    @Test(timeout = 60000)
    public void test_3_deleteOnNewReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/news/_EM_701_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/news
    */
    @Test(timeout = 60000)
    public void test_4_postOnNewsWithQueryParamsReturns400UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 138L)
                .d("ID", "0")
                .d("AUTHOR_ID", "\"_EM_8387_XYZ_\"")
                .d("COUNTRY", "\"UHrRU\"")
                .d("CREATION_TIME", "\"1932-05-10 00:18:37\"")
                .d("TEXT", "\"BTm9EKaK_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .body(" { " + 
                    " \"authorId\": \"Z7R6YC7R9Sn_HJ\", " + 
                    " \"country\": \"\", " + 
                    " \"newsId\": \"F4TYuAk\", " + 
                    " \"text\": \"1Or5h\" " + 
                    " } ")
                .post(baseUrlOfSut + "/news?" + 
                    "country=MX0hhG7&" + 
                    "authorId=VrHJJdRfPf8K51Gj")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/news
    */
    @Test(timeout = 60000)
    public void test_5_postOnNewsReturns400UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 2592L)
                .d("ID", "858")
                .d("AUTHOR_ID", "\"J\"")
                .d("COUNTRY", "\"LJh5u4pOumBN\"")
                .d("CREATION_TIME", "\"2004-06-02 02:15:43\"")
                .d("TEXT", "\"JE5e4GI\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json;charset=UTF-8")
                .body(" { " + 
                    " \"authorId\": \"pZkh\", " + 
                    " \"country\": \"qj7TCiYww\", " + 
                    " \"creationTime\": \"1909-08-28T12:46:00-03:55\", " + 
                    " \"id\": \"\" " + 
                    " } ")
                .post(baseUrlOfSut + "/news")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/news
    */
    @Test(timeout = 60000)
    public void test_6_postOnNewsReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json;charset=UTF-8")
                .body(" { " + 
                    " \"authorId\": \"_EM_194_XYZ_\", " + 
                    " \"text\": \"rl\" " + 
                    " } ")
                .post(baseUrlOfSut + "/news?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/news
    */
    @Test(timeout = 60000)
    public void test_7_postOnNewsWithQueryParamReturns400UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 3L)
                .d("ID", "989")
                .d("AUTHOR_ID", "\"_EM_354_XYZ_\"")
                .d("COUNTRY", "\"_EM_355_XYZ_\"")
                .d("CREATION_TIME", "\"2018-12-14 05:38:17\"")
                .d("TEXT", "\"_EM_356_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .body(" { " + 
                    " \"authorId\": \"gdO\", " + 
                    " \"newsId\": \"\" " + 
                    " } ")
                .post(baseUrlOfSut + "/news?authorId=gdO")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) PUT:/news/{id}
    */
    @Test(timeout = 60000)
    public void test_8_putOnNewReturns400UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 138L)
                .d("ID", "0")
                .d("AUTHOR_ID", "\"j8abYQL\"")
                .d("COUNTRY", "\"UHrRU\"")
                .d("CREATION_TIME", "\"1922-05-18 01:18:37\"")
                .d("TEXT", "\"_EM_8224_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"authorId\": \"yxm4vQMMAuBa\", " + 
                    " \"creationTime\": \"1960-09-13T23:41:13.929+01:01\", " + 
                    " \"id\": \"0\" " + 
                    " } ")
                .put(baseUrlOfSut + "/news/0")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) GET:/news/{id}
    */
    @Test(timeout = 60000)
    public void test_9_getOnNewWithQueryParamReturns404() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1_XYZ_")
                .get(baseUrlOfSut + "/news/toMOBO4I_G?EMextraParam123=_EM_0_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) PUT:/news/{id}/text
    */
    @Test(timeout = 60000)
    public void test_10_putOnTextReturns404() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("text/plain")
                .body("_EM_73_XYZ_")
                .put(baseUrlOfSut + "/news/1409939431634174058/text")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/news/{id}
    */
    @Test(timeout = 60000)
    public void test_11_deleteOnNewReturns404() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_600_XYZ_")
                .delete(baseUrlOfSut + "/news/936?EMextraParam123=_EM_599_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) GET:/news/{id}
    */
    @Test(timeout = 60000)
    public void test_12_getOnNewReturns404() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/news/204")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) PUT:/news/{id}
    */
    @Test(timeout = 60000)
    public void test_13_putOnNewReturns404() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"country\": \"Sweden\", " + 
                    " \"newsId\": \"_EM_296_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/news/-67107898?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) PUT:/news/{id}
    */
    @Test(timeout = 60000)
    public void test_14_putOnNewReturns404() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"authorId\": \"Jlu3Kgj3Yj\", " + 
                    " \"country\": \"HWWakykS\", " + 
                    " \"creationTime\": \"2055-02-14T21:35:58Z\", " + 
                    " \"newsId\": \"C1k\", " + 
                    " \"text\": \"_EM_39808_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/news/_EM_39807_XYZ_?country=United+Kingdom")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) PUT:/news/{id}
    */
    @Test(timeout = 60000)
    public void test_15_putOnNewReturns404() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"authorId\": \"qS\", " + 
                    " \"creationTime\": \"1908-07-10T20:30:26.735Z\", " + 
                    " \"id\": \"ouUGuSp\", " + 
                    " \"newsId\": \"NXv8OWs\" " + 
                    " } ")
                .put(baseUrlOfSut + "/news/_EM_39283_XYZ_?authorId=_EM_39287_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) PUT:/news/{id}
    */
    @Test(timeout = 60000)
    public void test_16_putOnNewWithQueryParamsReturns404() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": \"NzMHZORdmd3n\" " + 
                    " } ")
                .put(baseUrlOfSut + "/news/NzMHZORdmd3n?" + 
                    "country=5XBtvxDlB1a7&" + 
                    "authorId=8P7sw")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) PUT:/news/{id}
    */
    @Test(timeout = 60000)
    public void test_17_putOnNewReturns404() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"authorId\": \"2Ud\", " + 
                    " \"country\": \"\", " + 
                    " \"creationTime\": \"2005-01-24T22:48:23.291-03:39\", " + 
                    " \"id\": \"494\" " + 
                    " } ")
                .put(baseUrlOfSut + "/news/494?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (405) PUT:/news/{id}
    */
    @Test(timeout = 60000)
    public void test_18_putOnNewReturns405UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 138L)
                .d("ID", "0")
                .d("AUTHOR_ID", "\"_EM_8387_XYZ_\"")
                .d("COUNTRY", "\"UHrRU\"")
                .d("CREATION_TIME", "\"1932-05-10 00:18:37\"")
                .d("TEXT", "\"BTm9EKaK_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"authorId\": \"_EM_24211_XYZ_\", " + 
                    " \"country\": \"bdjBN9Qz4m0S0ZT\", " + 
                    " \"creationTime\": \"2086-09-00T23:41:13.999+01:01\", " + 
                    " \"id\": \";\", " + 
                    " \"newsId\": \"_EM_1660_XYZ_\", " + 
                    " \"text\": \"YBR\" " + 
                    " } ")
                .put(baseUrlOfSut + "/news/;")
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("'status'", numberMatches(405.0))
                .body("'error'", containsString("Method Not Allowed"))
                .body("'message'", containsString("Request method 'PUT' not supported"))
                .body("'path'", containsString("/news/;"));
    }
    
    
    /**
    * Calls:
    * (405) DELETE:/news/{id}
    */
    @Test(timeout = 60000)
    public void test_19_deleteOnNewReturns405UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 138L)
                .d("ID", "0")
                .d("AUTHOR_ID", "\"_EM_8387_XYZ_\"")
                .d("COUNTRY", "\"UHrRU\"")
                .d("CREATION_TIME", "\"2000-05-18 01:29:37\"")
                .d("TEXT", "\"BTm9EKaK_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/news/;0WuAr_aKmhBuub_?" + 
                    "country=suW9x1j63Ukp&" + 
                    "authorId=o7RYR_MJd")
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("'status'", numberMatches(405.0))
                .body("'error'", containsString("Method Not Allowed"))
                .body("'message'", containsString("Request method 'DELETE' not supported"))
                .body("'path'", containsString("/news/;0WuAr_aKmhBuub_"));
    }
    
    
    /**
    * Calls:
    * (409) PUT:/news/{id}
    */
    @Test(timeout = 60000)
    public void test_20_putOnNewReturns409() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"country\": \"Sint Maarten\", " + 
                    " \"newsId\": \"7\", " + 
                    " \"text\": \"qZ6AvHU28rTDc\" " + 
                    " } ")
                .put(baseUrlOfSut + "/news/-1994750453?EMextraParam123=42")
                .then()
                .statusCode(409)
                .assertThat()
                .body(isEmptyOrNullString());
    }


}
