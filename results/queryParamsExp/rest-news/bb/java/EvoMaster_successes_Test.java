/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-08-18T20:11:08.817-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 6 tests
 * <br>
*  Covered targets: 24
 * <br>
*  Used time: 0h 15m 43s
 * <br>
*  Needed budget for current results: 100%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static String baseUrlOfSut = "http://localhost:8080";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    /**
    * Calls:
    * (200) GET:/news
    */
    @Test(timeout = 60000)
    public void test_0_getOnNewsReturns5Elements() throws Exception {
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .get(baseUrlOfSut + "/news")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("size()", equalTo(5))
                .body("[0].'newsId'", containsString("2"))
                .body("[0].'authorId'", containsString("4OnNXWy"))
                .body("[0].'text'", containsString("x"))
                .body("[0].'country'", containsString("Saint Helena"))
                .body("[0].'creationTime'", containsString("2025-08-18T20:04:23.637-03:00"))
                .body("[1].'newsId'", containsString("3"))
                .body("[1].'authorId'", containsString("Ie"))
                .body("[1].'text'", containsString("pnXOmwNwUgyRYdX"))
                .body("[1].'country'", containsString("Peru"))
                .body("[1].'creationTime'", containsString("2025-08-18T20:08:01.698-03:00"))
                .body("[2].'newsId'", containsString("4"))
                .body("[2].'authorId'", containsString("FuMe"))
                .body("[2].'text'", containsString("9oxa"))
                .body("[2].'country'", containsString("Solomon Islands"))
                .body("[2].'creationTime'", containsString("2025-08-18T20:09:31.731-03:00"))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/news
    */
    @Test(timeout = 60000)
    public void test_1_getOnNewsReturnsEmptyList() throws Exception {
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .get(baseUrlOfSut + "/news?" + 
                    "authorId=SQEBd0_I&" + 
                    "country=Qatar")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/countries
    */
    @Test(timeout = 60000)
    public void test_2_getOnCountriesReturns247Elements() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/countries")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(247))
                .body("", hasItems("Afghanistan", "Åland Islands", "Albania", "Algeria", "American Samoa", "Andorra", "Angola", "Anguilla", "Antigua and Barbuda", "Argentina", "Armenia", "Aruba", "Australia", "Austria", "Azerbaijan", "The Bahamas", "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bermuda", "Bhutan", "Bolivia", "Bonaire", "Bosnia and Herzegovina", "Botswana", "Bouvet Island", "Brazil", "British Indian Ocean Territory", "United States Minor Outlying Islands", "British Virgin Islands", "Brunei", "Bulgaria", "Burkina Faso", "Burundi", "Cambodia", "Cameroon", "Canada", "Cape Verde", "Cayman Islands", "Central African Republic", "Chad", "Chile", "China", "Christmas Island", "Cocos (Keeling) Islands", "Colombia", "Comoros", "Republic of the Congo", "Democratic Republic of the Congo", "Cook Islands", "Costa Rica", "Croatia", "Cuba", "Curaçao", "Cyprus", "Czech Republic", "Denmark", "Djibouti", "Dominica", "Dominican Republic", "Ecuador", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Ethiopia", "Falkland Islands", "Faroe Islands", "Fiji", "Finland", "France", "French Guiana", "French Polynesia", "French Southern and Antarctic Lands", "Gabon", "The Gambia", "Georgia", "Germany", "Ghana", "Gibraltar", "Greece", "Greenland", "Grenada", "Guadeloupe", "Guam", "Guatemala", "Guernsey", "Guinea", "Guinea-Bissau", "Guyana", "Haiti", "Heard Island and McDonald Islands", "Honduras", "Hong Kong", "Hungary", "Iceland", "India", "Indonesia", "Ivory Coast", "Iran", "Iraq", "Republic of Ireland", "Isle of Man", "Israel", "Italy", "Jamaica", "Japan", "Jersey", "Jordan", "Kazakhstan", "Kenya", "Kiribati", "Kuwait", "Kyrgyzstan", "Laos", "Latvia", "Lebanon", "Lesotho", "Liberia", "Libya", "Liechtenstein", "Lithuania", "Luxembourg", "Macau", "Republic of Macedonia", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", "Marshall Islands", "Martinique", "Mauritania", "Mauritius", "Mayotte", "Mexico", "Federated States of Micronesia", "Moldova", "Monaco", "Mongolia", "Montenegro", "Montserrat", "Morocco", "Mozambique", "Myanmar", "Namibia", "Nauru", "Nepal", "Netherlands", "New Caledonia", "New Zealand", "Nicaragua", "Niger", "Nigeria", "Niue", "Norfolk Island", "North Korea", "Northern Mariana Islands", "Norway", "Oman", "Pakistan", "Palau", "Palestine", "Panama", "Papua New Guinea", "Paraguay", "Peru", "Philippines", "Pitcairn Islands", "Poland", "Portugal", "Puerto Rico", "Qatar", "Republic of Kosovo", "Réunion", "Romania", "Russia", "Rwanda", "Saint Barthélemy", "Saint Helena", "Saint Kitts and Nevis", "Saint Lucia", "Saint Martin", "Saint Pierre and Miquelon", "Saint Vincent and the Grenadines", "Samoa", "San Marino", "São Tomé and Príncipe", "Saudi Arabia", "Senegal", "Serbia", "Seychelles", "Sierra Leone", "Singapore", "Sint Maarten", "Slovakia", "Slovenia", "Solomon Islands", "Somalia", "South Africa", "South Georgia", "South Korea", "South Sudan", "Spain", "Sri Lanka", "Sudan", "Suriname", "Svalbard and Jan Mayen", "Swaziland", "Sweden", "Switzerland", "Syria", "Taiwan", "Tajikistan", "Tanzania", "Thailand", "East Timor", "Togo", "Tokelau", "Tonga", "Trinidad and Tobago", "Tunisia", "Turkey", "Turkmenistan", "Turks and Caicos Islands", "Tuvalu", "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom", "United States", "Uruguay", "Uzbekistan", "Vanuatu", "Venezuela", "Vietnam", "Wallis and Futuna", "Western Sahara", "Yemen", "Zambia", "Zimbabwe"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/news
    */
    @Test(timeout = 60000)
    public void test_3_postOnNewsReturns201() throws Exception {
        
        ValidatableResponse res_0 = given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .contentType("application/json;charset=UTF-8")
                .body(" { " + 
                    " \"authorId\": \"Ie\", " + 
                    " \"country\": \"Peru\", " + 
                    " \"text\": \"pnXOmwNwUgyRYdX\" " + 
                    " } ")
                .post(baseUrlOfSut + "/news")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body(containsString("6"));
        String location_news__2 = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_news__2));
        
        // Cleanup actions
        given().accept("*/*")
                .delete(resolveLocation(location_news__2, baseUrlOfSut + "/news/sjxTh6VgDkvkJo"))
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (201) POST:/news
    */
    @Test(timeout = 60000)
    public void test_4_postOnNewsReturns201() throws Exception {
        
        ValidatableResponse res_0 = given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .contentType("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .body(" { " + 
                    " \"authorId\": \"WKoS7IM3H\", " + 
                    " \"country\": \"Uganda\", " + 
                    " \"text\": \"naF_TcaN8_ykvPuH\" " + 
                    " } ")
                .post(baseUrlOfSut + "/news")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body(containsString("8"));
        String location_news__2 = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_news__2));
        
        // Cleanup actions
        given().accept("*/*")
                .delete(resolveLocation(location_news__2, baseUrlOfSut + "/news/kUd4L"))
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/v2/api-docs
    */
    @Test(timeout = 60000)
    public void test_5_getOnApi_docsReturnsObject() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/api-docs")
                .then()
                .statusCode(200);
    }


}
