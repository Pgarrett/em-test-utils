/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-08-18T23:40:14.774448-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 29 tests
 * <br>
*  Covered targets: 78
 * <br>
*  Used time: 0h 21m 12s
 * <br>
*  Needed budget for current results: 75%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static String baseUrlOfSut = "http://localhost:8081";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    /**
    * Calls:
    * (500) POST:/register
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_0_postOnRegisterShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. null.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/register'.
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [ " + 
                    " { " + 
                    " \"deprecation\": \"JkEdtfEuAW0w\", " + 
                    " \"href\": \"http://localhost:8081/products/8\", " + 
                    " \"hreflang\": \"http://localhost:8081/products/7\", " + 
                    " \"media\": \"rHbrSqC\", " + 
                    " \"name\": \"10 y.o.\", " + 
                    " \"type\": \"Qb\" " + 
                    " } " + 
                    " ], " + 
                    " \"name\": \" L\", " + 
                    " \"phone\": \"_postfix\" " + 
                    " } ")
                .post(baseUrlOfSut + "/register")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (PushbackInputStream); line: 1, column: 13] (through reference chain: market.dto.UserDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/register"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (401) GET:/customer
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1_getOnCustomerReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/customer")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/customer"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/customer
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_2_getOnCustomerWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/customer?name=18+y.o.")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/customer"));
    }
    
    
    /**
    * Calls:
    * (406) POST:/register
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_3_postOnRegisterReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 406 not defined for path '/register'.
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"email\": \"ybIKByIMz4B5D67z\", " + 
                    " \"name\": \"L\u0027p\", " + 
                    " \"phone\": \"\" " + 
                    " } ")
                .post(baseUrlOfSut + "/register")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/register"))
                .body("'entityName'", containsString("userDTO"))
                .body("'fieldErrors'.size()", equalTo(4))
                .body("'fieldErrors'[0].'field'", containsString("email"))
                .body("'fieldErrors'[0].'message'", containsString("The value shall be in the format of an email address"))
                .body("'fieldErrors'[1].'field'", containsString("phone"))
                .body("'fieldErrors'[1].'message'", containsString("The value shall not be empty"))
                .body("'fieldErrors'[2].'field'", containsString("address"))
                .body("'fieldErrors'[2].'message'", containsString("The value shall not be empty"))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (500) PUT:/customer/contacts
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_4_putOnCustomerContactsWithQueryParamShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. null.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/customer/contacts'.
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [], " + 
                    " \"address\": \"RgJDK6iHV\", " + 
                    " \"phone\": \"_postfix\" " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/contacts?name=10+y.o.")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (PushbackInputStream); line: 1, column: 13] (through reference chain: market.dto.ContactsDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/customer/contacts
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_5_putOnCustomerContactsShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. null.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/customer/contacts'.
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [], " + 
                    " \"address\": \"Zj_Q\" " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/contacts")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (PushbackInputStream); line: 1, column: 13] (through reference chain: market.dto.ContactsDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/customer/cart
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_6_putOnCustomerCartWithQueryParamShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. null.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/customer/cart'.
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [ " + 
                    " { " + 
                    " \"href\": \"http://localhost:8081/products/7\", " + 
                    " \"profile\": \"R5iDZG_2NaIT\", " + 
                    " \"rel\": { " + 
                    " \"EM_tainted_map\": \"_EM_0_XYZ_\" " + 
                    " }, " + 
                    " \"title\": \"2YZWUXv9S5GB_sxs\", " + 
                    " \"type\": \"NcKe0DK2vjMX7\" " + 
                    " }, " + 
                    " { " + 
                    " \"href\": \"http://localhost:8081/products/3\", " + 
                    " \"hreflang\": \"http://localhost:8081/products/5\", " + 
                    " \"media\": \"iC3g\", " + 
                    " \"name\": \"Ten\", " + 
                    " \"profile\": \"6BxO3PlmbtT4J7\", " + 
                    " \"rel\": { " + 
                    " \"EM_tainted_map\": \"_EM_0_XYZ_\" " + 
                    " }, " + 
                    " \"type\": \"WQD4\" " + 
                    " }, " + 
                    " { " + 
                    " \"media\": \"F25kZxbtfAe1JE\", " + 
                    " \"name\": \"RUO7\", " + 
                    " \"rel\": { " + 
                    " \"EM_tainted_map\": \"_EM_0_XYZ_\" " + 
                    " }, " + 
                    " \"title\": \"YOskg4hhvcdT1\", " + 
                    " \"type\": \"V54PjyaYTTk\" " + 
                    " }, " + 
                    " { " + 
                    " \"href\": \"http://localhost:8081/products/3\", " + 
                    " \"profile\": \"iBnpmTTe4Q0QUBk\", " + 
                    " \"title\": \"w9bXdoiu\" " + 
                    " } " + 
                    " ], " + 
                    " \"productId\": 366 " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/cart?name=12+y.o.+Cask+Strength+Batch+6")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (PushbackInputStream); line: 1, column: 13] (through reference chain: market.dto.CartItemDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/customer/cart
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_7_putOnCustomerCartShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. null.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/customer/cart'.
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [], " + 
                    " \"productId\": 984975483, " + 
                    " \"quantity\": 328 " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/cart")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (PushbackInputStream); line: 1, column: 13] (through reference chain: market.dto.CartItemDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (401) GET:/customer/orders
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_8_getOnCustomerOrdersReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/customer/orders")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/orders"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (401) GET:/customer/contacts
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_9_getOnCustomerContactsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/customer/contacts")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (401) GET:/customer/cart
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_10_getOnCustomerCartReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/customer/cart")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (401) GET:/customer/orders
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_11_getOnCustomerOrdersWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/customer/orders?name=18+y.o.")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/orders"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (401) GET:/customer/cart
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_12_getOnCustomerCartWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/customer/cart?name=Ten")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (401) GET:/customer/contacts
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_13_getOnCustomerContactsWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/customer/contacts?name=12+y.o.+Cask+Strength+Batch+6")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (401) PUT:/customer/cart
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_14_putOnCustomerCartWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"productId\": 534, " + 
                    " \"quantity\": 138 " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/cart?name=12+y.o.+Doublewood")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (401) DELETE:/customer/cart
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_15_deleteOnCustomerCartReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .delete(baseUrlOfSut + "/customer/cart")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (401) DELETE:/customer/cart
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_16_deleteOnCustomerCartWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .delete(baseUrlOfSut + "/customer/cart?name=Uigeadail")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (404) GET:/products/{productId}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_17_getOnProductReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/products/478")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Requested entity doesn't exist"))
                .body("'description'", containsString("uri=/products/478"))
                .body("'entityName'", containsString("ProductDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("id"))
                .body("'fieldErrors'[0].'message'", containsString("No instance with this id"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/products/{productId}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_18_getOnProductReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/products/-1822560571")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Requested entity doesn't exist"))
                .body("'description'", containsString("uri=/products/-1822560571"))
                .body("'entityName'", containsString("ProductDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("id"))
                .body("'fieldErrors'[0].'message'", containsString("No instance with this id"));
    }
    
    
    /**
    * Calls:
    * (406) PUT:/customer/contacts
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_19_putOnContactsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 406 not defined for path '/customer/contacts'.
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"AuUHoNVw5n\", " + 
                    " \"phone\": \"_postfix\" " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/contacts")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", containsString("contactsDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("phone"))
                .body("'fieldErrors'[0].'message'", containsString("Shall consist of a + sign, a country code, a region code (1-4 digits), and a number (6-7 digits)"));
    }
    
    
    /**
    * Calls:
    * (406) PUT:/customer/cart
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_20_putOnCustomerCartReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 406 not defined for path '/customer/cart'.
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"quantity\": 349 " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/cart")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", containsString("cartItemDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("productId"))
                .body("'fieldErrors'[0].'message'", containsString("Value shall be a positive number"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/customer/orders/{orderId}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_21_getOnOrderReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/customer/orders/318?name=67GLGTVXlZ9")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/orders/318"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (401) GET:/customer/orders/{orderId}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_22_getOnCustomerOrderReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/customer/orders/2045802568")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/orders/2045802568"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (401) GET:/customer/orders/{orderId}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_23_getOnOrderReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .get(baseUrlOfSut + "/customer/orders/-734021633?name=12+y.o.+Cask+Strength+Batch+6")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/orders/-734021633"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (401) PUT:/customer/cart/delivery
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_24_putOnCartDeliveryWithQueryParamsIncluded() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .put(baseUrlOfSut + "/customer/cart/delivery?" + 
                    "included=true&" + 
                    "name=kLhAXATczUT")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/cart/delivery"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (401) PUT:/customer/cart/delivery
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_25_putOnCartDeliveryWithQueryParamIncludedReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .put(baseUrlOfSut + "/customer/cart/delivery?included=true")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/cart/delivery"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (401) PUT:/customer/cart/delivery
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_26_putOnCartDeliveryWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .put(baseUrlOfSut + "/customer/cart/delivery?" + 
                    "included=false&" + 
                    "name=Quarter+Cask")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/cart/delivery"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (406) POST:/customer/cart/pay
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_27_postOnCartPayWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 406 not defined for path '/customer/cart/pay'.
        given().accept("*/*")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/customer/cart/pay?name=yA14jxr")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/cart/pay"))
                .body("'entityName'", containsString("creditCardDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("ccNumber"))
                .body("'fieldErrors'[0].'message'", containsString("The value shall not be empty"));
    }
    
    
    /**
    * Calls:
    * (406) POST:/customer/cart/pay
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_28_postOnCartPayReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 406 not defined for path '/customer/cart/pay'.
        given().accept("*/*")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/customer/cart/pay")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/cart/pay"))
                .body("'entityName'", containsString("creditCardDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("ccNumber"))
                .body("'fieldErrors'[0].'message'", containsString("The value shall not be empty"));
    }


}
