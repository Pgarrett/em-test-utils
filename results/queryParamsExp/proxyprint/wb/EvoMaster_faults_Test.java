/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-08-17T19:56:45.429-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 289 tests
 * <br>
*  Covered targets: 1900
 * <br>
*  Used time: 0h 21m 27s
 * <br>
*  Needed budget for current results: 98%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.embedded.io.github.proxyprint.kitchen.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (500) POST:/login
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_0_postOnLoginShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/DefaultController_101_login.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/login'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/login?" + 
                    "EMextraParam123=_EM_82_XYZ_&" + 
                    "password=AFAh&" + 
                    "username=_EM_873_XYZ_")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/DefaultController_101_login
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/login"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/printdocument
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_1_postOnPrintdocumentShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_107_processSumitedFiles.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/printdocument'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printdocument")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_107_processSumitedFiles
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.ClassCastException"))
                .body("'message'", containsString("org.springframework.security.web.servletapi.HttpServlet3RequestFactory$Servlet3SecurityContextHolderAwareRequestWrapper cannot be cast to org.springframework.web.multipart.MultipartHttpServletRequest"))
                .body("'path'", containsString("/printdocument"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/login
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_2_postOnLoginShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1061L)
                .d("ADDRESS", "\"1jZSDUciLD\"")
                .d("AVG_RATING", "0.38120008934993055")
                .d("BALANCE_CURRENCY", "\"ZmUaxlabklU\"")
                .d("BALANCE_FRACTIONAL_PART", "-15987")
                .d("BALANCE_INTEGER_PART", "45789038")
                .d("LATITUDE", "0.037340706587946526")
                .d("LOGO", "\"nZ\"")
                .d("LONGITUDE", "0.4310692462274276")
                .d("NAME", "\"uYoyY\"")
                .d("NIF", "\"2sEYdkWigOIqwB2D\"")
            .and().insertInto("USERS", 1064L)
                .d("PASSWORD", "\"j6w1DwnYgzoL0SEe\"")
                .d("USERNAME", "\"9B1bludez\"")
            .and().insertInto("CONSUMERS", 1063L)
                .d("BALANCE_CURRENCY", "\"svCN96lU5ccgUdJNw\"")
                .d("BALANCE_FRACTIONAL_PART", "993")
                .d("BALANCE_INTEGER_PART", "229")
                .d("NAME", "\"\"")
                .d("ID", "12")
            .and().insertInto("PRINTING_SCHEMAS", 1062L)
                .d("BINDING_SPECS", "\"T8_awMsbh\"")
                .d("COVER_SPECS", "NULL")
                .d("IS_DELETED", "false")
                .d("PSCHEMA_NAME", "\"i5XSyCaKimdEia\"")
                .d("PAPER_SPECS", "\"Anj6_M\"")
                .d("CONSUMER_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/DefaultController_101_login.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/login'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/login?" + 
                    "password=9J6zlDac&" + 
                    "username=_EM_2565_XYZ_")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/DefaultController_101_login
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/login"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/printshop
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_3_getOnPrintshopReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshop?EMextraParam123=_EM_34_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshop"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshop
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_4_getOnPrintshopReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_201_XYZ_")
                .get(baseUrlOfSut + "/printshop")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshop"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshop
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_5_getOnPrintshopReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/printshop")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshop"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshop
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_6_getOnPrintshopReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "_EM_690_XYZ_")
                .get(baseUrlOfSut + "/printshop?EMextraParam123=_EM_689_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshop"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/consumer/satisfied
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_7_getOnSatisfiedShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 2311L)
                .d("ADDRESS", "\"2uyjxm26K4\"")
                .d("AVG_RATING", "0.5907575270433645")
                .d("BALANCE_CURRENCY", "\"Ad38\"")
                .d("BALANCE_FRACTIONAL_PART", "137")
                .d("BALANCE_INTEGER_PART", "48")
                .d("LATITUDE", "0.8365528431265187")
                .d("LOGO", "\"4FxUyR8m5kMpR\"")
                .d("LONGITUDE", "0.20446570814999587")
                .d("NAME", "\"4Y7\"")
                .d("NIF", "\"NxeNVsNLLUIND34\"")
            .and().insertInto("PRINTSHOPS", 2339L)
                .d("ADDRESS", "\"9uhvM36El4d1NGb\"")
                .d("AVG_RATING", "0.18344284842269654")
                .d("BALANCE_CURRENCY", "\"RL9oKWFl1oAhzZ\"")
                .d("BALANCE_FRACTIONAL_PART", "635")
                .d("BALANCE_INTEGER_PART", "198")
                .d("LATITUDE", "0.5960822276861077")
                .d("LOGO", "\"zvnT3XCqiMsa\"")
                .d("LONGITUDE", "0.48548733633813")
                .d("NAME", "\"2cPp9pyHvpV\"")
                .d("NIF", "\"nas5NyizApF\"")
            .and().insertInto("PRINTSHOPS", 2338L)
                .d("ADDRESS", "\"QQqO3KlBzvbs\"")
                .d("AVG_RATING", "0.6437532836794372")
                .d("BALANCE_CURRENCY", "\"0\"")
                .d("BALANCE_FRACTIONAL_PART", "424")
                .d("BALANCE_INTEGER_PART", "463")
                .d("LATITUDE", "0.557137509860359")
                .d("LOGO", "\"hAQ3rLX3\"")
                .d("LONGITUDE", "0.4426921780866564")
                .d("NAME", "\"C904KSY2\"")
                .d("NIF", "\"CJKBdkKbB\"")
            .and().insertInto("USERS", 2337L)
                .d("PASSWORD", "\"M2\"")
                .d("USERNAME", "\"OwvewW\"")
            .and().insertInto("CONSUMERS", 2336L)
                .d("BALANCE_CURRENCY", "\"R_miCEsPvH7B\"")
                .d("BALANCE_FRACTIONAL_PART", "121")
                .d("BALANCE_INTEGER_PART", "167")
                .d("NAME", "\"jtKyJwOxZg1\"")
                .d("ID", "12")
            .and().insertInto("USERS", 2335L)
                .d("PASSWORD", "\"5C8OFZybTI\"")
                .d("USERNAME", "\"W\"")
            .and().insertInto("CONSUMERS", 2334L)
                .d("BALANCE_CURRENCY", "\"n0juBWT2rrv\"")
                .d("BALANCE_FRACTIONAL_PART", "250")
                .d("BALANCE_INTEGER_PART", "244")
                .d("NAME", "\"yxW5\"")
                .d("ID", "9")
            .and().insertInto("PRINT_REQUESTS", 2333L)
                .d("COST", "0.1352298919720606")
            .and().insertInto("DOCUMENTS", 2332L)
                .d("FILE_NAME", "\"qh8Apo69_S\"")
                .d("TOTAL_PAGES", "339")
                .d("PRINT_REQUEST_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_333_getPrintShopSatisfiedRequests.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/satisfied'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "I_qttu0")
                .get(baseUrlOfSut + "/consumer/satisfied")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_333_getPrintShopSatisfiedRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/satisfied"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/printshops/history
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_8_getOnHistoryShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/printshops/PrintShopController_311_getPrintShopHistoryRequests.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/printshops/history'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/history?EMextraParam123=42")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/printshops/PrintShopController_311_getPrintShopHistoryRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/printshops/history"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/printshops/nearest
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_9_getOnNearestShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/printshops/PrintShopController_97_getNearestPrintShops.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/printshops/nearest'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/nearest?" + 
                    "latitude=_EM_1060_XYZ_&" + 
                    "longitude=_EM_1061_XYZ_")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/printshops/PrintShopController_97_getNearestPrintShops
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NumberFormatException"))
                .body("'message'", containsString("For input string: \"_EM_1060_XYZ_\""))
                .body("'path'", containsString("/printshops/nearest"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/printshops/requests
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_10_getOnRequestsShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/printshops/PrintShopController_283_getPrintShopRequests.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/printshops/requests'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/printshops/requests")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/printshops/PrintShopController_283_getPrintShopRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/printshops/requests"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/printshops/satisfied
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_11_getOnSatisfiedShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/printshops/PrintShopController_338_getPrintShopSatisfiedRequests.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/printshops/satisfied'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/satisfied?EMextraParam123=42")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/printshops/PrintShopController_338_getPrintShopSatisfiedRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/printshops/satisfied"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/consumer/satisfied
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_12_getOnSatisfiedShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 3248L)
                .d("ADDRESS", "\"VmXghEm8MI2Wt_o\"")
                .d("AVG_RATING", "0.930277969577476")
                .d("BALANCE_CURRENCY", "\"hYY\"")
                .d("BALANCE_FRACTIONAL_PART", "66")
                .d("BALANCE_INTEGER_PART", "939")
                .d("LATITUDE", "0.4733203781053801")
                .d("LOGO", "\"n\"")
                .d("LONGITUDE", "0.8002323122823422")
                .d("NAME", "\"3WDaxzI\"")
                .d("NIF", "\"O6v23LjU\"")
            .and().insertInto("PRINTSHOPS", 3296L)
                .d("ADDRESS", "\"HrTqt2voWrTuD38\"")
                .d("AVG_RATING", "0.3133442871860187")
                .d("BALANCE_CURRENCY", "\"qZBtbKPzyWFYs\"")
                .d("BALANCE_FRACTIONAL_PART", "611")
                .d("BALANCE_INTEGER_PART", "859")
                .d("LATITUDE", "0.293686429566947")
                .d("LOGO", "\"dfEQIhl1_pW\"")
                .d("LONGITUDE", "0.9031086760390464")
                .d("NAME", "\"A2lfV\"")
                .d("NIF", "\"cI_PTuaho1lljPn\"")
            .and().insertInto("PRINTSHOPS", 3295L)
                .d("ADDRESS", "\"yxFZZwOg9p4J\"")
                .d("AVG_RATING", "0.25955765086297267")
                .d("BALANCE_CURRENCY", "\"n\"")
                .d("BALANCE_FRACTIONAL_PART", "801")
                .d("BALANCE_INTEGER_PART", "94")
                .d("LATITUDE", "0.8846078496874135")
                .d("LOGO", "\"eWiL_\"")
                .d("LONGITUDE", "0.8229360472424738")
                .d("NAME", "\"uiZFBPd\"")
                .d("NIF", "\"nTCb1xLXLQ_23K\"")
            .and().insertInto("USERS", 3294L)
                .d("PASSWORD", "\"WidYybcKjBWkIM3\"")
                .d("USERNAME", "\"0vGB1YY4yj2b\"")
            .and().insertInto("CONSUMERS", 3293L)
                .d("BALANCE_CURRENCY", "\"9t3WLa\"")
                .d("BALANCE_FRACTIONAL_PART", "465")
                .d("BALANCE_INTEGER_PART", "586")
                .d("NAME", "\"WVYBeR2hqwHJ_\"")
                .d("ID", "10")
            .and().insertInto("PRINT_REQUESTS", 3290L)
                .d("COST", "0.49783172291050337")
            .and().insertInto("DOCUMENTS", 3289L)
                .d("FILE_NAME", "\"Wo8o5tZswF20nQz\"")
                .d("TOTAL_PAGES", "901")
                .d("PRINT_REQUEST_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_333_getPrintShopSatisfiedRequests.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/satisfied'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "JVEALfp0UTekBpU8")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"XddINOP5WR\", " + 
                    " \"printShop\": { " + 
                    " \"id\": 950, " + 
                    " \"name\": \"Mw\", " + 
                    " \"longitude\": 0.24837789133272947, " + 
                    " \"nif\": \"S\", " + 
                    " \"avgRating\": 0.8417293, " + 
                    " \"balance\": {} " + 
                    " }, " + 
                    " \"id\": -787672436267159509, " + 
                    " \"roles\": [] " + 
                    " } ")
                .get(baseUrlOfSut + "/consumer/satisfied")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_333_getPrintShopSatisfiedRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/satisfied"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/consumer/satisfied
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_13_getOnSatisfiedShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 3248L)
                .d("ADDRESS", "\"VmXghEm8MI2Wt_o\"")
                .d("AVG_RATING", "0.930277969577476")
                .d("BALANCE_CURRENCY", "\"hYY\"")
                .d("BALANCE_FRACTIONAL_PART", "66")
                .d("BALANCE_INTEGER_PART", "939")
                .d("LATITUDE", "0.4733203781053801")
                .d("LOGO", "\"n\"")
                .d("LONGITUDE", "0.8002323122823422")
                .d("NAME", "\"3WDaxzI\"")
                .d("NIF", "\"O6v23LjU\"")
            .and().insertInto("PRINTSHOPS", 3264L)
                .d("ADDRESS", "\"s\"")
                .d("AVG_RATING", "0.4726711748797694")
                .d("BALANCE_CURRENCY", "\"taJUMYgerLLNV2\"")
                .d("BALANCE_FRACTIONAL_PART", "456")
                .d("BALANCE_INTEGER_PART", "608")
                .d("LATITUDE", "0.7947710286129089")
                .d("LOGO", "\"aomHxmOHwZ\"")
                .d("LONGITUDE", "0.8194833936268128")
                .d("NAME", "\"\"")
                .d("NIF", "\"\"")
            .and().insertInto("PRINTSHOPS", 3263L)
                .d("ADDRESS", "\"oRDYYVebpY\"")
                .d("AVG_RATING", "0.0978185733027267")
                .d("BALANCE_CURRENCY", "\"QQmLHQhGw\"")
                .d("BALANCE_FRACTIONAL_PART", "930")
                .d("BALANCE_INTEGER_PART", "983")
                .d("LATITUDE", "0.5735324906092348")
                .d("LOGO", "\"MDAG0yE7Yxu3Feo\"")
                .d("LONGITUDE", "0.1696634700111177")
                .d("NAME", "\"_uDJljOd6gXklwu\"")
                .d("NIF", "\"SKq4gkzlB\"")
            .and().insertInto("USERS", 3262L)
                .d("PASSWORD", "\"3Nwk\"")
                .d("USERNAME", "\"K5_Qtf\"")
            .and().insertInto("CONSUMERS", 3261L)
                .d("BALANCE_CURRENCY", "\"oNTyl0wIuf\"")
                .d("BALANCE_FRACTIONAL_PART", "645")
                .d("BALANCE_INTEGER_PART", "558")
                .d("NAME", "\"4XFdCdXHmCtFw\"")
                .d("ID", "17")
            .and().insertInto("PRINT_REQUESTS", 3258L)
                .d("COST", "0.9985191808594361")
            .and().insertInto("DOCUMENTS", 3257L)
                .d("FILE_NAME", "\"FfrCGosLvYTU0\"")
                .d("TOTAL_PAGES", "49")
                .d("PRINT_REQUEST_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_333_getPrintShopSatisfiedRequests.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/satisfied'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "JVEALfp0UTekBpU8")
                .get(baseUrlOfSut + "/consumer/satisfied")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_333_getPrintShopSatisfiedRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/satisfied"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/admin/seed
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_14_postOnSeedShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 3010L)
                .d("ADDRESS", "\"3legqzNQ_V2u\"")
                .d("AVG_RATING", "0.9011269932124477")
                .d("BALANCE_CURRENCY", "\"zHt4waFHHgaD\"")
                .d("BALANCE_FRACTIONAL_PART", "905")
                .d("BALANCE_INTEGER_PART", "262")
                .d("LATITUDE", "0.05248608884320183")
                .d("LOGO", "\"SNrGXjFbhcCckHD\"")
                .d("LONGITUDE", "0.7862438444899627")
                .d("NAME", "\"UbFogsW\"")
                .d("NIF", "\"fbADx6tK\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/admin/AdminController_123_seed.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/admin/seed'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/admin/seed")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/admin/AdminController_123_seed
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/admin/seed"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/admin/useed
    * 2 - (500) POST:/admin/useed
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_15_postOnUseedShowsFaults_100_101() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/admin/useed?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"message\":\"consumers seeding completed\"}"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/admin/AdminController_639_useed.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/admin/useed'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/admin/useed?EMextraParam123=42")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/admin/AdminController_639_useed
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/admin/useed"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/admin/register
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_16_postOnRegisterShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 3046L)
                .d("PASSWORD", "\"F7us\"")
                .d("USERNAME", "\"ngV_EQr\"")
            .and().insertInto("ADMIN", 3045L)
                .d("BALANCE_CURRENCY", "\"FQgrpbTxHReF4\"")
                .d("BALANCE_FRACTIONAL_PART", "478")
                .d("BALANCE_INTEGER_PART", "584")
                .d("EMAIL", "NULL")
                .r("ID", 3046L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/admin/AdminController_78_newAdmin.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/admin/register'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"balance\": { " + 
                    " \"currency\": \"_EM_563_XYZ_\", " + 
                    " \"fractionalPart\": 865, " + 
                    " \"integerPart\": 63, " + 
                    " \"moneyAsDouble\": 0.905585203432, " + 
                    " \"valid\": false " + 
                    " }, " + 
                    " \"email\": \"_EM_564_XYZ_\", " + 
                    " \"id\": 20, " + 
                    " \"username\": \"aLvxnIb5\" " + 
                    " } ")
                .post(baseUrlOfSut + "/admin/register")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/admin/AdminController_78_newAdmin
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/admin/register"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/consumer/budget
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_17_postOnConsumerBudgetWithQueryParamsShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 3248L)
                .d("ADDRESS", "\"VmXghEm8MI2Wt_o\"")
                .d("AVG_RATING", "0.930277969577476")
                .d("BALANCE_CURRENCY", "\"hYY\"")
                .d("BALANCE_FRACTIONAL_PART", "66")
                .d("BALANCE_INTEGER_PART", "939")
                .d("LATITUDE", "0.4733203781053801")
                .d("LOGO", "\"n\"")
                .d("LONGITUDE", "0.8002323122823422")
                .d("NAME", "\"3WDaxzI\"")
                .d("NIF", "\"O6v23LjU\"")
            .and().insertInto("PRINTSHOPS", 3296L)
                .d("ADDRESS", "\"HrTqt2voWrTuD38\"")
                .d("AVG_RATING", "0.3133442871860187")
                .d("BALANCE_CURRENCY", "\"qZBtbKPzyWFYs\"")
                .d("BALANCE_FRACTIONAL_PART", "611")
                .d("BALANCE_INTEGER_PART", "859")
                .d("LATITUDE", "0.293686429566947")
                .d("LOGO", "\"dfEQIhl1_pW\"")
                .d("LONGITUDE", "0.9031086760390464")
                .d("NAME", "\"A2lfV\"")
                .d("NIF", "\"cI_PTuaho1lljPn\"")
            .and().insertInto("PRINTSHOPS", 3295L)
                .d("ADDRESS", "\"yxFZZwOg9p4J\"")
                .d("AVG_RATING", "0.25955765086297267")
                .d("BALANCE_CURRENCY", "\"n\"")
                .d("BALANCE_FRACTIONAL_PART", "801")
                .d("BALANCE_INTEGER_PART", "94")
                .d("LATITUDE", "0.8846078496874135")
                .d("LOGO", "\"eWiL_\"")
                .d("LONGITUDE", "0.8229360472424738")
                .d("NAME", "\"uiZFBPd\"")
                .d("NIF", "\"nTCb1xLXLQ_23K\"")
            .and().insertInto("USERS", 3294L)
                .d("PASSWORD", "\"WidYybcKjBWkIM3\"")
                .d("USERNAME", "\"0vGB1YY4yj2b\"")
            .and().insertInto("CONSUMERS", 3293L)
                .d("BALANCE_CURRENCY", "\"9t3WLa\"")
                .d("BALANCE_FRACTIONAL_PART", "465")
                .d("BALANCE_INTEGER_PART", "586")
                .d("NAME", "\"WVYBeR2hqwHJ_\"")
                .d("ID", "10")
            .and().insertInto("PRINT_REQUESTS", 3290L)
                .d("COST", "0.49783172291050337")
            .and().insertInto("DOCUMENTS", 3289L)
                .d("FILE_NAME", "\"Wo8o5tZswF20nQz\"")
                .d("TOTAL_PAGES", "901")
                .d("PRINT_REQUEST_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/models/repositories/UserService_42_loadUserByUsername.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/budget'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"requestJSON\": \"55r2J3cwLqJU4ho\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/budget?" + 
                    "password=YR4Ac3&" + 
                    "username=kBDvJvH")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/models/repositories/UserService_42_loadUserByUsername
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.web.multipart.MultipartException"))
                .body("'message'", containsString("Could not parse multipart servlet request; nested exception is javax.servlet.ServletException: org.apache.tomcat.util.http.fileupload.FileUploadBase$InvalidContentTypeException: the request doesn't contain a multipart/form-data or multipart/mixed stream, content type header is application/json"))
                .body("'path'", containsString("/consumer/budget"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/consumer/budget
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_18_postOnConsumerBudgetWithQueryParamShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. framework_code.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/budget'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_72_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"requestJSON\": \"BWZbw5MrKo\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/budget?EMextraParam123=42")
                .then()
                .statusCode(500)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.web.multipart.MultipartException"))
                .body("'message'", containsString("Could not parse multipart servlet request; nested exception is javax.servlet.ServletException: org.apache.tomcat.util.http.fileupload.FileUploadBase$InvalidContentTypeException: the request doesn't contain a multipart/form-data or multipart/mixed stream, content type header is application/json"))
                .body("'path'", containsString("/consumer/budget"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/consumer/register
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_19_postOnRegisterShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_83_addUser.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/register'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/register?" + 
                    "password=nMStXHP&" + 
                    "username=_EM_4865_XYZ_&" + 
                    "longitude=_EM_4866_XYZ_")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_83_addUser
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/consumer/register"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/consumer/register
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_20_postOnRegisterShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_83_addUser.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/register'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/register?" + 
                    "latitude=_EM_1273_XYZ_&" + 
                    "email=ICqOuOpv&" + 
                    "username=_EM_1274_XYZ_&" + 
                    "longitude=_EM_1275_XYZ_")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_83_addUser
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/consumer/register"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/consumer/register
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_21_postOnRegisterShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_83_addUser.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/register'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/register?" + 
                    "password=_EM_3007_XYZ_&" + 
                    "latitude=BDs6z&" + 
                    "longitude=ex2I")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_83_addUser
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/consumer/register"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/request/register
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_22_postOnRegisterShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/printshops/RegisterRequestController_58_registerRequest.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/request/register'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 0, " + 
                    " \"managerName\": \"_EM_246_XYZ_\", " + 
                    " \"managerUsername\": \"_EM_247_XYZ_\", " + 
                    " \"pShopAddress\": \"Ms\", " + 
                    " \"pShopDateRequest\": \"tcPE7SvBmE\", " + 
                    " \"pShopLongitude\": 0.05289013816028887, " + 
                    " \"pShopName\": \"Printer Style\" " + 
                    " } ")
                .post(baseUrlOfSut + "/request/register")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/printshops/RegisterRequestController_58_registerRequest
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/request/register"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/request/register
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_23_postOnRegisterShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/printshops/RegisterRequestController_58_registerRequest.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/request/register'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"managerEmail\": \"proxyprint.pt.printshop@gmail.com\", " + 
                    " \"managerName\": \"Carlos Pinto\", " + 
                    " \"pShopLatitude\": 0.36258482144741244, " + 
                    " \"pShopLongitude\": 0.8774416893958294, " + 
                    " \"pShopNIF\": \"124555321\" " + 
                    " } ")
                .post(baseUrlOfSut + "/request/register")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/printshops/RegisterRequestController_58_registerRequest
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/request/register"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/admin/register
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_24_postOnRegisterShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/admin/AdminController_77_newAdmin.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/admin/register'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"email\": \"BBB_OUwXcoAcfkZ\", " + 
                    " \"id\": 321, " + 
                    " \"rolesSet\": [ " + 
                    " \"4HnMsi\", " + 
                    " \"_EM_329_XYZ_\", " + 
                    " \"_EM_330_XYZ_\", " + 
                    " \"z_SKVLu36I\" " + 
                    " ], " + 
                    " \"username\": \"_EM_331_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/admin/register?EMextraParam123=42")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/admin/AdminController_77_newAdmin
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/admin/register"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/admin/register
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_25_postOnRegisterShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/admin/AdminController_77_newAdmin.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/admin/register'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"balance\": { " + 
                    " \"currency\": \"_EM_563_XYZ_\", " + 
                    " \"fractionalPart\": 865, " + 
                    " \"integerPart\": 63, " + 
                    " \"moneyAsDouble\": 0.9055852034319644, " + 
                    " \"valid\": false " + 
                    " }, " + 
                    " \"email\": \"_EM_564_XYZ_\", " + 
                    " \"id\": 20, " + 
                    " \"username\": \"_EM_567_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/admin/register?EMextraParam123=_EM_568_XYZ_")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/admin/AdminController_77_newAdmin
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/admin/register"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/consumer/budget
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_26_postOnBudgetShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 2311L)
                .d("ADDRESS", "\"2uyjxm26K4\"")
                .d("AVG_RATING", "0.5907575270433645")
                .d("BALANCE_CURRENCY", "\"Ad38\"")
                .d("BALANCE_FRACTIONAL_PART", "137")
                .d("BALANCE_INTEGER_PART", "48")
                .d("LATITUDE", "0.8365528431265187")
                .d("LOGO", "\"4FxUyR8m5kMpR\"")
                .d("LONGITUDE", "0.20446570814999587")
                .d("NAME", "\"4Y7\"")
                .d("NIF", "\"NxeNVsNLLUIND34\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/models/repositories/UserService_42_loadUserByUsername.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/budget'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"requestJSON\": \"V4aMmXTuar7er\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/budget")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/models/repositories/UserService_42_loadUserByUsername
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.web.multipart.MultipartException"))
                .body("'message'", containsString("Could not parse multipart servlet request; nested exception is javax.servlet.ServletException: org.apache.tomcat.util.http.fileupload.FileUploadBase$InvalidContentTypeException: the request doesn't contain a multipart/form-data or multipart/mixed stream, content type header is application/json"))
                .body("'path'", containsString("/consumer/budget"));
    }
    
    
    /**
    * Calls:
    * 1 - (500) POST:/admin/seed
    * 2 - (500) POST:/admin/seed
    * 3 - (200) GET:/consumer/notifications
    * 4 - (404) POST:/printshops/{id}/reviews
    * 5 - (200) DELETE:/consumer/requests/cancel/{id}
    * 6 - (200) GET:/consumer/requests
    * 7 - (200) GET:/consumer/info
    * 8 - (500) POST:/consumer/budget
    * Found 7 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_27_postOnBudgetShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 2078L)
                .d("PASSWORD", "\"jZLr9jhit2H\"")
                .d("USERNAME", "\"fCVvX9O\"")
            .and().insertInto("CONSUMERS", 2077L)
                .d("BALANCE_CURRENCY", "\"x0nGjvYt3JzCtQv1\"")
                .d("BALANCE_FRACTIONAL_PART", "2736")
                .d("BALANCE_INTEGER_PART", "-1707301368")
                .d("NAME", "\"vEDx6CZ0W\"")
                .d("ID", "15")
            .and().insertInto("NOTIFICATION", 2076L)
                .d("EMAIL", "NULL")
                .d("READ", "false")
                .d("TIMESTAMP", "\"1996-03-14 14:56:23\"")
                .d("CONSUMER", "2")
            .and().insertInto("PRINTSHOPS", 2079L)
                .d("ADDRESS", "\"eDokMoLuRLjRNWF9\"")
                .d("AVG_RATING", "0.8915892648031783")
                .d("BALANCE_CURRENCY", "\"UYDHjE\"")
                .d("BALANCE_FRACTIONAL_PART", "0")
                .d("BALANCE_INTEGER_PART", "572")
                .d("LATITUDE", "0.3752819852718088")
                .d("LOGO", "\"iGHfv4xVDfF\"")
                .d("LONGITUDE", "1.0508815204944872")
                .d("NAME", "\"jMDUCD0T\"")
                .d("NIF", "\"JvmychXc\"")
            .and().insertInto("PRINTSHOPS", 2086L)
                .d("ADDRESS", "\"PqH\"")
                .d("AVG_RATING", "0.17622206721549616")
                .d("BALANCE_CURRENCY", "\"UQYqUUSTrfQYU\"")
                .d("BALANCE_FRACTIONAL_PART", "2")
                .d("BALANCE_INTEGER_PART", "-74")
                .d("LATITUDE", "0.7227898419270348")
                .d("LOGO", "\"n\"")
                .d("LONGITUDE", "0.0")
                .d("NAME", "\"tKJ4IWWVZk\"")
                .d("NIF", "\"Q\"")
            .and().insertInto("PRINTSHOPS", 2085L)
                .d("ADDRESS", "\"CyCOtnWlfOabl\"")
                .d("AVG_RATING", "0.0074145149210438355")
                .d("BALANCE_CURRENCY", "\"y7u0FbGBRcsNut\"")
                .d("BALANCE_FRACTIONAL_PART", "234")
                .d("BALANCE_INTEGER_PART", "679")
                .d("LATITUDE", "0.0")
                .d("LOGO", "\"lXl6\"")
                .d("LONGITUDE", "0.37266924508144994")
                .d("NAME", "\"DE6\"")
                .d("NIF", "\"uDr87GoUD\"")
            .and().insertInto("USERS", 2084L)
                .d("PASSWORD", "\"\"")
                .d("USERNAME", "\"NchU\"")
            .and().insertInto("CONSUMERS", 2083L)
                .d("BALANCE_CURRENCY", "\"\"")
                .d("BALANCE_FRACTIONAL_PART", "3801")
                .d("BALANCE_INTEGER_PART", "235")
                .d("NAME", "\"OtyuD_avMg7ay\"")
                .d("ID", "19")
            .and().insertInto("PRINT_REQUESTS", 2080L)
                .d("ARRIVAL", "\"2081-03-22 09:19:05\"")
                .d("COST", "0.846431646771176")
                .d("DELIVERED", "\"2087-01-27 23:59:10\"")
                .d("EMPATTENDED", "\"rlW\"")
                .d("EMPDELIVERED", "NULL")
                .d("FINISHED", "\"2063-04-05 04:06:25\"")
                .d("PAYPAL_SALE_ID", "\"MQlFrC\"")
                .d("PAYMENT_TYPE", "\"cHnNu9zP8k\"")
                .d("STATUS", "\"PENDING\"")
                .d("CONSUMER_ID", "NULL")
                .d("PRINTSHOP_ID", "NULL")
                .d("PRINTSHOP", "NULL")
                .d("CONSUMER", "NULL")
            .and().insertInto("PRINTSHOPS", 2094L)
                .d("ADDRESS", "\"1TS_e8PdLV_\"")
                .d("AVG_RATING", "0.09344945600101473")
                .d("BALANCE_CURRENCY", "\"u1IoP1O\"")
                .d("BALANCE_FRACTIONAL_PART", "199")
                .d("BALANCE_INTEGER_PART", "670")
                .d("LATITUDE", "-17.59893212080084")
                .d("LOGO", "\"8Dq_N2XQ4LQmpG\"")
                .d("LONGITUDE", "0.3853528562340117")
                .d("NAME", "\"Ynnyr\"")
                .d("NIF", "\"SRtU\"")
            .and().insertInto("PRINTSHOPS", 2093L)
                .d("ADDRESS", "\"P\"")
                .d("AVG_RATING", "0.5027307359361952")
                .d("BALANCE_CURRENCY", "\"P2mzkkbwRg6Udc_R\"")
                .d("BALANCE_FRACTIONAL_PART", "0")
                .d("BALANCE_INTEGER_PART", "500")
                .d("LATITUDE", "0.4764781906325")
                .d("LOGO", "\"f\"")
                .d("LONGITUDE", "0.037903378047")
                .d("NAME", "\"jJ\"")
                .d("NIF", "\"A6v2AruMVK\"")
            .and().insertInto("USERS", 2092L)
                .d("PASSWORD", "\"_EM_4183_XYZ_\"")
                .d("USERNAME", "\"kwGuuaeknDoj\"")
            .and().insertInto("CONSUMERS", 2091L)
                .d("BALANCE_CURRENCY", "\"NnPt3uV3H\"")
                .d("BALANCE_FRACTIONAL_PART", "862")
                .d("BALANCE_INTEGER_PART", "876")
                .d("NAME", "\"nD2\"")
                .d("ID", "1")
            .and().insertInto("USERS", 2090L)
                .d("PASSWORD", "\"\"")
                .d("USERNAME", "\"CPtsqQlNkyLU\"")
            .and().insertInto("CONSUMERS", 2089L)
                .d("BALANCE_CURRENCY", "\"I6WkCXy6fksEPA0\"")
                .d("BALANCE_FRACTIONAL_PART", "943")
                .d("BALANCE_INTEGER_PART", "385")
                .d("NAME", "\"IPbn_WRkgZU\"")
                .d("ID", "11")
            .and().insertInto("PRINT_REQUESTS", 2088L)
                .d("COST", "0.48836314164556066")
            .and().insertInto("DOCUMENTS", 2087L)
                .d("FILE_NAME", "\"Kd2C8Yo\"")
                .d("TOTAL_PAGES", "458")
                .d("PRINT_REQUEST_ID", "3")
            .and().insertInto("PRINTSHOPS", 1036L)
                .d("ADDRESS", "\"6S5gcI3XL\"")
                .d("AVG_RATING", "0.04414779555376358")
                .d("BALANCE_CURRENCY", "\"M`3\"")
                .d("BALANCE_FRACTIONAL_PART", "162")
                .d("BALANCE_INTEGER_PART", "459")
                .d("LATITUDE", "0.5046322342531715")
                .d("LOGO", "\"\"")
                .d("LONGITUDE", "-25.736854518049505")
                .d("NAME", "\"kBkR79M5Dg3Tj\"")
                .d("NIF", "\"_EM_2442_XYZ_\"")
            .and().insertInto("USERS", 1035L)
                .d("PASSWORD", "\"_EM_2443_XYZ_\"")
                .d("USERNAME", "\"q4oRBmEX\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/admin/AdminController_123_seed.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/admin/seed'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/admin/seed")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/admin/AdminController_123_seed
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/admin/seed"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/admin/AdminController_123_seed.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/admin/seed'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/admin/seed")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/admin/AdminController_123_seed
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/admin/seed"));
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/0/message'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "KMKygov7Ab")
                .get(baseUrlOfSut + "/consumer/notifications")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'message'", nullValue())
                .body("[0].'readStatus'", equalTo(false));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/printshops/4611686018427385856/reviews")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "KMKygov7Ab")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/4611686018427385856")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "KMKygov7Ab")
                .get(baseUrlOfSut + "/consumer/requests")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"printrequests\":[{\"id\":3,\"cost\":2.5,\"arrivalTimestamp\":\"Aug 17, 2025 7:52:12 PM\",\"status\":\"PENDING\",\"consumer\":{\"name\":\"João dos Santos\",\"email\":\"proxyprint.pt.consumer@gmail.com\",\"latitude\":\"69\",\"longitude\":\"69\",\"printingSchemas\":[{\"id\":2,\"name\":\"A4+2LAD+CORES+Encaderna\",\"paperSpecs\":\"PAPER,COLOR,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_OPAQUE,A3\",\"deleted\":false},{\"id\":5,\"name\":\"A4+SIMPLEX+COLOR\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":3,\"name\":\"A4+SIMPLEX+PW+Encadernar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_TRANSPARENT,A4\",\"deleted\":false},{\"id\":4,\"name\":\"A4+2LAD+PB\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":1,\"name\":\"A4+2LAD+PB+Agrafar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,STAPLING,0,0\",\"coverSpecs\":\"\",\"deleted\":false}],\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"id\":2,\"username\":\"joao\",\"password\":\"1234\",\"roles\":[\"ROLE_USER\"]},\"documents\":[{\"id\":1,\"name\":\"Kd2C8Yo\",\"totalPages\":458,\"specs\":[]}],\"paymentType\":\"PROXYPRINT_PAYMENT\"},{\"id\":6,\"cost\":1.4,\"arrivalTimestamp\":\"Aug 17, 2025 7:52:12 PM\",\"status\":\"PENDING\",\"consumer\":{\"name\":\"João dos Santos\",\"email\":\"proxyprint.pt.consumer@gmail.com\",\"latitude\":\"69\",\"longitude\":\"69\",\"printingSchemas\":[{\"id\":2,\"name\":\"A4+2LAD+CORES+Encaderna\",\"paperSpecs\":\"PAPER,COLOR,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_OPAQUE,A3\",\"deleted\":false},{\"id\":5,\"name\":\"A4+SIMPLEX+COLOR\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":3,\"name\":\"A4+SIMPLEX+PW+Encadernar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_TRANSPARENT,A4\",\"deleted\":false},{\"id\":4,\"name\":\"A4+2LAD+PB\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":1,\"name\":\"A4+2LAD+PB+Agrafar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,STAPLING,0,0\",\"coverSpecs\":\"\",\"deleted\":false}],\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"id\":2,\"username\":\"joao\",\"password\":\"1234\",\"roles\":[\"ROLE_USER\"]},\"documents\":[],\"paymentType\":\"PROXYPRINT_PAYMENT\"},{\"id\":7,\"cost\":1.4,\"arrivalTimestamp\":\"Aug 17, 2025 7:52:12 PM\",\"status\":\"PENDING\",\"consumer\":{\"name\":\"João dos Santos\",\"email\":\"proxyprint.pt.consumer@gmail.com\",\"latitude\":\"69\",\"longitude\":\"69\",\"printingSchemas\":[{\"id\":2,\"name\":\"A4+2LAD+CORES+Encaderna\",\"paperSpecs\":\"PAPER,COLOR,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_OPAQUE,A3\",\"deleted\":false},{\"id\":5,\"name\":\"A4+SIMPLEX+COLOR\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":3,\"name\":\"A4+SIMPLEX+PW+Encadernar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_TRANSPARENT,A4\",\"deleted\":false},{\"id\":4,\"name\":\"A4+2LAD+PB\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":1,\"name\":\"A4+2LAD+PB+Agrafar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,STAPLING,0,0\",\"coverSpecs\":\"\",\"deleted\":false}],\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"id\":2,\"username\":\"joao\",\"password\":\"1234\",\"roles\":[\"ROLE_USER\"]},\"documents\":[],\"paymentType\":\"PROXYPRINT_PAYMENT\"},{\"id\":9,\"cost\":1.2,\"arrivalTimestamp\":\"Aug 17, 2025 7:52:12 PM\",\"status\":\"PENDING\",\"consumer\":{\"name\":\"João dos Santos\",\"email\":\"proxyprint.pt.consumer@gmail.com\",\"latitude\":\"69\",\"longitude\":\"69\",\"printingSchemas\":[{\"id\":2,\"name\":\"A4+2LAD+CORES+Encaderna\",\"paperSpecs\":\"PAPER,COLOR,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_OPAQUE,A3\",\"deleted\":false},{\"id\":5,\"name\":\"A4+SIMPLEX+COLOR\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":3,\"name\":\"A4+SIMPLEX+PW+Encadernar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_TRANSPARENT,A4\",\"deleted\":false},{\"id\":4,\"name\":\"A4+2LAD+PB\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":1,\"name\":\"A4+2LAD+PB+Agrafar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,STAPLING,0,0\",\"coverSpecs\":\"\",\"deleted\":false}],\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"id\":2,\"username\":\"joao\",\"password\":\"1234\",\"roles\":[\"ROLE_USER\"]},\"documents\":[],\"paymentType\":\"PROXYPRINT_PAYMENT\"},{\"id\":11,\"cost\":2.5,\"arrivalTimestamp\":\"Aug 17, 2025 7:52:12 PM\",\"status\":\"PENDING\",\"consumer\":{\"name\":\"João dos Santos\",\"email\":\"proxyprint.pt.consumer@gmail.com\",\"latitude\":\"69\",\"longitude\":\"69\",\"printingSchemas\":[{\"id\":2,\"name\":\"A4+2LAD+CORES+Encaderna\",\"paperSpecs\":\"PAPER,COLOR,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_OPAQUE,A3\",\"deleted\":false},{\"id\":5,\"name\":\"A4+SIMPLEX+COLOR\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":3,\"name\":\"A4+SIMPLEX+PW+Encadernar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_TRANSPARENT,A4\",\"deleted\":false},{\"id\":4,\"name\":\"A4+2LAD+PB\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":1,\"name\":\"A4+2LAD+PB+Agrafar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,STAPLING,0,0\",\"coverSpecs\":\"\",\"deleted\":false}],\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"id\":2,\"username\":\"joao\",\"password\":\"1234\",\"roles\":[\"ROLE_USER\"]},\"documents\":[],\"paymentType\":\"PROXYPRINT_PAYMENT\"},{\"id\":16,\"cost\":1.2,\"arrivalTimestamp\":\"Aug 17, 2025 7:52:12 PM\",\"status\":\"PENDING\",\"consumer\":{\"name\":\"João dos Santos\",\"email\":\"proxyprint.pt.consumer@gmail.com\",\"latitude\":\"69\",\"longitude\":\"69\",\"printingSchemas\":[{\"id\":2,\"name\":\"A4+2LAD+CORES+Encaderna\",\"paperSpecs\":\"PAPER,COLOR,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_OPAQUE,A3\",\"deleted\":false},{\"id\":5,\"name\":\"A4+SIMPLEX+COLOR\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":3,\"name\":\"A4+SIMPLEX+PW+Encadernar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_TRANSPARENT,A4\",\"deleted\":false},{\"id\":4,\"name\":\"A4+2LAD+PB\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":1,\"name\":\"A4+2LAD+PB+Agrafar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,STAPLING,0,0\",\"coverSpecs\":\"\",\"deleted\":false}],\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"id\":2,\"username\":\"joao\",\"password\":\"1234\",\"roles\":[\"ROLE_USER\"]},\"documents\":[],\"paymentType\":\"PROXYPRINT_PAYMENT\"}],\"success\":true}"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_4233_XYZ_")
                .get(baseUrlOfSut + "/consumer/info")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"consumer\":{\"name\":\"João dos Santos\",\"email\":\"proxyprint.pt.consumer@gmail.com\",\"latitude\":\"69\",\"longitude\":\"69\",\"printingSchemas\":[{\"id\":2,\"name\":\"A4+2LAD+CORES+Encaderna\",\"paperSpecs\":\"PAPER,COLOR,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_OPAQUE,A3\",\"deleted\":false},{\"id\":5,\"name\":\"A4+SIMPLEX+COLOR\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":3,\"name\":\"A4+SIMPLEX+PW+Encadernar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_TRANSPARENT,A4\",\"deleted\":false},{\"id\":4,\"name\":\"A4+2LAD+PB\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":1,\"name\":\"A4+2LAD+PB+Agrafar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,STAPLING,0,0\",\"coverSpecs\":\"\",\"deleted\":false}],\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"id\":2,\"username\":\"joao\",\"password\":\"1234\",\"roles\":[\"ROLE_USER\"]},\"success\":true}"));
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/models/repositories/UserService_42_loadUserByUsername.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/budget'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"requestJSON\": \"sb0dd5WnQo63K\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/budget")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/models/repositories/UserService_42_loadUserByUsername
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.web.multipart.MultipartException"))
                .body("'message'", containsString("Could not parse multipart servlet request; nested exception is javax.servlet.ServletException: org.apache.tomcat.util.http.fileupload.FileUploadBase$InvalidContentTypeException: the request doesn't contain a multipart/form-data or multipart/mixed stream, content type header is application/json"))
                .body("'path'", containsString("/consumer/budget"));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/notifications/{notificationId}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_28_putOnNotifShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/utils/NotificationManager_87_readNotification.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/notifications/{notificationId}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/notifications/822?EMextraParam123=_EM_436_XYZ_")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/utils/NotificationManager_87_readNotification
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/notifications/822"));
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/notifications/{notificationId}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_29_deleteOnNotifShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/utils/NotificationManager_82_removeNotification.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/notifications/{notificationId}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "_EM_353_XYZ_")
                .delete(baseUrlOfSut + "/notifications/112")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/utils/NotificationManager_82_removeNotification
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.EmptyResultDataAccessException"))
                .body("'message'", containsString("No class io.github.proxyprint.kitchen.models.notifications.Notification entity with id 112 exists!"))
                .body("'path'", containsString("/notifications/112"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/consumer/notifications
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_30_getOnNotificationsReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 2078L)
                .d("PASSWORD", "\"jZLr9jhit2H\"")
                .d("USERNAME", "\"fCVvX9O\"")
            .and().insertInto("CONSUMERS", 2077L)
                .d("BALANCE_CURRENCY", "\"x0nGjvYt3JzCtQv1\"")
                .d("BALANCE_FRACTIONAL_PART", "2736")
                .d("BALANCE_INTEGER_PART", "-1707301368")
                .d("NAME", "\"vEDx6CZ0W\"")
                .d("ID", "15")
            .and().insertInto("NOTIFICATION", 2076L)
                .d("EMAIL", "NULL")
                .d("READ", "false")
                .d("TIMESTAMP", "\"1996-03-14 14:56:23\"")
                .d("CONSUMER", "2")
            .and().insertInto("PRINTSHOPS", 2079L)
                .d("ADDRESS", "\"eDokMoLuRLjRNWF9\"")
                .d("AVG_RATING", "0.8915892648031783")
                .d("BALANCE_CURRENCY", "\"UYDHjE\"")
                .d("BALANCE_FRACTIONAL_PART", "0")
                .d("BALANCE_INTEGER_PART", "572")
                .d("LATITUDE", "0.3752819852718088")
                .d("LOGO", "\"iGHfv4xVDfF\"")
                .d("LONGITUDE", "1.0508815204944872")
                .d("NAME", "\"jMDUCD0T\"")
                .d("NIF", "\"JvmychXc\"")
            .and().insertInto("PRINTSHOPS", 2086L)
                .d("ADDRESS", "\"PqH\"")
                .d("AVG_RATING", "0.17622206721549616")
                .d("BALANCE_CURRENCY", "\"UQYqUUSTrfQYU\"")
                .d("BALANCE_FRACTIONAL_PART", "2")
                .d("BALANCE_INTEGER_PART", "-74")
                .d("LATITUDE", "0.7227898419270348")
                .d("LOGO", "\"n\"")
                .d("LONGITUDE", "0.0")
                .d("NAME", "\"tKJ4IWWVZk\"")
                .d("NIF", "\"Q\"")
            .and().insertInto("PRINTSHOPS", 2085L)
                .d("ADDRESS", "\"CyCOtnWlfOabl\"")
                .d("AVG_RATING", "0.0074145149210438355")
                .d("BALANCE_CURRENCY", "\"y7u0FbGBRcsNut\"")
                .d("BALANCE_FRACTIONAL_PART", "234")
                .d("BALANCE_INTEGER_PART", "679")
                .d("LATITUDE", "0.0")
                .d("LOGO", "\"lXl6\"")
                .d("LONGITUDE", "0.37266924508144994")
                .d("NAME", "\"DE6\"")
                .d("NIF", "\"uDr87GoUD\"")
            .and().insertInto("USERS", 2084L)
                .d("PASSWORD", "\"\"")
                .d("USERNAME", "\"NchU\"")
            .and().insertInto("CONSUMERS", 2083L)
                .d("BALANCE_CURRENCY", "\"\"")
                .d("BALANCE_FRACTIONAL_PART", "3801")
                .d("BALANCE_INTEGER_PART", "235")
                .d("NAME", "\"OtyuD_avMg7ay\"")
                .d("ID", "19")
            .and().insertInto("PRINT_REQUESTS", 2080L)
                .d("ARRIVAL", "\"2081-03-22 09:19:05\"")
                .d("COST", "0.846431646771176")
                .d("DELIVERED", "\"2087-01-27 23:59:10\"")
                .d("EMPATTENDED", "\"rlW\"")
                .d("EMPDELIVERED", "NULL")
                .d("FINISHED", "\"2063-04-05 04:06:25\"")
                .d("PAYPAL_SALE_ID", "\"MQlFrC\"")
                .d("PAYMENT_TYPE", "\"cHnNu9zP8k\"")
                .d("STATUS", "\"PENDING\"")
                .d("CONSUMER_ID", "NULL")
                .d("PRINTSHOP_ID", "NULL")
                .d("PRINTSHOP", "NULL")
                .d("CONSUMER", "NULL")
            .and().insertInto("PRINTSHOPS", 2094L)
                .d("ADDRESS", "\"1TS_e8PdLV_\"")
                .d("AVG_RATING", "0.09344945600101473")
                .d("BALANCE_CURRENCY", "\"u1IoP1O\"")
                .d("BALANCE_FRACTIONAL_PART", "199")
                .d("BALANCE_INTEGER_PART", "670")
                .d("LATITUDE", "-17.59893212080084")
                .d("LOGO", "\"8Dq_N2XQ4LQmpG\"")
                .d("LONGITUDE", "0.3853528562340117")
                .d("NAME", "\"Ynnyr\"")
                .d("NIF", "\"SRtU\"")
            .and().insertInto("PRINTSHOPS", 2093L)
                .d("ADDRESS", "\"P\"")
                .d("AVG_RATING", "0.5027307359361952")
                .d("BALANCE_CURRENCY", "\"P2mzkkbwRg6Udc_R\"")
                .d("BALANCE_FRACTIONAL_PART", "0")
                .d("BALANCE_INTEGER_PART", "500")
                .d("LATITUDE", "0.4764781906325")
                .d("LOGO", "\"f\"")
                .d("LONGITUDE", "0.037903378047")
                .d("NAME", "\"jJ\"")
                .d("NIF", "\"A6v2AruMVK\"")
            .and().insertInto("USERS", 2092L)
                .d("PASSWORD", "\"_EM_4183_XYZ_\"")
                .d("USERNAME", "\"kwGuuaeknDoj\"")
            .and().insertInto("CONSUMERS", 2091L)
                .d("BALANCE_CURRENCY", "\"NnPt3uV3H\"")
                .d("BALANCE_FRACTIONAL_PART", "862")
                .d("BALANCE_INTEGER_PART", "876")
                .d("NAME", "\"nD2\"")
                .d("ID", "1")
            .and().insertInto("USERS", 2090L)
                .d("PASSWORD", "\"\"")
                .d("USERNAME", "\"CPtsqQlNkyLU\"")
            .and().insertInto("CONSUMERS", 2089L)
                .d("BALANCE_CURRENCY", "\"I6WkCXy6fksEPA0\"")
                .d("BALANCE_FRACTIONAL_PART", "943")
                .d("BALANCE_INTEGER_PART", "385")
                .d("NAME", "\"IPbn_WRkgZU\"")
                .d("ID", "11")
            .and().insertInto("PRINT_REQUESTS", 2088L)
                .d("COST", "0.48836314164556066")
            .and().insertInto("DOCUMENTS", 2087L)
                .d("FILE_NAME", "\"Kd2C8Yo\"")
                .d("TOTAL_PAGES", "458")
                .d("PRINT_REQUEST_ID", "3")
            .and().insertInto("PRINTSHOPS", 1036L)
                .d("ADDRESS", "\"6S5gcI3XL\"")
                .d("AVG_RATING", "0.04414779555376358")
                .d("BALANCE_CURRENCY", "\"M`3\"")
                .d("BALANCE_FRACTIONAL_PART", "162")
                .d("BALANCE_INTEGER_PART", "459")
                .d("LATITUDE", "0.5046322342531715")
                .d("LOGO", "\"\"")
                .d("LONGITUDE", "-25.736854518049505")
                .d("NAME", "\"kBkR79M5Dg3Tj\"")
                .d("NIF", "\"_EM_2442_XYZ_\"")
            .and().insertInto("USERS", 1035L)
                .d("PASSWORD", "\"_EM_2443_XYZ_\"")
                .d("USERNAME", "\"q4oRBmEX\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/0/message'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "KMKygov7Ab")
                .get(baseUrlOfSut + "/consumer/notifications")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'message'", nullValue())
                .body("[0].'readStatus'", equalTo(false));
    }
    
    
    /**
    * Calls:
    * (200) GET:/requests/pending
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_31_getOnRequestsPendingWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/0/pShopDateRequestAccepted'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_197_XYZ_")
                .get(baseUrlOfSut + "/requests/pending?EMextraParam123=_EM_196_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'managerName'", containsString("Jorge Caldas"))
                .body("[0].'managerUsername'", containsString("jcaldas"))
                .body("[0].'managerEmail'", containsString("proxyprint.pt.printshop@gmail.com"))
                .body("[0].'managerPassword'", containsString("1234"))
                .body("[0].'pShopAddress'", containsString("Rua das Cruzes n31"))
                .body("[0].'pShopLatitude'", numberMatches(43.221))
                .body("[0].'pShopLongitude'", numberMatches(41.121))
                .body("[0].'pShopNIF'", containsString("124555321"))
                .body("[0].'pShopName'", containsString("Printer Style"))
                .body("[0].'pShopDateRequest'", containsString("17/08/2025 07:50"))
                .body("[0].'pShopDateRequestAccepted'", nullValue())
                .body("[1].'managerName'", containsString("Martim da Silva"))
                .body("[1].'managerUsername'", containsString("msilva"))
                .body("[1].'managerEmail'", containsString("proxyprint.pt.printshop@gmail.com"))
                .body("[1].'managerPassword'", containsString("1234"))
                .body("[1].'pShopAddress'", containsString("Rua das Cruzes n32"))
                .body("[1].'pShopLatitude'", numberMatches(43.221))
                .body("[1].'pShopLongitude'", numberMatches(41.121))
                .body("[1].'pShopNIF'", containsString("124555321"))
                .body("[1].'pShopName'", containsString("Print More"))
                .body("[1].'pShopDateRequest'", containsString("17/08/2025 07:50"))
                .body("[1].'pShopDateRequestAccepted'", nullValue())
                .body("[2].'managerName'", containsString("Carlos Pinto"))
                .body("[2].'managerUsername'", containsString("cpin"))
                .body("[2].'managerEmail'", containsString("proxyprint.pt.printshop@gmail.com"))
                .body("[2].'managerPassword'", containsString("1234"))
                .body("[2].'pShopAddress'", containsString("Rua n33"))
                .body("[2].'pShopLatitude'", numberMatches(43.221))
                .body("[2].'pShopLongitude'", numberMatches(41.121))
                .body("[2].'pShopNIF'", containsString("124555321"))
                .body("[2].'pShopName'", containsString("Papelaria Pinto"))
                .body("[2].'pShopDateRequest'", containsString("17/08/2025 07:50"))
                .body("[2].'pShopDateRequestAccepted'", nullValue())
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * 1 - (403) DELETE:/printshops/{printShopID}/employees/{employeeID}
    * 2 - (200) DELETE:/printshops/{printShopID}/employees/{employeeID}
    * 3 - (401) POST:/consumer/subscribe
    * Found 2 potential faults. Type-codes: 101, 205
    */
    @Test(timeout = 60000)
    public void test_32_postOnSubscribeShowsFaults_101_205UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1100L)
                .d("PASSWORD", "\"oDyM7hrj\"")
                .d("USERNAME", "\"_EM_2680_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/printshops/52/employees/1983087620")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/52/employees/1983087620"));
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/printshops/253/employees/-5846188657249973622")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        // Fault205. Wrongly Not Recognized as Authenticated. null.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=_EM_2683_XYZ_&" + 
                    "username=rui")
                .then()
                .statusCode(401)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * 1 - (403) GET:/printshops/requests/{id}
    * 2 - (200) GET:/printshops/requests/{id}
    * 3 - (401) PUT:/consumer/subscribe
    * Found 2 potential faults. Type-codes: 101, 205
    */
    @Test(timeout = 60000)
    public void test_33_putOnSubscribeShowsFaults_101_205UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1111L)
                .d("PASSWORD", "\"9R1tqPw2\"")
                .d("USERNAME", "\"7cab7\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "7hYyLD")
                .get(baseUrlOfSut + "/printshops/requests/-1925019577")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/requests/-1925019577"));
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/requests/310?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        // Fault205. Wrongly Not Recognized as Authenticated. null.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=BLkjCRzEi&" + 
                    "username=ritinha")
                .then()
                .statusCode(401)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) OPTIONS:/consumer/subscribe
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_34_optionsOnSubscribeReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. OPTIONS on path '/consumer/subscribe' defines a response schema but no response body found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .options(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) OPTIONS:/consumer/subscribe
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_35_optionsOnSubscribeReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. OPTIONS on path '/consumer/subscribe' defines a response schema but no response body found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .options(baseUrlOfSut + "/consumer/subscribe?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) OPTIONS:/consumer/subscribe
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_36_optionsOnSubscribeReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. OPTIONS on path '/consumer/subscribe' defines a response schema but no response body found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .options(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) OPTIONS:/consumer/subscribe
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_37_optionsOnSubscribeReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. OPTIONS on path '/consumer/subscribe' defines a response schema but no response body found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .options(baseUrlOfSut + "/consumer/subscribe?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) OPTIONS:/consumer/subscribe
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_38_optionsOnSubscribeReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. OPTIONS on path '/consumer/subscribe' defines a response schema but no response body found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .options(baseUrlOfSut + "/consumer/subscribe?EMextraParam123=_EM_676_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) HEAD:/consumer/subscribe
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_39_headOnSubscribeReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1157L)
                .d("PASSWORD", "\"692992\"")
                .d("USERNAME", "\"_EM_2966_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. HEAD on path '/consumer/subscribe' defines a response schema but no response body found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .head(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=1234&" + 
                    "username=ritinha")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) HEAD:/consumer/subscribe
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_40_headOnSubscribeReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1157L)
                .d("PASSWORD", "\"692992\"")
                .d("USERNAME", "\"_EM_2966_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. HEAD on path '/consumer/subscribe' defines a response schema but no response body found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .head(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=1234&" + 
                    "username=ritinha")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) HEAD:/consumer/subscribe
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_41_headOnSubscribeReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1157L)
                .d("PASSWORD", "\"692992\"")
                .d("USERNAME", "\"_EM_2966_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.missing. HEAD on path '/consumer/subscribe' defines a response schema but no response body found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .head(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=1234&" + 
                    "username=ritinha")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * 1 - (403) GET:/printshops/requests/{id}
    * 2 - (200) GET:/printshops/requests/{id}
    * 3 - (401) HEAD:/consumer/subscribe
    * Found 2 potential faults. Type-codes: 101, 205
    */
    @Test(timeout = 60000)
    public void test_42_headOnSubscribeShowsFaults_101_205UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1157L)
                .d("PASSWORD", "\"692992\"")
                .d("USERNAME", "\"xJh3RTz6g1\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "7hYyLD")
                .get(baseUrlOfSut + "/printshops/requests/-1925019577")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/requests/-1925019577"));
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/requests/310?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
        
        // Fault205. Wrongly Not Recognized as Authenticated. null.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .head(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=_EM_2942_XYZ_&" + 
                    "username=joao")
                .then()
                .statusCode(401)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/admin/register
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_43_postOnAdminRegisterReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/admin/register'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"balance\": { " + 
                    " \"currency\": \"_EM_3000_XYZ_\", " + 
                    " \"integerPart\": 256, " + 
                    " \"moneyAsDouble\": 0.5460820599085798 " + 
                    " }, " + 
                    " \"email\": \"Qp5d\", " + 
                    " \"id\": 613, " + 
                    " \"roles\": { " + 
                    " \"EM_tainted_map\": \"_EM_0_XYZ_\" " + 
                    " }, " + 
                    " \"rolesSet\": [ " + 
                    " \"_EM_3001_XYZ_\", " + 
                    " \"XBhHt4uuB6C\" " + 
                    " ], " + 
                    " \"username\": \"3qTr8R8iOmV\" " + 
                    " } ")
                .post(baseUrlOfSut + "/admin/register")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.http.converter.HttpMessageNotReadableException"))
                .body("'message'", containsString("Could not read document: Can not deserialize instance of java.util.HashSet out of START_OBJECT token\n at [Source: java.io.ByteArrayInputStream@3c9c3100; line: 1, column: 131] (through reference chain: io.github.proxyprint.kitchen.models.Admin[\"roles\"]); nested exception is com.fasterxml.jackson.databind.JsonMappingException: Can not deserialize instance of java.util.HashSet out of START_OBJECT token\n at [Source: java.io.ByteArrayInputStream@3c9c3100; line: 1, column: 131] (through reference chain: io.github.proxyprint.kitchen.models.Admin[\"roles\"])"))
                .body("'path'", containsString("/admin/register"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/request/register
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_44_postOnRequestRegisterReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/request/register'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 619, " + 
                    " \"managerEmail\": \"_EM_575_XYZ_\", " + 
                    " \"managerPassword\": \"Z\", " + 
                    " \"managerUsername\": \"_EM_576_XYZ_\", " + 
                    " \"pShopAddress\": \"_EM_577_XYZ_\", " + 
                    " \"pShopDateRequest\": \"2yQDBJCBhi23\", " + 
                    " \"pShopDateRequestAccepted\": \"_EM_578_XYZ_\", " + 
                    " \"pShopLatitude\": 0.5055690902038552, " + 
                    " \"pShopNIF\": \"_EM_579_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/request/register")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.http.converter.HttpMessageNotReadableException"))
                .body("'message'", containsString("Could not read document: Can not deserialize value of type java.util.GregorianCalendar from String \"_EM_578_XYZ_\": not a valid representation (error: Failed to parse Date value '_EM_578_XYZ_': Can not parse date \"_EM_578_XYZ_\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\"))\n at [Source: java.io.ByteArrayInputStream@5db0ac6; line: 1, column: 193] (through reference chain: io.github.proxyprint.kitchen.models.printshops.RegisterRequest[\"pShopDateRequestAccepted\"]); nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Can not deserialize value of type java.util.GregorianCalendar from String \"_EM_578_XYZ_\": not a valid representation (error: Failed to parse Date value '_EM_578_XYZ_': Can not parse date \"_EM_578_XYZ_\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\"))\n at [Source: java.io.ByteArrayInputStream@5db0ac6; line: 1, column: 193] (through reference chain: io.github.proxyprint.kitchen.models.printshops.RegisterRequest[\"pShopDateRequestAccepted\"])"))
                .body("'path'", containsString("/request/register"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/admin/printshops
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_45_getOnPrintshopsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/admin/printshops")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/admin/printshops"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/api/secured
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_46_getOnApiSecuredReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/secured")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/api/secured"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/consumer/balance
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_47_getOnBalanceReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_16_XYZ_")
                .get(baseUrlOfSut + "/consumer/balance?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/balance"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/consumer/info
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_48_getOnInfoReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_17_XYZ_")
                .get(baseUrlOfSut + "/consumer/info?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/info"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/consumer/notifications
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_49_getOnNotificationsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/notifications?EMextraParam123=_EM_18_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/notifications"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/consumer/requests
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_50_getOnRequestsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_19_XYZ_")
                .get(baseUrlOfSut + "/consumer/requests")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/requests"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/consumer/satisfied
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_51_getOnSatisfiedReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/satisfied")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/satisfied"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/printshops/history
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_52_getOnPrintshopsHistoryWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_25_XYZ_")
                .get(baseUrlOfSut + "/printshops/history?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/history"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/printshops/requests
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_53_getOnPrintshopsRequestsWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/requests?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/requests"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/printshops/satisfied
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_54_getOnSatisfiedReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/satisfied?EMextraParam123=_EM_28_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/satisfied"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/printshops/stats
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_55_getOnStatsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/stats?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/stats"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/requests/pending
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_56_getOnPendingReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_33_XYZ_")
                .get(baseUrlOfSut + "/requests/pending")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/requests/pending"));
    }
    
    
    /**
    * Calls:
    * (401) PUT:/notifications/{notificationId}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_57_putOnNotifReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/notifications/676?EMextraParam123=_EM_112_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/notifications/676"));
    }
    
    
    /**
    * Calls:
    * (401) DELETE:/notifications/{notificationId}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_58_deleteOnNotifReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/notifications/658")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/notifications/658"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/admin/printshops
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_59_getOnPrintshopsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/admin/printshops?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/admin/printshops"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/api/secured
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_60_getOnSecuredReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_177_XYZ_")
                .get(baseUrlOfSut + "/api/secured?EMextraParam123=_EM_176_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/api/secured"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/balance
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_61_getOnBalanceReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/balance?EMextraParam123=_EM_178_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/balance"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/info
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_62_getOnInfoReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/info?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/info"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/notifications
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_63_getOnConsumerNotificationsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/notifications")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/notifications"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/requests
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_64_getOnRequestsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/requests?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/requests"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/satisfied
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_65_getOnSatisfiedReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/satisfied")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/satisfied"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshops/history
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_66_getOnHistoryReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/printshops/history")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/history"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshops/requests
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_67_getOnRequestsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/printshops/requests")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/requests"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshops/satisfied
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_68_getOnSatisfiedReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/printshops/satisfied?EMextraParam123=_EM_193_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/satisfied"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshops/stats
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_69_getOnStatsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/stats?EMextraParam123=_EM_194_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/stats"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/requests/pending
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_70_getOnPendingReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/requests/pending")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/requests/pending"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/documents/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_71_getOnDocumentReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/documents/597?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/documents/597"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/documents/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_72_getOnDocumentReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/documents/479?EMextraParam123=_EM_518_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/documents/479"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/notifications
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_73_getOnNotificationsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "_EM_673_XYZ_")
                .get(baseUrlOfSut + "/consumer/notifications?EMextraParam123=_EM_672_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/notifications"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshops/stats
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_74_getOnStatsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "_EM_686_XYZ_")
                .get(baseUrlOfSut + "/printshops/stats")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/stats"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/documents/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_75_getOnDocumentReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/documents/585?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/documents/585"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshops/history
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_76_getOnHistoryReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/printshops/history")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/history"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshops/requests
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_77_getOnRequestsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/requests")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/requests"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshops/satisfied
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_78_getOnSatisfiedReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/printshops/satisfied?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/satisfied"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshops/stats
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_79_getOnStatsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "_EM_356_XYZ_")
                .get(baseUrlOfSut + "/printshops/stats")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/stats"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/admin/printshops
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_80_getOnPrintshopsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/admin/printshops?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/admin/printshops"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/api/secured
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_81_getOnSecuredReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/secured?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/api/secured"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/balance
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_82_getOnBalanceReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/balance")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/balance"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/info
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_83_getOnInfoReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/consumer/info")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/info"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/notifications
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_84_getOnNotificationsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/notifications?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/notifications"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/requests
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_85_getOnRequestsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/requests")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/requests"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/satisfied
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_86_getOnSatisfiedReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 417L)
                .d("ADDRESS", "\"ZUA6Zqk2\"")
                .d("AVG_RATING", "0.11477920367537298")
                .d("BALANCE_CURRENCY", "\"gPzqSP_sfW412n\"")
                .d("BALANCE_FRACTIONAL_PART", "837")
                .d("BALANCE_INTEGER_PART", "42")
                .d("LATITUDE", "0.6346086231657716")
                .d("LOGO", "\"w\"")
                .d("LONGITUDE", "0.3644634206887878")
                .d("NAME", "\"TwyGub6TU9Xk\"")
                .d("NIF", "\"6M8DNSD9TLyc4fHb\"")
            .and().insertInto("USERS", 420L)
                .d("PASSWORD", "\"l18B7uukqb0F\"")
                .d("USERNAME", "\"SaiiokOhUX\"")
            .and().insertInto("PRINTSHOPS", 419L)
                .d("ADDRESS", "\"WZbEaPF3YLSi\"")
                .d("AVG_RATING", "0.9211788964348833")
                .d("BALANCE_CURRENCY", "\"td73k\"")
                .d("BALANCE_FRACTIONAL_PART", "607")
                .d("BALANCE_INTEGER_PART", "-7260")
                .d("LATITUDE", "0.5247940040238331")
                .d("LOGO", "\"zf6g7FGDcazNXHa\"")
                .d("LONGITUDE", "0.2698956914665932")
                .d("NAME", "\"\"")
                .d("NIF", "\"hArtdUe4\"")
            .and().insertInto("EMPLOYEES", 418L)
                .d("NAME", "\"xIXqVznzKju\"")
                .d("ID", "5")
                .d("PRINTSHOP_ID", "NULL")
            .and().insertInto("PRINTSHOPS", 2945L)
                .d("ADDRESS", "\"RmCyHN7MSFXoJ\"")
                .d("AVG_RATING", "0.6878856320670563")
                .d("BALANCE_CURRENCY", "\"Syie3c\"")
                .d("BALANCE_FRACTIONAL_PART", "528")
                .d("BALANCE_INTEGER_PART", "378")
                .d("LATITUDE", "0.3835736000841259")
                .d("LOGO", "\"6CnjqgJqqqs9vVO\"")
                .d("LONGITUDE", "0.07576170668397741")
                .d("NAME", "\"NtP9_0Q\"")
                .d("NIF", "\"XIVbdGl\"")
            .and().insertInto("PRINTSHOPS", 2944L)
                .d("ADDRESS", "\"Nh\"")
                .d("AVG_RATING", "0.35812279846000616")
                .d("BALANCE_CURRENCY", "\"BBe9mYjs02ODr7\"")
                .d("BALANCE_FRACTIONAL_PART", "416")
                .d("BALANCE_INTEGER_PART", "545")
                .d("LATITUDE", "0.27145272326289904")
                .d("LOGO", "\"S\"")
                .d("LONGITUDE", "0.2749189895575811")
                .d("NAME", "\"spILXkAzcJ7VH\"")
                .d("NIF", "\"WQ0evH\"")
            .and().insertInto("USERS", 2943L)
                .d("PASSWORD", "\"1t0enPcFa\"")
                .d("USERNAME", "\"qmarZE8zm7Fd\"")
            .and().insertInto("CONSUMERS", 2942L)
                .d("BALANCE_CURRENCY", "\"Pf0d4RsPsrcV\"")
                .d("BALANCE_FRACTIONAL_PART", "922")
                .d("BALANCE_INTEGER_PART", "613")
                .d("NAME", "\"41\"")
                .d("ID", "15")
            .and().insertInto("USERS", 2941L)
                .d("PASSWORD", "\"GZ_MV2mpEEPY\"")
                .d("USERNAME", "\"\"")
            .and().insertInto("CONSUMERS", 2940L)
                .d("BALANCE_CURRENCY", "\"uFlc4Lbkty7QqXHd\"")
                .d("BALANCE_FRACTIONAL_PART", "377")
                .d("BALANCE_INTEGER_PART", "945")
                .d("NAME", "\"oJQ7J\"")
                .d("ID", "7")
            .and().insertInto("PRINT_REQUESTS", 2939L)
                .d("ARRIVAL", "NULL")
                .d("COST", "0.33379351033")
                .d("DELIVERED", "NULL")
                .d("EMPATTENDED", "NULL")
                .d("EMPDELIVERED", "\"PsUy4JIrQ_\"")
                .d("FINISHED", "\"1909-11-05 09:12:50\"")
                .d("PAYPAL_SALE_ID", "\"4\"")
                .d("PAYMENT_TYPE", "\"_\"")
                .d("STATUS", "\"PENDING\"")
                .d("CONSUMER_ID", "NULL")
                .d("PRINTSHOP_ID", "NULL")
                .d("PRINTSHOP", "NULL")
                .d("CONSUMER", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "P")
                .contentType("application/json")
                .body(" { " + 
                    " \"roles\": [ " + 
                    " \"iaNCiEQaT0HC\", " + 
                    " \"fVwzRL9X\", " + 
                    " \"a_IHyhx6OmiSg8\" " + 
                    " ] " + 
                    " } ")
                .get(baseUrlOfSut + "/consumer/satisfied")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/satisfied"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/requests/pending
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_87_getOnPendingReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "_EM_525_XYZ_")
                .get(baseUrlOfSut + "/requests/pending")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/requests/pending"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/admin/printshops
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_88_getOnPrintshopsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "_EM_668_XYZ_")
                .get(baseUrlOfSut + "/admin/printshops")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/admin/printshops"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/api/secured
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_89_getOnSecuredReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/secured?EMextraParam123=_EM_669_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/api/secured"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/balance
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_90_getOnBalanceReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "_EM_671_XYZ_")
                .get(baseUrlOfSut + "/consumer/balance")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/balance"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/info
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_91_getOnInfoReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/info")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/info"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/requests
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_92_getOnRequestsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/requests?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/requests"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/satisfied
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_93_getOnConsumerSatisfiedWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/consumer/satisfied?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/satisfied"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/requests/pending
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_94_getOnPendingReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/requests/pending")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/requests/pending"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/documents/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_95_getOnDocumentReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_1697_XYZ_")
                .get(baseUrlOfSut + "/documents/-764172753")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/documents/-764172753"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/notifications/{notificationId}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_96_putOnNotifReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/notifications/667")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/notifications/667"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/notifications/{notificationId}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_97_putOnNotifReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/notifications/270?EMextraParam123=_EM_605_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/notifications/270"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/notifications/{notificationId}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_98_putOnNotifReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "_EM_765_XYZ_")
                .put(baseUrlOfSut + "/notifications/-2008819091")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/notifications/-2008819091"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/notifications/{notificationId}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_99_deleteOnNotifReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/notifications/-7307410821298216332")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/notifications/-7307410821298216332"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/notifications/{notificationId}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_100_deleteOnNotifWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/notifications/926?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/notifications/926"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/notifications/{notificationId}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_101_deleteOnNotifReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "_EM_681_XYZ_")
                .delete(baseUrlOfSut + "/notifications/773")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/notifications/773"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/consumer/subscribe
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_102_deleteOnSubscribeReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 964L)
                .d("PASSWORD", "\"_EM_2813_XYZ_\"")
                .d("USERNAME", "\"5BddQ9TNQgFybc\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/consumer/subscribe'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=_EM_2812_XYZ_&" + 
                    "username=_EM_2808_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/consumer/subscribe
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_103_deleteOnSubscribeReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/consumer/subscribe'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/subscribe?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/consumer/subscribe
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_104_deleteOnSubscribeReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 964L)
                .d("PASSWORD", "\"J6GwR9e\"")
                .d("USERNAME", "\"5BddQ9TNQgFyb\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/consumer/subscribe'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=hQLhvaPrRAU5UUY&" + 
                    "username=_EM_2253_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/consumer/subscribe
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_105_deleteOnSubscribeReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1138L)
                .d("PASSWORD", "\"UT_6be0oWkKhD0yR\"")
                .d("USERNAME", "\"jVf\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/consumer/subscribe'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=wYbh&" + 
                    "username=_EM_2801_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) PATCH:/consumer/subscribe
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_106_patchOnConsumerSubscribeWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1869L)
                .d("ADDRESS", "\"Md73HwXayYm\"")
                .d("AVG_RATING", "0.9638")
                .d("BALANCE_CURRENCY", "\"wCU0pmkQ\"")
                .d("BALANCE_FRACTIONAL_PART", "277")
                .d("BALANCE_INTEGER_PART", "-15560")
                .d("LATITUDE", "0.1293284506")
                .d("LOGO", "\"ShpJ5c\"")
                .d("LONGITUDE", "-15057.53469787606")
                .d("NAME", "\"jCN9Ozb3tRa5\"")
                .d("NIF", "\"88TZSiKn1s2V1wnG\"")
            .and().insertInto("PRINTSHOPS", 1868L)
                .d("ADDRESS", "\"_EM_4141_XYZ_\"")
                .d("AVG_RATING", "0.8002164828066154")
                .d("BALANCE_CURRENCY", "\"7CMlbR\"")
                .d("BALANCE_FRACTIONAL_PART", "2522")
                .d("BALANCE_INTEGER_PART", "875")
                .d("LATITUDE", "0.9382718412222617")
                .d("LOGO", "\"_EM_4145_XYZ_\"")
                .d("LONGITUDE", "0.1480040860352947")
                .d("NAME", "\"X|sU_TC\"")
                .d("NIF", "\"pti9nM\"")
            .and().insertInto("USERS", 1867L)
                .d("PASSWORD", "\"HxvvvW8ARBwvr\"")
                .d("USERNAME", "\"n\"")
            .and().insertInto("CONSUMERS", 1866L)
                .d("BALANCE_CURRENCY", "\"blVAki\"")
                .d("BALANCE_FRACTIONAL_PART", "-130384")
                .d("BALANCE_INTEGER_PART", "-1704")
                .d("NAME", "\"NAME7_1_0_\"")
                .d("ID", "16")
            .and().insertInto("USERS", 1865L)
                .d("PASSWORD", "\"i\"")
                .d("USERNAME", "\"dQZ\"")
            .and().insertInto("CONSUMERS", 1864L)
                .d("BALANCE_CURRENCY", "\"_EM_4024_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "8744")
                .d("BALANCE_INTEGER_PART", "528")
                .d("NAME", "\"G8tvwU\"")
                .d("ID", "11")
            .and().insertInto("PRINT_REQUESTS", 1863L)
                .d("ARRIVAL", "NULL")
                .d("COST", "0.7144050429368027")
                .d("DELIVERED", "NULL")
                .d("EMPATTENDED", "\"_EM_4142_XYZ_\"")
                .d("EMPDELIVERED", "\"NYD7eRSQp\"")
                .d("FINISHED", "NULL")
                .d("PAYPAL_SALE_ID", "\"OazU4k\"")
                .d("PAYMENT_TYPE", "\"MzDymBQEKOI2\"")
                .d("STATUS", "\"NOT_PAYED\"")
                .d("CONSUMER_ID", "5")
                .d("PRINTSHOP_ID", "3")
                .d("PRINTSHOP", "4")
                .d("CONSUMER", "4")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/consumer/subscribe'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .patch(baseUrlOfSut + "/consumer/subscribe?password=fC1WmuDbg5LnTEa")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) PATCH:/consumer/subscribe
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_107_patchOnSubscribeReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/consumer/subscribe'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .patch(baseUrlOfSut + "/consumer/subscribe?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) PATCH:/consumer/subscribe
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_108_patchOnConsumerSubscribeWithQueryParamsUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 629L)
                .d("PASSWORD", "\"8q7pjt\"")
                .d("USERNAME", "\"twLwv\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/consumer/subscribe'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .patch(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=yTc_K7A1CfQLu9C&" + 
                    "username=DIlIBQonBQeNJ")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) HEAD:/consumer/subscribe
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_109_headOnSubscribeReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1275L)
                .d("PASSWORD", "\"_EM_2919_XYZ_\"")
                .d("USERNAME", "\"dzqc\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/consumer/subscribe'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .head(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=_EM_2917_XYZ_&" + 
                    "username=_EM_2918_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) HEAD:/consumer/subscribe
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_110_headOnSubscribeReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/consumer/subscribe'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_21_XYZ_")
                .head(baseUrlOfSut + "/consumer/subscribe?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) HEAD:/consumer/subscribe
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_111_headOnSubscribeReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1278L)
                .d("PASSWORD", "\"XqtgX7Svn\"")
                .d("USERNAME", "\"5O723HI\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/consumer/subscribe'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .head(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=XqtgX7Svn&" + 
                    "username=_EM_2929_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (500) GET:/consumer/{consumerID}/printingschemas
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_112_getOnPrintingschemasShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/29/printingschemas?EMextraParam123=42")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_45_getConsumerPrintingSchemas
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/29/printingschemas"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/printshops/requests/{id}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_113_getOnRequestShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/printshops/PrintShopController_252_getPrintShopRequest.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/printshops/requests/{id}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/printshops/requests/599?EMextraParam123=42")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/printshops/PrintShopController_252_getPrintShopRequest
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/printshops/requests/599"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/consumer/{consumerID}/printingschemas
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_114_postOnPrintingschemasShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 2863L)
                .d("PASSWORD", "\"V\"")
                .d("USERNAME", "\"iXToHbG\"")
            .and().insertInto("CONSUMERS", 2862L)
                .d("BALANCE_CURRENCY", "\"0KpO\"")
                .d("BALANCE_FRACTIONAL_PART", "800")
                .d("BALANCE_INTEGER_PART", "683")
                .d("EMAIL", "\"T9w\"")
                .d("LATITUDE", "\"MU5IpxW\"")
                .d("LONGITUDE", "\"ueaMgR6\"")
                .d("NAME", "\"iL0EgCH2Wh3KZ\"")
                .d("ID", "19")
            .and().insertInto("USERS", 2866L)
                .d("PASSWORD", "\"4ZxFyp5_A\"")
                .d("USERNAME", "\"drN8Ymdyutaui7I\"")
            .and().insertInto("CONSUMERS", 2865L)
                .d("BALANCE_CURRENCY", "\"uMAk\"")
                .d("BALANCE_FRACTIONAL_PART", "0")
                .d("BALANCE_INTEGER_PART", "400")
                .d("NAME", "\"DY\"")
                .d("ID", "7")
            .and().insertInto("PRINTING_SCHEMAS", 2864L)
                .d("BINDING_SPECS", "\"2_lEZ\"")
                .d("COVER_SPECS", "\"49wcE\"")
                .d("IS_DELETED", "true")
                .d("PSCHEMA_NAME", "\"GcT7qosGUH1Lw\"")
                .d("PAPER_SPECS", "\"0I\"")
                .d("CONSUMER_ID", "2")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_72_addNewConsumerPrintingSchema.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"gWZIdB\", " + 
                    " \"coverSpecs\": \"xo4EMN6ofgH8Au\", " + 
                    " \"deleted\": true, " + 
                    " \"id\": 344, " + 
                    " \"name\": \"mY4_XdxGU53g2X\", " + 
                    " \"paperSpecs\": \"_EM_387_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/280/printingschemas")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_72_addNewConsumerPrintingSchema
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/280/printingschemas"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/consumer/{consumerID}/printingschemas
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_115_postOnPrintingschemasShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_71_addNewConsumerPrintingSchema.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"gWZIhB\", " + 
                    " \"coverSpecs\": \"xo4EMN6ofgH8Au\", " + 
                    " \"deleted\": false, " + 
                    " \"id\": 280, " + 
                    " \"name\": \"mY0_XdxGU53g2X\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/280/printingschemas?EMextraParam123=42")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_71_addNewConsumerPrintingSchema
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/consumer/280/printingschemas"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/consumer/{id}/notify
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_116_postOnNotifyShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/notifications/NotificationsController_59_greeting.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{id}/notify'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/-8827117180544968696/notify?EMextraParam123=42")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/notifications/NotificationsController_59_greeting
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/-8827117180544968696/notify"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/paypal/ipn/{printRequestID}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_117_postOnIpnShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 2078L)
                .d("PASSWORD", "\"jZLr9jhit2H\"")
                .d("USERNAME", "\"fCVvX9O\"")
            .and().insertInto("CONSUMERS", 2077L)
                .d("BALANCE_CURRENCY", "\"x0nGjvYt3JzCtQv1\"")
                .d("BALANCE_FRACTIONAL_PART", "2736")
                .d("BALANCE_INTEGER_PART", "-1707301368")
                .d("NAME", "\"vEDx6CZ0W\"")
                .d("ID", "15")
            .and().insertInto("NOTIFICATION", 2076L)
                .d("EMAIL", "NULL")
                .d("READ", "false")
                .d("TIMESTAMP", "\"1996-03-14 14:56:23\"")
                .d("CONSUMER", "5")
            .and().insertInto("PRINTSHOPS", 2079L)
                .d("ADDRESS", "\"eDokMoLuRLjRNWF9\"")
                .d("AVG_RATING", "0.8915892648031783")
                .d("BALANCE_CURRENCY", "\"7UHHjE\"")
                .d("BALANCE_FRACTIONAL_PART", "212")
                .d("BALANCE_INTEGER_PART", "572")
                .d("LATITUDE", "0.3752819852718088")
                .d("LOGO", "\"iGHfv4xVDfF\"")
                .d("LONGITUDE", "0.15975034846799807")
                .d("NAME", "\"jMDUCD0T\"")
                .d("NIF", "\"JvmychXc\"")
            .and().insertInto("PRINTSHOPS", 2086L)
                .d("ADDRESS", "\"PqH\"")
                .d("AVG_RATING", "0.17622206721549616")
                .d("BALANCE_CURRENCY", "\"LQUqzUSRrfQUU\"")
                .d("BALANCE_FRACTIONAL_PART", "514")
                .d("BALANCE_INTEGER_PART", "438")
                .d("LATITUDE", "0.7227898419270348")
                .d("LOGO", "\"n\"")
                .d("LONGITUDE", "0.21658307165200796")
                .d("NAME", "\"tKJ4IWWVZk\"")
                .d("NIF", "\"Q\"")
            .and().insertInto("PRINTSHOPS", 2085L)
                .d("ADDRESS", "\"CyCOtnWlfOabl\"")
                .d("AVG_RATING", "0.0074145149210438355")
                .d("BALANCE_CURRENCY", "\"y7u0FbGBRcsNut\"")
                .d("BALANCE_FRACTIONAL_PART", "234")
                .d("BALANCE_INTEGER_PART", "679")
                .d("LATITUDE", "0.0")
                .d("LOGO", "\"lXl6\"")
                .d("LONGITUDE", "0.37266924508144994")
                .d("NAME", "\"DE6\"")
                .d("NIF", "\"uDr87GoUD\"")
            .and().insertInto("USERS", 2084L)
                .d("PASSWORD", "\"\"")
                .d("USERNAME", "\"_EM_4182_XYZ_\"")
            .and().insertInto("CONSUMERS", 2083L)
                .d("BALANCE_CURRENCY", "\"\"")
                .d("BALANCE_FRACTIONAL_PART", "1753")
                .d("BALANCE_INTEGER_PART", "235")
                .d("NAME", "\"OtyuD_avMg7a\"")
                .d("ID", "19")
            .and().insertInto("PRINT_REQUESTS", 2080L)
                .d("ARRIVAL", "\"2081-03-22 09:19:05\"")
                .d("COST", "0.846431646771176")
                .d("DELIVERED", "NULL")
                .d("EMPATTENDED", "\"rlW\"")
                .d("EMPDELIVERED", "NULL")
                .d("FINISHED", "\"2063-04-05 04:06:25\"")
                .d("PAYPAL_SALE_ID", "\"MQlFrC\"")
                .d("PAYMENT_TYPE", "\"cHnNu9zP8k\"")
                .d("STATUS", "\"PENDING\"")
                .d("CONSUMER_ID", "NULL")
                .d("PRINTSHOP_ID", "NULL")
                .d("PRINTSHOP", "NULL")
                .d("CONSUMER", "NULL")
            .and().insertInto("PRINTSHOPS", 2094L)
                .d("ADDRESS", "\"1TS_e8PdLV_\"")
                .d("AVG_RATING", "0.09344945600101473")
                .d("BALANCE_CURRENCY", "\"s1IoP1O\"")
                .d("BALANCE_FRACTIONAL_PART", "199")
                .d("BALANCE_INTEGER_PART", "926")
                .d("LATITUDE", "-17.59893212080084")
                .d("LOGO", "\"8Dq_N2XQ4LQmpG\"")
                .d("LONGITUDE", "0.3853528562340117")
                .d("NAME", "\"Ynnyr\"")
                .d("NIF", "\"SRtU\"")
            .and().insertInto("PRINTSHOPS", 2093L)
                .d("ADDRESS", "\"O\"")
                .d("AVG_RATING", "0.5027307359361952")
                .d("BALANCE_CURRENCY", "\"P2mzkkbwRg6Udc_R\"")
                .d("BALANCE_FRACTIONAL_PART", "383")
                .d("BALANCE_INTEGER_PART", "500")
                .d("LATITUDE", "0.4764781906325")
                .d("LOGO", "\"f\"")
                .d("LONGITUDE", "0.037903378047")
                .d("NAME", "\"jJ\"")
                .d("NIF", "\"A6v2AruMVK\"")
            .and().insertInto("USERS", 2092L)
                .d("PASSWORD", "\"_EM_4183_XYZ_\"")
                .d("USERNAME", "\"kwGuuaeknDoj\"")
            .and().insertInto("CONSUMERS", 2091L)
                .d("BALANCE_CURRENCY", "\"NnPt3uV3H\"")
                .d("BALANCE_FRACTIONAL_PART", "862")
                .d("BALANCE_INTEGER_PART", "876")
                .d("NAME", "\"nD2\"")
                .d("ID", "1")
            .and().insertInto("USERS", 2090L)
                .d("PASSWORD", "\"\"")
                .d("USERNAME", "\"CPtsqQlNkyLU\"")
            .and().insertInto("CONSUMERS", 2089L)
                .d("BALANCE_CURRENCY", "\"I6WkCXy6fksEPA0\"")
                .d("BALANCE_FRACTIONAL_PART", "943")
                .d("BALANCE_INTEGER_PART", "385")
                .d("NAME", "\"IPbn_WRkgZU\"")
                .d("ID", "11")
            .and().insertInto("PRINT_REQUESTS", 2088L)
                .d("COST", "0.0")
            .and().insertInto("DOCUMENTS", 2087L)
                .d("FILE_NAME", "\"Kd2C8Yo\"")
                .d("TOTAL_PAGES", "458")
                .d("PRINT_REQUEST_ID", "NULL")
            .and().insertInto("PRINTSHOPS", 1036L)
                .d("ADDRESS", "\"6S5gcI3XL\"")
                .d("AVG_RATING", "0.04414779555376358")
                .d("BALANCE_CURRENCY", "\"Ma3\"")
                .d("BALANCE_FRACTIONAL_PART", "162")
                .d("BALANCE_INTEGER_PART", "459")
                .d("LATITUDE", "0.5046322342531715")
                .d("LOGO", "\"\"")
                .d("LONGITUDE", "-25.736854518049505")
                .d("NAME", "\"kBkR79M5Dg3Tj\"")
                .d("NIF", "\"_EM_2442_XYZ_\"")
            .and().insertInto("USERS", 1035L)
                .d("PASSWORD", "\"_EM_2443_XYZ_\"")
                .d("USERNAME", "\"q4oRBmEX\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PayPalController_61_someRequestPaymentConfirmationFromPaylPal.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/paypal/ipn/{printRequestID}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/paypal/ipn/-3427?" + 
                    "charset=Ar78_6QmnONPs9L&" + 
                    "payer_email=9TIvSsSD_8&" + 
                    "txn_type=oCl5TCv&" + 
                    "transaction_type=q46AU&" + 
                    "mc_gross=_EM_4181_XYZ_")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PayPalController_61_someRequestPaymentConfirmationFromPaylPal
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NumberFormatException"))
                .body("'message'", containsString("For input string: \"_EM_4181_XYZ_\""))
                .body("'path'", containsString("/paypal/ipn/-3427"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/paypal/ipn/{printRequestID}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_118_postOnPaypalIpnWithQueryParamShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PayPalController_61_someRequestPaymentConfirmationFromPaylPal.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/paypal/ipn/{printRequestID}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/paypal/ipn/43?EMextraParam123=42")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PayPalController_61_someRequestPaymentConfirmationFromPaylPal
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/paypal/ipn/43"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/paypal/ipn/{printRequestID}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_119_postOnPaypalIpnWithQueryParamsShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PayPalController_61_someRequestPaymentConfirmationFromPaylPal.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/paypal/ipn/{printRequestID}'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/paypal/ipn/330?" + 
                    "charset=_EM_3844_XYZ_&" + 
                    "mc_gross=5ZCTksR")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PayPalController_61_someRequestPaymentConfirmationFromPaylPal
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NumberFormatException"))
                .body("'message'", containsString("For input string: \"5ZCTksR\""))
                .body("'path'", containsString("/paypal/ipn/330"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/paypal/ipn/{printRequestID}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_120_postOnPaypalIpnWithQueryParamsEmptyTransaction_typeShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PayPalController_61_someRequestPaymentConfirmationFromPaylPal.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/paypal/ipn/{printRequestID}'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/paypal/ipn/178789547?" + 
                    "charset=wQ&" + 
                    "payer_email=Y&" + 
                    "txn_type=QSG_ShpnuUI&" + 
                    "transaction_type=&" + 
                    "mc_gross=Ic3IXSr3ur19")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PayPalController_61_someRequestPaymentConfirmationFromPaylPal
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NumberFormatException"))
                .body("'message'", containsString("For input string: \"Ic3IXSr3ur19\""))
                .body("'path'", containsString("/paypal/ipn/178789547"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/printdocument/{id}/budget
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_121_postOnPrintdocuBudgetWithQueryParamShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_328_calcBudgetForPrintRecipe.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/printdocument/{id}/budget'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/printdocument/935/budget?EMextraParam123=42")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_328_calcBudgetForPrintRecipe
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/printdocument/935/budget"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/printshops/requests/{id}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_122_postOnRequestShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/printshops/PrintShopController_164_changeStatusPrintShopRequests.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/printshops/requests/{id}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/requests/652")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/printshops/PrintShopController_164_changeStatusPrintShopRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/printshops/requests/652"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/consumer/{id}/notify
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_123_postOnNotifyShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 290L)
                .d("ADDRESS", "\"N7VLC8fol9ZTq\"")
                .d("AVG_RATING", "0.7950781470838825")
                .d("BALANCE_CURRENCY", "\"_EM_976_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "8389210")
                .d("BALANCE_INTEGER_PART", "142")
                .d("LATITUDE", "0.6625378103719153")
                .d("LOGO", "\"_EM_977_XYZ_\"")
                .d("LONGITUDE", "0.0916")
                .d("NAME", "\"_EM_978_XYZ_\"")
                .d("NIF", "\"Sxs6rA\"")
            .and().insertInto("USERS", 293L)
                .d("PASSWORD", "\"UvCdd4SSYKvRt\"")
                .d("USERNAME", "\"9OQeI_jc_fP7y\"")
            .and().insertInto("PRINTSHOPS", 292L)
                .d("ADDRESS", "\"5sAzBvSwi8BK14\"")
                .d("AVG_RATING", "0.326811342383971")
                .d("BALANCE_CURRENCY", "\"_EM_979_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "39")
                .d("BALANCE_INTEGER_PART", "419")
                .d("LATITUDE", "1.723559660302317")
                .d("LOGO", "\"lbOSY45d45h\"")
                .d("LONGITUDE", "0.18039102409432062")
                .d("NAME", "\"NKrL4J3a\"")
                .d("NIF", "\"M5M5AgU9RdDhK0S\"")
            .and().insertInto("EMPLOYEES", 291L)
                .d("NAME", "\"2fx70GX_ovIyHF1\"")
                .d("ID", "2")
                .d("PRINTSHOP_ID", "5")
            .and().insertInto("USERS", 295L)
                .d("PASSWORD", "\"U5x83OcEuN_Qd\"")
                .d("USERNAME", "\"DOrO\"")
            .and().insertInto("CONSUMERS", 294L)
                .d("BALANCE_CURRENCY", "\"7wTcPB\"")
                .d("BALANCE_FRACTIONAL_PART", "66350")
                .d("BALANCE_INTEGER_PART", "4194655")
                .d("EMAIL", "\"IuBysOk4Xcl4Cy_g\"")
                .d("LATITUDE", "\"apWgOcx5C5Hxyq5\"")
                .d("LONGITUDE", "\"Y_zj9HpBk\"")
                .d("NAME", "\"e\"")
                .d("ID", "15")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/notifications/NotificationsController_59_greeting.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{id}/notify'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/-67107892/notify?message=4pQBrKxh")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/notifications/NotificationsController_59_greeting
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/-67107892/notify"));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/consumer/info/update
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_124_putOnUpdateShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1869L)
                .d("ADDRESS", "\"Md73HwXayYm\"")
                .d("AVG_RATING", "0.9638")
                .d("BALANCE_CURRENCY", "\"wCU0pmkQ\"")
                .d("BALANCE_FRACTIONAL_PART", "277")
                .d("BALANCE_INTEGER_PART", "-15560")
                .d("LATITUDE", "0.1293284506")
                .d("LOGO", "\"ShpJ5c\"")
                .d("LONGITUDE", "-15057.53469787606")
                .d("NAME", "\"jCN9Ozb3tRa5\"")
                .d("NIF", "\"88TZSiKn1s2V1wnG\"")
            .and().insertInto("PRINTSHOPS", 1868L)
                .d("ADDRESS", "\"_EM_4141_XYZ_\"")
                .d("AVG_RATING", "0.8002164828066154")
                .d("BALANCE_CURRENCY", "\"7CMlbR\"")
                .d("BALANCE_FRACTIONAL_PART", "2522")
                .d("BALANCE_INTEGER_PART", "875")
                .d("LATITUDE", "0.9382718412222617")
                .d("LOGO", "\"_EM_4145_XYZ_\"")
                .d("LONGITUDE", "0.1480040860352947")
                .d("NAME", "\"X|sU_TC\"")
                .d("NIF", "\"pti9nM\"")
            .and().insertInto("USERS", 1867L)
                .d("PASSWORD", "\"HxvvvW8ARBwvr\"")
                .d("USERNAME", "\"n\"")
            .and().insertInto("CONSUMERS", 1866L)
                .d("BALANCE_CURRENCY", "\"blVAki\"")
                .d("BALANCE_FRACTIONAL_PART", "-130384")
                .d("BALANCE_INTEGER_PART", "-1704")
                .d("NAME", "\"NAME7_1_0_\"")
                .d("ID", "16")
            .and().insertInto("USERS", 1865L)
                .d("PASSWORD", "\"i\"")
                .d("USERNAME", "\"dQZ\"")
            .and().insertInto("CONSUMERS", 1864L)
                .d("BALANCE_CURRENCY", "\"_EM_4024_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "8744")
                .d("BALANCE_INTEGER_PART", "528")
                .d("NAME", "\"G8tvwU\"")
                .d("ID", "11")
            .and().insertInto("PRINT_REQUESTS", 1863L)
                .d("ARRIVAL", "NULL")
                .d("COST", "0.7144050429368027")
                .d("DELIVERED", "NULL")
                .d("EMPATTENDED", "\"_EM_4142_XYZ_\"")
                .d("EMPDELIVERED", "\"NYD7eRSQp\"")
                .d("FINISHED", "NULL")
                .d("PAYPAL_SALE_ID", "\"OazU4k\"")
                .d("PAYMENT_TYPE", "\"MzDymBQEKOI2\"")
                .d("STATUS", "\"NOT_PAYED\"")
                .d("CONSUMER_ID", "5")
                .d("PRINTSHOP_ID", "3")
                .d("PRINTSHOP", "4")
                .d("CONSUMER", "4")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_151_updateConsumerInfo.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/info/update'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "ETIR3kow")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"QFp\", " + 
                    " \"email\": \"P9o\", " + 
                    " \"latitude\": \"lT\", " + 
                    " \"printingSchemas\": [ " + 
                    " {} " + 
                    " ], " + 
                    " \"balance\": { " + 
                    " \"currency\": \"mebVG0cWQsjK\", " + 
                    " \"integerPart\": 488, " + 
                    " \"fractionalPart\": 21 " + 
                    " }, " + 
                    " \"username\": \"ImmVtAZL\" " + 
                    " } ")
                .put(baseUrlOfSut + "/consumer/info/update")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_151_updateConsumerInfo
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/consumer/info/update"));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/consumer/info/update
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_125_putOnInfoUpdateWithQueryParamShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_134_updateConsumerInfo.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/info/update'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .put(baseUrlOfSut + "/consumer/info/update?EMextraParam123=42")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_134_updateConsumerInfo
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/info/update"));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/consumer/info/update
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_126_putOnInfoUpdateShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_134_updateConsumerInfo.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/info/update'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "5q")
                .put(baseUrlOfSut + "/consumer/info/update")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_134_updateConsumerInfo
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/info/update"));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/consumer/{username}/notifications
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_127_putOnNotificationsShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 2311L)
                .d("ADDRESS", "\"2uyjxm26K4\"")
                .d("AVG_RATING", "0.590757527")
                .d("BALANCE_CURRENCY", "\"Ad38\"")
                .d("BALANCE_FRACTIONAL_PART", "137")
                .d("BALANCE_INTEGER_PART", "48")
                .d("LATITUDE", "0.8365528431265187")
                .d("LOGO", "\"4FxUyR8m5kMpR\"")
                .d("LONGITUDE", "0.20446570814999587")
                .d("NAME", "\"4Y7\"")
                .d("NIF", "\"NxeNVUNLLSUND34\"")
            .and().insertInto("PRINTSHOPS", 2339L)
                .d("ADDRESS", "\"9uhvM36El4d1NGb\"")
                .d("AVG_RATING", "0.18344284842269654")
                .d("BALANCE_CURRENCY", "\"RL9oKWFl1oAhzZ\"")
                .d("BALANCE_FRACTIONAL_PART", "4731")
                .d("BALANCE_INTEGER_PART", "198")
                .d("LATITUDE", "0.59608222769")
                .d("LOGO", "\"zvnT3XCqiMsa\"")
                .d("LONGITUDE", "0.48548733633813")
                .d("NAME", "\"2cPp9pyHvpV\"")
                .d("NIF", "\"nas5NyizApF\"")
            .and().insertInto("PRINTSHOPS", 2338L)
                .d("ADDRESS", "\"_EM_5054_XYZ_\"")
                .d("AVG_RATING", "0.6437532836794372")
                .d("BALANCE_CURRENCY", "\",\"")
                .d("BALANCE_FRACTIONAL_PART", "424")
                .d("BALANCE_INTEGER_PART", "463")
                .d("LATITUDE", "0.557137509860359")
                .d("LOGO", "\"hAQ3rLX3\"")
                .d("LONGITUDE", "0.4426921780866564")
                .d("NAME", "\"C904KSY2\"")
                .d("NIF", "\"CJKBhkKbB\"")
            .and().insertInto("USERS", 2337L)
                .d("PASSWORD", "\"M2\"")
                .d("USERNAME", "\"OwvewW\"")
            .and().insertInto("CONSUMERS", 2336L)
                .d("BALANCE_CURRENCY", "\"R_miCEsPvJ;U\"")
                .d("BALANCE_FRACTIONAL_PART", "121")
                .d("BALANCE_INTEGER_PART", "167")
                .d("NAME", "\"jtKyJwOxZg1\"")
                .d("ID", "12")
            .and().insertInto("USERS", 2335L)
                .d("PASSWORD", "\"5C8OFZybTI\"")
                .d("USERNAME", "\"S\"")
            .and().insertInto("CONSUMERS", 2334L)
                .d("BALANCE_CURRENCY", "\"n0juBWT2rrv\"")
                .d("BALANCE_FRACTIONAL_PART", "250")
                .d("BALANCE_INTEGER_PART", "244")
                .d("NAME", "\"yxW5\"")
                .d("ID", "8")
            .and().insertInto("PRINT_REQUESTS", 2333L)
                .d("COST", "0.1352298919720606")
            .and().insertInto("DOCUMENTS", 2332L)
                .d("FILE_NAME", "\"qh8ArU6=_S\"")
                .d("TOTAL_PAGES", "0")
                .d("PRINT_REQUEST_ID", "NULL")
            .and().insertInto("USERS", 2747L)
                .d("PASSWORD", "\"U_DIvlobGtu92eAX\"")
                .d("USERNAME", "\"16CLm\"")
            .and().insertInto("CONSUMERS", 2746L)
                .d("BALANCE_CURRENCY", "\"vvv2EPrJ6j7FsY\"")
                .d("BALANCE_FRACTIONAL_PART", "31")
                .d("BALANCE_INTEGER_PART", "-419593468")
                .d("NAME", "\"g7RXkt\"")
                .d("ID", "11")
            .and().insertInto("NOTIFICATION", 2745L)
                .d("EMAIL", "NULL")
                .d("READ", "false")
                .d("TIMESTAMP", "NULL")
                .d("CONSUMER", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_234_readAllNotifications.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{username}/notifications'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/_EM_5053_XYZ_/notifications")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_234_readAllNotifications
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/_EM_5053_XYZ_/notifications"));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/consumer/{username}/notifications
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_128_putOnNotificationsShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_234_readAllNotifications.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{username}/notifications'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .put(baseUrlOfSut + "/consumer/_EM_432_XYZ_/notifications")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_234_readAllNotifications
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/_EM_432_XYZ_/notifications"));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/consumer/{username}/notifications
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_129_putOnNotificationsShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 2499L)
                .d("PASSWORD", "\"\"")
                .d("USERNAME", "\"pVEYFL\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_234_readAllNotifications.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{username}/notifications'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/_EM_4642_XYZ_/notifications")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_234_readAllNotifications
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/_EM_4642_XYZ_/notifications"));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/consumer/{username}/notifications
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_130_putOnNotificationsShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 2686L)
                .d("PASSWORD", "\"r_5pfUrSUlwTRMKb\"")
                .d("USERNAME", "\"1mXQNC\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_234_readAllNotifications.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{username}/notifications'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/_EM_4897_XYZ_/notifications")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_234_readAllNotifications
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/_EM_4897_XYZ_/notifications"));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/consumer/{username}/notifications
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_131_putOnNotificationsShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 2078L)
                .d("PASSWORD", "\"jZLr9jhit2H\"")
                .d("USERNAME", "\"fCVvX9O\"")
            .and().insertInto("CONSUMERS", 2077L)
                .d("BALANCE_CURRENCY", "\"x0nGjvYt3JzCtQv1\"")
                .d("BALANCE_FRACTIONAL_PART", "2736")
                .d("BALANCE_INTEGER_PART", "-1707301368")
                .d("NAME", "\"vEDx6CZ0W\"")
                .d("ID", "19")
            .and().insertInto("NOTIFICATION", 2076L)
                .d("EMAIL", "\"RKnsxRDYCYWUbN\"")
                .d("READ", "false")
                .d("TIMESTAMP", "\"1996-03-14 14:56:23\"")
                .d("CONSUMER", "2")
            .and().insertInto("PRINTSHOPS", 2079L)
                .d("ADDRESS", "\"eDokMoLuRLjRNWF9\"")
                .d("AVG_RATING", "0.89158926")
                .d("BALANCE_CURRENCY", "\"UYDHjE\"")
                .d("BALANCE_FRACTIONAL_PART", "16")
                .d("BALANCE_INTEGER_PART", "573")
                .d("LATITUDE", "0.3752819852718088")
                .d("LOGO", "\"iGHfv4xVDfF\"")
                .d("LONGITUDE", "1.0508815204944872")
                .d("NAME", "\"jMDUCD0\"")
                .d("NIF", "\"JvmychXc\"")
            .and().insertInto("PRINTSHOPS", 2086L)
                .d("ADDRESS", "\"PrH\"")
                .d("AVG_RATING", "0.17622206721549616")
                .d("BALANCE_CURRENCY", "\"UQYqUSSTrfQYT\"")
                .d("BALANCE_FRACTIONAL_PART", "-2")
                .d("BALANCE_INTEGER_PART", "-74")
                .d("LATITUDE", "0.7227898419270348")
                .d("LOGO", "\"n\"")
                .d("LONGITUDE", "138.85159776147734")
                .d("NAME", "\"tKF4IWWVZk\"")
                .d("NIF", "\"U\"")
            .and().insertInto("PRINTSHOPS", 2085L)
                .d("ADDRESS", "\"CyCOtnWlfOabl\"")
                .d("AVG_RATING", "0.0")
                .d("BALANCE_CURRENCY", "\"y7u0FbGBRcsNut\"")
                .d("BALANCE_FRACTIONAL_PART", "0")
                .d("BALANCE_INTEGER_PART", "679")
                .d("LATITUDE", "0.0")
                .d("LOGO", "\"lXl6\"")
                .d("LONGITUDE", "0.37266924508144994")
                .d("NAME", "\"DE6\"")
                .d("NIF", "\"uDr87GoU\"")
            .and().insertInto("USERS", 2084L)
                .d("PASSWORD", "\"S\"")
                .d("USERNAME", "\"NchU\"")
            .and().insertInto("CONSUMERS", 2083L)
                .d("BALANCE_CURRENCY", "\"\"")
                .d("BALANCE_FRACTIONAL_PART", "0")
                .d("BALANCE_INTEGER_PART", "171")
                .d("NAME", "\"OtyuD_avMg7ay\"")
                .d("ID", "10")
            .and().insertInto("PRINT_REQUESTS", 2080L)
                .d("ARRIVAL", "\"2017-06-22 09:29:05\"")
                .d("COST", "1.0")
                .d("DELIVERED", "\"2100-03-27 23:59:10\"")
                .d("EMPATTENDED", "\"nlW\"")
                .d("EMPDELIVERED", "\"\"")
                .d("FINISHED", "\"2063-04-05 04:06:25\"")
                .d("PAYPAL_SALE_ID", "\"MQlFrC\"")
                .d("PAYMENT_TYPE", "\"cHJnNu9zP8k\"")
                .d("STATUS", "\"FINISHED\"")
                .d("CONSUMER_ID", "NULL")
                .d("PRINTSHOP_ID", "NULL")
                .d("PRINTSHOP", "NULL")
                .d("CONSUMER", "NULL")
            .and().insertInto("PRINTSHOPS", 2094L)
                .d("ADDRESS", "\"1TS_e8PdLV_\"")
                .d("AVG_RATING", "0.09344945600101473")
                .d("BALANCE_CURRENCY", "\"u1IoP1O\"")
                .d("BALANCE_FRACTIONAL_PART", "199")
                .d("BALANCE_INTEGER_PART", "670")
                .d("LATITUDE", "-17.59893212080084")
                .d("LOGO", "\"8Dq_N2XQ4LQmpG\"")
                .d("LONGITUDE", "0.3853528562340117")
                .d("NAME", "\"Ynnyr\"")
                .d("NIF", "\"SRtU\"")
            .and().insertInto("PRINTSHOPS", 2093L)
                .d("ADDRESS", "\"U\"")
                .d("AVG_RATING", "0.5027307359361952")
                .d("BALANCE_CURRENCY", "\"P2mzkkbwRg6Udc_R\"")
                .d("BALANCE_FRACTIONAL_PART", "0")
                .d("BALANCE_INTEGER_PART", "500")
                .d("LATITUDE", "0.5126903872794044")
                .d("LOGO", "\"U\"")
                .d("LONGITUDE", "0.037903378047")
                .d("NAME", "\"nJ\"")
                .d("NIF", "\"_EM_4917_XYZ_\"")
            .and().insertInto("USERS", 2092L)
                .d("PASSWORD", "\"_EM_4183_XYZ_\"")
                .d("USERNAME", "\"kwGuuaeknDoj\"")
            .and().insertInto("CONSUMERS", 2091L)
                .d("BALANCE_CURRENCY", "\"NnPt3uV3H\"")
                .d("BALANCE_FRACTIONAL_PART", "858")
                .d("BALANCE_INTEGER_PART", "-33940")
                .d("NAME", "\"nD2\"")
                .d("ID", "1")
            .and().insertInto("USERS", 2090L)
                .d("PASSWORD", "\"\"")
                .d("USERNAME", "\"CPttqQlNkyLU\"")
            .and().insertInto("CONSUMERS", 2089L)
                .d("BALANCE_CURRENCY", "\"I6WkCXy6fksEPA0\"")
                .d("BALANCE_FRACTIONAL_PART", "943")
                .d("BALANCE_INTEGER_PART", "385")
                .d("NAME", "\"IPbn_WRkgZU\"")
                .d("ID", "11")
            .and().insertInto("PRINT_REQUESTS", 2088L)
                .d("COST", "0.48836314164556066")
            .and().insertInto("DOCUMENTS", 2087L)
                .d("FILE_NAME", "\"Kd2C8Yo\"")
                .d("TOTAL_PAGES", "458")
                .r("PRINT_REQUEST_ID", 2088L)
            .and().insertInto("USERS", 2166L)
                .d("PASSWORD", "\"V\"")
                .d("USERNAME", "\"l\"")
            .and().insertInto("CONSUMERS", 2165L)
                .d("BALANCE_CURRENCY", "\"NZiEv\"")
                .d("BALANCE_FRACTIONAL_PART", "239")
                .d("BALANCE_INTEGER_PART", "8")
                .d("NAME", "\"rDE2qUO\"")
                .d("ID", "17")
            .and().insertInto("PRINTING_SCHEMAS", 2164L)
                .d("IS_DELETED", "true")
                .d("PSCHEMA_NAME", "\"S4OiD8DU\"")
                .d("PAPER_SPECS", "\"yp0JAgeRFakUZq2t\"")
            .and().insertInto("PRINTSHOPS", 2163L)
                .d("ADDRESS", "\"kG_DM5\"")
                .d("AVG_RATING", "0.3400094671032573")
                .d("BALANCE_CURRENCY", "\"P\"")
                .d("BALANCE_FRACTIONAL_PART", "665")
                .d("BALANCE_INTEGER_PART", "361")
                .d("LATITUDE", "0.22468750625994027")
                .d("LOGO", "\"l2DelmQbrA39\"")
                .d("LONGITUDE", "0.0")
                .d("NAME", "\"18x_\"")
                .d("NIF", "\"HivrtLgZ4F\"")
            .and().insertInto("PRINTSHOPS", 2162L)
                .d("ADDRESS", "\"_EM_4918_XYZ_\"")
                .d("AVG_RATING", "0.16267451059965882")
                .d("BALANCE_CURRENCY", "\"U9UT2AU\"")
                .d("BALANCE_FRACTIONAL_PART", "498")
                .d("BALANCE_INTEGER_PART", "540")
                .d("LATITUDE", "6513.466292677031")
                .d("LOGO", "\"XNB9M\"")
                .d("LONGITUDE", "0.6621945020093162")
                .d("NAME", "\"OgdTzvJdoLYh\"")
                .d("NIF", "\"M1CLeICh148\"")
            .and().insertInto("PRINT_REQUESTS", 2157L)
                .d("COST", "0.8797561913544263")
            .and().insertInto("DOCUMENTS", 2156L)
                .d("FILE_NAME", "\"RcrCsUaOnlqKsS1\"")
                .d("TOTAL_PAGES", "607")
            .and().insertInto("DOCUMENTS_SPECS", 2155L)
                .d("FIRST_PAGE", "40")
                .d("LAST_PAGE", "986")
                .d("PRINTING_SCHEMA", "NULL")
                .d("DOCUMENT_ID", "NULL")
            .and().insertInto("PRINTSHOPS", 1036L)
                .d("ADDRESS", "\"6S5gcI3XL\"")
                .d("AVG_RATING", "0.04414779555376358")
                .d("BALANCE_CURRENCY", "\"M`3\"")
                .d("BALANCE_FRACTIONAL_PART", "164")
                .d("BALANCE_INTEGER_PART", "459")
                .d("LATITUDE", "1.1725978983276246")
                .d("LOGO", "\"7\"")
                .d("LONGITUDE", "-1557.542487525033")
                .d("NAME", "\"kBkR79M5Dg3Tj\"")
                .d("NIF", "\"bUPz3Bx87rJG\"")
            .and().insertInto("USERS", 1035L)
                .d("PASSWORD", "\"_EM_2443_XYZ_\"")
                .d("USERNAME", "\"q4oRBmEX\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_234_readAllNotifications.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{username}/notifications'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/_EM_4914_XYZ_/notifications")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_234_readAllNotifications
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/_EM_4914_XYZ_/notifications"));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/consumer/info/update
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_132_putOnUpdateShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 3248L)
                .d("ADDRESS", "\"VmXghEm8MI2Wt_o\"")
                .d("AVG_RATING", "0.930277969577476")
                .d("BALANCE_CURRENCY", "\"hYY\"")
                .d("BALANCE_FRACTIONAL_PART", "66")
                .d("BALANCE_INTEGER_PART", "939")
                .d("LATITUDE", "0.4733203781053801")
                .d("LOGO", "\"n\"")
                .d("LONGITUDE", "0.8002323122823422")
                .d("NAME", "\"3WDaxzI\"")
                .d("NIF", "\"O6v23LjU\"")
            .and().insertInto("PRINTSHOPS", 3296L)
                .d("ADDRESS", "\"HrTqt2voWrTuD38\"")
                .d("AVG_RATING", "0.3133442871860187")
                .d("BALANCE_CURRENCY", "\"qZBtbKPzyWFYs\"")
                .d("BALANCE_FRACTIONAL_PART", "611")
                .d("BALANCE_INTEGER_PART", "859")
                .d("LATITUDE", "0.293686429566947")
                .d("LOGO", "\"dfEQIhl1_pW\"")
                .d("LONGITUDE", "0.9031086760390464")
                .d("NAME", "\"A2lfV\"")
                .d("NIF", "\"cI_PTuaho1lljPn\"")
            .and().insertInto("PRINTSHOPS", 3295L)
                .d("ADDRESS", "\"yxFZZwOg9p4J\"")
                .d("AVG_RATING", "0.25955765086297267")
                .d("BALANCE_CURRENCY", "\"n\"")
                .d("BALANCE_FRACTIONAL_PART", "801")
                .d("BALANCE_INTEGER_PART", "94")
                .d("LATITUDE", "0.8846078496874135")
                .d("LOGO", "\"eWiL_\"")
                .d("LONGITUDE", "0.8229360472424738")
                .d("NAME", "\"uiZFBPd\"")
                .d("NIF", "\"nTCb1xLXLQ_23K\"")
            .and().insertInto("USERS", 3294L)
                .d("PASSWORD", "\"WidYybcKjBWkIM3\"")
                .d("USERNAME", "\"0vGB1YY4yj2b\"")
            .and().insertInto("CONSUMERS", 3293L)
                .d("BALANCE_CURRENCY", "\"9t3WLa\"")
                .d("BALANCE_FRACTIONAL_PART", "465")
                .d("BALANCE_INTEGER_PART", "586")
                .d("NAME", "\"WVYBeR2hqwHJ_\"")
                .d("ID", "11")
            .and().insertInto("PRINT_REQUESTS", 3290L)
                .d("COST", "0.49783172291050337")
            .and().insertInto("DOCUMENTS", 3289L)
                .d("FILE_NAME", "\"Wo8o4tZswF20nQz\"")
                .d("TOTAL_PAGES", "901")
                .d("PRINT_REQUEST_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_134_updateConsumerInfo.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/info/update'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/info/update")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_134_updateConsumerInfo
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/info/update"));
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/consumer/{username}/notifications
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_133_deleteOnNotificationsShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 2311L)
                .d("ADDRESS", "\"2uyjxm26K4\"")
                .d("AVG_RATING", "0.590757527")
                .d("BALANCE_CURRENCY", "\"Ad38\"")
                .d("BALANCE_FRACTIONAL_PART", "137")
                .d("BALANCE_INTEGER_PART", "48")
                .d("LATITUDE", "0.8365528431265187")
                .d("LOGO", "\"4FxUyR8m5kMpR\"")
                .d("LONGITUDE", "0.20446570814999587")
                .d("NAME", "\"4Y7\"")
                .d("NIF", "\"NxeNVUNLLSUND34\"")
            .and().insertInto("PRINTSHOPS", 2339L)
                .d("ADDRESS", "\"9uhvM36El4d1NGb\"")
                .d("AVG_RATING", "0.18344284842269654")
                .d("BALANCE_CURRENCY", "\"RL9oKWFl1oAhzZ\"")
                .d("BALANCE_FRACTIONAL_PART", "4731")
                .d("BALANCE_INTEGER_PART", "198")
                .d("LATITUDE", "0.59608222769")
                .d("LOGO", "\"zvnT3XCqiMsa\"")
                .d("LONGITUDE", "0.48548733633813")
                .d("NAME", "\"2cPp9pyHvpV\"")
                .d("NIF", "\"nas5NyizApF\"")
            .and().insertInto("PRINTSHOPS", 2338L)
                .d("ADDRESS", "\"_EM_5054_XYZ_\"")
                .d("AVG_RATING", "0.6437532836794372")
                .d("BALANCE_CURRENCY", "\",\"")
                .d("BALANCE_FRACTIONAL_PART", "424")
                .d("BALANCE_INTEGER_PART", "463")
                .d("LATITUDE", "0.557137509860359")
                .d("LOGO", "\"hAQ3rLX3\"")
                .d("LONGITUDE", "0.4426921780866564")
                .d("NAME", "\"C904KSY2\"")
                .d("NIF", "\"CJKBhkKbB\"")
            .and().insertInto("USERS", 2337L)
                .d("PASSWORD", "\"M2\"")
                .d("USERNAME", "\"OwvewW\"")
            .and().insertInto("CONSUMERS", 2336L)
                .d("BALANCE_CURRENCY", "\"R_miCEsPvJ;U\"")
                .d("BALANCE_FRACTIONAL_PART", "121")
                .d("BALANCE_INTEGER_PART", "167")
                .d("NAME", "\"jtKyJwOxZg1\"")
                .d("ID", "12")
            .and().insertInto("USERS", 2335L)
                .d("PASSWORD", "\"5C8OFZybTI\"")
                .d("USERNAME", "\"S\"")
            .and().insertInto("CONSUMERS", 2334L)
                .d("BALANCE_CURRENCY", "\"n0juBWT2rrv\"")
                .d("BALANCE_FRACTIONAL_PART", "250")
                .d("BALANCE_INTEGER_PART", "244")
                .d("NAME", "\"yxW5\"")
                .d("ID", "8")
            .and().insertInto("PRINT_REQUESTS", 2333L)
                .d("COST", "0.1352298919720606")
            .and().insertInto("DOCUMENTS", 2332L)
                .d("FILE_NAME", "\"qh8ArU6=_S\"")
                .d("TOTAL_PAGES", "0")
                .d("PRINT_REQUEST_ID", "NULL")
            .and().insertInto("USERS", 2747L)
                .d("PASSWORD", "\"U_DIvlobGtu92eAX\"")
                .d("USERNAME", "\"16CLm\"")
            .and().insertInto("CONSUMERS", 2746L)
                .d("BALANCE_CURRENCY", "\"vvv2EPrJ6j7FsY\"")
                .d("BALANCE_FRACTIONAL_PART", "31")
                .d("BALANCE_INTEGER_PART", "-419593468")
                .d("NAME", "\"g7RXkt\"")
                .d("ID", "11")
            .and().insertInto("NOTIFICATION", 2745L)
                .d("EMAIL", "NULL")
                .d("READ", "false")
                .d("TIMESTAMP", "NULL")
                .d("CONSUMER", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_220_deleteAllNotifications.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{username}/notifications'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "FsYjnf2_5yB5Rj|")
                .delete(baseUrlOfSut + "/consumer/_EM_5053_XYZ_/notifications")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_220_deleteAllNotifications
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/_EM_5053_XYZ_/notifications"));
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/consumer/{username}/notifications
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_134_deleteOnNotificationsShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 2078L)
                .d("PASSWORD", "\"jZLr9jhit2H\"")
                .d("USERNAME", "\"fCVvX9O\"")
            .and().insertInto("CONSUMERS", 2077L)
                .d("BALANCE_CURRENCY", "\"x0nGjvYt3JzCtQv1\"")
                .d("BALANCE_FRACTIONAL_PART", "2736")
                .d("BALANCE_INTEGER_PART", "-1707301368")
                .d("NAME", "\"vEDx6CZ0W\"")
                .d("ID", "19")
            .and().insertInto("NOTIFICATION", 2076L)
                .d("EMAIL", "\"RKnsxRDYCYWUbN\"")
                .d("READ", "false")
                .d("TIMESTAMP", "\"1996-03-14 14:56:23\"")
                .d("CONSUMER", "2")
            .and().insertInto("PRINTSHOPS", 2079L)
                .d("ADDRESS", "\"eDokMoLuRLjRNWF9\"")
                .d("AVG_RATING", "0.89158926")
                .d("BALANCE_CURRENCY", "\"UYDHjE\"")
                .d("BALANCE_FRACTIONAL_PART", "16")
                .d("BALANCE_INTEGER_PART", "573")
                .d("LATITUDE", "0.3752819852718088")
                .d("LOGO", "\"iGHfv4xVDfF\"")
                .d("LONGITUDE", "1.0508815204944872")
                .d("NAME", "\"jMDUCD0\"")
                .d("NIF", "\"JvmychXc\"")
            .and().insertInto("PRINTSHOPS", 2086L)
                .d("ADDRESS", "\"PrH\"")
                .d("AVG_RATING", "0.17622206721549616")
                .d("BALANCE_CURRENCY", "\"UQYqUSSTrfQYT\"")
                .d("BALANCE_FRACTIONAL_PART", "-2")
                .d("BALANCE_INTEGER_PART", "-74")
                .d("LATITUDE", "0.7227898419270348")
                .d("LOGO", "\"n\"")
                .d("LONGITUDE", "138.85159776147734")
                .d("NAME", "\"tKF4IWWVZk\"")
                .d("NIF", "\"U\"")
            .and().insertInto("PRINTSHOPS", 2085L)
                .d("ADDRESS", "\"CyCOtnWlfOabl\"")
                .d("AVG_RATING", "0.0")
                .d("BALANCE_CURRENCY", "\"y7u0FbGBRcsNut\"")
                .d("BALANCE_FRACTIONAL_PART", "0")
                .d("BALANCE_INTEGER_PART", "679")
                .d("LATITUDE", "0.0")
                .d("LOGO", "\"lXl6\"")
                .d("LONGITUDE", "0.37266924508144994")
                .d("NAME", "\"DE6\"")
                .d("NIF", "\"uDr87GoU\"")
            .and().insertInto("USERS", 2084L)
                .d("PASSWORD", "\"S\"")
                .d("USERNAME", "\"NchU\"")
            .and().insertInto("CONSUMERS", 2083L)
                .d("BALANCE_CURRENCY", "\"\"")
                .d("BALANCE_FRACTIONAL_PART", "0")
                .d("BALANCE_INTEGER_PART", "171")
                .d("NAME", "\"OtyuD_avMg7ay\"")
                .d("ID", "10")
            .and().insertInto("PRINT_REQUESTS", 2080L)
                .d("ARRIVAL", "\"2017-06-22 09:29:05\"")
                .d("COST", "1.0")
                .d("DELIVERED", "\"2100-03-27 23:59:10\"")
                .d("EMPATTENDED", "\"nlW\"")
                .d("EMPDELIVERED", "\"\"")
                .d("FINISHED", "\"2063-04-05 04:06:25\"")
                .d("PAYPAL_SALE_ID", "\"MQlFrC\"")
                .d("PAYMENT_TYPE", "\"cHJnNu9zP8k\"")
                .d("STATUS", "\"FINISHED\"")
                .d("CONSUMER_ID", "NULL")
                .d("PRINTSHOP_ID", "NULL")
                .d("PRINTSHOP", "NULL")
                .d("CONSUMER", "NULL")
            .and().insertInto("PRINTSHOPS", 2094L)
                .d("ADDRESS", "\"1TS_e8PdLV_\"")
                .d("AVG_RATING", "0.09344945600101473")
                .d("BALANCE_CURRENCY", "\"u1IoP1O\"")
                .d("BALANCE_FRACTIONAL_PART", "199")
                .d("BALANCE_INTEGER_PART", "670")
                .d("LATITUDE", "-17.59893212080084")
                .d("LOGO", "\"8Dq_N2XQ4LQmpG\"")
                .d("LONGITUDE", "0.3853528562340117")
                .d("NAME", "\"Ynnyr\"")
                .d("NIF", "\"SRtU\"")
            .and().insertInto("PRINTSHOPS", 2093L)
                .d("ADDRESS", "\"U\"")
                .d("AVG_RATING", "0.5027307359361952")
                .d("BALANCE_CURRENCY", "\"P2mzkkbwRg6Udc_R\"")
                .d("BALANCE_FRACTIONAL_PART", "0")
                .d("BALANCE_INTEGER_PART", "500")
                .d("LATITUDE", "0.5126903872794044")
                .d("LOGO", "\"U\"")
                .d("LONGITUDE", "0.037903378047")
                .d("NAME", "\"nJ\"")
                .d("NIF", "\"_EM_4917_XYZ_\"")
            .and().insertInto("USERS", 2092L)
                .d("PASSWORD", "\"_EM_4183_XYZ_\"")
                .d("USERNAME", "\"kwGuuaeknDoj\"")
            .and().insertInto("CONSUMERS", 2091L)
                .d("BALANCE_CURRENCY", "\"NnPt3uV3H\"")
                .d("BALANCE_FRACTIONAL_PART", "858")
                .d("BALANCE_INTEGER_PART", "-33940")
                .d("NAME", "\"nD2\"")
                .d("ID", "1")
            .and().insertInto("USERS", 2090L)
                .d("PASSWORD", "\"\"")
                .d("USERNAME", "\"CPttqQlNkyLU\"")
            .and().insertInto("CONSUMERS", 2089L)
                .d("BALANCE_CURRENCY", "\"I6WkCXy6fksEPA0\"")
                .d("BALANCE_FRACTIONAL_PART", "943")
                .d("BALANCE_INTEGER_PART", "385")
                .d("NAME", "\"IPbn_WRkgZU\"")
                .d("ID", "11")
            .and().insertInto("PRINT_REQUESTS", 2088L)
                .d("COST", "0.48836314164556066")
            .and().insertInto("DOCUMENTS", 2087L)
                .d("FILE_NAME", "\"Kd2C8Yo\"")
                .d("TOTAL_PAGES", "458")
                .r("PRINT_REQUEST_ID", 2088L)
            .and().insertInto("USERS", 2166L)
                .d("PASSWORD", "\"V\"")
                .d("USERNAME", "\"l\"")
            .and().insertInto("CONSUMERS", 2165L)
                .d("BALANCE_CURRENCY", "\"NZiEv\"")
                .d("BALANCE_FRACTIONAL_PART", "239")
                .d("BALANCE_INTEGER_PART", "8")
                .d("NAME", "\"rDE2qUO\"")
                .d("ID", "17")
            .and().insertInto("PRINTING_SCHEMAS", 2164L)
                .d("IS_DELETED", "true")
                .d("PSCHEMA_NAME", "\"S4OiD8DU\"")
                .d("PAPER_SPECS", "\"yp0JAgeRFakUZq2t\"")
            .and().insertInto("PRINTSHOPS", 2163L)
                .d("ADDRESS", "\"kG_DM5\"")
                .d("AVG_RATING", "0.3400094671032573")
                .d("BALANCE_CURRENCY", "\"P\"")
                .d("BALANCE_FRACTIONAL_PART", "665")
                .d("BALANCE_INTEGER_PART", "361")
                .d("LATITUDE", "0.22468750625994027")
                .d("LOGO", "\"l2DelmQbrA39\"")
                .d("LONGITUDE", "0.0")
                .d("NAME", "\"18x_\"")
                .d("NIF", "\"HivrtLgZ4F\"")
            .and().insertInto("PRINTSHOPS", 2162L)
                .d("ADDRESS", "\"_EM_4918_XYZ_\"")
                .d("AVG_RATING", "0.16267451059965882")
                .d("BALANCE_CURRENCY", "\"U9UT2AU\"")
                .d("BALANCE_FRACTIONAL_PART", "498")
                .d("BALANCE_INTEGER_PART", "540")
                .d("LATITUDE", "6513.466292677031")
                .d("LOGO", "\"XNB9M\"")
                .d("LONGITUDE", "0.6621945020093162")
                .d("NAME", "\"OgdTzvJdoLYh\"")
                .d("NIF", "\"M1CLeICh148\"")
            .and().insertInto("PRINT_REQUESTS", 2157L)
                .d("COST", "0.8797561913544263")
            .and().insertInto("DOCUMENTS", 2156L)
                .d("FILE_NAME", "\"RcrCsUaOnlqKsS1\"")
                .d("TOTAL_PAGES", "607")
            .and().insertInto("DOCUMENTS_SPECS", 2155L)
                .d("FIRST_PAGE", "40")
                .d("LAST_PAGE", "986")
                .d("PRINTING_SCHEMA", "NULL")
                .d("DOCUMENT_ID", "NULL")
            .and().insertInto("PRINTSHOPS", 1036L)
                .d("ADDRESS", "\"6S5gcI3XL\"")
                .d("AVG_RATING", "0.04414779555376358")
                .d("BALANCE_CURRENCY", "\"M`3\"")
                .d("BALANCE_FRACTIONAL_PART", "164")
                .d("BALANCE_INTEGER_PART", "459")
                .d("LATITUDE", "1.1725978983276246")
                .d("LOGO", "\"7\"")
                .d("LONGITUDE", "-1557.542487525033")
                .d("NAME", "\"kBkR79M5Dg3Tj\"")
                .d("NIF", "\"bUPz3Bx87rJG\"")
            .and().insertInto("USERS", 1035L)
                .d("PASSWORD", "\"_EM_2443_XYZ_\"")
                .d("USERNAME", "\"q4oRBmEX\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_220_deleteAllNotifications.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{username}/notifications'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "TJeorYTX")
                .delete(baseUrlOfSut + "/consumer/_EM_4914_XYZ_/notifications")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_220_deleteAllNotifications
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/_EM_4914_XYZ_/notifications"));
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/consumer/{username}/notifications
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_135_deleteOnNotificationsShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 2499L)
                .d("PASSWORD", "\"\"")
                .d("USERNAME", "\"pVEYFL\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_220_deleteAllNotifications.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{username}/notifications'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/_EM_4642_XYZ_/notifications")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_220_deleteAllNotifications
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/_EM_4642_XYZ_/notifications"));
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/consumer/{username}/notifications
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_136_deleteOnNotificationsShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 2686L)
                .d("PASSWORD", "\"r_5pfUrSUlwTRMKb\"")
                .d("USERNAME", "\"1mXQNC\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_220_deleteAllNotifications.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{username}/notifications'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/_EM_4897_XYZ_/notifications")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/ConsumerController_220_deleteAllNotifications
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/_EM_4897_XYZ_/notifications"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/request/reject/{printRequestID}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_137_postOnRejectReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 2819L)
                .d("PASSWORD", "\"tQnM\"")
                .d("USERNAME", "\"3rlt12LxuM_iN6n\"")
            .and().insertInto("CONSUMERS", 2818L)
                .d("BALANCE_CURRENCY", "\"\"")
                .d("BALANCE_FRACTIONAL_PART", "577")
                .d("BALANCE_INTEGER_PART", "864")
                .d("EMAIL", "\"uArGlUj4rSy\"")
                .d("LATITUDE", "\"X3kyqMv6xjiY9gYn\"")
                .d("LONGITUDE", "NULL")
                .d("NAME", "\"6W4\"")
                .d("ID", "16")
            .and().insertInto("USERS", 2822L)
                .d("PASSWORD", "\"Ff9yNe\"")
                .d("USERNAME", "\"Ne\"")
            .and().insertInto("CONSUMERS", 2821L)
                .d("BALANCE_CURRENCY", "\"cGNDG_8\"")
                .d("BALANCE_FRACTIONAL_PART", "928")
                .d("BALANCE_INTEGER_PART", "431")
                .d("NAME", "\"xCQas\"")
                .d("ID", "14")
            .and().insertInto("PRINTING_SCHEMAS", 2820L)
                .d("BINDING_SPECS", "\"mGr94IE0b9w\"")
                .d("COVER_SPECS", "\"VER\"")
                .d("IS_DELETED", "true")
                .d("PSCHEMA_NAME", "\"MUNq3UxraXBxzLC\"")
                .d("PAPER_SPECS", "\"_\"")
                .d("CONSUMER_ID", "NULL")
            .and().insertInto("USERS", 650L)
                .d("PASSWORD", "\"Lpq\"")
                .d("USERNAME", "\"_EM_1777_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/request/reject/{printRequestID}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .post(baseUrlOfSut + "/request/reject/622")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.http.converter.HttpMessageNotReadableException"))
                .body("'message'", containsString("Required request body is missing: public java.lang.String io.github.proxyprint.kitchen.controllers.printshops.RegisterRequestController.rejectRequest(long,java.security.Principal,java.lang.String) throws java.io.IOException"))
                .body("'path'", containsString("/request/reject/622"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/consumer/{consumerID}/printingschemas
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_138_getOnPrintingschemasReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/consumer/66/printingschemas")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/66/printingschemas"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/printshops/requests/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_139_getOnRequestReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/requests/583")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/requests/583"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/printshops/{id}/pricetable
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_140_getOnPricetableReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1508L)
                .d("ADDRESS", "\"k3\"")
                .d("AVG_RATING", "0.13251565931965148")
                .d("BALANCE_CURRENCY", "\"OE2v\"")
                .d("BALANCE_FRACTIONAL_PART", "485")
                .d("BALANCE_INTEGER_PART", "504")
                .d("LATITUDE", "0.6428361237069148")
                .d("LOGO", "\"UjU7fAfUmU\"")
                .d("LONGITUDE", "0.3794090229199717")
                .d("NAME", "\"ZXUA08LfXAL_pD\"")
                .d("NIF", "\"ouHysknBkI1zk\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_1000_XYZ_")
                .get(baseUrlOfSut + "/printshops/424570557/pricetable")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/424570557/pricetable"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/printshops/{id}/reviews
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_141_getOnReviewsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/616/reviews?EMextraParam123=_EM_11_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/616/reviews"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/printshops/{printShopID}/employees
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_142_getOnPrintshopEmployeesWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/8455444285023315866/employees?EMextraParam123=_EM_12_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/8455444285023315866/employees"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/consumer/{consumerID}/printingschemas
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_143_postOnPrintingschemasReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"deleted\": false, " + 
                    " \"id\": 557, " + 
                    " \"paperSpecs\": \"_EM_59_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/557/printingschemas")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/557/printingschemas"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/printdocument/{id}/budget
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_144_postOnPrintdocuBudgetReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/printdocument/483/budget")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printdocument/483/budget"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/printshops/requests/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_145_postOnRequestReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/requests/649")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/requests/649"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/printshops/{id}/reviews
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_146_postOnReviewsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"gxHv0HpV\": \"GIdX4Hd\", " + 
                    " \"eUEyJ4AD\": \"_EM_64_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/195/reviews")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/195/reviews"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/printshops/{printShopID}/employees
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_147_postOnEmployeesReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/printshops/384/employees?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/384/employees"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/request/accept/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_148_postOnAcceptReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/request/accept/566")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/request/accept/566"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/request/reject/{printRequestID}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_149_postOnRejectReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" 8805058604402867728 ")
                .post(baseUrlOfSut + "/request/reject/8805058604402867728")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/request/reject/8805058604402867728"));
    }
    
    
    /**
    * Calls:
    * (401) PUT:/printshops/{printShopID}/employees
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_150_putOnEmployeesReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/printshops/41/employees")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/41/employees"));
    }
    
    
    /**
    * Calls:
    * (401) PUT:/consumer/info/update
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_151_putOnInfoUpdateWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_109_XYZ_")
                .put(baseUrlOfSut + "/consumer/info/update?EMextraParam123=_EM_108_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/info/update"));
    }
    
    
    /**
    * Calls:
    * (401) PUT:/consumer/{username}/notifications
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_152_putOnConsumNotificationsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .put(baseUrlOfSut + "/consumer/SHhMlkFsyMUV/notifications")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/SHhMlkFsyMUV/notifications"));
    }
    
    
    /**
    * Calls:
    * (401) DELETE:/consumer/{username}/notifications
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_153_deleteOnConsumNotificationsWithQueryParam() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_8_XYZ_")
                .delete(baseUrlOfSut + "/consumer/_EM_7_XYZ_/notifications?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/_EM_7_XYZ_/notifications"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/{consumerID}/printingschemas
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_154_getOnPrintingschemasReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_171_XYZ_")
                .get(baseUrlOfSut + "/consumer/296/printingschemas?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/296/printingschemas"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshops/requests/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_155_getOnRequestReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "7hYyLD")
                .get(baseUrlOfSut + "/printshops/requests/-1925019577")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/requests/-1925019577"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshops/{id}/pricetable
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_156_getOnPrintshopPricetableWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/335/pricetable?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/335/pricetable"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshops/{id}/reviews
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_157_getOnReviewsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/842/reviews?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/842/reviews"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshops/{printShopID}/employees
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_158_getOnEmployeesReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/789/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/789/employees"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/{consumerID}/printingschemas
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_159_getOnPrintingschemasReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/consumer/-90102682/printingschemas?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/-90102682/printingschemas"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/{consumerID}/printingschemas
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_160_getOnPrintingschemasReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "_EM_664_XYZ_")
                .get(baseUrlOfSut + "/consumer/734/printingschemas")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/734/printingschemas"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshops/requests/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_161_getOnPrintshopsRequestWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/requests/986?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/requests/986"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshops/{printShopID}/employees
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_162_getOnEmployeesReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/212/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/212/employees"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/consumer/{consumerID}/printingschemas
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_163_getOnPrintingschemasReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/consumer/194/printingschemas")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/194/printingschemas"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshops/{id}/pricetable
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_164_getOnPrintshopPricetableReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/printshops/1264070656/pricetable")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/1264070656/pricetable"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/printshops/{printShopID}/employees
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_165_getOnEmployeesReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/243/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/243/employees"));
    }
    
    
    /**
    * Calls:
    * 1 - (403) GET:/printshops/{id}/reviews
    * 2 - (404) GET:/printshops/{id}/reviews
    * Found 2 potential faults. Type-codes: 101, 204
    */
    @Test(timeout = 60000)
    public void test_166_getOnReviewsShowsFaults_101_204() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/842/reviews?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/842/reviews"));
        
        // Fault204. Leakage Information Existence of Protected Resource. null.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/94/reviews")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (403) POST:/consumer/{consumerID}/printingschemas
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_167_postOnPrintingschemasReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverSpecs\": \"_EM_713_XYZ_\", " + 
                    " \"id\": 18, " + 
                    " \"name\": \"7iY\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/18/printingschemas")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/18/printingschemas"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/request/reject/{printRequestID}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_168_postOnRejectReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "_EM_399_XYZ_")
                .contentType("application/json")
                .body(" 374 ")
                .post(baseUrlOfSut + "/request/reject/374")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/request/reject/374"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/request/reject/{printRequestID}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_169_postOnRejectReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" 312 ")
                .post(baseUrlOfSut + "/request/reject/312?EMextraParam123=_EM_561_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/request/reject/312"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printdocument/{id}/budget
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_170_postOnBudgetReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_233_XYZ_")
                .post(baseUrlOfSut + "/printdocument/-7792793604831330014/budget?EMextraParam123=_EM_232_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printdocument/-7792793604831330014/budget"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/requests/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_171_postOnRequestReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "_EM_390_XYZ_")
                .post(baseUrlOfSut + "/printshops/requests/-7536612288461132998")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/requests/-7536612288461132998"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/reviews
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_172_postOnReviewsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"\": \"y3_NX31jVM\", " + 
                    " \"_EM_235_XYZ_\": \"vD6ow\", " + 
                    " \"4cCrEfmtQSbnZzcD\": \"c4kfFnmdOYfe\", " + 
                    " \"e\": \"_EM_236_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/404/reviews?EMextraParam123=_EM_237_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/404/reviews"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{printShopID}/employees
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_173_postOnPrintshopEmployeesReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1904L)
                .d("PASSWORD", "\"5G9CZW\"")
                .d("USERNAME", "\"xWKbY57FtgEXS\"")
            .and().insertInto("PRINTSHOPS", 1903L)
                .d("ADDRESS", "\"3gR0nkY\"")
                .d("AVG_RATING", "0.5551849347587373")
                .d("BALANCE_CURRENCY", "\"_EM_4120_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "245")
                .d("BALANCE_INTEGER_PART", "747")
                .d("LATITUDE", "0.12904279878077296")
                .d("LOGO", "\"JLSYuVD\"")
                .d("LONGITUDE", "0.2774867938880796")
                .d("NAME", "\"aDFIs\"")
                .d("NIF", "\"hVraCi\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/291/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/291/employees"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/request/accept/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_174_postOnAcceptReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/request/accept/-2070977006601970208")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/request/accept/-2070977006601970208"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/consumer/{consumerID}/printingschemas
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_175_postOnPrintingschemasReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"_EM_806_XYZ_\", " + 
                    " \"id\": 58, " + 
                    " \"paperSpecs\": \"X\" " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/-90102682/printingschemas")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/-90102682/printingschemas"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/consumer/{consumerID}/printingschemas
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_176_postOnPrintingschemasReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"_EM_227_XYZ_\", " + 
                    " \"deleted\": true, " + 
                    " \"id\": 786 " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/786/printingschemas")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/786/printingschemas"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/requests/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_177_postOnRequestReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/requests/401")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/requests/401"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/reviews
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_178_postOnReviewsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"cPeNh\": \"_EM_555_XYZ_\", " + 
                    " \"_EM_556_XYZ_\": \"s4KFNZpWPhHyV\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/352/reviews")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/352/reviews"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{printShopID}/employees
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_179_postOnPrintshopEmployeesWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 3248L)
                .d("ADDRESS", "\"VmXghEm8MI2Wt_o\"")
                .d("AVG_RATING", "0.930277969577476")
                .d("BALANCE_CURRENCY", "\"hYY\"")
                .d("BALANCE_FRACTIONAL_PART", "66")
                .d("BALANCE_INTEGER_PART", "939")
                .d("LATITUDE", "0.4733203781053801")
                .d("LOGO", "\"n\"")
                .d("LONGITUDE", "0.8002323122823422")
                .d("NAME", "\"3WDaxzI\"")
                .d("NIF", "\"O6v23LjU\"")
            .and().insertInto("PRINTSHOPS", 3264L)
                .d("ADDRESS", "\"s\"")
                .d("AVG_RATING", "0.4726711748797694")
                .d("BALANCE_CURRENCY", "\"taJUMYgerLLNV2\"")
                .d("BALANCE_FRACTIONAL_PART", "456")
                .d("BALANCE_INTEGER_PART", "608")
                .d("LATITUDE", "0.7947710286129089")
                .d("LOGO", "\"aomHxmOHwZ\"")
                .d("LONGITUDE", "0.8194833936268128")
                .d("NAME", "\"\"")
                .d("NIF", "\"\"")
            .and().insertInto("PRINTSHOPS", 3263L)
                .d("ADDRESS", "\"oRDYYVebpY\"")
                .d("AVG_RATING", "0.0978185733027267")
                .d("BALANCE_CURRENCY", "\"QQmLHQhGw\"")
                .d("BALANCE_FRACTIONAL_PART", "930")
                .d("BALANCE_INTEGER_PART", "983")
                .d("LATITUDE", "0.5735324906092348")
                .d("LOGO", "\"MDAG0yE7Yxu3Feo\"")
                .d("LONGITUDE", "0.1696634700111177")
                .d("NAME", "\"_uDJljOd6gXklwu\"")
                .d("NIF", "\"SKq4gkzlB\"")
            .and().insertInto("USERS", 3262L)
                .d("PASSWORD", "\"3Nwk\"")
                .d("USERNAME", "\"K5_Qtf\"")
            .and().insertInto("CONSUMERS", 3261L)
                .d("BALANCE_CURRENCY", "\"oNTyl0wIuf\"")
                .d("BALANCE_FRACTIONAL_PART", "645")
                .d("BALANCE_INTEGER_PART", "558")
                .d("NAME", "\"4XFdCdXHmCtFw\"")
                .d("ID", "17")
            .and().insertInto("PRINT_REQUESTS", 3258L)
                .d("COST", "0.9985191808594361")
            .and().insertInto("DOCUMENTS", 3257L)
                .d("FILE_NAME", "\"FfrCGosLvYTU0\"")
                .d("TOTAL_PAGES", "49")
                .d("PRINT_REQUEST_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("x-requested-with", "ci")
                .post(baseUrlOfSut + "/printshops/574/employees?username=q_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/574/employees"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/consumer/{consumerID}/printingschemas
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_180_postOnPrintingschemasReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"_EM_548_XYZ_\", " + 
                    " \"id\": 56 " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/56/printingschemas")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/56/printingschemas"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printdocument/{id}/budget
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_181_postOnBudgetReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printdocument/759/budget?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printdocument/759/budget"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/request/accept/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_182_postOnAcceptReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/request/accept/232")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/request/accept/232"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printdocument/{id}/budget
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_183_postOnBudgetReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printdocument/-7485997336276530892/budget?EMextraParam123=_EM_718_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printdocument/-7485997336276530892/budget"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/reviews
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_184_postOnReviewsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"xd3e7Qn4nK6\": \"e0qSraGgfGg\", " + 
                    " \"_EM_721_XYZ_\": \"_J0zUZk8cF\", " + 
                    " \"_EM_722_XYZ_\": \"_EM_723_XYZ_\", " + 
                    " \"CWy4U1EzIQqPPlv\": \"kS\", " + 
                    " \"b49lWxsgl2f\": \"_EM_724_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/122/reviews?EMextraParam123=_EM_725_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/122/reviews"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{printShopID}/employees
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_185_postOnEmployeesReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/printshops/996/employees?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/996/employees"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/request/accept/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_186_postOnRequestAcceptWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/request/accept/24?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/request/accept/24"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/request/reject/{printRequestID}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_187_postOnRejectReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" \"703\" ")
                .post(baseUrlOfSut + "/request/reject/703?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/request/reject/703"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/printshops/{printShopID}/employees
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_188_putOnEmployeesReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/printshops/118/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/118/employees"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/consumer/info/update
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_189_putOnUpdateReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "Z0")
                .put(baseUrlOfSut + "/consumer/info/update")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/info/update"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/consumer/{username}/notifications
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_190_putOnNotificationsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/X/notifications?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/X/notifications"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/printshops/{printShopID}/employees
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_191_putOnEmployeesReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "42")
                .put(baseUrlOfSut + "/printshops/475/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/475/employees"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/printshops/{printShopID}/employees
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_192_putOnEmployeesReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/printshops/676/employees")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/676/employees"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/consumer/info/update
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_193_putOnUpdateReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "jI")
                .contentType("application/json")
                .body(" { " + 
                    " \"email\": \"cvjpha\", " + 
                    " \"longitude\": \"s3lzMcLLlTl7RhqK\", " + 
                    " \"printingSchemas\": [ " + 
                    " {}, " + 
                    " {}, " + 
                    " {}, " + 
                    " {} " + 
                    " ], " + 
                    " \"roles\": [] " + 
                    " } ")
                .put(baseUrlOfSut + "/consumer/info/update")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/info/update"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/consumer/{username}/notifications
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_194_putOnNotificationsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/He5F6AQkjs/notifications?EMextraParam123=_EM_602_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/He5F6AQkjs/notifications"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/consumer/info/update
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_195_putOnUpdateReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/info/update")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/info/update"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/consumer/{username}/notifications
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_196_putOnNotificationsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/4uFKw4hUr2WQm2/notifications?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/4uFKw4hUr2WQm2/notifications"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/consumer/{username}/notifications
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_197_deleteOnNotificationsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_173_XYZ_")
                .delete(baseUrlOfSut + "/consumer/_EM_172_XYZ_/notifications")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/_EM_172_XYZ_/notifications"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/consumer/{username}/notifications
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_198_deleteOnNotificationsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/_EM_506_XYZ_/notifications")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/_EM_506_XYZ_/notifications"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/consumer/{username}/notifications
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_199_deleteOnNotificationsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/pDF/notifications")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/pDF/notifications"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/consumer/printrequest/{printRequestID}/submit
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_200_postOnSubmitShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1925L)
                .d("ADDRESS", "\"watbZluWI5\"")
                .d("AVG_RATING", "0.5565642281")
                .d("BALANCE_CURRENCY", "\"42\"")
                .d("BALANCE_FRACTIONAL_PART", "656")
                .d("BALANCE_INTEGER_PART", "832")
                .d("LATITUDE", "120.38311848510988")
                .d("LOGO", "\"Wq7nIb7WH5ZK\"")
                .d("LONGITUDE", "0.5645070783296661")
                .d("NAME", "\"loiSl5\"")
                .d("NIF", "\"fOR3kuPXvk2\"")
            .and().insertInto("PRINTSHOPS", 1924L)
                .d("ADDRESS", "\"LH\"")
                .d("AVG_RATING", "0.334332902882452")
                .d("BALANCE_CURRENCY", "\"R9IUoXzzR\"")
                .d("BALANCE_FRACTIONAL_PART", "827")
                .d("BALANCE_INTEGER_PART", "0")
                .d("LATITUDE", "0.6065777989590767")
                .d("LOGO", "\"cTagnncB0\"")
                .d("LONGITUDE", "0.4777787512757117")
                .d("NAME", "\"Ge4IJoQY\"")
                .d("NIF", "\"_EM_4152_XYZ_\"")
            .and().insertInto("USERS", 1923L)
                .d("PASSWORD", "\"bJHxSDDPa\"")
                .d("USERNAME", "\"Zj_asSyY\"")
            .and().insertInto("CONSUMERS", 1922L)
                .d("BALANCE_CURRENCY", "\"VUL0UlN_gTGU25dr\"")
                .d("BALANCE_FRACTIONAL_PART", "893")
                .d("BALANCE_INTEGER_PART", "20")
                .d("NAME", "\"BC0J\"")
                .d("ID", "19")
            .and().insertInto("USERS", 1921L)
                .d("PASSWORD", "\"IUk_9uTR2\"")
                .d("USERNAME", "\"qyUifC\"")
            .and().insertInto("CONSUMERS", 1920L)
                .d("BALANCE_CURRENCY", "\"BEB7g20K2x6L\"")
                .d("BALANCE_FRACTIONAL_PART", "48")
                .d("BALANCE_INTEGER_PART", "782")
                .d("NAME", "\"UE_Y\"")
                .d("ID", "11")
            .and().insertInto("PRINT_REQUESTS", 1919L)
                .d("ARRIVAL", "\"2000-06-25 01:39:29\"")
                .d("COST", "0.44950177739446817")
                .d("DELIVERED", "\"1926-08-30 04:44:33\"")
                .d("EMPATTENDED", "\"daJVR\"")
                .d("EMPDELIVERED", "\"\"")
                .d("FINISHED", "\"2053-03-16 11:27:43\"")
                .d("PAYPAL_SALE_ID", "NULL")
                .d("PAYMENT_TYPE", "\"O2iDl3LsT8\"")
                .d("STATUS", "NULL")
                .r("CONSUMER_ID", 1922L)
                .d("PRINTSHOP_ID", "NULL")
                .r("PRINTSHOP", 1924L)
                .d("CONSUMER", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_211_finishAndSubmitPrintRequest.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/printrequest/{printRequestID}/submit'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"EM_tainted_map\": \"_EM_364_XYZ_\", " + 
                    " \"printshopID\": 0.16 " + 
                    " } ")
                .post(baseUrlOfSut + "/consumer/printrequest/11/submit")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_211_finishAndSubmitPrintRequest
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/printrequest/11/submit"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/consumer/printrequest/{printRequestID}/submit
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_201_postOnSubmitShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_210_finishAndSubmitPrintRequest.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/printrequest/{printRequestID}/submit'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/printrequest/929/submit?EMextraParam123=_EM_363_XYZ_")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_210_finishAndSubmitPrintRequest
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/printrequest/929/submit"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/paypal/ipn/consumer/{consumerID}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_202_postOnConsumShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/paypal/ipn/consumer/{consumerID}'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/paypal/ipn/consumer/-30432?" + 
                    "charset=_EM_3812_XYZ_&" + 
                    "payer_email=97amo7pOt5c&" + 
                    "txn_type=_EM_3797_XYZ_&" + 
                    "transaction_type=1&" + 
                    "mc_gross=pW2M")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NumberFormatException"))
                .body("'message'", containsString("For input string: \"pW2M\""))
                .body("'path'", containsString("/paypal/ipn/consumer/-30432"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/paypal/ipn/consumer/{consumerID}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_203_postOnIpnConsumWithQueryParamShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/paypal/ipn/consumer/{consumerID}'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/paypal/ipn/consumer/-8639917498778869294?EMextraParam123=42")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/paypal/ipn/consumer/-8639917498778869294"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/printshops/requests/cancel/{id}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_204_postOnCancelShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/printshops/PrintShopController_365_cancelPrintShopRequests.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/printshops/requests/cancel/{id}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"_EM_532_XYZ_\" ")
                .post(baseUrlOfSut + "/printshops/requests/cancel/805?EMextraParam123=_EM_533_XYZ_")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/printshops/PrintShopController_365_cancelPrintShopRequests
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/printshops/requests/cancel/805"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/paypal/ipn/consumer/{consumerID}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_205_postOnConsumShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/paypal/ipn/consumer/{consumerID}'.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/paypal/ipn/consumer/537?" + 
                    "txn_type=_EM_2674_XYZ_&" + 
                    "mc_gross=_EM_2675_XYZ_")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NumberFormatException"))
                .body("'message'", containsString("For input string: \"_EM_2675_XYZ_\""))
                .body("'path'", containsString("/paypal/ipn/consumer/537"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/consumer/printrequest/{printRequestID}/submit
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_206_postOnSubmitShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_210_finishAndSubmitPrintRequest.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/printrequest/{printRequestID}/submit'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/printrequest/139/submit?EMextraParam123=42")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintRequestController_210_finishAndSubmitPrintRequest
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/printrequest/139/submit"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/paypal/ipn/consumer/{consumerID}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_207_postOnConsumShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 630L)
                .d("ADDRESS", "\"\"")
                .d("AVG_RATING", "0.1530293734142698")
                .d("BALANCE_CURRENCY", "\"w1Iu6kvDgZi1g\"")
                .d("BALANCE_FRACTIONAL_PART", "922")
                .d("BALANCE_INTEGER_PART", "735")
                .d("LATITUDE", "0.032697054200340636")
                .d("LOGO", "\"_EM_1754_XYZ_\"")
                .d("LONGITUDE", "0.7744007971750057")
                .d("NAME", "\"_EM_1755_XYZ_\"")
                .d("NIF", "\"VvAk\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/paypal/ipn/consumer/{consumerID}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/paypal/ipn/consumer/661")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PayPalController_105_consumerLoadUpConfirmation
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/paypal/ipn/consumer/661"));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/consumer/{consumerID}/printingschemas/{printingSchemaID}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_208_putOnPrintingschemaShowsFaults_100_101UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1067L)
                .d("PASSWORD", "\"flD\"")
                .d("USERNAME", "\"vbYv25X398O8\"")
            .and().insertInto("CONSUMERS", 1066L)
                .d("BALANCE_CURRENCY", "\"kPzBw0rsfQb\"")
                .d("BALANCE_FRACTIONAL_PART", "208")
                .d("BALANCE_INTEGER_PART", "345")
                .d("NAME", "\"Y\"")
                .d("ID", "12")
            .and().insertInto("PRINTING_SCHEMAS", 1065L)
                .d("BINDING_SPECS", "NULL")
                .d("COVER_SPECS", "NULL")
                .d("IS_DELETED", "false")
                .d("PSCHEMA_NAME", "\"\"")
                .d("PAPER_SPECS", "\"g5JxyWVKvvH\"")
                .d("CONSUMER_ID", "NULL")
            .and().insertInto("USERS", 1073L)
                .d("PASSWORD", "\"Prsz2NKbFVSkq\"")
                .d("USERNAME", "\"AUw8P_cw0AqDT\"")
            .and().insertInto("CONSUMERS", 1072L)
                .d("BALANCE_CURRENCY", "\"i489awRX\"")
                .d("BALANCE_FRACTIONAL_PART", "436")
                .d("BALANCE_INTEGER_PART", "936")
                .d("NAME", "\"0\"")
                .d("ID", "1")
            .and().insertInto("NOTIFICATION", 1071L)
                .d("EMAIL", "\"yCs6\"")
                .d("READ", "false")
                .d("TIMESTAMP", "\"2045-06-07 03:33:57\"")
                .d("CONSUMER", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_131_editConsumerPrintingSchema.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas/{printingSchemaID}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "D@hxoi")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverSpecs\": \"g8eEEEqTPR6D_mhJ\", " + 
                    " \"paperSpecs\": \"NeDvJLNesM2iuj8h\" " + 
                    " } ")
                .put(baseUrlOfSut + "/consumer/-546/printingschemas/5")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_131_editConsumerPrintingSchema
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("org.springframework.dao.DataIntegrityViolationException"))
                .body("'message'", containsString("could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement"))
                .body("'path'", containsString("/consumer/-546/printingschemas/5"));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/consumer/{consumerID}/printingschemas/{printingSchemaID}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_209_putOnPrintingschemaShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_121_editConsumerPrintingSchema.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas/{printingSchemaID}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"deleted\": true, " + 
                    " \"paperSpecs\": \"DHP3uYhGgTZYP\" " + 
                    " } ")
                .put(baseUrlOfSut + "/consumer/596/printingschemas/2580462953940254008")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_121_editConsumerPrintingSchema
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/596/printingschemas/2580462953940254008"));
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/consumer/{consumerID}/printingschemas/{printingSchemaID}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_210_deleteOnPrintingschemaShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_98_deleteConsumerPrintingSchema.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas/{printingSchemaID}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/consumer/-7919474082526933536/printingschemas/742")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_98_deleteConsumerPrintingSchema
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/-7919474082526933536/printingschemas/742"));
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/consumer/{consumerID}/printingschemas/{printingSchemaID}
    * Found 2 potential faults. Type-codes: 100, 101
    */
    @Test(timeout = 60000)
    public void test_211_deleteOnPrintingschemaShowsFaults_100_101() throws Exception {
        
        // Fault100. HTTP Status 500. io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_98_deleteConsumerPrintingSchema.
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 500 not defined for path '/consumer/{consumerID}/printingschemas/{printingSchemaID}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "5fSDp")
                .delete(baseUrlOfSut + "/consumer/406/printingschemas/784")
                .then()
                .statusCode(500)// io/github/proxyprint/kitchen/controllers/consumer/PrintingSchemaController_98_deleteConsumerPrintingSchema
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.NullPointerException"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/consumer/406/printingschemas/784"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/printshops/{printShopID}/pricetable/editstapling
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_212_putOnEditstaplingReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 2078L)
                .d("PASSWORD", "\"jZLr9jhit2H\"")
                .d("USERNAME", "\"fCVvX9O\"")
            .and().insertInto("CONSUMERS", 2077L)
                .d("BALANCE_CURRENCY", "\"x0nGjvYt3JzCtQv1\"")
                .d("BALANCE_FRACTIONAL_PART", "2736")
                .d("BALANCE_INTEGER_PART", "-1707301368")
                .d("NAME", "\"vEDx6CZ0W\"")
                .d("ID", "15")
            .and().insertInto("NOTIFICATION", 2076L)
                .d("EMAIL", "NULL")
                .d("READ", "false")
                .d("TIMESTAMP", "\"1996-03-14 14:56:23\"")
                .d("CONSUMER", "5")
            .and().insertInto("PRINTSHOPS", 2079L)
                .d("ADDRESS", "\"eDokMoLuRLjRNWF9\"")
                .d("AVG_RATING", "0.8915892648031783")
                .d("BALANCE_CURRENCY", "\"7UHHjE\"")
                .d("BALANCE_FRACTIONAL_PART", "212")
                .d("BALANCE_INTEGER_PART", "572")
                .d("LATITUDE", "0.3752819852718088")
                .d("LOGO", "\"iGHfv4xVDfF\"")
                .d("LONGITUDE", "0.15975034846799807")
                .d("NAME", "\"jMDUCD0T\"")
                .d("NIF", "\"JvmychXc\"")
            .and().insertInto("PRINTSHOPS", 2086L)
                .d("ADDRESS", "\"PqH\"")
                .d("AVG_RATING", "0.17622206721549616")
                .d("BALANCE_CURRENCY", "\"LQUqzUSRrfQUU\"")
                .d("BALANCE_FRACTIONAL_PART", "514")
                .d("BALANCE_INTEGER_PART", "438")
                .d("LATITUDE", "0.7227898419270348")
                .d("LOGO", "\"n\"")
                .d("LONGITUDE", "0.21658307165200796")
                .d("NAME", "\"tKJ4IWWVZk\"")
                .d("NIF", "\"Q\"")
            .and().insertInto("PRINTSHOPS", 2085L)
                .d("ADDRESS", "\"CyCOtnWlfOabl\"")
                .d("AVG_RATING", "0.0074145149210438355")
                .d("BALANCE_CURRENCY", "\"y7u0FbGBRcsNut\"")
                .d("BALANCE_FRACTIONAL_PART", "234")
                .d("BALANCE_INTEGER_PART", "679")
                .d("LATITUDE", "0.0")
                .d("LOGO", "\"lXl6\"")
                .d("LONGITUDE", "0.37266924508144994")
                .d("NAME", "\"DE6\"")
                .d("NIF", "\"uDr87GoUD\"")
            .and().insertInto("USERS", 2084L)
                .d("PASSWORD", "\"\"")
                .d("USERNAME", "\"_EM_4182_XYZ_\"")
            .and().insertInto("CONSUMERS", 2083L)
                .d("BALANCE_CURRENCY", "\"\"")
                .d("BALANCE_FRACTIONAL_PART", "1753")
                .d("BALANCE_INTEGER_PART", "235")
                .d("NAME", "\"OtyuD_avMg7a\"")
                .d("ID", "19")
            .and().insertInto("PRINT_REQUESTS", 2080L)
                .d("ARRIVAL", "\"2081-03-22 09:19:05\"")
                .d("COST", "0.846431646771176")
                .d("DELIVERED", "NULL")
                .d("EMPATTENDED", "\"rlW\"")
                .d("EMPDELIVERED", "NULL")
                .d("FINISHED", "\"2063-04-05 04:06:25\"")
                .d("PAYPAL_SALE_ID", "\"MQlFrC\"")
                .d("PAYMENT_TYPE", "\"cHnNu9zP8k\"")
                .d("STATUS", "\"PENDING\"")
                .d("CONSUMER_ID", "NULL")
                .d("PRINTSHOP_ID", "NULL")
                .d("PRINTSHOP", "NULL")
                .d("CONSUMER", "NULL")
            .and().insertInto("PRINTSHOPS", 2094L)
                .d("ADDRESS", "\"1TS_e8PdLV_\"")
                .d("AVG_RATING", "0.09344945600101473")
                .d("BALANCE_CURRENCY", "\"s1IoP1O\"")
                .d("BALANCE_FRACTIONAL_PART", "199")
                .d("BALANCE_INTEGER_PART", "926")
                .d("LATITUDE", "-17.59893212080084")
                .d("LOGO", "\"8Dq_N2XQ4LQmpG\"")
                .d("LONGITUDE", "0.3853528562340117")
                .d("NAME", "\"Ynnyr\"")
                .d("NIF", "\"SRtU\"")
            .and().insertInto("PRINTSHOPS", 2093L)
                .d("ADDRESS", "\"O\"")
                .d("AVG_RATING", "0.5027307359361952")
                .d("BALANCE_CURRENCY", "\"P2mzkkbwRg6Udc_R\"")
                .d("BALANCE_FRACTIONAL_PART", "383")
                .d("BALANCE_INTEGER_PART", "500")
                .d("LATITUDE", "0.4764781906325")
                .d("LOGO", "\"f\"")
                .d("LONGITUDE", "0.037903378047")
                .d("NAME", "\"jJ\"")
                .d("NIF", "\"A6v2AruMVK\"")
            .and().insertInto("USERS", 2092L)
                .d("PASSWORD", "\"_EM_4183_XYZ_\"")
                .d("USERNAME", "\"kwGuuaeknDoj\"")
            .and().insertInto("CONSUMERS", 2091L)
                .d("BALANCE_CURRENCY", "\"NnPt3uV3H\"")
                .d("BALANCE_FRACTIONAL_PART", "862")
                .d("BALANCE_INTEGER_PART", "876")
                .d("NAME", "\"nD2\"")
                .d("ID", "1")
            .and().insertInto("USERS", 2090L)
                .d("PASSWORD", "\"\"")
                .d("USERNAME", "\"CPtsqQlNkyLU\"")
            .and().insertInto("CONSUMERS", 2089L)
                .d("BALANCE_CURRENCY", "\"I6WkCXy6fksEPA0\"")
                .d("BALANCE_FRACTIONAL_PART", "943")
                .d("BALANCE_INTEGER_PART", "385")
                .d("NAME", "\"IPbn_WRkgZU\"")
                .d("ID", "11")
            .and().insertInto("PRINT_REQUESTS", 2088L)
                .d("COST", "0.0")
            .and().insertInto("DOCUMENTS", 2087L)
                .d("FILE_NAME", "\"Kd2C8Yo\"")
                .d("TOTAL_PAGES", "458")
                .d("PRINT_REQUEST_ID", "NULL")
            .and().insertInto("PRINTSHOPS", 1036L)
                .d("ADDRESS", "\"6S5gcI3XL\"")
                .d("AVG_RATING", "0.04414779555376358")
                .d("BALANCE_CURRENCY", "\"Ma3\"")
                .d("BALANCE_FRACTIONAL_PART", "162")
                .d("BALANCE_INTEGER_PART", "459")
                .d("LATITUDE", "0.5046322342531715")
                .d("LOGO", "\"\"")
                .d("LONGITUDE", "-25.736854518049505")
                .d("NAME", "\"kBkR79M5Dg3Tj\"")
                .d("NIF", "\"_EM_2442_XYZ_\"")
            .and().insertInto("USERS", 1035L)
                .d("PASSWORD", "\"_EM_2443_XYZ_\"")
                .d("USERNAME", "\"q4oRBmEX\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 400 not defined for path '/printshops/{printShopID}/pricetable/editstapling'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .put(baseUrlOfSut + "/printshops/27/pricetable/editstapling?EMextraParam123=_EM_107_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.http.converter.HttpMessageNotReadableException"))
                .body("'message'", containsString("Required request body is missing: public java.lang.String io.github.proxyprint.kitchen.controllers.printshops.PriceTableController.editStaplingPrice(long,java.lang.String)"))
                .body("'path'", containsString("/printshops/27/pricetable/editstapling"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/consumer/printrequest/{printRequestID}/submit
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_213_postOnSubmitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/printrequest/295/submit")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/printrequest/295/submit"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/printshops/requests/cancel/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_214_postOnCancelReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_40_XYZ_")
                .contentType("application/json")
                .body(" \"_EM_39_XYZ_\" ")
                .post(baseUrlOfSut + "/printshops/requests/cancel/54")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/requests/cancel/54"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/printshops/{id}/pricetable/covers
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_215_postOnCoversReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"sRanPF\", " + 
                    " \"priceA3\": \"_EM_83_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/496/pricetable/covers")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/496/pricetable/covers"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/printshops/{id}/pricetable/deletecover
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_216_postOnDeletecoverReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"2i_eRG\", " + 
                    " \"priceA4\": \"_EM_41_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/561/pricetable/deletecover")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/561/pricetable/deletecover"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/printshops/{id}/pricetable/deletepaper
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_217_postOnDeletepaperReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"priceA3DUPLEX\": \"_EM_44_XYZ_\", " + 
                    " \"priceA3SIMPLEX\": \"_EM_45_XYZ_\", " + 
                    " \"priceA4DUPLEX\": \"_EM_46_XYZ_\", " + 
                    " \"priceA4SIMPLEX\": \"_EM_47_XYZ_\", " + 
                    " \"supLim\": -215691816 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/981/pricetable/deletepaper")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/981/pricetable/deletepaper"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/printshops/{id}/pricetable/deletering
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_218_postOnDeleteringReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"supLim\": 752 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/951/pricetable/deletering?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/951/pricetable/deletering"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/printshops/{id}/pricetable/papers
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_219_postOnPricetablePapersWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"colors\": \"_EM_86_XYZ_\", " + 
                    " \"infLim\": -1620891210, " + 
                    " \"priceA3DUPLEX\": \"_EM_87_XYZ_\", " + 
                    " \"priceA3SIMPLEX\": \"Uz1BcV\", " + 
                    " \"priceA4DUPLEX\": \"AIVjm4lWoJL\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/91/pricetable/papers?EMextraParam123=_EM_89_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/91/pricetable/papers"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/printshops/{id}/pricetable/rings
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_220_postOnRingsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": -725327358, " + 
                    " \"price\": \"_EM_54_XYZ_\", " + 
                    " \"ringType\": \"_EM_55_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/922/pricetable/rings")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/922/pricetable/rings"));
    }
    
    
    /**
    * Calls:
    * (401) PUT:/consumer/{consumerID}/printingschemas/{printingSchemaID}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_221_putOnPrintingschemaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverSpecs\": \"_EM_93_XYZ_\", " + 
                    " \"name\": \"_EM_94_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/consumer/361/printingschemas/616?EMextraParam123=_EM_96_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/361/printingschemas/616"));
    }
    
    
    /**
    * Calls:
    * (401) PUT:/printshops/{id}/pricetable/covers
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_222_putOnCoversReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_1003_XYZ_")
                .contentType("application/json")
                .body(" {} ")
                .put(baseUrlOfSut + "/printshops/628/pricetable/covers")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/628/pricetable/covers"));
    }
    
    
    /**
    * Calls:
    * (401) PUT:/printshops/{id}/pricetable/papers
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_223_putOnPapersReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_103_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"priceA3DUPLEX\": \"_EM_100_XYZ_\", " + 
                    " \"priceA4DUPLEX\": \"_EM_101_XYZ_\", " + 
                    " \"priceA4SIMPLEX\": \"Wjhe\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/76/pricetable/papers")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/76/pricetable/papers"));
    }
    
    
    /**
    * Calls:
    * (401) PUT:/printshops/{id}/pricetable/rings
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_224_putOnRingsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 200, " + 
                    " \"ringType\": \"_EM_104_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/6629583913275995394/pricetable/rings?EMextraParam123=_EM_105_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/6629583913275995394/pricetable/rings"));
    }
    
    
    /**
    * Calls:
    * (401) PUT:/printshops/{printShopID}/pricetable/editstapling
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_225_putOnEditstaplingReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" -179657212 ")
                .put(baseUrlOfSut + "/printshops/-179657212/pricetable/editstapling?EMextraParam123=_EM_107_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/-179657212/pricetable/editstapling"));
    }
    
    
    /**
    * Calls:
    * (401) PUT:/printshops/{printShopId}/reviews/{reviewId}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_226_putOnPrintshopReviewReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .put(baseUrlOfSut + "/printshops/595/reviews/543")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/595/reviews/543"));
    }
    
    
    /**
    * Calls:
    * (401) DELETE:/consumer/requests/cancel/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_227_deleteOnCancelReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/-4934462504682057597")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/requests/cancel/-4934462504682057597"));
    }
    
    
    /**
    * Calls:
    * (401) DELETE:/consumer/{consumerID}/printingschemas/{printingSchemaID}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_228_deleteOnPrintingschemaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/consumer/-150769655/printingschemas/380?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/consumer/-150769655/printingschemas/380"));
    }
    
    
    /**
    * Calls:
    * (401) DELETE:/printshops/{printShopID}/employees/{employeeID}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_229_deleteOnEmployeReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_4_XYZ_")
                .delete(baseUrlOfSut + "/printshops/947/employees/997?EMextraParam123=_EM_3_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/947/employees/997"));
    }
    
    
    /**
    * Calls:
    * (401) DELETE:/printshops/{printShopId}/reviews/{reviewId}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_230_deleteOnReviewReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/printshops/430/reviews/834?EMextraParam123=_EM_5_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Full authentication is required to access this resource"))
                .body("'path'", containsString("/printshops/430/reviews/834"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/consumer/printrequest/{printRequestID}/submit
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_231_postOnSubmitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/printrequest/561/submit")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/printrequest/561/submit"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/pricetable/deletering
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_232_postOnDeleteringReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 600, " + 
                    " \"ringType\": \"_EM_380_XYZ_\", " + 
                    " \"supLim\": 557 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/-7353111970030454707/pricetable/deletering")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-7353111970030454707/pricetable/deletering"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/pricetable/papers
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_233_postOnPapersReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"colors\": \"TizpGWbPhFqa67qX\", " + 
                    " \"infLim\": 200, " + 
                    " \"priceA3SIMPLEX\": \"jFadkmq4\", " + 
                    " \"priceA4DUPLEX\": \"_EM_382_XYZ_\", " + 
                    " \"priceA4SIMPLEX\": \"_EM_383_XYZ_\", " + 
                    " \"supLim\": 162 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/454/pricetable/papers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/454/pricetable/papers"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/requests/cancel/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_234_postOnCancelReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" _EM_205_XYZ_ ")
                .post(baseUrlOfSut + "/printshops/requests/cancel/605")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/requests/cancel/605"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/pricetable/covers
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_235_postOnCoversReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"TzQ\", " + 
                    " \"priceA3\": \"_EM_696_XYZ_\", " + 
                    " \"priceA4\": \"_EM_697_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/18/pricetable/covers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/18/pricetable/covers"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/pricetable/deletecover
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_236_postOnDeletecoverReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"_EM_700_XYZ_\", " + 
                    " \"priceA3\": \"JJn\", " + 
                    " \"priceA4\": \"lVpZb_p_5GX\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/1285062982/pricetable/deletecover")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/1285062982/pricetable/deletecover"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/pricetable/deletepaper
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_237_postOnDeletepaperReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 669, " + 
                    " \"priceA4DUPLEX\": \"zLi6CFg0\", " + 
                    " \"priceA4SIMPLEX\": \"_EM_376_XYZ_\", " + 
                    " \"supLim\": 666 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/619/pricetable/deletepaper")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/619/pricetable/deletepaper"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/pricetable/rings
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_238_postOnRingsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 208, " + 
                    " \"price\": \"_EM_711_XYZ_\", " + 
                    " \"ringType\": \"rtmof8pV\", " + 
                    " \"supLim\": 538 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/201/pricetable/rings")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/201/pricetable/rings"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/pricetable/covers
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_239_postOnCoversReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1869L)
                .d("ADDRESS", "\"Md73HwXayYm\"")
                .d("AVG_RATING", "0.9638")
                .d("BALANCE_CURRENCY", "\"wCU0pmkQ\"")
                .d("BALANCE_FRACTIONAL_PART", "277")
                .d("BALANCE_INTEGER_PART", "-15560")
                .d("LATITUDE", "0.1293284506")
                .d("LOGO", "\"ShpJ5c\"")
                .d("LONGITUDE", "-15057.53469787606")
                .d("NAME", "\"jCN9Ozb3tRa5\"")
                .d("NIF", "\"88TZSiKn1s2V1wnG\"")
            .and().insertInto("PRINTSHOPS", 1868L)
                .d("ADDRESS", "\"_EM_4141_XYZ_\"")
                .d("AVG_RATING", "0.8002164828066154")
                .d("BALANCE_CURRENCY", "\"7CMlbR\"")
                .d("BALANCE_FRACTIONAL_PART", "2522")
                .d("BALANCE_INTEGER_PART", "875")
                .d("LATITUDE", "0.9382718412222617")
                .d("LOGO", "\"_EM_4145_XYZ_\"")
                .d("LONGITUDE", "0.1480040860352947")
                .d("NAME", "\"X|sU_TC\"")
                .d("NIF", "\"pti9nM\"")
            .and().insertInto("USERS", 1867L)
                .d("PASSWORD", "\"HxvvvW8ARBwvr\"")
                .d("USERNAME", "\"n\"")
            .and().insertInto("CONSUMERS", 1866L)
                .d("BALANCE_CURRENCY", "\"blVAki\"")
                .d("BALANCE_FRACTIONAL_PART", "-130384")
                .d("BALANCE_INTEGER_PART", "-1704")
                .d("NAME", "\"NAME7_1_0_\"")
                .d("ID", "16")
            .and().insertInto("USERS", 1865L)
                .d("PASSWORD", "\"i\"")
                .d("USERNAME", "\"dQZ\"")
            .and().insertInto("CONSUMERS", 1864L)
                .d("BALANCE_CURRENCY", "\"_EM_4024_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "8744")
                .d("BALANCE_INTEGER_PART", "528")
                .d("NAME", "\"G8tvwU\"")
                .d("ID", "11")
            .and().insertInto("PRINT_REQUESTS", 1863L)
                .d("ARRIVAL", "NULL")
                .d("COST", "0.7144050429368027")
                .d("DELIVERED", "NULL")
                .d("EMPATTENDED", "\"_EM_4142_XYZ_\"")
                .d("EMPDELIVERED", "\"NYD7eRSQp\"")
                .d("FINISHED", "NULL")
                .d("PAYPAL_SALE_ID", "\"OazU4k\"")
                .d("PAYMENT_TYPE", "\"MzDymBQEKOI2\"")
                .d("STATUS", "\"NOT_PAYED\"")
                .d("CONSUMER_ID", "5")
                .d("PRINTSHOP_ID", "3")
                .d("PRINTSHOP", "4")
                .d("CONSUMER", "4")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"_gSgtSnH\", " + 
                    " \"priceA3\": \"REVY\", " + 
                    " \"priceA4\": \"BH1jgSuT26rBY\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/16/pricetable/covers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/16/pricetable/covers"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/pricetable/covers
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_240_postOnCoversReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"priceA3\": \"\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/121/pricetable/covers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/121/pricetable/covers"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/pricetable/deletecover
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_241_postOnDeletecoverReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_211_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"0NDZ\", " + 
                    " \"priceA4\": \"_EM_209_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/11/pricetable/deletecover?EMextraParam123=_EM_210_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/11/pricetable/deletecover"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/pricetable/deletepaper
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_242_postOnPricetableDeletepaperWithQueryParam() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 655, " + 
                    " \"priceA4DUPLEX\": \"yjJRQK\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/89/pricetable/deletepaper?EMextraParam123=_EM_215_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/89/pricetable/deletepaper"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/pricetable/deletering
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_243_postOnDeleteringReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"price\": \"13\", " + 
                    " \"ringType\": \"_EM_216_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/13/pricetable/deletering?EMextraParam123=_EM_217_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/13/pricetable/deletering"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/pricetable/papers
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_244_postOnPapersReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_223_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"priceA3DUPLEX\": \"_EM_219_XYZ_\", " + 
                    " \"priceA4DUPLEX\": \"_EM_221_XYZ_\", " + 
                    " \"priceA4SIMPLEX\": \"iU\", " + 
                    " \"supLim\": 557 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/938/pricetable/papers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/938/pricetable/papers"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/pricetable/rings
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_245_postOnRingsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"supLim\": 340 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/966/pricetable/rings")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/966/pricetable/rings"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/requests/cancel/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_246_postOnCancelReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" \"516\" ")
                .post(baseUrlOfSut + "/printshops/requests/cancel/516")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/requests/cancel/516"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/pricetable/deletecover
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_247_postOnDeletecoverReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"priceA4\": \"_EM_372_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/873/pricetable/deletecover?EMextraParam123=_EM_373_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/873/pricetable/deletecover"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/pricetable/rings
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_248_postOnRingsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"price\": \"_EM_385_XYZ_\", " + 
                    " \"ringType\": \"iSKO\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/567/pricetable/rings")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/567/pricetable/rings"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/consumer/printrequest/{printRequestID}/submit
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_249_postOnSubmitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/consumer/printrequest/-2512277329321172432/submit?EMextraParam123=_EM_530_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/printrequest/-2512277329321172432/submit"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/consumer/printrequest/{printRequestID}/submit
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_250_postOnSubmitReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/printrequest/662/submit?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/printrequest/662/submit"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/pricetable/deletepaper
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_251_postOnDeletepaperReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 886, " + 
                    " \"priceA3DUPLEX\": \"amXgSAbRxGNsJB_\", " + 
                    " \"priceA4DUPLEX\": \"F6VeJhm\", " + 
                    " \"priceA4SIMPLEX\": \"FdgTa7C\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/965/pricetable/deletepaper")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/965/pricetable/deletepaper"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/pricetable/deletering
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_252_postOnDeleteringReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 573, " + 
                    " \"supLim\": 910 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/5075983641384817288/pricetable/deletering")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/5075983641384817288/pricetable/deletering"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/printshops/{id}/pricetable/papers
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_253_postOnPapersReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_1270_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"colors\": \"_EM_1268_XYZ_\", " + 
                    " \"infLim\": 790, " + 
                    " \"priceA3SIMPLEX\": \"WUcz\", " + 
                    " \"priceA4SIMPLEX\": \"dNKUYhk5OnY\", " + 
                    " \"supLim\": 807 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/712/pricetable/papers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/712/pricetable/papers"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/printshops/{id}/pricetable/papers
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_254_putOnPapersReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 486L)
                .d("PASSWORD", "\"gVPAhCp\"")
                .d("USERNAME", "\"DkXIfmdvP\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"colors\": \"uo0d\", " + 
                    " \"priceA3DUPLEX\": \"1346rgEWZgAifpvI\", " + 
                    " \"priceA4DUPLEX\": \"5AAqK6Z\", " + 
                    " \"priceA4SIMPLEX\": \"t\", " + 
                    " \"supLim\": 630 " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/54/pricetable/papers?latitude=H4J9IsmWFAd_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/54/pricetable/papers"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/printshops/{id}/pricetable/covers
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_255_putOnCoversReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"priceA3\": \"_EM_265_XYZ_\", " + 
                    " \"priceA4\": \"_EM_266_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/1350892785/pricetable/covers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/1350892785/pricetable/covers"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/printshops/{id}/pricetable/covers
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_256_putOnCoversReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"priceA4\": \"_EM_753_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/709/pricetable/covers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/709/pricetable/covers"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/consumer/{consumerID}/printingschemas/{printingSchemaID}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_257_putOnPrintingschemaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"2i5m\", " + 
                    " \"name\": \"4J0lFCIjw\", " + 
                    " \"paperSpecs\": \"g1xLbgqTcYMAyoP3\" " + 
                    " } ")
                .put(baseUrlOfSut + "/consumer/651/printingschemas/524")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/651/printingschemas/524"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/printshops/{id}/pricetable/papers
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_258_putOnPricetablePapersWithQueryParamReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "grh_XyyzsOnG")
                .contentType("application/json")
                .body(" { " + 
                    " \"priceA3SIMPLEX\": \"PDpubWyrA\", " + 
                    " \"priceA4DUPLEX\": \"DD7cBgiI\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/618/pricetable/papers?latitude=eZTq7")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/618/pricetable/papers"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/printshops/{id}/pricetable/rings
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_259_putOnRingsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"price\": \"_EM_428_XYZ_\", " + 
                    " \"ringType\": \"lhoD\", " + 
                    " \"supLim\": 386 " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/-456935784/pricetable/rings?EMextraParam123=_EM_429_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-456935784/pricetable/rings"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/printshops/{printShopID}/pricetable/editstapling
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_260_putOnEditstaplingReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"_EM_271_XYZ_\" ")
                .put(baseUrlOfSut + "/printshops/116/pricetable/editstapling?EMextraParam123=_EM_272_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/116/pricetable/editstapling"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/printshops/{printShopId}/reviews/{reviewId}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_261_putOnPrintshopReviewWithQueryParamsReturnsMismatchResponseWithSchema() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 3010L)
                .d("ADDRESS", "\"3legqzNQ_V2u\"")
                .d("AVG_RATING", "0.9011269932124477")
                .d("BALANCE_CURRENCY", "\"zHt4waFHHgaD\"")
                .d("BALANCE_FRACTIONAL_PART", "905")
                .d("BALANCE_INTEGER_PART", "262")
                .d("LATITUDE", "0.05248608884320183")
                .d("LOGO", "\"SNrGXjFbhcCckHD\"")
                .d("LONGITUDE", "0.7862438444899627")
                .d("NAME", "\"UbFogsW\"")
                .d("NIF", "\"fbADx6tK\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "")
                .put(baseUrlOfSut + "/printshops/83/reviews/837?" + 
                    "latitude=rVX9_6adrqMvN&" + 
                    "name=anfPtgVns5&" + 
                    "email=Jv4soK7T0afS&" + 
                    "longitude=cweC")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/83/reviews/837"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/consumer/{consumerID}/printingschemas/{printingSchemaID}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_262_putOnPrintingschemaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"deleted\": true, " + 
                    " \"paperSpecs\": \"_EM_264_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/consumer/812/printingschemas/697?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/812/printingschemas/697"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/printshops/{id}/pricetable/rings
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_263_putOnRingsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"ringType\": \"of\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/2897987347445787829/pricetable/rings")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/2897987347445787829/pricetable/rings"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/printshops/{printShopId}/reviews/{reviewId}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_264_putOnReviewReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "42")
                .put(baseUrlOfSut + "/printshops/850/reviews/502?EMextraParam123=_EM_273_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/850/reviews/502"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/printshops/{id}/pricetable/covers
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_265_putOnCoversReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"\", " + 
                    " \"priceA3\": \"_EM_424_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/-2129382363/pricetable/covers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-2129382363/pricetable/covers"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/printshops/{printShopID}/pricetable/editstapling
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_266_putOnPricetableEditstaplingReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" _EM_430_XYZ_ ")
                .put(baseUrlOfSut + "/printshops/126/pricetable/editstapling")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/126/pricetable/editstapling"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/consumer/{consumerID}/printingschemas/{printingSchemaID}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_267_putOnPrintingschemaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"bindingSpecs\": \"_EM_751_XYZ_\", " + 
                    " \"id\": -4280002449811815030, " + 
                    " \"paperSpecs\": \"6w3FgHi0i3exq\" " + 
                    " } ")
                .put(baseUrlOfSut + "/consumer/649/printingschemas/-4280002449811815030")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/649/printingschemas/-4280002449811815030"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/printshops/{id}/pricetable/papers
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_268_putOnPapersReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"priceA4DUPLEX\": \"ndxM\", " + 
                    " \"priceA4SIMPLEX\": \"zSiEODN7qb\", " + 
                    " \"supLim\": 509 " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/1146758768/pricetable/papers")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/1146758768/pricetable/papers"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/printshops/{id}/pricetable/rings
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_269_putOnRingsReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"ringType\": \"\", " + 
                    " \"supLim\": 785 " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/448/pricetable/rings")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/448/pricetable/rings"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/printshops/{printShopID}/pricetable/editstapling
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_270_putOnEditstaplingReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"_EM_759_XYZ_\" ")
                .put(baseUrlOfSut + "/printshops/795/pricetable/editstapling?EMextraParam123=_EM_760_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/795/pricetable/editstapling"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/printshops/{printShopId}/reviews/{reviewId}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_271_putOnReviewReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/printshops/581/reviews/124?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/581/reviews/124"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/printshops/{printShopId}/reviews/{reviewId}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_272_putOnPrintshopReviewReturnsMismatchResponseWithSchemaUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 711L)
                .d("ADDRESS", "\"ENtys\"")
                .d("AVG_RATING", "0.007903068107218969")
                .d("BALANCE_CURRENCY", "\"X52e5x4I\"")
                .d("BALANCE_FRACTIONAL_PART", "705")
                .d("BALANCE_INTEGER_PART", "588")
                .d("LATITUDE", "0.8061355069648242")
                .d("LOGO", "\"_EM_1845_XYZ_\"")
                .d("LONGITUDE", "0.8361564586247207")
                .d("NAME", "\"LtrCcr8w4V5tr4IY\"")
                .d("NIF", "\"b7ImzkkqI0j\"")
            .and().insertInto("USERS", 714L)
                .d("PASSWORD", "\"_EM_1846_XYZ_\"")
                .d("USERNAME", "\"_EM_1847_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/printshops/718/reviews/715")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/718/reviews/715"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/consumer/requests/cancel/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_273_deleteOnCancelReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/460")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/requests/cancel/460"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/consumer/{consumerID}/printingschemas/{printingSchemaID}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_274_deleteOnPrintingschemaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/934/printingschemas/190?EMextraParam123=_EM_170_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/934/printingschemas/190"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/printshops/{printShopID}/employees/{employeeID}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_275_deleteOnEmployeReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/printshops/52/employees/1983087620")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/52/employees/1983087620"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/printshops/{printShopId}/reviews/{reviewId}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_276_deleteOnReviewReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/printshops/778/reviews/2144536155?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/778/reviews/2144536155"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/consumer/{consumerID}/printingschemas/{printingSchemaID}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_277_deleteOnPrintingschemaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/934/printingschemas/-32578")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/934/printingschemas/-32578"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/printshops/{printShopID}/employees/{employeeID}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_278_deleteOnEmployeReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/printshops/895/employees/876")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/895/employees/876"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/consumer/requests/cancel/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_279_deleteOnCancelReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/899?EMextraParam123=_EM_501_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/requests/cancel/899"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/consumer/{consumerID}/printingschemas/{printingSchemaID}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_280_deleteOnPrintingschemaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/140/printingschemas/432")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/140/printingschemas/432"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/printshops/{printShopId}/reviews/{reviewId}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_281_deleteOnReviewReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/printshops/5569104105734248135/reviews/870?EMextraParam123=_EM_505_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/5569104105734248135/reviews/870"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/consumer/requests/cancel/{id}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_282_deleteOnCancelReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/690?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/requests/cancel/690"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/consumer/{consumerID}/printingschemas/{printingSchemaID}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_283_deleteOnPrintingschemaReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/430/printingschemas/7729164186872579160?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/consumer/430/printingschemas/7729164186872579160"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/printshops/{printShopID}/employees/{employeeID}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_284_deleteOnEmployeReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "_EM_661_XYZ_")
                .delete(baseUrlOfSut + "/printshops/194/employees/285?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/194/employees/285"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/printshops/{printShopId}/reviews/{reviewId}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_285_deleteOnReviewReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/printshops/854/reviews/737")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/854/reviews/737"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/printshops/{printShopId}/reviews/{reviewId}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_286_deleteOnReviewReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/printshops/-31914/reviews/737")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/-31914/reviews/737"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/printshops/{printShopId}/reviews/{reviewId}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_287_deleteOnReviewReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/printshops/5569104105738442439/reviews/-64666")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(403.0))
                .body("'error'", containsString("Forbidden"))
                .body("'exception'", containsString("org.springframework.security.access.AccessDeniedException"))
                .body("'message'", containsString("Access is denied"))
                .body("'path'", containsString("/printshops/5569104105738442439/reviews/-64666"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/printshops/{printShopId}/reviews/{reviewId}
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_288_deleteOnReviewReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.status.unknown. Response status 404 not defined for path '/printshops/{printShopId}/reviews/{reviewId}'.
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/printshops/532/reviews/980")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }


}
