/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-08-17T19:56:45.646-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 32 tests
 * <br>
*  Covered targets: 215
 * <br>
*  Used time: 0h 21m 27s
 * <br>
*  Needed budget for current results: 98%
 * <br>
*  This file contains test cases that represent failed calls, but not indicative of faults.
*/
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.io.github.proxyprint.kitchen.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (null) GET:/documents/{id}
    */
    @Test(timeout = 60000)
    public void test_0_getOnDocumentReturnsNull() throws Exception {
        
        try{
            given().accept("*/*")
                    .header("x-EMextraHeader123", "42")
                    .get(baseUrlOfSut + "/documents/12?EMextraParam123=42");
        } catch(Exception e){
        }
    }
    
    
    /**
    * Calls:
    * (null) HEAD:/consumer/subscribe
    */
    @Test(timeout = 60000)
    public void test_1_headOnSubscribeReturnsNull() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1157L)
                .d("PASSWORD", "\"hLteolW\"")
                .d("USERNAME", "\"b0TBeuHtYYai\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        try{
            given().accept("*/*")
                    .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                    .header("x-EMextraHeader123", "")
                    .head(baseUrlOfSut + "/consumer/subscribe?" + 
                        "password=1234&" + 
                        "username=rui");
        } catch(Exception e){
        }
    }
    
    
    /**
    * Calls:
    * (401) POST:/consumer/subscribe
    */
    @Test(timeout = 60000)
    public void test_2_postOnSubscribeReturns401() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1100L)
                .d("PASSWORD", "\"oDyM7hrj\"")
                .d("USERNAME", "\"_EM_2680_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=_EM_2683_XYZ_&" + 
                    "username=rui")
                .then()
                .statusCode(401)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (401) POST:/consumer/subscribe
    */
    @Test(timeout = 60000)
    public void test_3_postOnSubscribeReturns401() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1100L)
                .d("PASSWORD", "\"oDM7hrj\"")
                .d("USERNAME", "\"Un1z5cZO0V\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=UGTT7SR0kT9gkHz&" + 
                    "username=joao")
                .then()
                .statusCode(401)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (401) POST:/consumer/subscribe
    */
    @Test(timeout = 60000)
    public void test_4_postOnSubscribeReturns401() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1100L)
                .d("PASSWORD", "\"oDM7hrj\"")
                .d("USERNAME", "\"_EM_2680_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=UGTT7SR0kT9gkHz&" + 
                    "username=ritinha")
                .then()
                .statusCode(401)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (401) POST:/consumer/subscribe
    */
    @Test(timeout = 60000)
    public void test_5_postOnSubscribeReturns401() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1100L)
                .d("PASSWORD", "\"oDyM7hrja\"")
                .d("USERNAME", "\"ceLDz0\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=yaLS&" + 
                    "username=anam")
                .then()
                .statusCode(401)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (401) PUT:/consumer/subscribe
    */
    @Test(timeout = 60000)
    public void test_6_putOnSubscribeReturns401() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1111L)
                .d("PASSWORD", "\"9R1tqPw2\"")
                .d("USERNAME", "\"7cab7\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=BLkjCRzEi&" + 
                    "username=ritinha")
                .then()
                .statusCode(401)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (401) PUT:/consumer/subscribe
    */
    @Test(timeout = 60000)
    public void test_7_putOnSubscribeReturns401() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1111L)
                .d("PASSWORD", "\"9R1tqPw2\"")
                .d("USERNAME", "\"7cac7\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=BLkjCRzEi&" + 
                    "username=rui")
                .then()
                .statusCode(401)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (401) HEAD:/consumer/subscribe
    */
    @Test(timeout = 60000)
    public void test_8_headOnSubscribeReturns401() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1157L)
                .d("PASSWORD", "\"692992\"")
                .d("USERNAME", "\"xJh3RTz6g1\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .head(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=_EM_2942_XYZ_&" + 
                    "username=joao")
                .then()
                .statusCode(401)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) GET:/consumer/subscribe
    */
    @Test(timeout = 60000)
    public void test_9_getOnSubscribeReturns404() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1772L)
                .d("PASSWORD", "\"DD\"")
                .d("USERNAME", "\"wt3kJYN4npcSJIS\"")
            .and().insertInto("USERS", 1020L)
                .d("PASSWORD", "\"UUU^2350_XYZ_\"")
                .d("USERNAME", "\"_EM_2351_XYZ_\"")
            .and().insertInto("PRINTSHOPS", 1019L)
                .d("ADDRESS", "\"_EM_2352_XYZ_\"")
                .d("AVG_RATING", "0.4843615693401686")
                .d("BALANCE_CURRENCY", "\"Bwgf_yI4Kj5IKp\"")
                .d("BALANCE_FRACTIONAL_PART", "782976185")
                .d("BALANCE_INTEGER_PART", "146")
                .d("LATITUDE", "0.24215919715129142")
                .d("LOGO", "\"kvqT\"")
                .d("LONGITUDE", "0.341122279")
                .d("NAME", "\"890507\"")
                .d("NIF", "\"iGD_rg2pz\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/subscribe?username=_EM_3905_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) GET:/consumer/subscribe
    */
    @Test(timeout = 60000)
    public void test_10_getOnSubscribeReturns404() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1100L)
                .d("PASSWORD", "\"oDM7hrj\"")
                .d("USERNAME", "\"Un1z5cZO0V\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/subscribe?password=PbyGG_4S6MUAk")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) GET:/documents/{id}
    */
    @Test(timeout = 60000)
    public void test_11_getOnDocumentReturns404() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/documents/76?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) GET:/printshops/{id}
    */
    @Test(timeout = 60000)
    public void test_12_getOnPrintshopReturns404() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 711L)
                .d("ADDRESS", "\"ENtys\"")
                .d("AVG_RATING", "0.007903068107218969")
                .d("BALANCE_CURRENCY", "\"X52e5x4I\"")
                .d("BALANCE_FRACTIONAL_PART", "705")
                .d("BALANCE_INTEGER_PART", "588")
                .d("LATITUDE", "0.8061355069648242")
                .d("LOGO", "\"_EM_1845_XYZ_\"")
                .d("LONGITUDE", "0.8361564586247207")
                .d("NAME", "\"LtrCcr8w4V5tr4IY\"")
                .d("NIF", "\"b7ImzkkqI0j\"")
            .and().insertInto("USERS", 714L)
                .d("PASSWORD", "\"_EM_1846_XYZ_\"")
                .d("USERNAME", "\"_EM_1847_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/711")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) GET:/consumer/subscribe
    */
    @Test(timeout = 60000)
    public void test_13_getOnConsumerSubscribeWithQueryParamsReturns404() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 614L)
                .d("PASSWORD", "\"_EM_1713_XYZ_\"")
                .d("USERNAME", "\"pzy\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=z2ouwwuy8F43Amz&" + 
                    "username=UKa")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) GET:/printshops/{id}
    */
    @Test(timeout = 60000)
    public void test_14_getOnPrintshopWithQueryParamReturns404() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 467L)
                .d("ADDRESS", "\"\"")
                .d("AVG_RATING", "0.505694308596345")
                .d("BALANCE_CURRENCY", "\"XH\"")
                .d("BALANCE_FRACTIONAL_PART", "170")
                .d("BALANCE_INTEGER_PART", "758")
                .d("LATITUDE", "0.14550956098590329")
                .d("LOGO", "\"\"")
                .d("LONGITUDE", "0.9508137560712067")
                .d("NAME", "\"a1CqARKNKf\"")
                .d("NIF", "\"YPecurGbX9lN\"")
            .and().insertInto("USERS", 470L)
                .d("PASSWORD", "\"Y9ZJk72P\"")
                .d("USERNAME", "\"sMKCt\"")
            .and().insertInto("PRINTSHOPS", 469L)
                .d("ADDRESS", "\"dC\"")
                .d("AVG_RATING", "0.5889530553578711")
                .d("BALANCE_CURRENCY", "\"4aw4JoMM\"")
                .d("BALANCE_FRACTIONAL_PART", "887")
                .d("BALANCE_INTEGER_PART", "961")
                .d("LATITUDE", "0.5890753836785805")
                .d("LOGO", "\"HmymOW4QkqNQqkkm\"")
                .d("LONGITUDE", "0.8399537080105757")
                .d("NAME", "\"\"")
                .d("NIF", "\"iKdd2lTSq26lG\"")
            .and().insertInto("EMPLOYEES", 468L)
                .d("NAME", "\"CrQ4rQ\"")
                .d("ID", "2")
                .d("PRINTSHOP_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/-8478352526450100544?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) GET:/consumer/subscribe
    */
    @Test(timeout = 60000)
    public void test_15_getOnSubscribeReturns404() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1123L)
                .d("PASSWORD", "\"_EM_2732_XYZ_\"")
                .d("USERNAME", "\"_EM_2729_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/subscribe?username=_EM_2728_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) POST:/consumer/subscribe
    */
    @Test(timeout = 60000)
    public void test_16_postOnConsumerSubscribeWithQueryParamsReturns404() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1100L)
                .d("PASSWORD", "\"oDyK7hrja\"")
                .d("USERNAME", "\"ceLDz0\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=NaLS&" + 
                    "username=_EM_2631_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) POST:/consumer/subscribe
    */
    @Test(timeout = 60000)
    public void test_17_postOnConsumerSubscribeReturns404() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_75_XYZ_")
                .post(baseUrlOfSut + "/consumer/subscribe")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) PUT:/consumer/subscribe
    */
    @Test(timeout = 60000)
    public void test_18_putOnSubscribeReturns404() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1111L)
                .d("PASSWORD", "\"9R1tqPw2\"")
                .d("USERNAME", "\"7cac7\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=BLkjCRzEi&" + 
                    "username=_EM_2667_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) PUT:/consumer/subscribe
    */
    @Test(timeout = 60000)
    public void test_19_putOnConsumerSubscribeWithQueryParamReturns404() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/subscribe?EMextraParam123=_EM_111_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) PUT:/consumer/subscribe
    */
    @Test(timeout = 60000)
    public void test_20_putOnSubscribeReturns404() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 962L)
                .d("PASSWORD", "\"txh\"")
                .d("USERNAME", "\"NNnqzlpfVWoR\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=BLkjCRzEi&" + 
                    "username=_EM_2244_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) PUT:/consumer/subscribe
    */
    @Test(timeout = 60000)
    public void test_21_putOnSubscribeReturns404() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1123L)
                .d("PASSWORD", "\"_EM_2732_XYZ_\"")
                .d("USERNAME", "\"_EM_2729_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/consumer/subscribe?" + 
                    "password=_EM_2727_XYZ_&" + 
                    "username=_EM_2731_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) GET:/printshops/{id}/reviews
    */
    @Test(timeout = 60000)
    public void test_22_getOnReviewsReturns404() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/94/reviews")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) GET:/printshops/{id}/reviews
    */
    @Test(timeout = 60000)
    public void test_23_getOnReviewsReturns404() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 496L)
                .d("ADDRESS", "\"\"")
                .d("AVG_RATING", "0.39934769660147273")
                .d("BALANCE_CURRENCY", "\"PW9rLH8CMPpdQ3\"")
                .d("BALANCE_FRACTIONAL_PART", "481")
                .d("BALANCE_INTEGER_PART", "357")
                .d("LATITUDE", "0.4529482773259794")
                .d("LOGO", "\"xD_uPmFChDA\"")
                .d("LONGITUDE", "0.8153721564162012")
                .d("NAME", "\"5T\"")
                .d("NIF", "\"h7h\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/printshops/-1829051893/reviews")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) POST:/printshops/{id}/reviews
    */
    @Test(timeout = 60000)
    public void test_24_postOnReviewsReturns404() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "_EM_395_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"QgPV\": \"_EM_391_XYZ_\", " + 
                    " \"_EM_392_XYZ_\": \"ze\", " + 
                    " \"hk56yMc8Eu6\": \"6BhJqj\", " + 
                    " \"gVpSDS9MJ\": \"_EM_393_XYZ_\", " + 
                    " \"QFtMQ982Dp4H6p\": \"_EM_394_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/2220942049705864536/reviews")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) POST:/printshops/{id}/reviews
    */
    @Test(timeout = 60000)
    public void test_25_postOnReviewsReturns404() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 2078L)
                .d("PASSWORD", "\"jZLr9jhit2H\"")
                .d("USERNAME", "\"fCVvX9O\"")
            .and().insertInto("CONSUMERS", 2077L)
                .d("BALANCE_CURRENCY", "\"x0nGjvYt3JzCtQv1\"")
                .d("BALANCE_FRACTIONAL_PART", "2736")
                .d("BALANCE_INTEGER_PART", "-1707301368")
                .d("NAME", "\"vEDx6CZ0W\"")
                .d("ID", "15")
            .and().insertInto("NOTIFICATION", 2076L)
                .d("EMAIL", "NULL")
                .d("READ", "false")
                .d("TIMESTAMP", "\"1996-03-14 14:56:23\"")
                .d("CONSUMER", "5")
            .and().insertInto("PRINTSHOPS", 2079L)
                .d("ADDRESS", "\"eDokMoLuRLjRNWF9\"")
                .d("AVG_RATING", "0.8915892648031783")
                .d("BALANCE_CURRENCY", "\"7UHHjE\"")
                .d("BALANCE_FRACTIONAL_PART", "212")
                .d("BALANCE_INTEGER_PART", "572")
                .d("LATITUDE", "0.3752819852718088")
                .d("LOGO", "\"iGHfv4xVDfF\"")
                .d("LONGITUDE", "0.15975034846799807")
                .d("NAME", "\"jMDUCD0T\"")
                .d("NIF", "\"JvmychXc\"")
            .and().insertInto("PRINTSHOPS", 2086L)
                .d("ADDRESS", "\"PqH\"")
                .d("AVG_RATING", "0.17622206721549616")
                .d("BALANCE_CURRENCY", "\"LQUqzUSRrfQUU\"")
                .d("BALANCE_FRACTIONAL_PART", "514")
                .d("BALANCE_INTEGER_PART", "438")
                .d("LATITUDE", "0.7227898419270348")
                .d("LOGO", "\"n\"")
                .d("LONGITUDE", "0.21658307165200796")
                .d("NAME", "\"tKJ4IWWVZk\"")
                .d("NIF", "\"Q\"")
            .and().insertInto("PRINTSHOPS", 2085L)
                .d("ADDRESS", "\"CyCOtnWlfOabl\"")
                .d("AVG_RATING", "0.0074145149210438355")
                .d("BALANCE_CURRENCY", "\"y7u0FbGBRcsNut\"")
                .d("BALANCE_FRACTIONAL_PART", "234")
                .d("BALANCE_INTEGER_PART", "679")
                .d("LATITUDE", "0.0")
                .d("LOGO", "\"lXl6\"")
                .d("LONGITUDE", "0.37266924508144994")
                .d("NAME", "\"DE6\"")
                .d("NIF", "\"uDr87GoUD\"")
            .and().insertInto("USERS", 2084L)
                .d("PASSWORD", "\"\"")
                .d("USERNAME", "\"_EM_4182_XYZ_\"")
            .and().insertInto("CONSUMERS", 2083L)
                .d("BALANCE_CURRENCY", "\"\"")
                .d("BALANCE_FRACTIONAL_PART", "1753")
                .d("BALANCE_INTEGER_PART", "235")
                .d("NAME", "\"OtyuD_avMg7a\"")
                .d("ID", "19")
            .and().insertInto("PRINT_REQUESTS", 2080L)
                .d("ARRIVAL", "\"2081-03-22 09:19:05\"")
                .d("COST", "0.846431646771176")
                .d("DELIVERED", "NULL")
                .d("EMPATTENDED", "\"rlW\"")
                .d("EMPDELIVERED", "NULL")
                .d("FINISHED", "\"2063-04-05 04:06:25\"")
                .d("PAYPAL_SALE_ID", "\"MQlFrC\"")
                .d("PAYMENT_TYPE", "\"cHnNu9zP8k\"")
                .d("STATUS", "\"PENDING\"")
                .d("CONSUMER_ID", "NULL")
                .d("PRINTSHOP_ID", "NULL")
                .d("PRINTSHOP", "NULL")
                .d("CONSUMER", "NULL")
            .and().insertInto("PRINTSHOPS", 2094L)
                .d("ADDRESS", "\"1TS_e8PdLV_\"")
                .d("AVG_RATING", "0.09344945600101473")
                .d("BALANCE_CURRENCY", "\"s1IoP1O\"")
                .d("BALANCE_FRACTIONAL_PART", "199")
                .d("BALANCE_INTEGER_PART", "926")
                .d("LATITUDE", "-17.59893212080084")
                .d("LOGO", "\"8Dq_N2XQ4LQmpG\"")
                .d("LONGITUDE", "0.3853528562340117")
                .d("NAME", "\"Ynnyr\"")
                .d("NIF", "\"SRtU\"")
            .and().insertInto("PRINTSHOPS", 2093L)
                .d("ADDRESS", "\"O\"")
                .d("AVG_RATING", "0.5027307359361952")
                .d("BALANCE_CURRENCY", "\"P2mzkkbwRg6Udc_R\"")
                .d("BALANCE_FRACTIONAL_PART", "383")
                .d("BALANCE_INTEGER_PART", "500")
                .d("LATITUDE", "0.4764781906325")
                .d("LOGO", "\"f\"")
                .d("LONGITUDE", "0.037903378047")
                .d("NAME", "\"jJ\"")
                .d("NIF", "\"A6v2AruMVK\"")
            .and().insertInto("USERS", 2092L)
                .d("PASSWORD", "\"_EM_4183_XYZ_\"")
                .d("USERNAME", "\"kwGuuaeknDoj\"")
            .and().insertInto("CONSUMERS", 2091L)
                .d("BALANCE_CURRENCY", "\"NnPt3uV3H\"")
                .d("BALANCE_FRACTIONAL_PART", "862")
                .d("BALANCE_INTEGER_PART", "876")
                .d("NAME", "\"nD2\"")
                .d("ID", "1")
            .and().insertInto("USERS", 2090L)
                .d("PASSWORD", "\"\"")
                .d("USERNAME", "\"CPtsqQlNkyLU\"")
            .and().insertInto("CONSUMERS", 2089L)
                .d("BALANCE_CURRENCY", "\"I6WkCXy6fksEPA0\"")
                .d("BALANCE_FRACTIONAL_PART", "943")
                .d("BALANCE_INTEGER_PART", "385")
                .d("NAME", "\"IPbn_WRkgZU\"")
                .d("ID", "11")
            .and().insertInto("PRINT_REQUESTS", 2088L)
                .d("COST", "0.0")
            .and().insertInto("DOCUMENTS", 2087L)
                .d("FILE_NAME", "\"Kd2C8Yo\"")
                .d("TOTAL_PAGES", "458")
                .d("PRINT_REQUEST_ID", "NULL")
            .and().insertInto("PRINTSHOPS", 1036L)
                .d("ADDRESS", "\"6S5gcI3XL\"")
                .d("AVG_RATING", "0.04414779555376358")
                .d("BALANCE_CURRENCY", "\"Ma3\"")
                .d("BALANCE_FRACTIONAL_PART", "162")
                .d("BALANCE_INTEGER_PART", "459")
                .d("LATITUDE", "0.5046322342531715")
                .d("LOGO", "\"\"")
                .d("LONGITUDE", "-25.736854518049505")
                .d("NAME", "\"kBkR79M5Dg3Tj\"")
                .d("NIF", "\"_EM_2442_XYZ_\"")
            .and().insertInto("USERS", 1035L)
                .d("PASSWORD", "\"_EM_2443_XYZ_\"")
                .d("USERNAME", "\"q4oRBmEX\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/printshops/-15348/reviews")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (401) PUT:/printshops/{id}/pricetable/covers
    */
    @Test(timeout = 60000)
    public void test_26_putOnCoversReturns401() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1508L)
                .d("ADDRESS", "\"k3\"")
                .d("AVG_RATING", "0.13251565931965148")
                .d("BALANCE_CURRENCY", "\"OE2v\"")
                .d("BALANCE_FRACTIONAL_PART", "485")
                .d("BALANCE_INTEGER_PART", "504")
                .d("LATITUDE", "0.6428361237069148")
                .d("LOGO", "\"UjU7fAfUmU\"")
                .d("LONGITUDE", "0.3794090229199717")
                .d("NAME", "\"ZXUA08LfXAL_pD\"")
                .d("NIF", "\"ouHysknBkI1zk\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "XMLHttpRequest")
                .contentType("application/json")
                .body(" {} ")
                .put(baseUrlOfSut + "/printshops/1049204/pricetable/covers")
                .then()
                .statusCode(401)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) PUT:/printshops/{printShopId}/reviews/{reviewId}
    */
    @Test(timeout = 60000)
    public void test_27_putOnPrintshopReviewReturns404() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 2170L)
                .d("ADDRESS", "\"PFa\"")
                .d("AVG_RATING", "0.62812618106664")
                .d("BALANCE_CURRENCY", "\"5m6HHdqU\"")
                .d("BALANCE_FRACTIONAL_PART", "333")
                .d("BALANCE_INTEGER_PART", "26")
                .d("LATITUDE", "0.2322020304252015")
                .d("LOGO", "\"IygQpDFwp\"")
                .d("LONGITUDE", "0.8409656457245126")
                .d("NAME", "\"FYuxZWq3\"")
                .d("NIF", "\"\"")
            .and().insertInto("USERS", 2169L)
                .d("PASSWORD", "\"_EM_4287_XYZ_\"")
                .d("USERNAME", "\"eCY4rC3Ojiohx\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "B3a4M5C9")
                .put(baseUrlOfSut + "/printshops/2170/reviews/2167")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) PUT:/printshops/{printShopId}/reviews/{reviewId}
    */
    @Test(timeout = 60000)
    public void test_28_putOnReviewReturns404() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/printshops/-1821823939/reviews/515?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) PUT:/printshops/{printShopId}/reviews/{reviewId}
    */
    @Test(timeout = 60000)
    public void test_29_putOnPrintshopReviewWithQueryParamsReturns404() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/printshops/174/reviews/791?" + 
                    "password=mOPYFQ9T1P&" + 
                    "name=9")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) PUT:/printshops/{printShopId}/reviews/{reviewId}
    */
    @Test(timeout = 60000)
    public void test_30_putOnReviewReturns404() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1010L)
                .d("PASSWORD", "\"WaCX\"")
                .d("USERNAME", "\"FquvXTATMowhdPB\"")
            .and().insertInto("CONSUMERS", 1009L)
                .d("BALANCE_CURRENCY", "\"Oc5X\"")
                .d("BALANCE_FRACTIONAL_PART", "208")
                .d("BALANCE_INTEGER_PART", "226")
                .d("NAME", "\"Y2lsRZH1JF\"")
                .d("ID", "14")
            .and().insertInto("NOTIFICATION", 1008L)
                .d("EMAIL", "\"HiOks_c1o\"")
                .d("READ", "true")
                .d("TIMESTAMP", "\"2020-06-16 20:18:51\"")
                .d("CONSUMER", "NULL")
            .and().insertInto("PRINTSHOPS", 1017L)
                .d("ADDRESS", "\"WzB\"")
                .d("AVG_RATING", "0.828458213976422")
                .d("BALANCE_CURRENCY", "\"2wP78ktlH\"")
                .d("BALANCE_FRACTIONAL_PART", "256")
                .d("BALANCE_INTEGER_PART", "434")
                .d("LATITUDE", "0.3686655461704733")
                .d("LOGO", "\"3SkUCAHJ\"")
                .d("LONGITUDE", "0.34999644247610595")
                .d("NAME", "\"TTAcM8ews\"")
                .d("NIF", "\"EiSmF\"")
            .and().insertInto("PRINTSHOPS", 1016L)
                .d("ADDRESS", "\"pX59K\"")
                .d("AVG_RATING", "0.7202287390180013")
                .d("BALANCE_CURRENCY", "\"kMuHwp\"")
                .d("BALANCE_FRACTIONAL_PART", "956")
                .d("BALANCE_INTEGER_PART", "361")
                .d("LATITUDE", "0.6014336213387829")
                .d("LOGO", "\"\"")
                .d("LONGITUDE", "0.11748991155379107")
                .d("NAME", "\"ziFjlckAWSFf\"")
                .d("NIF", "\"0KW2\"")
            .and().insertInto("USERS", 1015L)
                .d("PASSWORD", "\"XzWLRyRtE\"")
                .d("USERNAME", "\"ih_xV\"")
            .and().insertInto("CONSUMERS", 1014L)
                .d("BALANCE_CURRENCY", "\"cmhEKzrB\"")
                .d("BALANCE_FRACTIONAL_PART", "407")
                .d("BALANCE_INTEGER_PART", "27")
                .d("NAME", "\"LB9IU\"")
                .d("ID", "6")
            .and().insertInto("PRINT_REQUESTS", 1011L)
                .d("ARRIVAL", "NULL")
                .d("COST", "0.5030404241555667")
                .d("DELIVERED", "\"2083-01-25 04:16:38\"")
                .d("EMPATTENDED", "\"Ejb8\"")
                .d("EMPDELIVERED", "NULL")
                .d("FINISHED", "\"2083-06-10 11:18:21\"")
                .d("PAYPAL_SALE_ID", "\"I4w0QBBLJro5V\"")
                .d("PAYMENT_TYPE", "NULL")
                .d("STATUS", "\"LIFTED\"")
                .d("CONSUMER_ID", "NULL")
                .d("PRINTSHOP_ID", "NULL")
                .d("PRINTSHOP", "NULL")
                .d("CONSUMER", "NULL")
            .and().insertInto("PRINTSHOPS", 631L)
                .d("ADDRESS", "\"Xgpa6yke\"")
                .d("AVG_RATING", "0.9529036704080994")
                .d("BALANCE_CURRENCY", "\"z0baM2q\"")
                .d("BALANCE_FRACTIONAL_PART", "47")
                .d("BALANCE_INTEGER_PART", "328")
                .d("LATITUDE", "0.03760031669685804")
                .d("LOGO", "\"le4SyZp1\"")
                .d("LONGITUDE", "0.1037351125058007")
                .d("NAME", "\"_EM_1757_XYZ_\"")
                .d("NIF", "\"_EM_1758_XYZ_\"")
            .and().insertInto("USERS", 636L)
                .d("PASSWORD", "\"_EM_1764_XYZ_\"")
                .d("USERNAME", "\"VJD3KV\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/printshops/278/reviews/-1432939550?username=yaV8Ui78JXOSO6yJ")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) PUT:/printshops/{printShopId}/reviews/{reviewId}
    */
    @Test(timeout = 60000)
    public void test_31_putOnPrintshopReviewWithQueryParamsEmptyPasswordReturns404() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1010L)
                .d("PASSWORD", "\"WaCX\"")
                .d("USERNAME", "\"FquvXTATMowhdPB\"")
            .and().insertInto("CONSUMERS", 1009L)
                .d("BALANCE_CURRENCY", "\"Oc5X\"")
                .d("BALANCE_FRACTIONAL_PART", "0")
                .d("BALANCE_INTEGER_PART", "0")
                .d("NAME", "\"_EM_2342_XYZ_\"")
                .d("ID", "18")
            .and().insertInto("NOTIFICATION", 1008L)
                .d("EMAIL", "\"_EM_2343_XYZ_\"")
                .d("READ", "true")
                .d("TIMESTAMP", "\"2020-06-01 20:18:51\"")
                .d("CONSUMER", "NULL")
            .and().insertInto("PRINTSHOPS", 1017L)
                .d("ADDRESS", "\"WzB\"")
                .d("AVG_RATING", "0.828458213976422")
                .d("BALANCE_CURRENCY", "\"UUU78ktlU\"")
                .d("BALANCE_FRACTIONAL_PART", "256")
                .d("BALANCE_INTEGER_PART", "434")
                .d("LATITUDE", "0.0")
                .d("LOGO", "\"3SkUCAHJ\"")
                .d("LONGITUDE", "0.34999644247610595")
                .d("NAME", "\"TTAcM8ews\"")
                .d("NIF", "\"EiSmF\"")
            .and().insertInto("PRINTSHOPS", 1016L)
                .d("ADDRESS", "\"_EM_2344_XYZ_\"")
                .d("AVG_RATING", "0.7202287390180013")
                .d("BALANCE_CURRENCY", "\"kMuHwp\"")
                .d("BALANCE_FRACTIONAL_PART", "956")
                .d("BALANCE_INTEGER_PART", "0")
                .d("LATITUDE", "0.0")
                .d("LOGO", "\"\"")
                .d("LONGITUDE", "0.11748991155379107")
                .d("NAME", "\"ziFjlckAWSFf\"")
                .d("NIF", "\"0KW2\"")
            .and().insertInto("USERS", 1015L)
                .d("PASSWORD", "\"XzWLRyRtE\"")
                .d("USERNAME", "\"ih`xV\"")
            .and().insertInto("CONSUMERS", 1014L)
                .d("BALANCE_CURRENCY", "\"_EM_2345_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "407")
                .d("BALANCE_INTEGER_PART", "-131045")
                .d("NAME", "\"LB9IU\"")
                .d("ID", "6")
            .and().insertInto("PRINT_REQUESTS", 1011L)
                .d("ARRIVAL", "NULL")
                .d("COST", "0.5030404241555667")
                .d("DELIVERED", "\"2083-01-25 00:08:59\"")
                .d("EMPATTENDED", "\"Ejb8\"")
                .d("EMPDELIVERED", "NULL")
                .d("FINISHED", "\"2083-06-10 11:18:21\"")
                .d("PAYPAL_SALE_ID", "\"K4w0UBBLJro5V\"")
                .d("PAYMENT_TYPE", "NULL")
                .d("STATUS", "\"NOT_PAYED\"")
                .d("CONSUMER_ID", "NULL")
                .d("PRINTSHOP_ID", "NULL")
                .d("PRINTSHOP", "8")
                .d("CONSUMER", "NULL")
            .and().insertInto("PRINTSHOPS", 631L)
                .d("ADDRESS", "\"Xgpa6yke\"")
                .d("AVG_RATING", "0.9529036704080994")
                .d("BALANCE_CURRENCY", "\"z0baM2q\"")
                .d("BALANCE_FRACTIONAL_PART", "47")
                .d("BALANCE_INTEGER_PART", "328")
                .d("LATITUDE", "0.03760031669685804")
                .d("LOGO", "\"_EM_2346_XYZ_\"")
                .d("LONGITUDE", "0.1037351125058007")
                .d("NAME", "\"_EM_1757_XYZ_\"")
                .d("NIF", "\"_EM_1758_XYZ_\"")
            .and().insertInto("USERS", 636L)
                .d("PASSWORD", "\"494327\"")
                .d("USERNAME", "\"VJD3KV\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "MDV2YCbm1ktnV")
                .contentType("application/json")
                .body(" { " + 
                    " \"username\": \"_EM_2341_XYZ_\", " + 
                    " \"roles\": [] " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/278/reviews/-1432939550?" + 
                    "password=&" + 
                    "email=ptry3yorHQw&" + 
                    "username=yaV8Ui78JXOSO6yJ&" + 
                    "longitude=%5B5da")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }


}
