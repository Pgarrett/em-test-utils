/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-08-17T19:56:45.591-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 120 tests
 * <br>
*  Covered targets: 1867
 * <br>
*  Used time: 0h 21m 27s
 * <br>
*  Needed budget for current results: 98%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static final SutHandler controller = new em.embedded.io.github.proxyprint.kitchen.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (200) GET:/
    */
    @Test(timeout = 60000)
    public void test_0_getOnRootReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"message\":\"Olá Mundo!\"}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/
    */
    @Test(timeout = 60000)
    public void test_1_getOnRootReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/?EMextraParam123=_EM_36_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"message\":\"Olá Mundo!\"}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/
    */
    @Test(timeout = 60000)
    public void test_2_getOnRootReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"message\":\"Olá Mundo!\"}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/
    */
    @Test(timeout = 60000)
    public void test_3_getOnRootReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "_EM_529_XYZ_")
                .get(baseUrlOfSut + "/")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"message\":\"Olá Mundo!\"}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/
    */
    @Test(timeout = 60000)
    public void test_4_getOnRootReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"message\":\"Olá Mundo!\"}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshop
    */
    @Test(timeout = 60000)
    public void test_5_getOnPrintshopReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "_EM_526_XYZ_")
                .get(baseUrlOfSut + "/printshop")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"printshop\":{\"id\":8,\"name\":\"Video Norte\",\"address\":\"Rua Nova de Santa Cruz\",\"latitude\":41.5594,\"longitude\":-8.3972,\"nif\":\"123444378\",\"logo\":\"logo_8\",\"avgRating\":4.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},\"success\":true}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops
    */
    @Test(timeout = 60000)
    public void test_6_getOnPrintshopsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_202_XYZ_")
                .get(baseUrlOfSut + "/printshops?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("[{\"id\":1,\"name\":\"Copy Scan\",\"address\":\"Rua Quinta dos Órfãos 16 S. Vitor (Junto à Universidade do Minho), Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_1\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":2,\"name\":\"Flash Vidius - Gomes \\u0026 Santana, Lda.\",\"address\":\"R. Manuel Silva, 20 - R/C. C.P. 4490000, Povoa de Varzim, Porto\",\"latitude\":41.379392,\"longitude\":-8.761458,\"nif\":\"199111333\",\"logo\":\"logo_3\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":3,\"name\":\"CopyGraphe\",\"address\":\"R. Ramalho Ortigão C Com Pescador - lj 12. C.P. 4490678, Povoa de Varzim, Porto\",\"latitude\":41.383314,\"longitude\":-8.761942,\"nif\":\"123098333\",\"logo\":\"logo_4\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":4,\"name\":\"Nelson Costa Santos\",\"address\":\"Tv. Senra, 22 - Póvoa de Varzim. C.P. 4490000, Povoa de Varzim, Porto.\",\"latitude\":41.38207,\"longitude\":-8.763069,\"nif\":\"153655378\",\"logo\":\"logo_5\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":5,\"name\":\"Gráfica Editora Poveira, Lda.\",\"address\":\"R. Manuel Silva, 18. C.P. 4490657, Povoa de Varzim, Porto.\",\"latitude\":41.379605,\"longitude\":-8.761047,\"nif\":\"133555378\",\"logo\":\"logo_6\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":6,\"name\":\"Staples Vila do Conde\",\"address\":\"Avenida General Humberto Delgado 2, Vila do Conde\",\"latitude\":41.370674,\"longitude\":-8.744176,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":7,\"name\":\"Staples Vila da Maia\",\"address\":\"Rua Comendador Valentim dos Santos Dinis 570, Maia\",\"latitude\":41.246159,\"longitude\":-8.625225,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":8,\"name\":\"Video Norte\",\"address\":\"Rua Nova de Santa Cruz\",\"latitude\":41.5594,\"longitude\":-8.3972,\"nif\":\"123444378\",\"logo\":\"logo_8\",\"avgRating\":4.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":9,\"name\":\"SmartPrint\",\"address\":\"Rua dos Peões, Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_2\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}}]"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops
    */
    @Test(timeout = 60000)
    public void test_7_getOnPrintshopsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("[{\"id\":1,\"name\":\"Copy Scan\",\"address\":\"Rua Quinta dos Órfãos 16 S. Vitor (Junto à Universidade do Minho), Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_1\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":2,\"name\":\"Flash Vidius - Gomes \\u0026 Santana, Lda.\",\"address\":\"R. Manuel Silva, 20 - R/C. C.P. 4490000, Povoa de Varzim, Porto\",\"latitude\":41.379392,\"longitude\":-8.761458,\"nif\":\"199111333\",\"logo\":\"logo_3\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":3,\"name\":\"CopyGraphe\",\"address\":\"R. Ramalho Ortigão C Com Pescador - lj 12. C.P. 4490678, Povoa de Varzim, Porto\",\"latitude\":41.383314,\"longitude\":-8.761942,\"nif\":\"123098333\",\"logo\":\"logo_4\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":4,\"name\":\"Nelson Costa Santos\",\"address\":\"Tv. Senra, 22 - Póvoa de Varzim. C.P. 4490000, Povoa de Varzim, Porto.\",\"latitude\":41.38207,\"longitude\":-8.763069,\"nif\":\"153655378\",\"logo\":\"logo_5\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":5,\"name\":\"Gráfica Editora Poveira, Lda.\",\"address\":\"R. Manuel Silva, 18. C.P. 4490657, Povoa de Varzim, Porto.\",\"latitude\":41.379605,\"longitude\":-8.761047,\"nif\":\"133555378\",\"logo\":\"logo_6\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":6,\"name\":\"Staples Vila do Conde\",\"address\":\"Avenida General Humberto Delgado 2, Vila do Conde\",\"latitude\":41.370674,\"longitude\":-8.744176,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":7,\"name\":\"Staples Vila da Maia\",\"address\":\"Rua Comendador Valentim dos Santos Dinis 570, Maia\",\"latitude\":41.246159,\"longitude\":-8.625225,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":8,\"name\":\"Video Norte\",\"address\":\"Rua Nova de Santa Cruz\",\"latitude\":41.5594,\"longitude\":-8.3972,\"nif\":\"123444378\",\"logo\":\"logo_8\",\"avgRating\":4.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":9,\"name\":\"SmartPrint\",\"address\":\"Rua dos Peões, Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_2\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}}]"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops
    */
    @Test(timeout = 60000)
    public void test_8_getOnPrintshopsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/printshops")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("[{\"id\":1,\"name\":\"Copy Scan\",\"address\":\"Rua Quinta dos Órfãos 16 S. Vitor (Junto à Universidade do Minho), Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_1\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":2,\"name\":\"Flash Vidius - Gomes \\u0026 Santana, Lda.\",\"address\":\"R. Manuel Silva, 20 - R/C. C.P. 4490000, Povoa de Varzim, Porto\",\"latitude\":41.379392,\"longitude\":-8.761458,\"nif\":\"199111333\",\"logo\":\"logo_3\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":3,\"name\":\"CopyGraphe\",\"address\":\"R. Ramalho Ortigão C Com Pescador - lj 12. C.P. 4490678, Povoa de Varzim, Porto\",\"latitude\":41.383314,\"longitude\":-8.761942,\"nif\":\"123098333\",\"logo\":\"logo_4\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":4,\"name\":\"Nelson Costa Santos\",\"address\":\"Tv. Senra, 22 - Póvoa de Varzim. C.P. 4490000, Povoa de Varzim, Porto.\",\"latitude\":41.38207,\"longitude\":-8.763069,\"nif\":\"153655378\",\"logo\":\"logo_5\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":5,\"name\":\"Gráfica Editora Poveira, Lda.\",\"address\":\"R. Manuel Silva, 18. C.P. 4490657, Povoa de Varzim, Porto.\",\"latitude\":41.379605,\"longitude\":-8.761047,\"nif\":\"133555378\",\"logo\":\"logo_6\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":6,\"name\":\"Staples Vila do Conde\",\"address\":\"Avenida General Humberto Delgado 2, Vila do Conde\",\"latitude\":41.370674,\"longitude\":-8.744176,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":7,\"name\":\"Staples Vila da Maia\",\"address\":\"Rua Comendador Valentim dos Santos Dinis 570, Maia\",\"latitude\":41.246159,\"longitude\":-8.625225,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":8,\"name\":\"Video Norte\",\"address\":\"Rua Nova de Santa Cruz\",\"latitude\":41.5594,\"longitude\":-8.3972,\"nif\":\"123444378\",\"logo\":\"logo_8\",\"avgRating\":4.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":9,\"name\":\"SmartPrint\",\"address\":\"Rua dos Peões, Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_2\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}}]"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops
    */
    @Test(timeout = 60000)
    public void test_9_getOnPrintshopsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "_EM_528_XYZ_")
                .get(baseUrlOfSut + "/printshops")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("[{\"id\":1,\"name\":\"Copy Scan\",\"address\":\"Rua Quinta dos Órfãos 16 S. Vitor (Junto à Universidade do Minho), Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_1\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":2,\"name\":\"Flash Vidius - Gomes \\u0026 Santana, Lda.\",\"address\":\"R. Manuel Silva, 20 - R/C. C.P. 4490000, Povoa de Varzim, Porto\",\"latitude\":41.379392,\"longitude\":-8.761458,\"nif\":\"199111333\",\"logo\":\"logo_3\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":3,\"name\":\"CopyGraphe\",\"address\":\"R. Ramalho Ortigão C Com Pescador - lj 12. C.P. 4490678, Povoa de Varzim, Porto\",\"latitude\":41.383314,\"longitude\":-8.761942,\"nif\":\"123098333\",\"logo\":\"logo_4\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":4,\"name\":\"Nelson Costa Santos\",\"address\":\"Tv. Senra, 22 - Póvoa de Varzim. C.P. 4490000, Povoa de Varzim, Porto.\",\"latitude\":41.38207,\"longitude\":-8.763069,\"nif\":\"153655378\",\"logo\":\"logo_5\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":5,\"name\":\"Gráfica Editora Poveira, Lda.\",\"address\":\"R. Manuel Silva, 18. C.P. 4490657, Povoa de Varzim, Porto.\",\"latitude\":41.379605,\"longitude\":-8.761047,\"nif\":\"133555378\",\"logo\":\"logo_6\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":6,\"name\":\"Staples Vila do Conde\",\"address\":\"Avenida General Humberto Delgado 2, Vila do Conde\",\"latitude\":41.370674,\"longitude\":-8.744176,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":7,\"name\":\"Staples Vila da Maia\",\"address\":\"Rua Comendador Valentim dos Santos Dinis 570, Maia\",\"latitude\":41.246159,\"longitude\":-8.625225,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":8,\"name\":\"Video Norte\",\"address\":\"Rua Nova de Santa Cruz\",\"latitude\":41.5594,\"longitude\":-8.3972,\"nif\":\"123444378\",\"logo\":\"logo_8\",\"avgRating\":4.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":9,\"name\":\"SmartPrint\",\"address\":\"Rua dos Peões, Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_2\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}}]"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops
    */
    @Test(timeout = 60000)
    public void test_10_getOnPrintshopsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "_EM_692_XYZ_")
                .get(baseUrlOfSut + "/printshops")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("[{\"id\":1,\"name\":\"Copy Scan\",\"address\":\"Rua Quinta dos Órfãos 16 S. Vitor (Junto à Universidade do Minho), Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_1\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":2,\"name\":\"Flash Vidius - Gomes \\u0026 Santana, Lda.\",\"address\":\"R. Manuel Silva, 20 - R/C. C.P. 4490000, Povoa de Varzim, Porto\",\"latitude\":41.379392,\"longitude\":-8.761458,\"nif\":\"199111333\",\"logo\":\"logo_3\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":3,\"name\":\"CopyGraphe\",\"address\":\"R. Ramalho Ortigão C Com Pescador - lj 12. C.P. 4490678, Povoa de Varzim, Porto\",\"latitude\":41.383314,\"longitude\":-8.761942,\"nif\":\"123098333\",\"logo\":\"logo_4\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":4,\"name\":\"Nelson Costa Santos\",\"address\":\"Tv. Senra, 22 - Póvoa de Varzim. C.P. 4490000, Povoa de Varzim, Porto.\",\"latitude\":41.38207,\"longitude\":-8.763069,\"nif\":\"153655378\",\"logo\":\"logo_5\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":5,\"name\":\"Gráfica Editora Poveira, Lda.\",\"address\":\"R. Manuel Silva, 18. C.P. 4490657, Povoa de Varzim, Porto.\",\"latitude\":41.379605,\"longitude\":-8.761047,\"nif\":\"133555378\",\"logo\":\"logo_6\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":6,\"name\":\"Staples Vila do Conde\",\"address\":\"Avenida General Humberto Delgado 2, Vila do Conde\",\"latitude\":41.370674,\"longitude\":-8.744176,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":7,\"name\":\"Staples Vila da Maia\",\"address\":\"Rua Comendador Valentim dos Santos Dinis 570, Maia\",\"latitude\":41.246159,\"longitude\":-8.625225,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":8,\"name\":\"Video Norte\",\"address\":\"Rua Nova de Santa Cruz\",\"latitude\":41.5594,\"longitude\":-8.3972,\"nif\":\"123444378\",\"logo\":\"logo_8\",\"avgRating\":4.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},{\"id\":9,\"name\":\"SmartPrint\",\"address\":\"Rua dos Peões, Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_2\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}}]"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/login
    */
    @Test(timeout = 60000)
    public void test_11_postOnLoginReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/login?EMextraParam123=_EM_250_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/login
    */
    @Test(timeout = 60000)
    public void test_12_postOnLoginReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/login?username=jROQgBLqgHF")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/login
    */
    @Test(timeout = 60000)
    public void test_13_postOnLoginReturns200() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/login")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/login
    */
    @Test(timeout = 60000)
    public void test_14_postOnLoginReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "_EM_413_XYZ_")
                .post(baseUrlOfSut + "/login?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/login
    */
    @Test(timeout = 60000)
    public void test_15_postOnLoginReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/login?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/login
    */
    @Test(timeout = 60000)
    public void test_16_postOnLoginReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/login?password=9J6zlDac")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (204) OPTIONS:/*
    */
    @Test(timeout = 60000)
    public void test_17_optionsOn_Returns204() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .options(baseUrlOfSut + "/*")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (204) OPTIONS:/*
    */
    @Test(timeout = 60000)
    public void test_18_optionsOn_Returns204() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .options(baseUrlOfSut + "/*")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (204) OPTIONS:/*
    */
    @Test(timeout = 60000)
    public void test_19_optionsOn_Returns204() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .options(baseUrlOfSut + "/*?EMextraParam123=42")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (204) OPTIONS:/*
    */
    @Test(timeout = 60000)
    public void test_20_optionsOn_Returns204() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .options(baseUrlOfSut + "/*?EMextraParam123=42")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (204) OPTIONS:/*
    */
    @Test(timeout = 60000)
    public void test_21_optionsOn_Returns204() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "_EM_688_XYZ_")
                .options(baseUrlOfSut + "/*?EMextraParam123=42")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/requests
    */
    @Test(timeout = 60000)
    public void test_22_getOnPrintshopsRequestsWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/requests?EMextraParam123=_EM_684_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"printrequest\":[],\"success\":true}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/admin/printshops
    */
    @Test(timeout = 60000)
    public void test_23_getOnAdminPrintshopsWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/admin/printshops?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"prinshops\":\"[{\\\"id\\\":1,\\\"name\\\":\\\"Copy Scan\\\",\\\"address\\\":\\\"Rua Quinta dos Órfãos 16 S. Vitor (Junto à Universidade do Minho), Braga\\\",\\\"latitude\\\":41.557973,\\\"longitude\\\":-8.398398,\\\"nif\\\":\\\"123555378\\\",\\\"logo\\\":\\\"logo_1\\\",\\\"avgRating\\\":0.0,\\\"balance\\\":{\\\"currency\\\":\\\"EUR\\\",\\\"integerPart\\\":0,\\\"fractionalPart\\\":0}},{\\\"id\\\":2,\\\"name\\\":\\\"Flash Vidius - Gomes \\\\u0026 Santana, Lda.\\\",\\\"address\\\":\\\"R. Manuel Silva, 20 - R/C. C.P. 4490000, Povoa de Varzim, Porto\\\",\\\"latitude\\\":41.379392,\\\"longitude\\\":-8.761458,\\\"nif\\\":\\\"199111333\\\",\\\"logo\\\":\\\"logo_3\\\",\\\"avgRating\\\":0.0,\\\"balance\\\":{\\\"currency\\\":\\\"EUR\\\",\\\"integerPart\\\":0,\\\"fractionalPart\\\":0}},{\\\"id\\\":3,\\\"name\\\":\\\"CopyGraphe\\\",\\\"address\\\":\\\"R. Ramalho Ortigão C Com Pescador - lj 12. C.P. 4490678, Povoa de Varzim, Porto\\\",\\\"latitude\\\":41.383314,\\\"longitude\\\":-8.761942,\\\"nif\\\":\\\"123098333\\\",\\\"logo\\\":\\\"logo_4\\\",\\\"avgRating\\\":0.0,\\\"balance\\\":{\\\"currency\\\":\\\"EUR\\\",\\\"integerPart\\\":0,\\\"fractionalPart\\\":0}},{\\\"id\\\":4,\\\"name\\\":\\\"Nelson Costa Santos\\\",\\\"address\\\":\\\"Tv. Senra, 22 - Póvoa de Varzim. C.P. 4490000, Povoa de Varzim, Porto.\\\",\\\"latitude\\\":41.38207,\\\"longitude\\\":-8.763069,\\\"nif\\\":\\\"153655378\\\",\\\"logo\\\":\\\"logo_5\\\",\\\"avgRating\\\":0.0,\\\"balance\\\":{\\\"currency\\\":\\\"EUR\\\",\\\"integerPart\\\":0,\\\"fractionalPart\\\":0}},{\\\"id\\\":5,\\\"name\\\":\\\"Gráfica Editora Poveira, Lda.\\\",\\\"address\\\":\\\"R. Manuel Silva, 18. C.P. 4490657, Povoa de Varzim, Porto.\\\",\\\"latitude\\\":41.379605,\\\"longitude\\\":-8.761047,\\\"nif\\\":\\\"133555378\\\",\\\"logo\\\":\\\"logo_6\\\",\\\"avgRating\\\":0.0,\\\"balance\\\":{\\\"currency\\\":\\\"EUR\\\",\\\"integerPart\\\":0,\\\"fractionalPart\\\":0}},{\\\"id\\\":6,\\\"name\\\":\\\"Staples Vila do Conde\\\",\\\"address\\\":\\\"Avenida General Humberto Delgado 2, Vila do Conde\\\",\\\"latitude\\\":41.370674,\\\"longitude\\\":-8.744176,\\\"nif\\\":\\\"133555378\\\",\\\"logo\\\":\\\"logo_7\\\",\\\"avgRating\\\":0.0,\\\"balance\\\":{\\\"currency\\\":\\\"EUR\\\",\\\"integerPart\\\":0,\\\"fractionalPart\\\":0}},{\\\"id\\\":7,\\\"name\\\":\\\"Staples Vila da Maia\\\",\\\"address\\\":\\\"Rua Comendador Valentim dos Santos Dinis 570, Maia\\\",\\\"latitude\\\":41.246159,\\\"longitude\\\":-8.625225,\\\"nif\\\":\\\"133555378\\\",\\\"logo\\\":\\\"logo_7\\\",\\\"avgRating\\\":0.0,\\\"balance\\\":{\\\"currency\\\":\\\"EUR\\\",\\\"integerPart\\\":0,\\\"fractionalPart\\\":0}},{\\\"id\\\":8,\\\"name\\\":\\\"Video Norte\\\",\\\"address\\\":\\\"Rua Nova de Santa Cruz\\\",\\\"latitude\\\":41.5594,\\\"longitude\\\":-8.3972,\\\"nif\\\":\\\"123444378\\\",\\\"logo\\\":\\\"logo_8\\\",\\\"avgRating\\\":4.0,\\\"balance\\\":{\\\"currency\\\":\\\"EUR\\\",\\\"integerPart\\\":0,\\\"fractionalPart\\\":0}},{\\\"id\\\":9,\\\"name\\\":\\\"SmartPrint\\\",\\\"address\\\":\\\"Rua dos Peões, Braga\\\",\\\"latitude\\\":41.557973,\\\"longitude\\\":-8.398398,\\\"nif\\\":\\\"123555378\\\",\\\"logo\\\":\\\"logo_2\\\",\\\"avgRating\\\":0.0,\\\"balance\\\":{\\\"currency\\\":\\\"EUR\\\",\\\"integerPart\\\":0,\\\"fractionalPart\\\":0}}]\",\"success\":true}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/secured
    */
    @Test(timeout = 60000)
    public void test_24_getOnSecuredReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "_EM_341_XYZ_")
                .get(baseUrlOfSut + "/api/secured?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"message\":\"Se estiveres autenticado, podes ver isto!\"}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/consumer/balance
    */
    @Test(timeout = 60000)
    public void test_25_getOnBalanceReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/balance")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"success\":true}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/consumer/info
    */
    @Test(timeout = 60000)
    public void test_26_getOnInfoReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/consumer/info")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"consumer\":{\"name\":\"João dos Santos\",\"email\":\"proxyprint.pt.consumer@gmail.com\",\"latitude\":\"69\",\"longitude\":\"69\",\"printingSchemas\":[{\"id\":2,\"name\":\"A4+2LAD+CORES+Encaderna\",\"paperSpecs\":\"PAPER,COLOR,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_OPAQUE,A3\",\"deleted\":false},{\"id\":5,\"name\":\"A4+SIMPLEX+COLOR\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":3,\"name\":\"A4+SIMPLEX+PW+Encadernar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_TRANSPARENT,A4\",\"deleted\":false},{\"id\":4,\"name\":\"A4+2LAD+PB\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":1,\"name\":\"A4+2LAD+PB+Agrafar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,STAPLING,0,0\",\"coverSpecs\":\"\",\"deleted\":false}],\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"id\":2,\"username\":\"joao\",\"password\":\"1234\",\"roles\":[\"ROLE_USER\"]},\"success\":true}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/consumer/requests
    */
    @Test(timeout = 60000)
    public void test_27_getOnConsumerRequestsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/consumer/requests")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"printrequests\":[{\"id\":2,\"cost\":1.4,\"arrivalTimestamp\":\"Aug 17, 2025 7:50:21 PM\",\"status\":\"PENDING\",\"consumer\":{\"name\":\"João dos Santos\",\"email\":\"proxyprint.pt.consumer@gmail.com\",\"latitude\":\"69\",\"longitude\":\"69\",\"printingSchemas\":[{\"id\":2,\"name\":\"A4+2LAD+CORES+Encaderna\",\"paperSpecs\":\"PAPER,COLOR,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_OPAQUE,A3\",\"deleted\":false},{\"id\":5,\"name\":\"A4+SIMPLEX+COLOR\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":3,\"name\":\"A4+SIMPLEX+PW+Encadernar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_TRANSPARENT,A4\",\"deleted\":false},{\"id\":4,\"name\":\"A4+2LAD+PB\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":1,\"name\":\"A4+2LAD+PB+Agrafar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,STAPLING,0,0\",\"coverSpecs\":\"\",\"deleted\":false}],\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"id\":2,\"username\":\"joao\",\"password\":\"1234\",\"roles\":[\"ROLE_USER\"]},\"documents\":[],\"paymentType\":\"PROXYPRINT_PAYMENT\"},{\"id\":3,\"cost\":1.2,\"arrivalTimestamp\":\"Aug 17, 2025 7:50:21 PM\",\"status\":\"PENDING\",\"consumer\":{\"name\":\"João dos Santos\",\"email\":\"proxyprint.pt.consumer@gmail.com\",\"latitude\":\"69\",\"longitude\":\"69\",\"printingSchemas\":[{\"id\":2,\"name\":\"A4+2LAD+CORES+Encaderna\",\"paperSpecs\":\"PAPER,COLOR,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_OPAQUE,A3\",\"deleted\":false},{\"id\":5,\"name\":\"A4+SIMPLEX+COLOR\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":3,\"name\":\"A4+SIMPLEX+PW+Encadernar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_TRANSPARENT,A4\",\"deleted\":false},{\"id\":4,\"name\":\"A4+2LAD+PB\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":1,\"name\":\"A4+2LAD+PB+Agrafar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,STAPLING,0,0\",\"coverSpecs\":\"\",\"deleted\":false}],\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"id\":2,\"username\":\"joao\",\"password\":\"1234\",\"roles\":[\"ROLE_USER\"]},\"documents\":[],\"paymentType\":\"PROXYPRINT_PAYMENT\"},{\"id\":4,\"cost\":2.5,\"arrivalTimestamp\":\"Aug 17, 2025 7:50:21 PM\",\"status\":\"PENDING\",\"consumer\":{\"name\":\"João dos Santos\",\"email\":\"proxyprint.pt.consumer@gmail.com\",\"latitude\":\"69\",\"longitude\":\"69\",\"printingSchemas\":[{\"id\":2,\"name\":\"A4+2LAD+CORES+Encaderna\",\"paperSpecs\":\"PAPER,COLOR,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_OPAQUE,A3\",\"deleted\":false},{\"id\":5,\"name\":\"A4+SIMPLEX+COLOR\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":3,\"name\":\"A4+SIMPLEX+PW+Encadernar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_TRANSPARENT,A4\",\"deleted\":false},{\"id\":4,\"name\":\"A4+2LAD+PB\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":1,\"name\":\"A4+2LAD+PB+Agrafar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,STAPLING,0,0\",\"coverSpecs\":\"\",\"deleted\":false}],\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"id\":2,\"username\":\"joao\",\"password\":\"1234\",\"roles\":[\"ROLE_USER\"]},\"documents\":[],\"paymentType\":\"PROXYPRINT_PAYMENT\"},{\"id\":11,\"cost\":1.2,\"arrivalTimestamp\":\"Aug 17, 2025 7:50:21 PM\",\"status\":\"PENDING\",\"consumer\":{\"name\":\"João dos Santos\",\"email\":\"proxyprint.pt.consumer@gmail.com\",\"latitude\":\"69\",\"longitude\":\"69\",\"printingSchemas\":[{\"id\":2,\"name\":\"A4+2LAD+CORES+Encaderna\",\"paperSpecs\":\"PAPER,COLOR,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_OPAQUE,A3\",\"deleted\":false},{\"id\":5,\"name\":\"A4+SIMPLEX+COLOR\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":3,\"name\":\"A4+SIMPLEX+PW+Encadernar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_TRANSPARENT,A4\",\"deleted\":false},{\"id\":4,\"name\":\"A4+2LAD+PB\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":1,\"name\":\"A4+2LAD+PB+Agrafar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,STAPLING,0,0\",\"coverSpecs\":\"\",\"deleted\":false}],\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"id\":2,\"username\":\"joao\",\"password\":\"1234\",\"roles\":[\"ROLE_USER\"]},\"documents\":[],\"paymentType\":\"PROXYPRINT_PAYMENT\"},{\"id\":15,\"cost\":1.4,\"arrivalTimestamp\":\"Aug 17, 2025 7:50:21 PM\",\"status\":\"PENDING\",\"consumer\":{\"name\":\"João dos Santos\",\"email\":\"proxyprint.pt.consumer@gmail.com\",\"latitude\":\"69\",\"longitude\":\"69\",\"printingSchemas\":[{\"id\":2,\"name\":\"A4+2LAD+CORES+Encaderna\",\"paperSpecs\":\"PAPER,COLOR,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_OPAQUE,A3\",\"deleted\":false},{\"id\":5,\"name\":\"A4+SIMPLEX+COLOR\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":3,\"name\":\"A4+SIMPLEX+PW+Encadernar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_TRANSPARENT,A4\",\"deleted\":false},{\"id\":4,\"name\":\"A4+2LAD+PB\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":1,\"name\":\"A4+2LAD+PB+Agrafar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,STAPLING,0,0\",\"coverSpecs\":\"\",\"deleted\":false}],\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"id\":2,\"username\":\"joao\",\"password\":\"1234\",\"roles\":[\"ROLE_USER\"]},\"documents\":[],\"paymentType\":\"PROXYPRINT_PAYMENT\"},{\"id\":17,\"cost\":2.5,\"arrivalTimestamp\":\"Aug 17, 2025 7:50:21 PM\",\"status\":\"PENDING\",\"consumer\":{\"name\":\"João dos Santos\",\"email\":\"proxyprint.pt.consumer@gmail.com\",\"latitude\":\"69\",\"longitude\":\"69\",\"printingSchemas\":[{\"id\":2,\"name\":\"A4+2LAD+CORES+Encaderna\",\"paperSpecs\":\"PAPER,COLOR,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_OPAQUE,A3\",\"deleted\":false},{\"id\":5,\"name\":\"A4+SIMPLEX+COLOR\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":3,\"name\":\"A4+SIMPLEX+PW+Encadernar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_TRANSPARENT,A4\",\"deleted\":false},{\"id\":4,\"name\":\"A4+2LAD+PB\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":1,\"name\":\"A4+2LAD+PB+Agrafar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,STAPLING,0,0\",\"coverSpecs\":\"\",\"deleted\":false}],\"balance\":{\"currency\":\"EUR\",\"integerPart\":1342,\"fractionalPart\":22},\"id\":2,\"username\":\"joao\",\"password\":\"1234\",\"roles\":[\"ROLE_USER\"]},\"documents\":[],\"paymentType\":\"PROXYPRINT_PAYMENT\"}],\"success\":true}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printdocument/{id}
    */
    @Test(timeout = 60000)
    public void test_28_getOnPrintdocuReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_191_XYZ_")
                .get(baseUrlOfSut + "/printdocument/70")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printdocument/{id}
    */
    @Test(timeout = 60000)
    public void test_29_getOnPrintdocuReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_24_XYZ_")
                .get(baseUrlOfSut + "/printdocument/151?EMextraParam123=_EM_23_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/history
    */
    @Test(timeout = 60000)
    public void test_30_getOnHistoryReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/printshops/history?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"historyrequests\":[],\"success\":true}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/nearest
    */
    @Test(timeout = 60000)
    public void test_31_getOnNearestReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/printshops/nearest?EMextraParam123=_EM_354_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/nearest
    */
    @Test(timeout = 60000)
    public void test_32_getOnPrintshopsNearestWithQueryParamsReturnsContentUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 330L)
                .d("ADDRESS", "\"_EM_1115_XYZ_\"")
                .d("AVG_RATING", "0.46891790112361753")
                .d("BALANCE_CURRENCY", "\"_EM_1116_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "122")
                .d("BALANCE_INTEGER_PART", "461")
                .d("LATITUDE", "0.42260737773829593")
                .d("LOGO", "\"_EM_1117_XYZ_\"")
                .d("LONGITUDE", "0.18797749381949125")
                .d("NAME", "\"yn3\"")
                .d("NIF", "\"6\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/nearest?" + 
                    "latitude=0.42260737773829593&" + 
                    "longitude=0.18797749381949125")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":true,\"printshops\":{\"0.0\":{\"id\":10,\"name\":\"yn3\",\"address\":\"_EM_1115_XYZ_\",\"latitude\":0.42260737773829593,\"longitude\":0.18797749381949125,\"nif\":\"6\",\"logo\":\"_EM_1117_XYZ_\",\"avgRating\":0.4689179,\"balance\":{\"currency\":\"_EM_1116_XYZ_\",\"integerPart\":461,\"fractionalPart\":122}},\"4625.218238094285\":{\"id\":7,\"name\":\"Staples Vila da Maia\",\"address\":\"Rua Comendador Valentim dos Santos Dinis 570, Maia\",\"latitude\":41.246159,\"longitude\":-8.625225,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},\"4640.990965300407\":{\"id\":6,\"name\":\"Staples Vila do Conde\",\"address\":\"Avenida General Humberto Delgado 2, Vila do Conde\",\"latitude\":41.370674,\"longitude\":-8.744176,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},\"4642.270180633609\":{\"id\":2,\"name\":\"Flash Vidius - Gomes \\u0026 Santana, Lda.\",\"address\":\"R. Manuel Silva, 20 - R/C. C.P. 4490000, Povoa de Varzim, Porto\",\"latitude\":41.379392,\"longitude\":-8.761458,\"nif\":\"199111333\",\"logo\":\"logo_3\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},\"4642.28519912338\":{\"id\":5,\"name\":\"Gráfica Editora Poveira, Lda.\",\"address\":\"R. Manuel Silva, 18. C.P. 4490657, Povoa de Varzim, Porto.\",\"latitude\":41.379605,\"longitude\":-8.761047,\"nif\":\"133555378\",\"logo\":\"logo_6\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},\"4642.5911224229085\":{\"id\":4,\"name\":\"Nelson Costa Santos\",\"address\":\"Tv. Senra, 22 - Póvoa de Varzim. C.P. 4490000, Povoa de Varzim, Porto.\",\"latitude\":41.38207,\"longitude\":-8.763069,\"nif\":\"153655378\",\"logo\":\"logo_5\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},\"4642.70365412224\":{\"id\":3,\"name\":\"CopyGraphe\",\"address\":\"R. Ramalho Ortigão C Com Pescador - lj 12. C.P. 4490678, Povoa de Varzim, Porto\",\"latitude\":41.383314,\"longitude\":-8.761942,\"nif\":\"123098333\",\"logo\":\"logo_4\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},\"4654.683871113053\":{\"id\":9,\"name\":\"SmartPrint\",\"address\":\"Rua dos Peões, Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_2\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}},\"4654.816225158626\":{\"id\":8,\"name\":\"Video Norte\",\"address\":\"Rua Nova de Santa Cruz\",\"latitude\":41.5594,\"longitude\":-8.3972,\"nif\":\"123444378\",\"logo\":\"logo_8\",\"avgRating\":4.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}}}}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/nearest
    */
    @Test(timeout = 60000)
    public void test_33_getOnPrintshopsNearestWithQueryParamReturnsContentUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1888L)
                .d("ADDRESS", "\"iVU2A\"")
                .d("AVG_RATING", "0.7751743218506411")
                .d("BALANCE_CURRENCY", "\"ABRt\"")
                .d("BALANCE_FRACTIONAL_PART", "393")
                .d("BALANCE_INTEGER_PART", "114")
                .d("LATITUDE", "0.013203211894645572")
                .d("LOGO", "\"C7I\"")
                .d("LONGITUDE", "0.8123014637275259")
                .d("NAME", "\"u2y96yvfk3kr0U\"")
                .d("NIF", "\"JsrpcAXt\"")
            .and().insertInto("USERS", 1893L)
                .d("PASSWORD", "\"Bu7N\"")
                .d("USERNAME", "\"_EM_4054_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/nearest?latitude=_EM_4053_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/nearest
    */
    @Test(timeout = 60000)
    public void test_34_getOnNearestReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/nearest?EMextraParam123=_EM_26_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/satisfied
    */
    @Test(timeout = 60000)
    public void test_35_getOnSatisfiedReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/satisfied?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"satisfiedrequests\":[],\"success\":true}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/stats
    */
    @Test(timeout = 60000)
    public void test_36_getOnStatsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "_EM_522_XYZ_")
                .get(baseUrlOfSut + "/printshops/stats")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"nPendingRequests\":0,\"nInProgressRequests\":0,\"nFinished\":0,\"nEmployees\":6,\"pshopProfit\":\"12.96\",\"success\":true}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/{id}
    */
    @Test(timeout = 60000)
    public void test_37_getOnPrintshopReturnsContentUsingSql() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/3")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"id\":3,\"name\":\"CopyGraphe\",\"address\":\"R. Ramalho Ortigão C Com Pescador - lj 12. C.P. 4490678, Povoa de Varzim, Porto\",\"latitude\":41.383314,\"longitude\":-8.761942,\"nif\":\"123098333\",\"logo\":\"logo_4\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/{id}
    */
    @Test(timeout = 60000)
    public void test_38_getOnPrintshopReturnsContentUsingSql() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/3")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"id\":3,\"name\":\"CopyGraphe\",\"address\":\"R. Ramalho Ortigão C Com Pescador - lj 12. C.P. 4490678, Povoa de Varzim, Porto\",\"latitude\":41.383314,\"longitude\":-8.761942,\"nif\":\"123098333\",\"logo\":\"logo_4\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printdocument/{id}
    */
    @Test(timeout = 60000)
    public void test_39_getOnPrintdocuReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/printdocument/388?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printdocument/{id}
    */
    @Test(timeout = 60000)
    public void test_40_getOnPrintdocuReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "_EM_520_XYZ_")
                .get(baseUrlOfSut + "/printdocument/312?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printdocument/{id}
    */
    @Test(timeout = 60000)
    public void test_41_getOnPrintdocuReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printdocument/736")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/nearest
    */
    @Test(timeout = 60000)
    public void test_42_getOnNearestReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/printshops/nearest?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printdocument/{id}
    */
    @Test(timeout = 60000)
    public void test_43_getOnPrintdocuReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printdocument/-342097905?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/{id}
    */
    @Test(timeout = 60000)
    public void test_44_getOnPrintshopReturnsContentUsingSql() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/7")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"id\":7,\"name\":\"Staples Vila da Maia\",\"address\":\"Rua Comendador Valentim dos Santos Dinis 570, Maia\",\"latitude\":41.246159,\"longitude\":-8.625225,\"nif\":\"133555378\",\"logo\":\"logo_7\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/{id}
    */
    @Test(timeout = 60000)
    public void test_45_getOnPrintshopReturnsContentUsingSql() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .header("x-requested-with", "HHywMKFtk")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"xRIkYnFmSF\", " + 
                    " \"id\": 451, " + 
                    " \"username\": \"32g7o\", " + 
                    " \"roles\": [ " + 
                    " \"L\", " + 
                    " \"4YEsdafOzDYnJiK\", " + 
                    " \"35oy9n_yVdT\", " + 
                    " \"_EM_3511_XYZ_\" " + 
                    " ] " + 
                    " } ")
                .get(baseUrlOfSut + "/printshops/9")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"id\":9,\"name\":\"SmartPrint\",\"address\":\"Rua dos Peões, Braga\",\"latitude\":41.557973,\"longitude\":-8.398398,\"nif\":\"123555378\",\"logo\":\"logo_2\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/{id}
    */
    @Test(timeout = 60000)
    public void test_46_getOnPrintshopReturnsContentUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 3337L)
                .d("ADDRESS", "\"\"")
                .d("AVG_RATING", "0.052713340362805505")
                .d("BALANCE_CURRENCY", "\"NjGzeptV1\"")
                .d("BALANCE_FRACTIONAL_PART", "217")
                .d("BALANCE_INTEGER_PART", "574")
                .d("LATITUDE", "0.10860880414518426")
                .d("LOGO", "\"NqVHeafCQ\"")
                .d("LONGITUDE", "0.5951909943850716")
                .d("NAME", "\"KqyGhUvEbWhvZy\"")
                .d("NIF", "\"NS6o097SPwZDQY\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/5")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"id\":5,\"name\":\"Gráfica Editora Poveira, Lda.\",\"address\":\"R. Manuel Silva, 18. C.P. 4490657, Povoa de Varzim, Porto.\",\"latitude\":41.379605,\"longitude\":-8.761047,\"nif\":\"133555378\",\"logo\":\"logo_6\",\"avgRating\":0.0,\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0}}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/v2/api-docs
    */
    @Test(timeout = 60000)
    public void test_47_getOnApi_docsReturnsObject() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/api-docs")
                .then()
                .statusCode(200);
    }
    
    
    /**
    * Calls:
    * (200) POST:/consumer/subscribe
    */
    @Test(timeout = 60000)
    public void test_48_postOnSubscribeReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1100L)
                .d("PASSWORD", "\"oDyM7hrj\"")
                .d("USERNAME", "\"_EM_2680_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        try{
            given().accept("*/*")
                    .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                    .header("x-EMextraHeader123", "")
                    .post(baseUrlOfSut + "/consumer/subscribe?" + 
                        "password=1234&" + 
                        "username=rui");
        } catch(Exception e){
        }
    }
    
    
    /**
    * Calls:
    * (200) POST:/admin/useed
    */
    @Test(timeout = 60000)
    public void test_49_postOnUseedReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/admin/useed?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"message\":\"consumers seeding completed\"}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/admin/useed
    */
    @Test(timeout = 60000)
    public void test_50_postOnUseedReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/admin/useed?EMextraParam123=_EM_572_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"message\":\"consumers seeding completed\"}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/admin/useed
    */
    @Test(timeout = 60000)
    public void test_51_postOnUseedReturns200() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_71_XYZ_")
                .post(baseUrlOfSut + "/admin/useed?EMextraParam123=_EM_70_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"message\":\"consumers seeding completed\"}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/consumer/register
    */
    @Test(timeout = 60000)
    public void test_52_postOnRegisterReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1154L)
                .d("PASSWORD", "\"gXyF\"")
                .d("USERNAME", "\"_EM_2842_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/register?" + 
                    "password=s13sH_jNMh1BNt6Z&" + 
                    "latitude=_EM_2841_XYZ_&" + 
                    "name=rMkcHMVD8m&" + 
                    "username=Ep")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"consumer\":{\"name\":\"rMkcHMVD8m\",\"latitude\":\"_EM_2841_XYZ_\",\"printingSchemas\":[],\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0},\"id\":21,\"username\":\"Ep\",\"password\":\"s13sH_jNMh1BNt6Z\",\"roles\":[\"ROLE_USER\"]},\"success\":true}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/consumer/register
    */
    @Test(timeout = 60000)
    public void test_53_postOnRegisterReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 313L)
                .d("PASSWORD", "\"QDXLY\"")
                .d("USERNAME", "\"_EM_1077_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/register?" + 
                    "password=yn91sjpTRw&" + 
                    "latitude=k8Bg_X&" + 
                    "name=bqGuNifwNnjl9RKJ&" + 
                    "email=QnF1Vv0OQhuc1__&" + 
                    "username=MVERlObsaYaNHF&" + 
                    "longitude=OkpOq7TrS")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"consumer\":{\"name\":\"bqGuNifwNnjl9RKJ\",\"email\":\"QnF1Vv0OQhuc1__\",\"latitude\":\"k8Bg_X\",\"longitude\":\"OkpOq7TrS\",\"printingSchemas\":[],\"balance\":{\"currency\":\"EUR\",\"integerPart\":0,\"fractionalPart\":0},\"id\":21,\"username\":\"MVERlObsaYaNHF\",\"password\":\"yn91sjpTRw\",\"roles\":[\"ROLE_USER\"]},\"success\":true}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/admin/useed
    */
    @Test(timeout = 60000)
    public void test_54_postOnUseedReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "_EM_408_XYZ_")
                .post(baseUrlOfSut + "/admin/useed?EMextraParam123=_EM_407_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"message\":\"consumers seeding completed\"}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/admin/useed
    */
    @Test(timeout = 60000)
    public void test_55_postOnUseedReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/admin/useed?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"message\":\"consumers seeding completed\"}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/consumer/subscribe
    */
    @Test(timeout = 60000)
    public void test_56_postOnSubscribeReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1100L)
                .d("PASSWORD", "\"oDyM7hrj\"")
                .d("USERNAME", "\"_EM_2680_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        try{
            given().accept("*/*")
                    .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                    .header("x-EMextraHeader123", "")
                    .post(baseUrlOfSut + "/consumer/subscribe?" + 
                        "password=1234&" + 
                        "username=rui");
        } catch(Exception e){
        }
    }
    
    
    /**
    * Calls:
    * (200) POST:/consumer/subscribe
    */
    @Test(timeout = 60000)
    public void test_57_postOnSubscribeReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1100L)
                .d("PASSWORD", "\"oDyM7hrj\"")
                .d("USERNAME", "\"_EM_2680_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        try{
            given().accept("*/*")
                    .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                    .header("x-EMextraHeader123", "")
                    .post(baseUrlOfSut + "/consumer/subscribe?" + 
                        "password=1234&" + 
                        "username=rui");
        } catch(Exception e){
        }
    }
    
    
    /**
    * Calls:
    * (200) POST:/consumer/subscribe
    */
    @Test(timeout = 60000)
    public void test_58_postOnSubscribeReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1100L)
                .d("PASSWORD", "\"oDyM7hrj\"")
                .d("USERNAME", "\"_EM_2680_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        try{
            given().accept("*/*")
                    .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                    .header("x-EMextraHeader123", "")
                    .post(baseUrlOfSut + "/consumer/subscribe?" + 
                        "password=1234&" + 
                        "username=rui");
        } catch(Exception e){
        }
    }
    
    
    /**
    * Calls:
    * (200) GET:/consumer/{consumerID}/printingschemas
    */
    @Test(timeout = 60000)
    public void test_59_getOnPrintingschemasReturnsContentUsingSql() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/consumer/2/printingschemas")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":true,\"pschemas\":[{\"id\":2,\"name\":\"A4+2LAD+CORES+Encaderna\",\"paperSpecs\":\"PAPER,COLOR,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_OPAQUE,A3\",\"deleted\":false},{\"id\":5,\"name\":\"A4+SIMPLEX+COLOR\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":3,\"name\":\"A4+SIMPLEX+PW+Encadernar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,SPIRAL\",\"coverSpecs\":\"COVER,PVC_TRANSPARENT,A4\",\"deleted\":false},{\"id\":4,\"name\":\"A4+2LAD+PB\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"\",\"coverSpecs\":\"\",\"deleted\":false},{\"id\":1,\"name\":\"A4+2LAD+PB+Agrafar\",\"paperSpecs\":\"PAPER,BW,A4,DUPLEX\",\"bindingSpecs\":\"BINDING,STAPLING,0,0\",\"coverSpecs\":\"\",\"deleted\":false}]}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/requests/{id}
    */
    @Test(timeout = 60000)
    public void test_60_getOnRequestReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/requests/310?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/{id}/pricetable
    */
    @Test(timeout = 60000)
    public void test_61_getOnPricetableReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/printshops/5/pricetable")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"printcopy\":{},\"rings\":{},\"stapling\":0.0,\"covers\":{},\"success\":true}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/{id}/pricetable
    */
    @Test(timeout = 60000)
    public void test_62_getOnPricetableReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/printshops/654/pricetable")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/{id}/reviews
    */
    @Test(timeout = 60000)
    public void test_63_getOnReviewsReturnsContentUsingSql() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/1/reviews")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("[]"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/{printShopID}/employees
    */
    @Test(timeout = 60000)
    public void test_64_getOnEmployeesReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/printshops/697/employees?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/requests/{id}
    */
    @Test(timeout = 60000)
    public void test_65_getOnPrintshopsRequestWithQueryParamReturnsContentUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 241L)
                .d("PASSWORD", "\"cZppeQcXBb\"")
                .d("USERNAME", "\"ZX5QINeDOfj\"")
            .and().insertInto("PRINTSHOPS", 240L)
                .d("ADDRESS", "\"apC\"")
                .d("AVG_RATING", "-34671.03003483344")
                .d("BALANCE_CURRENCY", "\"0r0R0c8d9a1y2GU\"")
                .d("BALANCE_FRACTIONAL_PART", "-16776921")
                .d("BALANCE_INTEGER_PART", "577")
                .d("LATITUDE", "0.9999731659905136")
                .d("LOGO", "\"4MRxb\"")
                .d("LONGITUDE", "0.7586729583631366")
                .d("NAME", "\"r\"")
                .d("NIF", "\"11c\"")
            .and().insertInto("EMPLOYEES", 239L)
                .d("NAME", "\"_EM_830_XYZ_\"")
                .d("ID", "6")
                .d("PRINTSHOP_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "_EM_10_XYZ_")
                .header("X-Requested-With", "0g")
                .get(baseUrlOfSut + "/printshops/requests/-3126?EMextraParam123=_EM_9_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/{printShopID}/employees
    */
    @Test(timeout = 60000)
    public void test_66_getOnEmployeesReturnsContentUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 578L)
                .d("ADDRESS", "\"\"")
                .d("AVG_RATING", "0.27929035417019704")
                .d("BALANCE_CURRENCY", "\"dy1eV\"")
                .d("BALANCE_FRACTIONAL_PART", "1166")
                .d("BALANCE_INTEGER_PART", "329")
                .d("LATITUDE", "-0.13034430309324369")
                .d("LOGO", "\"4IL\"")
                .d("LONGITUDE", "1.7868019215227")
                .d("NAME", "\"_EM_1639_XYZ_\"")
                .d("NIF", "\"jUqbI\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/-1047597/employees")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/{id}/reviews
    */
    @Test(timeout = 60000)
    public void test_67_getOnReviewsReturnsContentUsingSql() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "Df7jqNZ_r")
                .get(baseUrlOfSut + "/printshops/7/reviews")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("[]"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/requests/{id}
    */
    @Test(timeout = 60000)
    public void test_68_getOnPrintshopsRequestReturnsContentUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 241L)
                .d("PASSWORD", "\"cZppeQcXBb\"")
                .d("USERNAME", "\"ZX5QINeDOfj\"")
            .and().insertInto("PRINTSHOPS", 240L)
                .d("ADDRESS", "\"apC\"")
                .d("AVG_RATING", "0.6963439542506694")
                .d("BALANCE_CURRENCY", "\"0r0R0c8d9a1y2GU\"")
                .d("BALANCE_FRACTIONAL_PART", "295")
                .d("BALANCE_INTEGER_PART", "577")
                .d("LATITUDE", "0.9999731659905136")
                .d("LOGO", "\"4MRtb\"")
                .d("LONGITUDE", "0.7586729583631366")
                .d("NAME", "\"r\"")
                .d("NIF", "\"11c\"")
            .and().insertInto("EMPLOYEES", 239L)
                .d("NAME", "\"_Q26Jbz\"")
                .d("ID", "6")
                .d("PRINTSHOP_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/requests/970")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/printshops/{id}/pricetable
    */
    @Test(timeout = 60000)
    public void test_69_getOnPricetableReturnsContentUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 514L)
                .d("ADDRESS", "\"yD9LPUMspCU\"")
                .d("AVG_RATING", "0.8376902022065399")
                .d("BALANCE_CURRENCY", "\"OPU\"")
                .d("BALANCE_FRACTIONAL_PART", "0")
                .d("BALANCE_INTEGER_PART", "0")
                .d("LATITUDE", "0.9293060232976569")
                .d("LOGO", "\"sLrcfbO5m\"")
                .d("LONGITUDE", "0.8538121008873728")
                .d("NAME", "\"qBc2FQZ6a9K\"")
                .d("NIF", "\"8_RjscCONr4cs\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/printshops/-130418/pricetable")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/printshops/{printShopID}/employees
    */
    @Test(timeout = 60000)
    public void test_70_postOnEmployeesReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/1835819342/employees?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/consumer/{id}/notify
    */
    @Test(timeout = 60000)
    public void test_71_postOnNotifyReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1869L)
                .d("ADDRESS", "\"Md73HwXayYm\"")
                .d("AVG_RATING", "0.9638")
                .d("BALANCE_CURRENCY", "\"wCU0pmkQ\"")
                .d("BALANCE_FRACTIONAL_PART", "277")
                .d("BALANCE_INTEGER_PART", "-15560")
                .d("LATITUDE", "0.1293284506")
                .d("LOGO", "\"ShpJ5c\"")
                .d("LONGITUDE", "-15057.53469787606")
                .d("NAME", "\"jCN9Ozb3tRa5\"")
                .d("NIF", "\"88TZSiKn1s2V1wnG\"")
            .and().insertInto("PRINTSHOPS", 1868L)
                .d("ADDRESS", "\"_EM_4141_XYZ_\"")
                .d("AVG_RATING", "0.8002164828066154")
                .d("BALANCE_CURRENCY", "\"7CMlbR\"")
                .d("BALANCE_FRACTIONAL_PART", "2522")
                .d("BALANCE_INTEGER_PART", "875")
                .d("LATITUDE", "0.9382718412222617")
                .d("LOGO", "\"_EM_4145_XYZ_\"")
                .d("LONGITUDE", "0.1480040860352947")
                .d("NAME", "\"X|sU_TC\"")
                .d("NIF", "\"pti9nM\"")
            .and().insertInto("USERS", 1867L)
                .d("PASSWORD", "\"HxvvvW8ARBwvr\"")
                .d("USERNAME", "\"n\"")
            .and().insertInto("CONSUMERS", 1866L)
                .d("BALANCE_CURRENCY", "\"blVAki\"")
                .d("BALANCE_FRACTIONAL_PART", "-130384")
                .d("BALANCE_INTEGER_PART", "-1704")
                .d("NAME", "\"NAME7_1_0_\"")
                .d("ID", "16")
            .and().insertInto("USERS", 1865L)
                .d("PASSWORD", "\"i\"")
                .d("USERNAME", "\"dQZ\"")
            .and().insertInto("CONSUMERS", 1864L)
                .d("BALANCE_CURRENCY", "\"_EM_4024_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "8744")
                .d("BALANCE_INTEGER_PART", "528")
                .d("NAME", "\"G8tvwU\"")
                .d("ID", "11")
            .and().insertInto("PRINT_REQUESTS", 1863L)
                .d("ARRIVAL", "NULL")
                .d("COST", "0.7144050429368027")
                .d("DELIVERED", "NULL")
                .d("EMPATTENDED", "\"_EM_4142_XYZ_\"")
                .d("EMPDELIVERED", "\"NYD7eRSQp\"")
                .d("FINISHED", "NULL")
                .d("PAYPAL_SALE_ID", "\"OazU4k\"")
                .d("PAYMENT_TYPE", "\"MzDymBQEKOI2\"")
                .d("STATUS", "\"NOT_PAYED\"")
                .d("CONSUMER_ID", "5")
                .d("PRINTSHOP_ID", "3")
                .d("PRINTSHOP", "4")
                .d("CONSUMER", "4")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/consumer/16/notify")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) POST:/request/reject/{printRequestID}
    */
    @Test(timeout = 60000)
    public void test_72_postOnRejectReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "_EM_240_XYZ_")
                .contentType("application/json")
                .body(" _EM_239_XYZ_ ")
                .post(baseUrlOfSut + "/request/reject/243?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/printshops/requests/{id}
    */
    @Test(timeout = 60000)
    public void test_73_postOnRequestReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/requests/76?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/printshops/{printShopID}/employees
    */
    @Test(timeout = 60000)
    public void test_74_postOnEmployeesReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "_EM_559_XYZ_")
                .post(baseUrlOfSut + "/printshops/164/employees?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/request/accept/{id}
    */
    @Test(timeout = 60000)
    public void test_75_postOnAcceptReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/request/accept/107?EMextraParam123=_EM_238_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/printshops/requests/{id}
    */
    @Test(timeout = 60000)
    public void test_76_postOnRequestReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 241L)
                .d("PASSWORD", "\"cZppeQcXBb\"")
                .d("USERNAME", "\"ZX5QINeDOfj\"")
            .and().insertInto("PRINTSHOPS", 240L)
                .d("ADDRESS", "\"apC\"")
                .d("AVG_RATING", "-34671.03003483344")
                .d("BALANCE_CURRENCY", "\"0r0R0c8d9a1y2GU\"")
                .d("BALANCE_FRACTIONAL_PART", "-16776921")
                .d("BALANCE_INTEGER_PART", "577")
                .d("LATITUDE", "0.9999731659905136")
                .d("LOGO", "\"4MRxb\"")
                .d("LONGITUDE", "0.7586729583631366")
                .d("NAME", "\"r\"")
                .d("NIF", "\"11c\"")
            .and().insertInto("EMPLOYEES", 239L)
                .d("NAME", "\"_EM_830_XYZ_\"")
                .d("ID", "6")
                .d("PRINTSHOP_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "_EM_10_XYZ_")
                .post(baseUrlOfSut + "/printshops/requests/-3126")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/printshops/{printShopID}/employees
    */
    @Test(timeout = 60000)
    public void test_77_postOnEmployeesReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "_EM_587_XYZ_")
                .post(baseUrlOfSut + "/printshops/-1039222221/employees")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/printshops/{printShopID}/employees
    */
    @Test(timeout = 60000)
    public void test_78_postOnEmployeesReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/495/employees?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/request/accept/{id}
    */
    @Test(timeout = 60000)
    public void test_79_postOnAcceptReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("REGISTER_REQUESTS", 2957L)
                .d("ACCEPTED", "true")
                .d("MANAGER_EMAIL", "\"\"")
                .d("MANAGER_NAME", "\"kX5AnHesoFy6I8rZ\"")
                .d("MANAGER_PASSWORD", "\"Fhs\"")
                .d("MANAGER_USERNAME", "\"hlt5flFSnHO\"")
                .d("PSHOP_ADDRESS", "\"coq\"")
                .d("PSHOP_DATE_REQUEST", "\"p8B74Fcar\"")
                .d("PSHOP_DATE_REQUEST_ACCEPTED", "\"\"")
                .d("PSHOP_LATITUDE", "0.16179249281324426")
                .d("PSHOP_LONGITUDE", "8.69695339474225")
                .d("PSHOP_NIF", "\"FUaQ8Iw1Zt\"")
                .d("PSHOP_NAME", "\"5S5v799chayEXuj\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/request/accept/-1941")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/printshops/{printShopID}/employees
    */
    @Test(timeout = 60000)
    public void test_80_postOnPrintshopEmployeesReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 260L)
                .d("ADDRESS", "\"M\"")
                .d("AVG_RATING", "0.2048")
                .d("BALANCE_CURRENCY", "\"_EM_897_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "552")
                .d("BALANCE_INTEGER_PART", "8612")
                .d("LATITUDE", "-1.3457395524867761")
                .d("LOGO", "\"_EM_898_XYZ_\"")
                .d("LONGITUDE", "0.24492215959761715")
                .d("NAME", "\"f_Rcsw8Q7\"")
                .d("NIF", "\"iYg65Myw5AwPM\"")
            .and().insertInto("USERS", 263L)
                .d("PASSWORD", "\"fugkFjFH5vPaHX\"")
                .d("USERNAME", "\"JitW\"")
            .and().insertInto("PRINTSHOPS", 262L)
                .d("ADDRESS", "\"_EM_899_XYZ_\"")
                .d("AVG_RATING", "0.6407946123227126")
                .d("BALANCE_CURRENCY", "\"_EM_900_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "2097153")
                .d("BALANCE_INTEGER_PART", "524685")
                .d("LATITUDE", "0.52946829396362")
                .d("LOGO", "\"sJhwJIHpNnUC\"")
                .d("LONGITUDE", "0.10117186947705359")
                .d("NAME", "\"_EM_901_XYZ_\"")
                .d("NIF", "\"Xl6ci3\"")
            .and().insertInto("EMPLOYEES", 261L)
                .d("NAME", "\"1_ex2dd_KqjTc\"")
                .d("ID", "1")
                .r("PRINTSHOP_ID", 260L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"printShop\": { " + 
                    " \"latitude\": 0.726729063914513, " + 
                    " \"longitude\": 0.37255777661063827, " + 
                    " \"balance\": {} " + 
                    " }, " + 
                    " \"id\": 187, " + 
                    " \"username\": \"6g1D0mIhzO4JEpw\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/1835819342/employees")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/printshops/{printShopID}/employees
    */
    @Test(timeout = 60000)
    public void test_81_postOnEmployeesReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/printshops/495/employees")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/printshops/requests/{id}
    */
    @Test(timeout = 60000)
    public void test_82_postOnRequestReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 241L)
                .d("PASSWORD", "\"cZppeQcXBb\"")
                .d("USERNAME", "\"ZX5QINeDOfj\"")
            .and().insertInto("PRINTSHOPS", 240L)
                .d("ADDRESS", "\"apC\"")
                .d("AVG_RATING", "0.6963439542506694")
                .d("BALANCE_CURRENCY", "\"0r0R0c8d9a1y2GU\"")
                .d("BALANCE_FRACTIONAL_PART", "295")
                .d("BALANCE_INTEGER_PART", "577")
                .d("LATITUDE", "0.9999731659905136")
                .d("LOGO", "\"4MRtb\"")
                .d("LONGITUDE", "0.7586729583631366")
                .d("NAME", "\"r\"")
                .d("NIF", "\"11c\"")
            .and().insertInto("EMPLOYEES", 239L)
                .d("NAME", "\"_Q26Jbz\"")
                .d("ID", "6")
                .d("PRINTSHOP_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "_EM_10_XYZ_")
                .post(baseUrlOfSut + "/printshops/requests/970")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/request/reject/{printRequestID}
    */
    @Test(timeout = 60000)
    public void test_83_postOnRejectReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1904L)
                .d("PASSWORD", "\"5G9CZW\"")
                .d("USERNAME", "\"xWKbY57FtgEXS\"")
            .and().insertInto("PRINTSHOPS", 1903L)
                .d("ADDRESS", "\"3gR0nkY\"")
                .d("AVG_RATING", "0.5551849347587373")
                .d("BALANCE_CURRENCY", "\"_EM_4120_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "245")
                .d("BALANCE_INTEGER_PART", "747")
                .d("LATITUDE", "0.12904279878077296")
                .d("LOGO", "\"JLSYuVD\"")
                .d("LONGITUDE", "0.2774867938880796")
                .d("NAME", "\"aDFIs\"")
                .d("NIF", "\"hVraCi\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFzdGVyOjEyMzQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"-3689074154745805611\" ")
                .post(baseUrlOfSut + "/request/reject/-3689074154745805611")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/printshops/{printShopID}/employees
    */
    @Test(timeout = 60000)
    public void test_84_postOnEmployeesReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 3010L)
                .d("ADDRESS", "\"3legqzNQ_V2u\"")
                .d("AVG_RATING", "0.9011269932124477")
                .d("BALANCE_CURRENCY", "\"zHt4waFHHgaD\"")
                .d("BALANCE_FRACTIONAL_PART", "905")
                .d("BALANCE_INTEGER_PART", "262")
                .d("LATITUDE", "0.05248608884320183")
                .d("LOGO", "\"SNrGXjFbhcCckHD\"")
                .d("LONGITUDE", "0.7862438444899627")
                .d("NAME", "\"UbFogsW\"")
                .d("NIF", "\"fbADx6tK\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/593/employees?username=yEutRSTI7cy")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/printshops/{printShopID}/employees
    */
    @Test(timeout = 60000)
    public void test_85_postOnEmployeesReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 3337L)
                .d("ADDRESS", "\"\"")
                .d("AVG_RATING", "0.052713340362805505")
                .d("BALANCE_CURRENCY", "\"NjGzeptV1\"")
                .d("BALANCE_FRACTIONAL_PART", "217")
                .d("BALANCE_INTEGER_PART", "574")
                .d("LATITUDE", "0.10860880414518426")
                .d("LOGO", "\"NqVHeafCQ\"")
                .d("LONGITUDE", "0.5951909943850716")
                .d("NAME", "\"KqyGhUvEbWhvZy\"")
                .d("NIF", "\"NS6o097SPwZDQY\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/printshops/557/employees?password=ky_GQA")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/printshops/{printShopID}/employees
    */
    @Test(timeout = 60000)
    public void test_86_putOnEmployeesReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/printshops/39/employees?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/printshops/{printShopID}/employees
    */
    @Test(timeout = 60000)
    public void test_87_putOnPrintshopEmployeesReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "")
                .put(baseUrlOfSut + "/printshops/995/employees")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/printshops/{printShopID}/employees
    */
    @Test(timeout = 60000)
    public void test_88_putOnEmployeesReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 578L)
                .d("ADDRESS", "\"\"")
                .d("AVG_RATING", "0.27929035417019704")
                .d("BALANCE_CURRENCY", "\"dy1eV\"")
                .d("BALANCE_FRACTIONAL_PART", "1166")
                .d("BALANCE_INTEGER_PART", "329")
                .d("LATITUDE", "-0.13034430309324369")
                .d("LOGO", "\"4IL\"")
                .d("LONGITUDE", "1.7868019215227")
                .d("NAME", "\"_EM_1639_XYZ_\"")
                .d("NIF", "\"jUqbI\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"_EM_1638_XYZ_\", " + 
                    " \"printShop\": { " + 
                    " \"id\": 356, " + 
                    " \"name\": \"\", " + 
                    " \"address\": \"2IzJVl\", " + 
                    " \"latitude\": 0.020852847193889912, " + 
                    " \"nif\": \"o_6TSgmYMb8C3\", " + 
                    " \"logo\": \"UmAL\", " + 
                    " \"avgRating\": 0.42942354 " + 
                    " }, " + 
                    " \"id\": 858, " + 
                    " \"roles\": [] " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/-1047597/employees")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/printshops/{printShopID}/employees
    */
    @Test(timeout = 60000)
    public void test_89_putOnEmployeesReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "42")
                .put(baseUrlOfSut + "/printshops/988100410004877591/employees?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/paypal/ipn/consumer/{consumerID}
    */
    @Test(timeout = 60000)
    public void test_90_postOnConsumReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 3337L)
                .d("ADDRESS", "\"\"")
                .d("AVG_RATING", "0.052713340362805505")
                .d("BALANCE_CURRENCY", "\"NjGzeptV1\"")
                .d("BALANCE_FRACTIONAL_PART", "217")
                .d("BALANCE_INTEGER_PART", "574")
                .d("LATITUDE", "0.10860880414518426")
                .d("LOGO", "\"NqVHeafCQ\"")
                .d("LONGITUDE", "0.5951909943850716")
                .d("NAME", "\"KqyGhUvEbWhvZy\"")
                .d("NIF", "\"NS6o097SPwZDQY\"")
            .and().insertInto("USERS", 3350L)
                .d("PASSWORD", "\"FmID4A\"")
                .d("USERNAME", "\"lpOmXrbhq\"")
            .and().insertInto("CONSUMERS", 3349L)
                .d("BALANCE_CURRENCY", "\"L\"")
                .d("BALANCE_FRACTIONAL_PART", "468")
                .d("BALANCE_INTEGER_PART", "618")
                .d("EMAIL", "NULL")
                .d("LATITUDE", "NULL")
                .d("LONGITUDE", "NULL")
                .d("NAME", "\"VWE5hCLXKJq7\"")
                .d("ID", "12")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/paypal/ipn/consumer/638?" + 
                    "charset=zcfe4L1ldw_&" + 
                    "payer_email=iYCUvOIFEr&" + 
                    "txn_type=0AHqSoUrtCvcqcct&" + 
                    "transaction_type=rq4i59&" + 
                    "mc_gross=0")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) POST:/paypal/ipn/consumer/{consumerID}
    */
    @Test(timeout = 60000)
    public void test_91_postOnConsumReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 3337L)
                .d("ADDRESS", "\"\"")
                .d("AVG_RATING", "0.052713340362805505")
                .d("BALANCE_CURRENCY", "\"NjGzeptV1\"")
                .d("BALANCE_FRACTIONAL_PART", "217")
                .d("BALANCE_INTEGER_PART", "574")
                .d("LATITUDE", "0.10860880414518426")
                .d("LOGO", "\"NqVHeafCQ\"")
                .d("LONGITUDE", "0.5951909943850716")
                .d("NAME", "\"KqyGhUvEbWhvZy\"")
                .d("NIF", "\"NS6o097SPwZDQY\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/paypal/ipn/consumer/638?" + 
                    "EMextraParam123=42&" + 
                    "charset=zcfe4L1ldw_&" + 
                    "txn_type=0AHqSoUrtCvcqcct&" + 
                    "mc_gross=0")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) POST:/printshops/{id}/pricetable/deletering
    */
    @Test(timeout = 60000)
    public void test_92_postOnDeleteringReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"price\": \"733\", " + 
                    " \"ringType\": \"_EM_627_XYZ_\", " + 
                    " \"supLim\": 658 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/8/pricetable/deletering")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":true}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/printshops/{id}/pricetable/deletepaper
    */
    @Test(timeout = 60000)
    public void test_93_postOnDeletepaperReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 417L)
                .d("ADDRESS", "\"ZUA6Zqk2\"")
                .d("AVG_RATING", "0.11477920367537298")
                .d("BALANCE_CURRENCY", "\"gPzqSP_sfW412n\"")
                .d("BALANCE_FRACTIONAL_PART", "837")
                .d("BALANCE_INTEGER_PART", "42")
                .d("LATITUDE", "0.6346086231657716")
                .d("LOGO", "\"w\"")
                .d("LONGITUDE", "0.3644634206887878")
                .d("NAME", "\"TwyGub6TU9Xk\"")
                .d("NIF", "\"6M8DNSD9TLyc4fHb\"")
            .and().insertInto("USERS", 420L)
                .d("PASSWORD", "\"l18B7uukqb0F\"")
                .d("USERNAME", "\"SaiiokOhUX\"")
            .and().insertInto("PRINTSHOPS", 419L)
                .d("ADDRESS", "\"WZbEaPF3YLSi\"")
                .d("AVG_RATING", "0.9211788964348833")
                .d("BALANCE_CURRENCY", "\"td73k\"")
                .d("BALANCE_FRACTIONAL_PART", "607")
                .d("BALANCE_INTEGER_PART", "-7260")
                .d("LATITUDE", "0.5247940040238331")
                .d("LOGO", "\"zf6g7FGDcazNXHa\"")
                .d("LONGITUDE", "0.2698956914665932")
                .d("NAME", "\"\"")
                .d("NIF", "\"hArtdUe4\"")
            .and().insertInto("EMPLOYEES", 418L)
                .d("NAME", "\"xIXqVznzKju\"")
                .d("ID", "5")
                .d("PRINTSHOP_ID", "NULL")
            .and().insertInto("PRINTSHOPS", 2945L)
                .d("ADDRESS", "\"RmCyHN7MSFXoJ\"")
                .d("AVG_RATING", "0.6878856320670563")
                .d("BALANCE_CURRENCY", "\"Syie3c\"")
                .d("BALANCE_FRACTIONAL_PART", "528")
                .d("BALANCE_INTEGER_PART", "378")
                .d("LATITUDE", "0.3835736000841259")
                .d("LOGO", "\"6CnjqgJqqqs9vVO\"")
                .d("LONGITUDE", "0.07576170668397741")
                .d("NAME", "\"NtP9_0Q\"")
                .d("NIF", "\"XIVbdGl\"")
            .and().insertInto("PRINTSHOPS", 2944L)
                .d("ADDRESS", "\"Nh\"")
                .d("AVG_RATING", "0.35812279846000616")
                .d("BALANCE_CURRENCY", "\"BBe9mYjs02ODr7\"")
                .d("BALANCE_FRACTIONAL_PART", "416")
                .d("BALANCE_INTEGER_PART", "545")
                .d("LATITUDE", "0.27145272326289904")
                .d("LOGO", "\"S\"")
                .d("LONGITUDE", "0.2749189895575811")
                .d("NAME", "\"spILXkAzcJ7VH\"")
                .d("NIF", "\"WQ0evH\"")
            .and().insertInto("USERS", 2943L)
                .d("PASSWORD", "\"1t0enPcFa\"")
                .d("USERNAME", "\"qmarZE8zm7Fd\"")
            .and().insertInto("CONSUMERS", 2942L)
                .d("BALANCE_CURRENCY", "\"Pf0d4RsPsrcV\"")
                .d("BALANCE_FRACTIONAL_PART", "922")
                .d("BALANCE_INTEGER_PART", "613")
                .d("NAME", "\"41\"")
                .d("ID", "15")
            .and().insertInto("USERS", 2941L)
                .d("PASSWORD", "\"GZ_MV2mpEEPY\"")
                .d("USERNAME", "\"\"")
            .and().insertInto("CONSUMERS", 2940L)
                .d("BALANCE_CURRENCY", "\"uFlc4Lbkty7QqXHd\"")
                .d("BALANCE_FRACTIONAL_PART", "377")
                .d("BALANCE_INTEGER_PART", "945")
                .d("NAME", "\"oJQ7J\"")
                .d("ID", "7")
            .and().insertInto("PRINT_REQUESTS", 2939L)
                .d("ARRIVAL", "NULL")
                .d("COST", "0.33379351033")
                .d("DELIVERED", "NULL")
                .d("EMPATTENDED", "NULL")
                .d("EMPDELIVERED", "\"PsUy4JIrQ_\"")
                .d("FINISHED", "\"1909-11-05 09:12:50\"")
                .d("PAYPAL_SALE_ID", "\"4\"")
                .d("PAYMENT_TYPE", "\"_\"")
                .d("STATUS", "\"PENDING\"")
                .d("CONSUMER_ID", "NULL")
                .d("PRINTSHOP_ID", "NULL")
                .d("PRINTSHOP", "NULL")
                .d("CONSUMER", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"colors\": \"0zG\", " + 
                    " \"infLim\": 87, " + 
                    " \"priceA3DUPLEX\": \"Eb1fLS9FBO54q\", " + 
                    " \"priceA4DUPLEX\": \"rIFE9i1DM6AK\", " + 
                    " \"priceA4SIMPLEX\": \"ea0uOXuCfil6B\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/-7969/pricetable/deletepaper")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/printshops/{id}/pricetable/rings
    */
    @Test(timeout = 60000)
    public void test_94_postOnRingsReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 3006L)
                .d("ADDRESS", "\"H\"")
                .d("AVG_RATING", "0.14226597970533872")
                .d("BALANCE_CURRENCY", "\"DmYIBYP\"")
                .d("BALANCE_FRACTIONAL_PART", "671")
                .d("BALANCE_INTEGER_PART", "758")
                .d("LATITUDE", "0.8879846461455159")
                .d("LOGO", "\"Jb4iPhh40uql\"")
                .d("LONGITUDE", "0.660668773825323")
                .d("NAME", "\"au4RbNiX1s55\"")
                .d("NIF", "\"_KBaIzozWVzynz\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 787, " + 
                    " \"price\": \"kf1Eu8xIGsOv\", " + 
                    " \"supLim\": 963 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/321/pricetable/rings?latitude=pxVTWVe04")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/printshops/{id}/pricetable/papers
    */
    @Test(timeout = 60000)
    public void test_95_postOnPapersReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 3337L)
                .d("ADDRESS", "\"\"")
                .d("AVG_RATING", "0.052713340362805505")
                .d("BALANCE_CURRENCY", "\"NjGzeptV1\"")
                .d("BALANCE_FRACTIONAL_PART", "217")
                .d("BALANCE_INTEGER_PART", "574")
                .d("LATITUDE", "0.10860880414518426")
                .d("LOGO", "\"NqVHeafCQ\"")
                .d("LONGITUDE", "0.5951909943850716")
                .d("NAME", "\"KqyGhUvEbWhvZy\"")
                .d("NIF", "\"NS6o097SPwZDQY\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"colors\": \"0E8\", " + 
                    " \"infLim\": 56, " + 
                    " \"priceA3SIMPLEX\": \"sAFxtkiRz\", " + 
                    " \"priceA4SIMPLEX\": \"INm\", " + 
                    " \"supLim\": 115 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/-10685396/pricetable/papers")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/printshops/{id}/pricetable/papers
    */
    @Test(timeout = 60000)
    public void test_96_postOnPapersReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"colors\": \"_EM_543_XYZ_\", " + 
                    " \"priceA3DUPLEX\": \"_EM_544_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/1514406502/pricetable/papers")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/printshops/requests/cancel/{id}
    */
    @Test(timeout = 60000)
    public void test_97_postOnCancelReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic bWFmYWxkYToxMjM0") // employee
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" 709 ")
                .post(baseUrlOfSut + "/printshops/requests/cancel/709")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/printshops/{id}/pricetable/covers
    */
    @Test(timeout = 60000)
    public void test_98_postOnPricetableCoversReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1744L)
                .d("ADDRESS", "\"HOMHMtkoqd1mtH\"")
                .d("AVG_RATING", "0.018908913121805315")
                .d("BALANCE_CURRENCY", "\"\"")
                .d("BALANCE_FRACTIONAL_PART", "754")
                .d("BALANCE_INTEGER_PART", "259")
                .d("LATITUDE", "0.748154081857168")
                .d("LOGO", "\"\"")
                .d("LONGITUDE", "0.5011159151179945")
                .d("NAME", "\"F7Zst1EkWcsY8\"")
                .d("NIF", "\"LPMqXSy7cZ4JforG\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"nYu0g\", " + 
                    " \"priceA3\": \"X_ARCC\", " + 
                    " \"priceA4\": \"DpAiSR\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/-32170/pricetable/covers")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/printshops/{id}/pricetable/covers
    */
    @Test(timeout = 60000)
    public void test_99_postOnPricetableCoversWithQueryParamReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 3337L)
                .d("ADDRESS", "\"\"")
                .d("AVG_RATING", "0.052713340362805505")
                .d("BALANCE_CURRENCY", "\"NjGzeptV1\"")
                .d("BALANCE_FRACTIONAL_PART", "217")
                .d("BALANCE_INTEGER_PART", "574")
                .d("LATITUDE", "0.10860880414518426")
                .d("LOGO", "\"NqVHeafCQ\"")
                .d("LONGITUDE", "0.5951909943850716")
                .d("NAME", "\"KqyGhUvEbWhvZy\"")
                .d("NIF", "\"NS6o097SPwZDQY\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"R\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/418/pricetable/covers?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/printshops/{id}/pricetable/deletecover
    */
    @Test(timeout = 60000)
    public void test_100_postOnDeletecoverReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 260L)
                .d("ADDRESS", "\"M\"")
                .d("AVG_RATING", "0.2048")
                .d("BALANCE_CURRENCY", "\"_EM_897_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "552")
                .d("BALANCE_INTEGER_PART", "8612")
                .d("LATITUDE", "-1.3457395524867761")
                .d("LOGO", "\"_EM_898_XYZ_\"")
                .d("LONGITUDE", "0.24492215959761715")
                .d("NAME", "\"f_Rcsw8Q7\"")
                .d("NIF", "\"iYg65Myw5AwPM\"")
            .and().insertInto("USERS", 263L)
                .d("PASSWORD", "\"fugkFjFH5vPaHX\"")
                .d("USERNAME", "\"JitW\"")
            .and().insertInto("PRINTSHOPS", 262L)
                .d("ADDRESS", "\"_EM_899_XYZ_\"")
                .d("AVG_RATING", "0.6407946123227126")
                .d("BALANCE_CURRENCY", "\"_EM_900_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "2097153")
                .d("BALANCE_INTEGER_PART", "524685")
                .d("LATITUDE", "0.52946829396362")
                .d("LOGO", "\"sJhwJIHpNnUC\"")
                .d("LONGITUDE", "0.10117186947705359")
                .d("NAME", "\"_EM_901_XYZ_\"")
                .d("NIF", "\"Xl6ci3\"")
            .and().insertInto("EMPLOYEES", 261L)
                .d("NAME", "\"1_ex2dd_KqjTc\"")
                .d("ID", "1")
                .r("PRINTSHOP_ID", 260L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"zgVoXlYcTD\", " + 
                    " \"priceA3\": \"1RRfHoC_7pUYMst\", " + 
                    " \"priceA4\": \"oVzt\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/-362522940/pricetable/deletecover")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/printshops/{id}/pricetable/deletecover
    */
    @Test(timeout = 60000)
    public void test_101_postOnDeletecoverReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"priceA3\": \"tV_nZAumkK\", " + 
                    " \"priceA4\": \"_EM_536_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/944/pricetable/deletecover?EMextraParam123=_EM_537_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/printshops/{id}/pricetable/deletepaper
    */
    @Test(timeout = 60000)
    public void test_102_postOnDeletepaperReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"priceA3DUPLEX\": \"_EM_539_XYZ_\", " + 
                    " \"priceA4DUPLEX\": \"_EM_541_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/143/pricetable/deletepaper?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/printshops/{id}/pricetable/deletering
    */
    @Test(timeout = 60000)
    public void test_103_postOnDeleteringReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 571, " + 
                    " \"price\": \"237\", " + 
                    " \"ringType\": \"_EM_542_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/237/pricetable/deletering")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/printshops/{id}/pricetable/rings
    */
    @Test(timeout = 60000)
    public void test_104_postOnRingsReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 3006L)
                .d("ADDRESS", "\"H\"")
                .d("AVG_RATING", "0.14226597970533872")
                .d("BALANCE_CURRENCY", "\"DmYIBYP\"")
                .d("BALANCE_FRACTIONAL_PART", "671")
                .d("BALANCE_INTEGER_PART", "758")
                .d("LATITUDE", "0.8879846461455159")
                .d("LOGO", "\"Jb4iPhh40uql\"")
                .d("LONGITUDE", "-1.1792930248434381")
                .d("NAME", "\"au4RbNiX1s55\"")
                .d("NIF", "\"_EM_5597_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 838, " + 
                    " \"ringType\": \"hJ6vM5xeo\", " + 
                    " \"supLim\": 712 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/-4534977440825348184/pricetable/rings?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/printshops/{id}/pricetable/rings
    */
    @Test(timeout = 60000)
    public void test_105_postOnPricetableRingsReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1888L)
                .d("ADDRESS", "\"iVU2A\"")
                .d("AVG_RATING", "0.7751743218506411")
                .d("BALANCE_CURRENCY", "\"ABRt\"")
                .d("BALANCE_FRACTIONAL_PART", "393")
                .d("BALANCE_INTEGER_PART", "114")
                .d("LATITUDE", "0.013203211894645572")
                .d("LOGO", "\"C7I\"")
                .d("LONGITUDE", "0.8123014637275259")
                .d("NAME", "\"u2y96yvfk3kr0U\"")
                .d("NIF", "\"JsrpcAXt\"")
            .and().insertInto("USERS", 1893L)
                .d("PASSWORD", "\"Bu7N\"")
                .d("USERNAME", "\"_EM_4054_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 892, " + 
                    " \"price\": \"_EM_4052_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/1888/pricetable/rings")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/printshops/{id}/pricetable/rings
    */
    @Test(timeout = 60000)
    public void test_106_postOnPricetableRingsWithQueryParamsReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 3006L)
                .d("ADDRESS", "\"H\"")
                .d("AVG_RATING", "0.14226597970533872")
                .d("BALANCE_CURRENCY", "\"DmYIBYP\"")
                .d("BALANCE_FRACTIONAL_PART", "671")
                .d("BALANCE_INTEGER_PART", "758")
                .d("LATITUDE", "0.8879846461455159")
                .d("LOGO", "\"Jb4iPhh40uql\"")
                .d("LONGITUDE", "-1.1792930248434381")
                .d("NAME", "\"au4RbNiX1s55\"")
                .d("NIF", "\"_EM_5597_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 787, " + 
                    " \"price\": \"kf1Eu8xIGsOv\", " + 
                    " \"supLim\": 963 " + 
                    " } ")
                .post(baseUrlOfSut + "/printshops/321/pricetable/rings?" + 
                    "latitude=pxVTWVe04&" + 
                    "longitude=kf1Eu8xIGsOv")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/printshops/{id}/pricetable/papers
    */
    @Test(timeout = 60000)
    public void test_107_putOnPricetablePapersWithQueryParamReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_2547_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 11, " + 
                    " \"priceA3DUPLEX\": \"THrm7tLkQLBcE\", " + 
                    " \"priceA4DUPLEX\": \"wfEMJ6IadQ\", " + 
                    " \"supLim\": 198 " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/332/pricetable/papers?latitude=uZWhEUf")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/printshops/{id}/pricetable/papers
    */
    @Test(timeout = 60000)
    public void test_108_putOnPricetablePapersReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"colors\": \"_EM_3693_XYZ_\", " + 
                    " \"priceA3SIMPLEX\": \"Q6qd5nYeNbAp\", " + 
                    " \"priceA4DUPLEX\": \"\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/609/pricetable/papers")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/printshops/{id}/pricetable/covers
    */
    @Test(timeout = 60000)
    public void test_109_putOnCoversReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"coverType\": \"_EM_591_XYZ_\", " + 
                    " \"priceA3\": \"_EM_592_XYZ_\", " + 
                    " \"priceA4\": \"\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/10/pricetable/covers?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/printshops/{id}/pricetable/rings
    */
    @Test(timeout = 60000)
    public void test_110_putOnRingsReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1508L)
                .d("ADDRESS", "\"k3\"")
                .d("AVG_RATING", "0.13251565931965148")
                .d("BALANCE_CURRENCY", "\"OE2v\"")
                .d("BALANCE_FRACTIONAL_PART", "485")
                .d("BALANCE_INTEGER_PART", "504")
                .d("LATITUDE", "0.6428361237069148")
                .d("LOGO", "\"UjU7fAfUmU\"")
                .d("LONGITUDE", "0.3794090229199717")
                .d("NAME", "\"ZXUA08LfXAL_pD\"")
                .d("NIF", "\"ouHysknBkI1zk\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "Rvv9WWmLPi")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 765, " + 
                    " \"ringType\": \"VwBpP3caPWQHBe\", " + 
                    " \"supLim\": 33492 " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/4611686018427385856/pricetable/rings")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/printshops/{printShopID}/pricetable/editstapling
    */
    @Test(timeout = 60000)
    public void test_111_putOnEditstaplingReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "_EM_599_XYZ_")
                .contentType("application/json")
                .body(" _EM_597_XYZ_ ")
                .put(baseUrlOfSut + "/printshops/139/pricetable/editstapling?EMextraParam123=_EM_598_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/printshops/{printShopID}/pricetable/editstapling
    */
    @Test(timeout = 60000)
    public void test_112_putOnEditstaplingReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 3039L)
                .d("ADDRESS", "\"gP\"")
                .d("AVG_RATING", "1.215996111811053")
                .d("BALANCE_CURRENCY", "\"\"")
                .d("BALANCE_FRACTIONAL_PART", "729")
                .d("BALANCE_INTEGER_PART", "31")
                .d("LATITUDE", "0.13502001265522534")
                .d("LOGO", "\"m1t5WXjXZfk\"")
                .d("LONGITUDE", "0.527643580723979")
                .d("NAME", "\"Kba2\"")
                .d("NIF", "\"025ZdWiKU6CSdb\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" _EM_597_XYZ_ ")
                .put(baseUrlOfSut + "/printshops/-117/pricetable/editstapling")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/printshops/{id}/pricetable/covers
    */
    @Test(timeout = 60000)
    public void test_113_putOnCoversReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1744L)
                .d("ADDRESS", "\"HOMHMtkoqd1mtH\"")
                .d("AVG_RATING", "0.018908913121805315")
                .d("BALANCE_CURRENCY", "\"\"")
                .d("BALANCE_FRACTIONAL_PART", "754")
                .d("BALANCE_INTEGER_PART", "259")
                .d("LATITUDE", "0.748154081857168")
                .d("LOGO", "\"\"")
                .d("LONGITUDE", "0.5011159151179945")
                .d("NAME", "\"F7Zst1EkWcsY8\"")
                .d("NIF", "\"LPMqXSy7cZ4JforG\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "fWBN")
                .contentType("application/json")
                .body(" { " + 
                    " \"priceA3\": \"\", " + 
                    " \"priceA4\": \"H_DOci1Yhw3TCu\" " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/-32170/pricetable/covers")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/printshops/{id}/pricetable/papers
    */
    @Test(timeout = 60000)
    public void test_114_putOnPapersReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 1061L)
                .d("ADDRESS", "\"1jZSDUciLD\"")
                .d("AVG_RATING", "0.38120008934993055")
                .d("BALANCE_CURRENCY", "\"ZmUaxlabklU\"")
                .d("BALANCE_FRACTIONAL_PART", "-15987")
                .d("BALANCE_INTEGER_PART", "45789038")
                .d("LATITUDE", "0.037340706587946526")
                .d("LOGO", "\"nZ\"")
                .d("LONGITUDE", "0.4310692462274276")
                .d("NAME", "\"uYoyY\"")
                .d("NIF", "\"2sEYdkWigOIqwB2D\"")
            .and().insertInto("USERS", 1064L)
                .d("PASSWORD", "\"j6w1DwnYgzoL0SEe\"")
                .d("USERNAME", "\"9B1bludez\"")
            .and().insertInto("CONSUMERS", 1063L)
                .d("BALANCE_CURRENCY", "\"svCN96lU5ccgUdJNw\"")
                .d("BALANCE_FRACTIONAL_PART", "993")
                .d("BALANCE_INTEGER_PART", "229")
                .d("NAME", "\"\"")
                .d("ID", "12")
            .and().insertInto("PRINTING_SCHEMAS", 1062L)
                .d("BINDING_SPECS", "\"T8_awMsbh\"")
                .d("COVER_SPECS", "NULL")
                .d("IS_DELETED", "false")
                .d("PSCHEMA_NAME", "\"i5XSyCaKimdEia\"")
                .d("PAPER_SPECS", "\"Anj6_M\"")
                .d("CONSUMER_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_2547_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"infLim\": 131083, " + 
                    " \"priceA3DUPLEX\": \"THrm?tLkQLBcE\", " + 
                    " \"priceA4DUPLEX\": \"wfEMJ6IadQ\", " + 
                    " \"supLim\": 202 " + 
                    " } ")
                .put(baseUrlOfSut + "/printshops/-1716/pricetable/papers?" + 
                    "latitude=uZWhEUf&" + 
                    "longitude=f")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) DELETE:/consumer/requests/cancel/{id}
    */
    @Test(timeout = 60000)
    public void test_115_deleteOnCancelReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 789L)
                .d("ADDRESS", "\"UH\"")
                .d("AVG_RATING", "-3632.7373568891717")
                .d("BALANCE_CURRENCY", "\"ULKuK2ZtY1vxwvSA\"")
                .d("BALANCE_FRACTIONAL_PART", "404")
                .d("BALANCE_INTEGER_PART", "0")
                .d("LATITUDE", "0.7010923483688728")
                .d("LOGO", "\"\"")
                .d("LONGITUDE", "0.0")
                .d("NAME", "\"_EM_1918_XYZ_\"")
                .d("NIF", "\"_EM_1919_XYZ_\"")
            .and().insertInto("PRINTSHOPS", 788L)
                .d("ADDRESS", "\"G>CKSQ\"")
                .d("AVG_RATING", "0.23060849349008938")
                .d("BALANCE_CURRENCY", "\"8_h\"")
                .d("BALANCE_FRACTIONAL_PART", "-2096584")
                .d("BALANCE_INTEGER_PART", "0")
                .d("LATITUDE", "0.8419109371957881")
                .d("LOGO", "\"GJ8zSU1\"")
                .d("LONGITUDE", "0.6594571165957419")
                .d("NAME", "\"qwU4LX\"")
                .d("NIF", "\"qUUU`UKUqGoU\"")
            .and().insertInto("USERS", 787L)
                .d("PASSWORD", "\"lRZrkc\"")
                .d("USERNAME", "\"PAJD0ZLpm0wH4D\"")
            .and().insertInto("CONSUMERS", 786L)
                .d("BALANCE_CURRENCY", "\"_EM_1920_XYZ_\"")
                .d("BALANCE_FRACTIONAL_PART", "253")
                .d("BALANCE_INTEGER_PART", "547")
                .d("NAME", "\"lvysFSDiY\"")
                .d("ID", "19")
            .and().insertInto("PRINT_REQUESTS", 783L)
                .d("ARRIVAL", "NULL")
                .d("COST", "0.6682226314186493")
                .d("DELIVERED", "\"2000-06-29 19:31:55\"")
                .d("EMPATTENDED", "\"aVI\"")
                .d("EMPDELIVERED", "\"PG4YRS7\"")
                .d("FINISHED", "\"1938-08-20 19:38:53\"")
                .d("PAYPAL_SALE_ID", "NULL")
                .d("PAYMENT_TYPE", "\"T10c3V5KgXvJA\"")
                .d("STATUS", "\"NOT_PAYED\"")
                .d("CONSUMER_ID", "NULL")
                .d("PRINTSHOP_ID", "NULL")
                .d("PRINTSHOP", "NULL")
                .d("CONSUMER", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/-4611686018427252224")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) DELETE:/consumer/requests/cancel/{id}
    */
    @Test(timeout = 60000)
    public void test_116_deleteOnCancelReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hbzoxMjM0") // consumer
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/consumer/requests/cancel/755")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) DELETE:/printshops/{printShopID}/employees/{employeeID}
    */
    @Test(timeout = 60000)
    public void test_117_deleteOnEmployeReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/printshops/253/employees/-5846188657249973622")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) DELETE:/printshops/{printShopID}/employees/{employeeID}
    */
    @Test(timeout = 60000)
    public void test_118_deleteOnEmployeReturns200() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "_EM_2222_XYZ_")
                .delete(baseUrlOfSut + "/printshops/432/employees/993")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }
    
    
    /**
    * Calls:
    * (200) DELETE:/printshops/{printShopID}/employees/{employeeID}
    */
    @Test(timeout = 60000)
    public void test_119_deleteOnEmployeReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRINTSHOPS", 439L)
                .d("ADDRESS", "\"ZmuRftP98BieZ\"")
                .d("AVG_RATING", "0.199446539640179")
                .d("BALANCE_CURRENCY", "\"kObMgdUzNWn\"")
                .d("BALANCE_FRACTIONAL_PART", "287")
                .d("BALANCE_INTEGER_PART", "789")
                .d("LATITUDE", "0.40049734915524526")
                .d("LOGO", "\"YY8abHQjyo4m\"")
                .d("LONGITUDE", "0.8064781151610747")
                .d("NAME", "\"7F\"")
                .d("NIF", "\"W\"")
            .and().insertInto("USERS", 442L)
                .d("PASSWORD", "\"fBdvfdHQXx9CkKPE\"")
                .d("USERNAME", "\"lZ5DgqV70SECrE\"")
            .and().insertInto("PRINTSHOPS", 441L)
                .d("ADDRESS", "\"72M3xn_d\"")
                .d("AVG_RATING", "0.04778372436386369")
                .d("BALANCE_CURRENCY", "\"k7\"")
                .d("BALANCE_FRACTIONAL_PART", "203")
                .d("BALANCE_INTEGER_PART", "898269989")
                .d("LATITUDE", "0.5651081916506876")
                .d("LOGO", "\"aZ2NdzURSZr\"")
                .d("LONGITUDE", "0.7278620233561072")
                .d("NAME", "\"G6c\"")
                .d("NIF", "\"tPi7EkB\"")
            .and().insertInto("EMPLOYEES", 440L)
                .d("NAME", "\"\"")
                .d("ID", "1")
                .d("PRINTSHOP_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic am9hcXVpbToxMjM0") // manager
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/printshops/-1586909819/employees/649?EMextraParam123=_EM_3_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"success\":false}"));
    }


}
