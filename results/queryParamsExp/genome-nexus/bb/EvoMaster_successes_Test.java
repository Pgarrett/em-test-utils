/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-08-19T00:02:54.195-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 30 tests
 * <br>
*  Covered targets: 153
 * <br>
*  Used time: 0h 19m 29s
 * <br>
*  Needed budget for current results: 93%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static String baseUrlOfSut = "http://localhost:57814";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    /**
    * Calls:
    * (200) GET:/version
    */
    @Test(timeout = 60000)
    public void test_0_getOnVersionReturnsObject() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/version")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'genomeNexus'.'server'.'version'", containsString("1.0.2"))
                .body("'genomeNexus'.'server'.'static'", equalTo(true))
                .body("'genomeNexus'.'database'.'version'", containsString("3.6.2"))
                .body("'genomeNexus'.'database'.'static'", equalTo(true))
                .body("'vep'.'server'.'version'", containsString("NA"))
                .body("'vep'.'server'.'static'", equalTo(false))
                .body("'vep'.'cache'.'version'", containsString("NA"))
                .body("'vep'.'cache'.'static'", equalTo(false))
                .body("'vep'.'comment'", containsString("VEP annotations are currently externally sourced from ENSEMBL. Results are subject to change without notice."));
    }
    
    
    /**
    * Calls:
    * (200) POST:/annotation
    */
    @Test(timeout = 60000)
    public void test_1_postOnAnnotationWithQueryParamsEmptyTokenReturns200() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" [ " + 
                    " \"R3b\", " + 
                    " \"08xB1gIoZLZia\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation?" + 
                    "isoformOverrideSource=PtW&" + 
                    "token=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'variant'", containsString("R3b"))
                .body("[0].'originalVariantQuery'", containsString("R3b"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("08xB1gIoZLZia"))
                .body("[1].'originalVariantQuery'", containsString("08xB1gIoZLZia"))
                .body("[1].'successfully_annotated'", equalTo(false));
    }
    
    
    /**
    * Calls:
    * (200) POST:/annotation
    */
    @Test(timeout = 60000)
    public void test_2_postOnAnnotationWithQueryParamReturns200() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" [] ")
                .post(baseUrlOfSut + "/annotation?fields=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/ptm/experimental
    */
    @Test(timeout = 60000)
    public void test_3_getOnPtmExperimentalReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/ptm/experimental")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/ensembl/transcript
    */
    @Test(timeout = 60000)
    public void test_4_getOnTranscriptReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/ensembl/transcript?geneId=A59_P")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/annotation/{variant}
    */
    @Test(timeout = 60000)
    public void test_5_getOnAnnotReturnsObject() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/annotation/bPDWPZ2LF?" + 
                    "token=OiwUnyuXyQlS&" + 
                    "fields=GAJS8E&fields=blWX3&fields=&fields=AtqkWGcW&fields=oW4ywsvtHZk6ua")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("bPDWPZ2LF"))
                .body("'originalVariantQuery'", containsString("bPDWPZ2LF"))
                .body("'successfully_annotated'", equalTo(false));
    }
    
    
    /**
    * Calls:
    * (200) GET:/ensembl/transcript
    */
    @Test(timeout = 60000)
    public void test_6_getOnEnsemblTranscriptWithQueryParamsReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/ensembl/transcript?" + 
                    "geneId=dh2gJ0&" + 
                    "proteinId=FJT&" + 
                    "hugoSymbol=FSgra")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/annotation/{variant}
    */
    @Test(timeout = 60000)
    public void test_7_getOnAnnotReturnsObject() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/annotation/SUZa?" + 
                    "isoformOverrideSource=zZWRwsi0SdTh_Ooy&" + 
                    "fields=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("SUZa"))
                .body("'originalVariantQuery'", containsString("SUZa"))
                .body("'successfully_annotated'", equalTo(false));
    }
    
    
    /**
    * Calls:
    * (200) GET:/ptm/experimental
    */
    @Test(timeout = 60000)
    public void test_8_getOnPtmExperimentalWithQueryParamReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/ptm/experimental?ensemblTranscriptId=Ut")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/annotation/{variant}
    */
    @Test(timeout = 60000)
    public void test_9_getOnAnnotWithQueryParamsEmptyIsoformOverrideSourceAndEmptyToken() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/annotation/T6AsR?" + 
                    "isoformOverrideSource=&" + 
                    "token=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("T6AsR"))
                .body("'originalVariantQuery'", containsString("T6AsR"))
                .body("'successfully_annotated'", equalTo(false));
    }
    
    
    /**
    * Calls:
    * (200) GET:/ensembl/transcript
    */
    @Test(timeout = 60000)
    public void test_10_getOnTranscriptReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/ensembl/transcript?hugoSymbol=ZJ3D")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/v2/api-docs
    */
    @Test(timeout = 60000)
    public void test_11_getOnApi_docsReturnsObject() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/api-docs")
                .then()
                .statusCode(200);
    }
    
    
    /**
    * Calls:
    * (200) POST:/ptm/experimental
    */
    @Test(timeout = 60000)
    public void test_12_postOnExperimentalReturns200() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"transcriptIds\": [ " + 
                    " \"RZsN40\", " + 
                    " \"6fEnW\", " + 
                    " \"3_88RD\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/ptm/experimental")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/pfam/domain
    */
    @Test(timeout = 60000)
    public void test_13_postOnDomainReturns200() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" [ " + 
                    " \"hycOtbZmsrG9zVE\", " + 
                    " \"uybGqy\", " + 
                    " \"kibZpdohxWC_ByS\", " + 
                    " \"c\", " + 
                    " \"wxdYOwyjPE\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/pfam/domain")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/pdb/header
    */
    @Test(timeout = 60000)
    public void test_14_postOnHeaderReturns200() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" [ " + 
                    " \"zkqCn2NWU_\", " + 
                    " \"DrxwF5Oqvx_deodO\", " + 
                    " \"EdD7MPwODJpi\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/pdb/header")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/ensembl/transcript
    */
    @Test(timeout = 60000)
    public void test_15_postOnTranscriptReturns200() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"hugoSymbols\": [], " + 
                    " \"transcriptIds\": [ " + 
                    " \"pC2TWuTlh53b\", " + 
                    " \"H01axhn\", " + 
                    " \"2ppZAlAN0bB0k7K\", " + 
                    " \"x\", " + 
                    " \"GV\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/ensembl/transcript")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/annotation/genomic
    */
    @Test(timeout = 60000)
    public void test_16_postOnAnnotationGenomicWithQueryParamReturns200() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" [] ")
                .post(baseUrlOfSut + "/annotation/genomic?isoformOverrideSource=bocdLV1IqDdD")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/annotation/dbsnp/
    */
    @Test(timeout = 60000)
    public void test_17_postOnDbsnpDbsnpWithQueryParamReturns200() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" [ " + 
                    " \"U\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/dbsnp/?isoformOverrideSource=OHXctvWqX1XLgNm")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'variant'", containsString("U"))
                .body("[0].'originalVariantQuery'", containsString("U"))
                .body("[0].'successfully_annotated'", equalTo(false));
    }
    
    
    /**
    * Calls:
    * (200) POST:/annotation/dbsnp/
    */
    @Test(timeout = 60000)
    public void test_18_postOnDbsnpDbsnpWithQueryParamsReturns200() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" [ " + 
                    " \"FYUWkO4UAPg\", " + 
                    " \"EY5LLp9w7ikEEJlg\", " + 
                    " \"isd90RP\", " + 
                    " \"NvUn7swX3Jt0Q\", " + 
                    " \"9ypZ2_W5fE\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/dbsnp/?" + 
                    "token=DhD5n5ZSAOt&" + 
                    "fields=f&fields=W8_uf3OcLbRJxN")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'variant'", containsString("FYUWkO4UAPg"))
                .body("[0].'originalVariantQuery'", containsString("FYUWkO4UAPg"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("EY5LLp9w7ikEEJlg"))
                .body("[1].'originalVariantQuery'", containsString("EY5LLp9w7ikEEJlg"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString("isd90RP"))
                .body("[2].'originalVariantQuery'", containsString("isd90RP"))
                .body("[2].'successfully_annotated'", equalTo(false))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) POST:/annotation/genomic
    */
    @Test(timeout = 60000)
    public void test_19_postOnAnnotationGenomicReturns200() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"std\", " + 
                    " \"start\": 603, " + 
                    " \"end\": 251, " + 
                    " \"referenceAllele\": \"QwEi5uLlOyfYKHWO\", " + 
                    " \"variantAllele\": \"bPDWPZ2LF\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"1VK_NqKl3EOoSoyD\", " + 
                    " \"start\": 11, " + 
                    " \"end\": 712, " + 
                    " \"referenceAllele\": \"RImioE\", " + 
                    " \"variantAllele\": \"bPDWPZ2LF\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'variant'", containsString("std:g.603_251delinsbPDWPZ2LF"))
                .body("[0].'originalVariantQuery'", containsString("std,603,251,QwEi5uLlOyfYKHWO,bPDWPZ2LF"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("1VK_NqKl3EOoSoyD:g.11_712delinsbPDWPZ2LF"))
                .body("[1].'originalVariantQuery'", containsString("1VK_NqKl3EOoSoyD,11,712,RImioE,bPDWPZ2LF"))
                .body("[1].'successfully_annotated'", equalTo(false));
    }
    
    
    /**
    * Calls:
    * (200) POST:/annotation/genomic
    */
    @Test(timeout = 60000)
    public void test_20_postOnAnnotationGenomicWithQueryParamsReturns200() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"chromosome\": \"rnb\", " + 
                    " \"start\": 719, " + 
                    " \"end\": 208, " + 
                    " \"referenceAllele\": \"T\", " + 
                    " \"variantAllele\": \"C\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"wKBrGEDTrxNLEqAn\", " + 
                    " \"start\": 246, " + 
                    " \"end\": 977, " + 
                    " \"referenceAllele\": \"33Vv3\", " + 
                    " \"variantAllele\": \"T6AsR\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"6S\", " + 
                    " \"start\": 988, " + 
                    " \"end\": 401, " + 
                    " \"referenceAllele\": \"gkt\", " + 
                    " \"variantAllele\": \"bPDWPZ2LF\" " + 
                    " }, " + 
                    " { " + 
                    " \"chromosome\": \"xhc11Ynbt\", " + 
                    " \"start\": 432, " + 
                    " \"end\": 335, " + 
                    " \"referenceAllele\": \"5fHi2JD0Jhnur\", " + 
                    " \"variantAllele\": \"SUZa\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/annotation/genomic?" + 
                    "isoformOverrideSource=D1N7T&" + 
                    "token=QFaK9QD&" + 
                    "fields=Wh")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'variant'", containsString("rnb:g.719T>C"))
                .body("[0].'originalVariantQuery'", containsString("rnb,719,208,T,C"))
                .body("[0].'successfully_annotated'", equalTo(false))
                .body("[1].'variant'", containsString("wKBrGEDTrxNLEqAn:g.246_977delinsT6AsR"))
                .body("[1].'originalVariantQuery'", containsString("wKBrGEDTrxNLEqAn,246,977,33Vv3,T6AsR"))
                .body("[1].'successfully_annotated'", equalTo(false))
                .body("[2].'variant'", containsString("6S:g.988_401delinsbPDWPZ2LF"))
                .body("[2].'originalVariantQuery'", containsString("6S,988,401,gkt,bPDWPZ2LF"))
                .body("[2].'successfully_annotated'", equalTo(false))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/ensembl/transcript/{transcriptId}
    */
    @Test(timeout = 60000)
    public void test_21_getOnTranscriptReturnsEmpty() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/ensembl/transcript/0lj8R8")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/annotation/dbsnp/{variantId}
    */
    @Test(timeout = 60000)
    public void test_22_getOnDbsnpReturnsObject() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/annotation/dbsnp/SUZa?" + 
                    "token=2PCKMP_FTvYbC7A&" + 
                    "fields=xd&fields=cSCgm_OV&fields=&fields=J0On")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("SUZa"))
                .body("'originalVariantQuery'", containsString("SUZa"))
                .body("'successfully_annotated'", equalTo(false));
    }
    
    
    /**
    * Calls:
    * (200) GET:/annotation/dbsnp/{variantId}
    */
    @Test(timeout = 60000)
    public void test_23_getOnAnnotationDbsnpWithQueryParamReturnsObject() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/annotation/dbsnp/bPDWPZ2LF?token=eLKotEuk68W")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("bPDWPZ2LF"))
                .body("'originalVariantQuery'", containsString("bPDWPZ2LF"))
                .body("'successfully_annotated'", equalTo(false));
    }
    
    
    /**
    * Calls:
    * (200) GET:/annotation/dbsnp/{variantId}
    */
    @Test(timeout = 60000)
    public void test_24_getOnAnnotationDbsnpReturnsObject() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/annotation/dbsnp/SUZa")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("SUZa"))
                .body("'originalVariantQuery'", containsString("SUZa"))
                .body("'successfully_annotated'", equalTo(false));
    }
    
    
    /**
    * Calls:
    * (200) GET:/annotation/dbsnp/{variantId}
    */
    @Test(timeout = 60000)
    public void test_25_getOnDbsnpReturnsObject() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/annotation/dbsnp/SUZa?" + 
                    "isoformOverrideSource=OOG4xU6&" + 
                    "token=OCcA9FkTyTAZ&" + 
                    "fields=w7PUodwu0Yrn&fields=XB&fields=ALb2msLyk&fields=ewsKtJ1X2yedBbQ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'variant'", containsString("SUZa"))
                .body("'originalVariantQuery'", containsString("SUZa"))
                .body("'successfully_annotated'", equalTo(false));
    }
    
    
    /**
    * Calls:
    * (200) POST:/ensembl/canonical-transcript/hgnc
    */
    @Test(timeout = 60000)
    public void test_26_postOnCanonical_transcriptHgncWithQueryParamReturns200() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" [ " + 
                    " \"NayaJ1Jwt\", " + 
                    " \"QvVtma\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-transcript/hgnc?isoformOverrideSource=uniprot")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/ensembl/canonical-transcript/hgnc
    */
    @Test(timeout = 60000)
    public void test_27_postOnCanonical_transcriptHgncReturns200() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" [ " + 
                    " \"rvbFow72SeFURvs\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-transcript/hgnc")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/ensembl/canonical-gene/hgnc
    */
    @Test(timeout = 60000)
    public void test_28_postOnCanonical_geneHgncReturns200() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" [ " + 
                    " \"976moT\", " + 
                    " \"mXO0zwB\", " + 
                    " \"j\", " + 
                    " \"pcLMhB\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-gene/hgnc")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/ensembl/canonical-gene/entrez
    */
    @Test(timeout = 60000)
    public void test_29_postOnEntrezReturns200() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" [] ")
                .post(baseUrlOfSut + "/ensembl/canonical-gene/entrez")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }


}
