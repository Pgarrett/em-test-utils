/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-08-19T00:02:54.232-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 12 tests
 * <br>
*  Covered targets: 30
 * <br>
*  Used time: 0h 19m 29s
 * <br>
*  Needed budget for current results: 93%
 * <br>
*  This file contains test cases that represent failed calls, but not indicative of faults.
*/
public class EvoMaster_others_Test {

    
    private static String baseUrlOfSut = "http://localhost:57814";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    /**
    * Calls:
    * (400) GET:/ensembl/xrefs
    */
    @Test(timeout = 60000)
    public void test_0_getOnXrefsReturns400() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/ensembl/xrefs?accession=eCm2NJh")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("{\"error\":\"ID 'eCm2NJh' not found\"}"));
    }
    
    
    /**
    * Calls:
    * (404) POST:/ptm/experimental
    */
    @Test(timeout = 60000)
    public void test_1_postOnExperimentalReturns404() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/ptm/experimental")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) GET:/pfam/domain/{pfamAccession}
    */
    @Test(timeout = 60000)
    public void test_2_getOnDomainReturns404() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/pfam/domain/lU9zQPqsC6Hc96ms")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("PFAM domain not found: lU9zQPqsC6Hc96ms"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/pdb/header/{pdbId}
    */
    @Test(timeout = 60000)
    public void test_3_getOnHeaderReturns404() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/pdb/header/I")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("PDB web service error for id I: <!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"icon\" href=\"/favicon.ico\"/><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"/><title>PDB Archive over AWS</title><script defer=\"defer\" src=\"/static/js/main.d4d75e87.js\"></script><link href=\"/static/css/main.858212c0.css\" rel=\"stylesheet\"></head><body><noscript>You need to enable JavaScript to run this app.</noscript><div id=\"root\"></div></body></html>"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/annotation/genomic/{genomicLocation}
    */
    @Test(timeout = 60000)
    public void test_4_getOnGenomReturns404() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/annotation/genomic/nOmnyA?token=5fVc34UVDMJt9")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) GET:/annotation/genomic/{genomicLocation}
    */
    @Test(timeout = 60000)
    public void test_5_getOnAnnotationGenomWithQueryParamsReturns404() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/annotation/genomic/JYRbUMseEjNvKKp6?" + 
                    "isoformOverrideSource=Hqa&" + 
                    "token=Ko&" + 
                    "fields=")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) GET:/annotation/genomic/{genomicLocation}
    */
    @Test(timeout = 60000)
    public void test_6_getOnGenomReturns404() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/annotation/genomic/WX6LW?isoformOverrideSource=XoQx3o8x")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) POST:/ensembl/canonical-gene/entrez
    */
    @Test(timeout = 60000)
    public void test_7_postOnEntrezReturns404() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" [ " + 
                    " \"ETQL\", " + 
                    " \"wqFqBxi26M2610\", " + 
                    " \"O_9iV\", " + 
                    " \"\", " + 
                    " \"81SjC155\" " + 
                    " ] ")
                .post(baseUrlOfSut + "/ensembl/canonical-gene/entrez")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) GET:/ensembl/canonical-transcript/hgnc/{hugoSymbol}
    */
    @Test(timeout = 60000)
    public void test_8_getOnCanonical_transcriptHgncWithQueryParamReturns404() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/ensembl/canonical-transcript/hgnc/B7qZbIi?isoformOverrideSource=uniprot")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Ensembl transcript not found: B7qZbIi"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/ensembl/canonical-gene/hgnc/{hugoSymbol}
    */
    @Test(timeout = 60000)
    public void test_9_getOnCanonical_geneHgncReturns404() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/ensembl/canonical-gene/hgnc/bQiGo1mCZxgS0fg")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) GET:/ensembl/canonical-gene/entrez/{entrezGeneId}
    */
    @Test(timeout = 60000)
    public void test_10_getOnEntrezReturns404() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/ensembl/canonical-gene/entrez/tISvqDrMgiHwpHq1")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) GET:/ensembl/canonical-transcript/hgnc/{hugoSymbol}
    */
    @Test(timeout = 60000)
    public void test_11_getOnCanonical_transcriptHgncReturns404() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/ensembl/canonical-transcript/hgnc/1nrPbzPH")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Ensembl transcript not found: 1nrPbzPH"));
    }


}
