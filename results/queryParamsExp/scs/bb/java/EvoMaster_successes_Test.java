/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-08-18T19:55:09.728-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 13 tests
 * <br>
*  Covered targets: 45
 * <br>
*  Used time: 0h 15m 14s
 * <br>
*  Needed budget for current results: 91%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static String baseUrlOfSut = "http://localhost:8080";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    /**
    * Calls:
    * (200) GET:/v2/api-docs
    */
    @Test(timeout = 60000)
    public void test_0_getOnApi_docsReturnsObject() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/api-docs")
                .then()
                .statusCode(200);
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/pat/{txt}
    */
    @Test(timeout = 60000)
    public void test_1_getOnApiPatReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/pat/egip_Fiw")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("none"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/title/{sex}/{title}
    */
    @Test(timeout = 60000)
    public void test_2_getOnTitlReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/title/FpVUHEAUtyS25BG/hrTZhAunMx")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("-1"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/pat/{txt}/{pat}
    */
    @Test(timeout = 60000)
    public void test_3_getOnPatReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/pat/VAmzq7kmVQx7gtR/MRrNvZXE")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/notypevar/{i}/{s}
    */
    @Test(timeout = 60000)
    public void test_4_getOnNotypevarReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/notypevar/353/jNrWaIpItpN5Ef")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("3"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/filesuffix/{directory}/{file}
    */
    @Test(timeout = 60000)
    public void test_5_getOnFilesuffixReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/filesuffix/chb_d3mbPn72y/REyrs1x7N8id")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/dateparse/{dayname}/{monthname}
    */
    @Test(timeout = 60000)
    public void test_6_getOnDateparsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/dateparse/aLRZPuLdDBIO2t/k00k6kUTbmFf")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/costfuns/{i}/{s}
    */
    @Test(timeout = 60000)
    public void test_7_getOnCostfunReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/costfuns/137/V")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("10"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/notypevar/{i}/{s}
    */
    @Test(timeout = 60000)
    public void test_8_getOnNotypevarReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/notypevar/-1413008525/TBMCIfSS")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/costfuns/{i}/{s}
    */
    @Test(timeout = 60000)
    public void test_9_getOnCostfunReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/costfuns/-355478578/3RD99")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("10"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/cookie/{name}/{val}/{site}
    */
    @Test(timeout = 60000)
    public void test_10_getOnCookiReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/cookie/pLwyl3j3vI99Dd/92xAy8NqM2ATh4R/fsy3sg6wm")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/calc/{op}/{arg1}/{arg2}
    */
    @Test(timeout = 60000)
    public void test_11_getOnCalcReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/calc/n1PjH9sQ05T/0.7191102974689202/0.8102829177391039")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0.0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ordered4/{w}/{x}/{z}/{y}
    */
    @Test(timeout = 60000)
    public void test_12_getOnOrdered4ReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/ordered4/Hp/SYp/BOSOn4CJhb1LDLVq/9sQf")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("unordered"));
    }


}
