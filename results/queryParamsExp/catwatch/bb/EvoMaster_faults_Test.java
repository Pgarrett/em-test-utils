import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-02-16T16:03:04.255-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 54 tests
 * <br>
*  Covered targets: 281
 * <br>
*  Used time: 0h 15m 0s
 * <br>
*  Needed budget for current results: 62%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.embedded.uk.gov.pay.api.app.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments/{paymentId}/refunds/{refundId}
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_0_getOnRefundShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments/{paymentId}/refunds/{refundId}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/refunds/{refundId} -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/refunds/{refundId} -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v1/payments/_EM_145_XYZ_/refunds/SvFjHnxGtwtUf")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments/{paymentId}/refunds
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_1_getOnPaymentRefundsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments/{paymentId}/refunds
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/refunds -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/refunds -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v1/payments/_EM_146_XYZ_/refunds")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments/{paymentId}/cancel
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_2_postOnCancelShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments/{paymentId}/cancel
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/cancel -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/cancel -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/v1/payments/_EM_167_XYZ_/cancel?EMextraParam123=42")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments/{paymentId}/events
    * Found 3 potential faults. Type-codes: 100, 200
    * Using 1 example:
    *   hu20sqlact5260q2nanm0q8u93
    */
    @Test(timeout = 60000)
    public void test_3_getOnEventsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments/{paymentId}/events
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/events -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/events -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "H3PmkscXLLR4F")
                .header("X-Request-Id", "_EM_804_XYZ_")
                .header("X-Forwarded-For", "_EM_805_XYZ_")
                .header("x-forwarded-for", "_EM_806_XYZ_")
                .get(baseUrlOfSut + "/v1/payments/hu20sqlact5260q2nanm0q8u93/events?EMextraParam123=_EM_4_XYZ_")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments/{paymentId}/capture
    * Found 3 potential faults. Type-codes: 100, 200
    * Using 1 example:
    *   hu20sqlact5260q2nanm0q8u93
    */
    @Test(timeout = 60000)
    public void test_4_postOnCaptureShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments/{paymentId}/capture
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/capture -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/capture -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/v1/payments/hu20sqlact5260q2nanm0q8u93/capture")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    * Using 3 examples:
    *   12000
    *   GB
    *   J. Bogs
    */
    @Test(timeout = 60000)
    public void test_5_postOnPaymentsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 12000, " + 
                    " \"reference\": \"_EM_38375_XYZ_\", " + 
                    " \"description\": \"_EM_38376_XYZ_\", " + 
                    " \"return_url\": \"56K7E4Xrc0n\", " + 
                    " \"moto\": false, " + 
                    " \"prefilled_cardholder_details\": { " + 
                    " \"cardholder_name\": \"J. Bogs\", " + 
                    " \"billing_address\": { " + 
                    " \"line2\": \"GzNxy84PLxx\", " + 
                    " \"postcode\": \"_EM_38378_XYZ_\", " + 
                    " \"city\": \"e6NUVnt\", " + 
                    " \"country\": \"GB\" " + 
                    " } " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    * Using 1 example:
    *   New passport application
    */
    @Test(timeout = 60000)
    public void test_6_postOnV1PaymentsWithQueryParamShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-forwarded-for", "84_m")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 43, " + 
                    " \"reference\": \"3kHZKIxWO\", " + 
                    " \"description\": \"New passport application\", " + 
                    " \"email\": \"GKsVLvwldQgAO\", " + 
                    " \"return_url\": \"WpzGbgHO\", " + 
                    " \"moto\": false, " + 
                    " \"prefilled_cardholder_details\": { " + 
                    " \"billing_address\": { " + 
                    " \"country\": \"AIKNUYOO\" " + 
                    " } " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments?display_size=Z_H99UaQuiiE")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    * Using 4 examples:
    *   12000
    *   12345
    *   J. Bogs
    *   New passport application
    */
    @Test(timeout = 60000)
    public void test_7_postOnPaymentsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 12000, " + 
                    " \"reference\": \"12345\", " + 
                    " \"description\": \"New passport application\", " + 
                    " \"language\": \"en\", " + 
                    " \"email\": \"_EM_27959_XYZ_\", " + 
                    " \"return_url\": \"PqF5GeSH57I\", " + 
                    " \"prefilled_cardholder_details\": { " + 
                    " \"cardholder_name\": \"J. Bogs\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    * Using 1 example:
    *   Joe.Bogs@example.org
    */
    @Test(timeout = 60000)
    public void test_8_postOnPaymentsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("X-Request-Id", "_EM_20879_XYZ_")
                .header("X-Forwarded-For", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 201, " + 
                    " \"reference\": \"\", " + 
                    " \"description\": \"_EM_20871_XYZ_\", " + 
                    " \"language\": \"cy\", " + 
                    " \"email\": \"Joe.Bogs@example.org\", " + 
                    " \"return_url\": \"D2mlj3JwxePBjqt\", " + 
                    " \"delayed_capture\": false, " + 
                    " \"prefilled_cardholder_details\": { " + 
                    " \"cardholder_name\": \"tJJXRhglV8k\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments/{paymentId}
    * Found 3 potential faults. Type-codes: 100, 200
    * Using 1 example:
    *   hu20sqlact5260q2nanm0q8u93
    */
    @Test(timeout = 60000)
    public void test_9_getOnV1PaymentWithQueryParamsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments/{paymentId}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId} -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId} -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "_EM_15142_XYZ_")
                .header("x-request-id", "rrDn9EB00hCejMt")
                .header("X-Request-Id", "_EM_15143_XYZ_")
                .header("X-Forwarded-For", "_EM_15144_XYZ_")
                .header("x-forwarded-for", "_EM_15145_XYZ_")
                .get(baseUrlOfSut + "/v1/payments/hu20sqlact5260q2nanm0q8u93?" + 
                    "display_size=_EM_15147_XYZ_&" + 
                    "to_date=_EM_15148_XYZ_&" + 
                    "page=_EM_15149_XYZ_")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments/{paymentId}
    * Found 3 potential faults. Type-codes: 100, 200
    * Using 1 example:
    *   hu20sqlact5260q2nanm0q8u93
    */
    @Test(timeout = 60000)
    public void test_10_getOnV1PaymentWithQueryParamShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments/{paymentId}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId} -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId} -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "")
                .header("X-Request-Id", "_EM_16122_XYZ_")
                .header("X-Forwarded-For", "UcUrlIpt4n")
                .header("x-forwarded-for", "")
                .get(baseUrlOfSut + "/v1/payments/hu20sqlact5260q2nanm0q8u93?to_settled_date=_EM_16123_XYZ_")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    * Using 5 examples:
    *   12000
    *   AB1 2CD
    *   Joe.Bogs@example.org
    *   New passport application
    *   address line 1
    */
    @Test(timeout = 60000)
    public void test_11_postOnPaymentsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 12000, " + 
                    " \"reference\": \"4S3TD8gNz0dn3UFe\", " + 
                    " \"description\": \"New passport application\", " + 
                    " \"language\": \"cy\", " + 
                    " \"email\": \"Joe.Bogs@example.org\", " + 
                    " \"return_url\": \"_EM_22812_XYZ_\", " + 
                    " \"moto\": false, " + 
                    " \"metadata\": { " + 
                    " \"_EM_22813_XYZ_\": { " + 
                    " \"EM_tainted_map\": \"_EM_0_XYZ_\" " + 
                    " }, " + 
                    " \"Ex_nQnIwqvvPYm\": { " + 
                    " \"EM_tainted_map\": \"_EM_0_XYZ_\" " + 
                    " }, " + 
                    " \"_EM_22814_XYZ_\": { " + 
                    " \"EM_tainted_map\": \"_EM_0_XYZ_\" " + 
                    " }, " + 
                    " \"_EM_22815_XYZ_\": { " + 
                    " \"EM_tainted_map\": \"_EM_0_XYZ_\" " + 
                    " }, " + 
                    " \"PeVubzu\": { " + 
                    " \"EM_tainted_map\": \"_EM_0_XYZ_\" " + 
                    " } " + 
                    " }, " + 
                    " \"prefilled_cardholder_details\": { " + 
                    " \"cardholder_name\": \"at\", " + 
                    " \"billing_address\": { " + 
                    " \"line1\": \"address line 1\", " + 
                    " \"postcode\": \"AB1 2CD\", " + 
                    " \"city\": \"_EM_22819_XYZ_\" " + 
                    " } " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    * Using 3 examples:
    *   12345
    *   address city
    *   https://service-name.gov.uk/transactions/12345
    */
    @Test(timeout = 60000)
    public void test_12_postOnPaymentsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "Ve")
                .header("X-Request-Id", "3u")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 81, " + 
                    " \"reference\": \"12345\", " + 
                    " \"description\": \"_EM_36656_XYZ_\", " + 
                    " \"language\": \"cy\", " + 
                    " \"return_url\": \"https://service-name.gov.uk/transactions/12345\", " + 
                    " \"moto\": true, " + 
                    " \"prefilled_cardholder_details\": { " + 
                    " \"billing_address\": { " + 
                    " \"postcode\": \"_EM_36657_XYZ_\", " + 
                    " \"city\": \"address city\", " + 
                    " \"country\": \"me\" " + 
                    " } " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments?" + 
                    "to_settled_date=_EM_36661_XYZ_&" + 
                    "from_date=l22tEDTO&" + 
                    "display_size=_EM_36662_XYZ_")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    * Using 4 examples:
    *   12345
    *   New passport application
    *   address line 1
    *   address line 2
    */
    @Test(timeout = 60000)
    public void test_13_postOnPaymentsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-forwarded-for", "IzFrttzkf")
                .header("X-Forwarded-For", "lHJS48I5HrhBet0r")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 282, " + 
                    " \"reference\": \"12345\", " + 
                    " \"description\": \"New passport application\", " + 
                    " \"language\": \"cy\", " + 
                    " \"email\": \"0BhQ\", " + 
                    " \"return_url\": \"\", " + 
                    " \"delayed_capture\": false, " + 
                    " \"prefilled_cardholder_details\": { " + 
                    " \"billing_address\": { " + 
                    " \"line1\": \"address line 1\", " + 
                    " \"line2\": \"address line 2\", " + 
                    " \"postcode\": \"2LAymsdQp\", " + 
                    " \"city\": \"hzaM2lmxFm\", " + 
                    " \"country\": \"45WqEws2Sm\" " + 
                    " } " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments?" + 
                    "to_settled_date=n7h0oV&" + 
                    "display_size=jrByYqFCbO")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments/{paymentId}/refunds
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_14_postOnPaymentRefundsWithQueryParamsEmptyStateShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments/{paymentId}/refunds
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/refunds -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/refunds -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 511 " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments/YdN1EHaejgm9tY/refunds?" + 
                    "reference=_EM_42082_XYZ_&" + 
                    "from_settled_date=_EM_42083_XYZ_&" + 
                    "to_settled_date=_EM_42084_XYZ_&" + 
                    "from_date=_EM_42085_XYZ_&" + 
                    "state=&" + 
                    "email=_EM_42087_XYZ_")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments/{paymentId}/refunds
    * Found 3 potential faults. Type-codes: 100, 200
    * Using 1 example:
    *   200000
    */
    @Test(timeout = 60000)
    public void test_15_postOnPaymentRefundsWithQueryParamsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments/{paymentId}/refunds
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/refunds -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/refunds -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "0_7oOBJu")
                .header("X-Forwarded-For", "3PUP14wgkH9cp")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 9999479, " + 
                    " \"refund_amount_available\": 200000 " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments/bwScRa4mWCUuM/refunds?" + 
                    "EMextraParam123=_EM_16675_XYZ_&" + 
                    "to_settled_date=XKg45jGviqTq6KHk&" + 
                    "from_date=Fw6Ylql_QTf&" + 
                    "state=_EM_16678_XYZ_&" + 
                    "first_digits_card_number=_EM_16679_XYZ_&" + 
                    "email=s7")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments/{paymentId}/refunds
    * Found 3 potential faults. Type-codes: 100, 200
    * Using 1 example:
    *   150000
    */
    @Test(timeout = 60000)
    public void test_16_postOnPaymentRefundsWithQueryParamShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments/{paymentId}/refunds
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/refunds -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/refunds -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("X-Request-Id", "lL7el")
                .header("x-forwarded-for", "J9dhGcp")
                .header("X-Forwarded-For", "uKO")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 150000, " + 
                    " \"refund_amount_available\": 589 " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments/9_C4g/refunds?from_settled_date=1gOQ")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/refunds
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_17_getOnV1RefundsWithQueryParamsEmptyLast_digits_card_number() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/refunds
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/refunds -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/refunds -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "_EM_19540_XYZ_")
                .header("X-Request-Id", "_EM_19541_XYZ_")
                .header("X-Forwarded-For", "")
                .get(baseUrlOfSut + "/v1/refunds?" + 
                    "to_settled_date=5qLo_fwh&" + 
                    "display_size=CIthN&" + 
                    "last_digits_card_number=&" + 
                    "first_digits_card_number=qL2bzfoIEXMQR2K")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/refunds
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_18_getOnV1RefundsWithQueryParamsEmptyReferenceShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/refunds
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/refunds -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/refunds -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "_EM_19480_XYZ_")
                .header("x-request-id", "_EM_19481_XYZ_")
                .header("X-Request-Id", "_EM_19482_XYZ_")
                .header("x-forwarded-for", "sYEa2iINYV")
                .get(baseUrlOfSut + "/v1/refunds?" + 
                    "to_date=bc5p8dnoph&" + 
                    "from_settled_date=DS1DVZy_PzV7Y&" + 
                    "page=uUj0C&" + 
                    "EMextraParam123=kFRRM&" + 
                    "reference=&" + 
                    "card_brand=2EpeI2&" + 
                    "first_digits_card_number=_EM_19483_XYZ_&" + 
                    "cardholder_name=_EM_19484_XYZ_")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/refunds
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_19_getOnV1RefundsWithQueryParamsEmptyFrom_settled_dateShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/refunds
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/refunds -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/refunds -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "_EM_19126_XYZ_")
                .header("X-Request-Id", "_EM_19128_XYZ_")
                .header("x-forwarded-for", "0yWx")
                .get(baseUrlOfSut + "/v1/refunds?" + 
                    "to_date=sdIkgs&" + 
                    "from_settled_date=&" + 
                    "to_settled_date=DSkuKp&" + 
                    "display_size=Zk&" + 
                    "reference=4&" + 
                    "last_digits_card_number=_EM_19129_XYZ_")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_20_getOnPaymentsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v1/payments?" + 
                    "reference=_EM_150_XYZ_&" + 
                    "email=_EM_151_XYZ_&" + 
                    "to_date=_EM_153_XYZ_&" + 
                    "cardholder_name=_EM_156_XYZ_&" + 
                    "first_digits_card_number=Lgj97XJ8&" + 
                    "last_digits_card_number=_EM_157_XYZ_&" + 
                    "from_settled_date=_EM_158_XYZ_&" + 
                    "to_settled_date=_EM_159_XYZ_&" + 
                    "EMextraParam123=_EM_160_XYZ_")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_21_getOnPaymentsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "_EM_996_XYZ_")
                .header("X-Request-Id", "_EM_997_XYZ_")
                .header("x-forwarded-for", "mIaAJaX0")
                .get(baseUrlOfSut + "/v1/payments?" + 
                    "email=_EM_989_XYZ_&" + 
                    "state=submitted&" + 
                    "page=YfPy9eG7x_2jGGy&" + 
                    "cardholder_name=GGhuy1cjIS85&" + 
                    "first_digits_card_number=_EM_991_XYZ_")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_22_getOnPaymentsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "Qg")
                .header("X-Request-Id", "_EM_657_XYZ_")
                .get(baseUrlOfSut + "/v1/payments?" + 
                    "reference=FKBG5Ho7PHcU&" + 
                    "state=error&" + 
                    "card_brand=_EM_653_XYZ_&" + 
                    "from_date=q7O3DZY&" + 
                    "to_date=_EM_654_XYZ_&" + 
                    "cardholder_name=McfTFyvTmUdnetz6&" + 
                    "first_digits_card_number=U7ISkH26gXb&" + 
                    "from_settled_date=_EM_656_XYZ_&" + 
                    "to_settled_date=lt&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_23_getOnPaymentsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "yHW1NcrF")
                .header("X-Request-Id", "_EM_2251_XYZ_")
                .header("X-Forwarded-For", "_EM_2252_XYZ_")
                .header("x-forwarded-for", "Hidqoz")
                .get(baseUrlOfSut + "/v1/payments?" + 
                    "state=failed&" + 
                    "cardholder_name=txW2&" + 
                    "first_digits_card_number=S2FrqNUDUInPUNk2&" + 
                    "last_digits_card_number=_bB0B59bV&" + 
                    "EMextraParam123=_EM_2250_XYZ_")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_24_getOnPaymentsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-forwarded-for", "XRRBRNNqkgs885WU")
                .get(baseUrlOfSut + "/v1/payments?" + 
                    "reference=_EM_658_XYZ_&" + 
                    "state=started&" + 
                    "card_brand=ajUdpkcF5C3&" + 
                    "page=NyOzHZVaG&" + 
                    "display_size=_EM_660_XYZ_&" + 
                    "cardholder_name=Utmn&" + 
                    "last_digits_card_number=91leuyO_pgb&" + 
                    "from_settled_date=_EM_661_XYZ_")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_25_getOnPaymentsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "_EM_3955_XYZ_")
                .header("X-Request-Id", "_EM_3956_XYZ_")
                .get(baseUrlOfSut + "/v1/payments?" + 
                    "reference=fuEfoYX6yVEK41q&" + 
                    "email=EykZHDV5mnDi&" + 
                    "state=cancelled&" + 
                    "page=ros6PFfg9Zp&" + 
                    "display_size=vpSQhZoQv&" + 
                    "cardholder_name=R_iDLex3AUL4&" + 
                    "from_settled_date=O&" + 
                    "to_settled_date=_EM_3953_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_26_getOnPaymentsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v1/payments?" + 
                    "reference=_EM_1859_XYZ_&" + 
                    "state=created&" + 
                    "card_brand=gG_lZDXX&" + 
                    "from_date=2fRjjb5zPk&" + 
                    "to_date=VtvvvxLfG&" + 
                    "display_size=_EM_1861_XYZ_&" + 
                    "last_digits_card_number=VuoIVpDysKLwVSO&" + 
                    "from_settled_date=vAaa7DDD&" + 
                    "to_settled_date=GD6i0m")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_27_getOnPaymentsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("X-Request-Id", "0yVLp")
                .get(baseUrlOfSut + "/v1/payments?" + 
                    "email=tqW2om&" + 
                    "state=success&" + 
                    "card_brand=443k4jNFh&" + 
                    "from_date=_EM_1338_XYZ_&" + 
                    "to_date=_EM_1339_XYZ_&" + 
                    "first_digits_card_number=_EM_1340_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_28_getOnV1PaymentsWithQueryParamsEmptyFirst_digits_card_number() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("X-Request-Id", "_EM_1583_XYZ_")
                .header("X-Forwarded-For", "_EM_1584_XYZ_")
                .header("x-forwarded-for", "_EM_1585_XYZ_")
                .get(baseUrlOfSut + "/v1/payments?" + 
                    "reference=_EM_1579_XYZ_&" + 
                    "email=_EM_1580_XYZ_&" + 
                    "state=EVOMASTER&" + 
                    "from_date=9tOG_y8T8OFgxB&" + 
                    "first_digits_card_number=&" + 
                    "last_digits_card_number=ssFeP_KDy6GKWbNv")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/v1/payments/{paymentId}/events
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_29_getOnEventsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/events -> GET on path '/v1/payments/{paymentId}/events' defines a response schema but no response body found.
        given().accept("*/*")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "_EM_113545_XYZ_")
                .header("X-Request-Id", "R5hrxTpbD0")
                .header("X-Forwarded-For", "")
                .header("x-forwarded-for", "")
                .get(baseUrlOfSut + "/v1/payments/Yrnt_0KZSytmSJeh/events")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/v1/payments/{paymentId}/refunds
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_30_getOnRefundsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/refunds -> GET on path '/v1/payments/{paymentId}/refunds' defines a response schema but no response body found.
        given().accept("*/*")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "_EM_7458_XYZ_")
                .header("X-Forwarded-For", "")
                .header("x-forwarded-for", "")
                .get(baseUrlOfSut + "/v1/payments/d4/refunds")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) POST:/v1/payments/{paymentId}/capture
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_31_postOnCaptureReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/capture -> Response status 200 not defined for path '/v1/payments/{paymentId}/capture'.
        given().accept("*/*")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-forwarded-for", "")
                .header("X-Forwarded-For", "")
                .post(baseUrlOfSut + "/v1/payments/tS1Oqh2cYotz2h2c/capture")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) POST:/v1/payments/{paymentId}/refunds
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_32_postOnRefundsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/refunds -> POST on path '/v1/payments/{paymentId}/refunds' defines a response schema but no response body found.
        given().accept("*/*")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "0_7oOBJu")
                .header("x-request-id", "cvx9fv4XGie0")
                .header("X-Request-Id", "qgDkQmgtfHmG2_f")
                .header("x-forwarded-for", "")
                .header("X-Forwarded-For", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 131, " + 
                    " \"refund_amount_available\": 9999118 " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments/U41EK/refunds?state=JTc0")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/v1/refunds
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_33_getOnRefundsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/refunds -> GET on path '/v1/refunds' defines a response schema but no response body found.
        given().accept("*/*")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "_EM_109058_XYZ_")
                .header("X-Request-Id", "g7XLMGdpM6Q_Yy")
                .header("X-Forwarded-For", "")
                .header("x-forwarded-for", "")
                .get(baseUrlOfSut + "/v1/refunds?" + 
                    "from_date=_EM_108700_XYZ_&" + 
                    "to_date=r&" + 
                    "from_settled_date=ZKcdOQFNJq6_X99y&" + 
                    "to_settled_date=qQdqPdX3&" + 
                    "display_size=8S&" + 
                    "reference=_EM_109059_XYZ_&" + 
                    "last_digits_card_number=M_SxVoeDn84q&" + 
                    "card_brand=l0mFpwh8IZicy513&" + 
                    "first_digits_card_number=Am7u&" + 
                    "cardholder_name=tTtnCti7aUMj")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/v1/payments
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_34_getOnPaymentsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> GET on path '/v1/payments' defines a response schema but no response body found.
        given().accept("*/*")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("X-Forwarded-For", "")
                .header("x-forwarded-for", "")
                .get(baseUrlOfSut + "/v1/payments?" + 
                    "reference=Gv&" + 
                    "state=started&" + 
                    "card_brand=8vu2IXJO2PTPt&" + 
                    "from_settled_date=sa&" + 
                    "to_settled_date=6kz43uTo_OqY2q2Z")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/v1/payments/{paymentId}/events
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_35_getOnEventsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/events -> Response status 400 not defined for path '/v1/payments/{paymentId}/events'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "fo")
                .header("X-Request-Id", "_EM_550_XYZ_")
                .header("X-Forwarded-For", "fqo")
                .header("x-forwarded-for", "foo")
                .get(baseUrlOfSut + "/v1/payments/91FeRelPa/events")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) POST:/v1/payments/{paymentId}/cancel
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_36_postOnCancelReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/cancel -> Response Content-Type header 'text/html;charset=iso-8859-1' does not match any allowed types. Must be one of: [application/json].
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "_EM_5047_XYZ_")
                .header("X-Request-Id", "foo")
                .header("x-forwarded-for", "_EM_5048_XYZ_")
                .header("X-Forwarded-For", "fo")
                .post(baseUrlOfSut + "/v1/payments/_EM_5046_XYZ_/cancel")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/v1/payments/{paymentId}/refunds
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_37_getOnRefundsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/refunds -> Response status 400 not defined for path '/v1/payments/{paymentId}/refunds'.
        given().accept("*/*")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "Vqm6fY8zy")
                .header("X-Request-Id", "cd5bFPN8")
                .header("X-Forwarded-For", "_unNj_Zf17quicWJ")
                .header("x-forwarded-for", "_EM_93338_XYZ_")
                .get(baseUrlOfSut + "/v1/payments/OTfehCoofy8/refunds")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) POST:/v1/payments
    * Found 1 potential fault of type-code 200
    * Using 1 example:
    *   https://service-name.gov.uk/transactions/12345
    */
    @Test(timeout = 60000)
    public void test_38_postOnV1PaymentsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments -> Response Content-Type header 'text/html;charset=iso-8859-1' does not match any allowed types. Must be one of: [application/json].
        given().accept("*/*")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "_EM_1154_XYZ_")
                .header("x-request-id", "fo")
                .header("X-Request-Id", "")
                .header("x-forwarded-for", "foo")
                .header("X-Forwarded-For", "foo")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 131598, " + 
                    " \"reference\": \"_EM_3288_XYZ_\", " + 
                    " \"description\": \"_EM_3254_XYZ_\", " + 
                    " \"language\": \"EVOMASTER\", " + 
                    " \"email\": \"Pn9j3ER\", " + 
                    " \"return_url\": \"https://service-name.gov.uk/transactions/12345\", " + 
                    " \"moto\": false, " + 
                    " \"metadata\": { " + 
                    " \"kra1UqnEtG\": { " + 
                    " \"EM_tainted_map\": \"_EM_0_XYZ_\" " + 
                    " } " + 
                    " }, " + 
                    " \"prefilled_cardholder_details\": { " + 
                    " \"billing_address\": { " + 
                    " \"line1\": \"_EM_3289_XYZ_\", " + 
                    " \"line2\": \"b;\", " + 
                    " \"postcode\": \"Ch2FS\", " + 
                    " \"city\": \"MbB8okIGZ_ouAE\", " + 
                    " \"country\": \"q\" " + 
                    " } " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) POST:/v1/payments/{paymentId}/capture
    * Found 1 potential fault of type-code 200
    * Using 1 example:
    *   hu20sqlact5260q2nanm0q8u93
    */
    @Test(timeout = 60000)
    public void test_39_postOnPaymentCaptureWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/capture -> Response Content-Type header 'text/html;charset=iso-8859-1' does not match any allowed types. Must be one of: [application/json].
        given().accept("*/*")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "42")
                .header("x-request-id", "fo")
                .header("X-Request-Id", "foo")
                .header("x-forwarded-for", "foo")
                .header("X-Forwarded-For", "_EM_6925_XYZ_")
                .post(baseUrlOfSut + "/v1/payments/hu20sqlact5260q2nanm0q8u93/capture?EMextraParam123=_EM_170_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/v1/payments/{paymentId}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_40_getOnV1PaymentWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId} -> Response status 400 not defined for path '/v1/payments/{paymentId}'.
        given().accept("*/*")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "nLdw")
                .header("X-Request-Id", "Y1")
                .header("X-Forwarded-For", "_EM_57258_XYZ_")
                .header("x-forwarded-for", "Zx0r")
                .get(baseUrlOfSut + "/v1/payments/HkA9?" + 
                    "to_settled_date=_EM_57328_XYZ_&" + 
                    "display_size=_EM_57329_XYZ_&" + 
                    "to_date=EpkmxiSyFi&" + 
                    "page=_EM_57330_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (401) GET:/v1/payments/{paymentId}/refunds/{refundId}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_41_getOnPaymentRefundWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/refunds/{refundId} -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v1/payments/_EM_1_XYZ_/refunds/_EM_2_XYZ_?EMextraParam123=_EM_3_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'servlet'", containsString("jersey"))
                .body("'message'", containsString("Unauthorized"))
                .body("'url'", containsString("/v1/payments/_EM_1_XYZ_/refunds/_EM_2_XYZ_"))
                .body("'status'", containsString("401"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/v1/payments/{paymentId}/events
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_42_getOnPaymentEventsWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/events -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_5_XYZ_")
                .get(baseUrlOfSut + "/v1/payments/91FeRelPa/events?EMextraParam123=_EM_4_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'servlet'", containsString("jersey"))
                .body("'message'", containsString("Unauthorized"))
                .body("'url'", containsString("/v1/payments/91FeRelPa/events"))
                .body("'status'", containsString("401"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/v1/payments/{paymentId}/refunds
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_43_getOnRefundsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/refunds -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v1/payments/_EM_6_XYZ_/refunds")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'servlet'", containsString("jersey"))
                .body("'message'", containsString("Unauthorized"))
                .body("'url'", containsString("/v1/payments/_EM_6_XYZ_/refunds"))
                .body("'status'", containsString("401"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/v1/payments/{paymentId}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_44_getOnV1PaymentReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId} -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_9_XYZ_")
                .get(baseUrlOfSut + "/v1/payments/_EM_7_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'servlet'", containsString("jersey"))
                .body("'message'", containsString("Unauthorized"))
                .body("'url'", containsString("/v1/payments/_EM_7_XYZ_"))
                .body("'status'", containsString("401"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/v1/payments/{paymentId}/capture
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_45_postOnCaptureReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/capture -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/v1/payments/_EM_24_XYZ_/capture")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'servlet'", containsString("jersey"))
                .body("'message'", containsString("Unauthorized"))
                .body("'url'", containsString("/v1/payments/_EM_24_XYZ_/capture"))
                .body("'status'", containsString("401"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/v1/payments/{paymentId}/refunds
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_46_postOnRefundsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/refunds -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 9999836 " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments/_EM_26_XYZ_/refunds?EMextraParam123=_EM_27_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'servlet'", containsString("jersey"))
                .body("'message'", containsString("Unauthorized"))
                .body("'url'", containsString("/v1/payments/_EM_26_XYZ_/refunds"))
                .body("'status'", containsString("401"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/v1/payments/{paymentId}/cancel
    * Found 1 potential fault of type-code 200
    * Using 1 example:
    *   hu20sqlact5260q2nanm0q8u93
    */
    @Test(timeout = 60000)
    public void test_47_postOnCancelReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/cancel -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/v1/payments/hu20sqlact5260q2nanm0q8u93/cancel")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'servlet'", containsString("jersey"))
                .body("'message'", containsString("Unauthorized"))
                .body("'url'", containsString("/v1/payments/hu20sqlact5260q2nanm0q8u93/cancel"))
                .body("'status'", containsString("401"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/v1/payments
    * Found 1 potential fault of type-code 200
    * Using 2 examples:
    *   12345
    *   J. Bogs
    */
    @Test(timeout = 60000)
    public void test_48_postOnV1PaymentsWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 489, " + 
                    " \"reference\": \"12345\", " + 
                    " \"description\": \"30XBUFWWcZOogHT0\", " + 
                    " \"email\": \"\", " + 
                    " \"return_url\": \"1C\", " + 
                    " \"metadata\": { " + 
                    " \"_EM_30_XYZ_\": { " + 
                    " \"EM_tainted_map\": \"_EM_0_XYZ_\" " + 
                    " } " + 
                    " }, " + 
                    " \"prefilled_cardholder_details\": { " + 
                    " \"cardholder_name\": \"J. Bogs\", " + 
                    " \"billing_address\": { " + 
                    " \"line1\": \"_EM_32_XYZ_\", " + 
                    " \"city\": \"_EM_34_XYZ_\", " + 
                    " \"country\": \"yPw_rpT7OaEqr\" " + 
                    " } " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments?EMextraParam123=_EM_35_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'servlet'", containsString("jersey"))
                .body("'message'", containsString("Unauthorized"))
                .body("'url'", containsString("/v1/payments"))
                .body("'status'", containsString("401"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/v1/refunds
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_49_getOnRefundsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/refunds -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v1/refunds?" + 
                    "from_date=HgvsTUnZhYr&" + 
                    "from_settled_date=_EM_20_XYZ_&" + 
                    "to_settled_date=_EM_21_XYZ_&" + 
                    "page=_EM_22_XYZ_&" + 
                    "display_size=8EJX1n7A9rBl0Y&" + 
                    "EMextraParam123=_EM_23_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'servlet'", containsString("jersey"))
                .body("'message'", containsString("Unauthorized"))
                .body("'url'", containsString("/v1/refunds"))
                .body("'status'", containsString("401"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/v1/payments
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_50_getOnPaymentsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v1/payments?" + 
                    "reference=_EM_10_XYZ_&" + 
                    "email=4oyAxlFX1NBoCdtz&" + 
                    "state=failed&" + 
                    "from_date=_EM_11_XYZ_&" + 
                    "page=_EM_12_XYZ_&" + 
                    "cardholder_name=_EM_14_XYZ_&" + 
                    "first_digits_card_number=VT&" + 
                    "to_settled_date=_EM_17_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'servlet'", containsString("jersey"))
                .body("'message'", containsString("Unauthorized"))
                .body("'url'", containsString("/v1/payments"))
                .body("'status'", containsString("401"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/v1/payments/{paymentId}/refunds
    * Found 2 potential faults of type-code 200
    */
    @Test(timeout = 60000)
    public void test_51_getOnRefundsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/refunds -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/refunds -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "nMrG5LT7F")
                .header("X-Request-Id", "e5Mi9MQOyX3Upp")
                .header("X-Forwarded-For", "_EM_9012_XYZ_")
                .header("x-forwarded-for", "cRXL5Z")
                .get(baseUrlOfSut + "/v1/payments/;/refunds")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(404.0))
                .body("'message'", containsString("HTTP 404 Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/v1/payments/{paymentId}/events
    * Found 2 potential faults of type-code 200
    */
    @Test(timeout = 60000)
    public void test_52_getOnEventsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/events -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/events -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "quK8eLvQPpMTjw")
                .header("X-Request-Id", "FDvAXJUBqTWQ5QVV")
                .header("X-Forwarded-For", "q64B_GG20Oqc")
                .header("x-forwarded-for", "_EM_112402_XYZ_")
                .get(baseUrlOfSut + "/v1/payments/;2f4bAo/events")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(404.0))
                .body("'message'", containsString("HTTP 404 Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/v1/payments/{paymentId}/refunds/{refundId}
    * Found 2 potential faults of type-code 200
    */
    @Test(timeout = 60000)
    public void test_53_getOnPaymentRefundReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/refunds/{refundId} -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/refunds/{refundId} -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "wA7gtfmD")
                .header("X-Request-Id", "a5")
                .header("X-Forwarded-For", "_EM_119428_XYZ_")
                .header("x-forwarded-for", "JZc")
                .get(baseUrlOfSut + "/v1/payments/;/refunds/X0A107Zlfazp")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(404.0))
                .body("'message'", containsString("HTTP 404 Not Found"));
    }


}
