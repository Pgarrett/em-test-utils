/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-08-18T19:39:39.597-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 12 tests
 * <br>
*  Covered targets: 59
 * <br>
*  Used time: 0h 15m 17s
 * <br>
*  Needed budget for current results: 50%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static String baseUrlOfSut = "http://localhost:8080";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    /**
    * Calls:
    * (200) GET:/v2/api-docs
    */
    @Test(timeout = 60000)
    public void test_0_getOnApi_docsReturnsObject() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/api-docs")
                .then()
                .statusCode(200);
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/remainder/{a}/{b}
    */
    @Test(timeout = 60000)
    public void test_1_getOnRemaindReturnsObject() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/api/remainder/634/977")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", numberMatches(-1.0))
                .body("'resultAsDouble'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/gammq/{a}/{x}
    */
    @Test(timeout = 60000)
    public void test_2_getOnGammqReturnsObject() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/api/gammq/0.5727054249340467/0.2731021373840937")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", nullValue())
                .body("'resultAsDouble'", numberMatches(0.5150709426433839));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/expint/{n}/{x}
    */
    @Test(timeout = 60000)
    public void test_3_getOnExpintReturnsObject() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/api/expint/535/0.5767820625284644")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", nullValue())
                .body("'resultAsDouble'", numberMatches(0.0010507412002550606));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/bessj/{n}/{x}
    */
    @Test(timeout = 60000)
    public void test_4_getOnBessjReturnsObject() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/api/bessj/987/0.23937601182851276")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", nullValue())
                .body("'resultAsDouble'", numberMatches(0.0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/triangle/{a}/{b}/{c}
    */
    @Test(timeout = 60000)
    public void test_5_getOnTrianglReturnsObject() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/api/triangle/768/939/267")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", numberMatches(1.0))
                .body("'resultAsDouble'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/fisher/{m}/{n}/{x}
    */
    @Test(timeout = 60000)
    public void test_6_getOnFisherReturnsObject() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/api/fisher/213/431/0.9792237082404838")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", nullValue())
                .body("'resultAsDouble'", numberMatches(0.4350533345186409));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/triangle/{a}/{b}/{c}
    */
    @Test(timeout = 60000)
    public void test_7_getOnTrianglReturnsObject() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/api/triangle/511/404/-238861795")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", numberMatches(0.0))
                .body("'resultAsDouble'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/triangle/{a}/{b}/{c}
    */
    @Test(timeout = 60000)
    public void test_8_getOnTrianglReturnsObject() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/api/triangle/80/-734186980/925")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", numberMatches(0.0))
                .body("'resultAsDouble'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/triangle/{a}/{b}/{c}
    */
    @Test(timeout = 60000)
    public void test_9_getOnTrianglReturnsObject() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/api/triangle/-1529591504/139/43")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", numberMatches(0.0))
                .body("'resultAsDouble'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/fisher/{m}/{n}/{x}
    */
    @Test(timeout = 60000)
    public void test_10_getOnFisherReturnsObject() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/api/fisher/-250847475/799/0.6366823299709331")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", nullValue())
                .body("'resultAsDouble'", containsString("NaN"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/fisher/{m}/{n}/{x}
    */
    @Test(timeout = 60000)
    public void test_11_getOnFisherReturnsObject() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/api/fisher/345/-86417258/0.7918769040422713")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", nullValue())
                .body("'resultAsDouble'", containsString("NaN"));
    }


}
