/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-08-17T19:34:13.298-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 17 tests
 * <br>
*  Covered targets: 199
 * <br>
*  Used time: 0h 15m 0s
 * <br>
*  Needed budget for current results: 95%
 * <br>
*  This file contains test cases that represent failed calls, but not indicative of faults.
*/
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.org.restncs.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (400) GET:/api/bessj/{n}/{x}
    */
    @Test(timeout = 60000)
    public void test_0_getOnWithQueryParamReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/bessj/-16164/0.2253668692?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/bessj/{n}/{x}
    */
    @Test(timeout = 60000)
    public void test_1_getOnBessjReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_107_XYZ_")
                .get(baseUrlOfSut + "/api/bessj/445288885/0.6616045419604175")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/expint/{n}/{x}
    */
    @Test(timeout = 60000)
    public void test_2_getOnExpintReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/expint/1/0.0")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/expint/{n}/{x}
    */
    @Test(timeout = 60000)
    public void test_3_getOnExpintReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/expint/-3899/0.9355058729143827?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/expint/{n}/{x}
    */
    @Test(timeout = 60000)
    public void test_4_getOnExpintReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/expint/0/-1.0623929437771338?EMextraParam123=_EM_73_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/gammq/{a}/{x}
    */
    @Test(timeout = 60000)
    public void test_5_getOnGammqReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_703_XYZ_")
                .get(baseUrlOfSut + "/api/gammq/-6025123.874140944/0.048474840766297156?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/gammq/{a}/{x}
    */
    @Test(timeout = 60000)
    public void test_6_getOnGammqReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/gammq/4.4942328371557893E307/4.4942328371557893E307?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/gammq/{a}/{x}
    */
    @Test(timeout = 60000)
    public void test_7_getOnGammqReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/gammq/-2607.982931438818/-0.04087096282895153")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/gammq/{a}/{x}
    */
    @Test(timeout = 60000)
    public void test_8_getOnGammqReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/gammq/0.0/0.9475262030109937?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/gammq/{a}/{x}
    */
    @Test(timeout = 60000)
    public void test_9_getOnGammqReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/gammq/5204.114524133849/4634.419672448812")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/remainder/{a}/{b}
    */
    @Test(timeout = 60000)
    public void test_10_getOnRemaindReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/remainder/863/-299451250")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/remainder/{a}/{b}
    */
    @Test(timeout = 60000)
    public void test_11_getOnRemaindReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/remainder/1383330348/546?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/remainder/{a}/{b}
    */
    @Test(timeout = 60000)
    public void test_12_getOnRemaindReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/remainder/-1233598601/59?EMextraParam123=_EM_244_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/remainder/{a}/{b}
    */
    @Test(timeout = 60000)
    public void test_13_getOnRemaindReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/remainder/304/1242351728")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/expint/{n}/{x}
    */
    @Test(timeout = 60000)
    public void test_14_getOnExpintReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/expint/0/0.0")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/fisher/{m}/{n}/{x}
    */
    @Test(timeout = 60000)
    public void test_15_getOnFisherReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_43_XYZ_")
                .get(baseUrlOfSut + "/api/fisher/20/525223/0.6432578593503692")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/fisher/{m}/{n}/{x}
    */
    @Test(timeout = 60000)
    public void test_16_getOnWithQueryParamReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_13_XYZ_")
                .get(baseUrlOfSut + "/api/fisher/262269/22/0.7273046058372656?EMextraParam123=_EM_12_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }


}
