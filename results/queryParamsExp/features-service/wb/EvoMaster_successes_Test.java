/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-08-17T18:59:35.114-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 9 tests
 * <br>
*  Covered targets: 164
 * <br>
*  Used time: 0h 15m 5s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static final SutHandler controller = new em.embedded.org.javiermf.features.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("CONSTRAINT_EXCLUDES","CONSTRAINT_REQUIRES","FEATURE","PRODUCT","PRODUCT_CONFIGURATION","PRODUCT_CONFIGURATION_ACTIVED_FEATURES","constraint_excludes","constraint_requires","product"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (200) GET:/swagger.json
    */
    @Test(timeout = 60000)
    public void test_0_getOnSwagger_jsonReturnsObject() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/swagger.json")
                .then()
                .statusCode(200);
    }
    
    
    /**
    * Calls:
    * (201) POST:/products/{productName}
    */
    @Test(timeout = 60000)
    public void test_1_postOnProductReturns201UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 79L)
                .d("NAME", "\"UN;f0X8D8NzXRNu\"")
            .and().insertInto("PRODUCT", 82L)
                .d("NAME", "\"s`Q\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 81L)
                .d("ID", "-16")
                .r("FOR_PRODUCT_ID", 82L)
                .d("EXCLUDED_FEATURE_NAME", "\"Utimj8l76FyW\"")
                .d("SOURCE_FEATURE_NAME", "\"_EM_443_XYZ_\"")
            .and().insertInto("PRODUCT", 84L)
                .d("NAME", "\"eauj_O2xXyzCtS2\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 83L)
                .d("ID", "270")
                .r("FOR_PRODUCT_ID", 84L)
                .d("REQUIRED_FEATURE_NAME", "NULL")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/_EM_461_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (201) POST:/products/{productName}
    */
    @Test(timeout = 60000)
    public void test_2_postOnProductReturns201UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 44L)
                .d("NAME", "\"_EM_294_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 43L)
                .d("NAME", "\"ynFxM\"")
                .d("VALID", "false")
                .r("PRODUCT_ID", 44L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/_EM_293_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (201) POST:/products/{productName}
    */
    @Test(timeout = 60000)
    public void test_3_postOnProductReturns201UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 19L)
                .d("NAME", "\"LKmflcrlZbbKi\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 18L)
                .d("NAME", "\"\"")
                .d("VALID", "NULL")
                .r("PRODUCT_ID", 19L)
            .and().insertInto("PRODUCT", 58L)
                .d("NAME", "\"pcsF7\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 57L)
                .d("ID", "-7796277518768569344")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "\"zNJi\"")
                .d("SOURCE_FEATURE_NAME", "\"qhlXKtHhqb8C1\"")
            .and().insertInto("PRODUCT", 60L)
                .d("NAME", "\"M\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 59L)
                .d("ID", "557")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("REQUIRED_FEATURE_NAME", "\"emjEmg6\"")
                .d("SOURCE_FEATURE_NAME", "\"C5Qt040k817t\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/_EM_231_XYZ_")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/products/{productName}/configurations
    */
    @Test(timeout = 60000)
    public void test_4_getOnConfigurationsReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/products/_EM_13_XYZ_/configurations?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (204) GET:/products/{productName}/configurations/{configurationName}
    */
    @Test(timeout = 60000)
    public void test_5_getOnConfigurReturns204() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_8_XYZ_")
                .get(baseUrlOfSut + "/products/ZRqhFbvr3wu9/configurations/Ixmh0?EMextraParam123=42")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (204) DELETE:/products/{productName}/constraints/{constraintId}
    */
    @Test(timeout = 60000)
    public void test_6_deleteOnConstraintReturns204UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 79L)
                .d("NAME", "\"UN;f0X8D8NzXRNu\"")
            .and().insertInto("PRODUCT", 82L)
                .d("NAME", "\"s`Q\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 81L)
                .d("ID", "-16")
                .r("FOR_PRODUCT_ID", 82L)
                .d("EXCLUDED_FEATURE_NAME", "\"Utimj8l76FyW\"")
                .d("SOURCE_FEATURE_NAME", "\"_EM_443_XYZ_\"")
            .and().insertInto("PRODUCT", 84L)
                .d("NAME", "\"eauj_O2xXyzCtS2\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 83L)
                .d("ID", "270")
                .r("FOR_PRODUCT_ID", 84L)
                .d("REQUIRED_FEATURE_NAME", "NULL")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/products/_EM_461_XYZ_/constraints/166")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (204) DELETE:/products/{productName}/constraints/{constraintId}
    */
    @Test(timeout = 60000)
    public void test_7_deleteOnProductConstraintWithQueryParamReturns204UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 25L)
                .d("NAME", "\"nx63lSt2Yf\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 24L)
                .d("ID", "336")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "NULL")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .and().insertInto("PRODUCT", 27L)
                .d("NAME", "\"wNPW6_\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 26L)
                .d("ID", "308")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("REQUIRED_FEATURE_NAME", "\"XRF7rY\"")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/products/3_vh/constraints/-1953887448?EMextraParam123=42")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (204) DELETE:/products/{productName}/constraints/{constraintId}
    */
    @Test(timeout = 60000)
    public void test_8_deleteOnConstraintReturns204UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 19L)
                .d("NAME", "\"LKmflcrlZbbKi\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 18L)
                .d("NAME", "\"\"")
                .d("VALID", "NULL")
                .r("PRODUCT_ID", 19L)
            .and().insertInto("PRODUCT", 58L)
                .d("NAME", "\"pcsF7\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 57L)
                .d("ID", "-7796277518768569344")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "\"zNJi\"")
                .d("SOURCE_FEATURE_NAME", "\"qhlXKtHhqb8C1\"")
            .and().insertInto("PRODUCT", 60L)
                .d("NAME", "\"M\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 59L)
                .d("ID", "557")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("REQUIRED_FEATURE_NAME", "\"emjEmg6\"")
                .d("SOURCE_FEATURE_NAME", "\"C5Qt040k817t\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/products/_EM_231_XYZ_/constraints/65542")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }


}
