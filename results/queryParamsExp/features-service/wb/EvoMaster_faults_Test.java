/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-08-17T18:59:35.093-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 30 tests
 * <br>
*  Covered targets: 281
 * <br>
*  Used time: 0h 15m 5s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.embedded.org.javiermf.features.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("CONSTRAINT_EXCLUDES","CONSTRAINT_REQUIRES","FEATURE","PRODUCT","PRODUCT_CONFIGURATION","PRODUCT_CONFIGURATION_ACTIVED_FEATURES","product"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (500) GET:/products/{productName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_0_getOnProductCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products/_EM_14_XYZ_")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) GET:/products/{productName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_1_getOnProductCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 23L)
                .d("NAME", "\"_EM_63_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products/_EM_62_XYZ_")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) POST:/products/{productName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_2_postOnProductCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 44L)
                .d("NAME", "\"0\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 43L)
                .d("NAME", "\"_EM_301_XYZ_\"")
                .d("VALID", "false")
                .r("PRODUCT_ID", 44L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/javiermf/features/services/rest/ProductsResource_58_addProduct.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/ZhddG_h%3EbU")
                .then()
                .statusCode(500)// org/javiermf/features/services/rest/ProductsResource_58_addProduct
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) POST:/products/{productName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_3_postOnProductCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_64_insert.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/n7nOA25N")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_64_insert
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/products/{productName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_4_deleteOnProductCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_17_XYZ_")
                .delete(baseUrlOfSut + "/products/boHJaGFLtX6r?EMextraParam123=42")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) GET:/products/{productName}/features
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_5_getOnProductFeaturesCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products/9SBvhFgBIoTBo/features")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) POST:/products/{productName}/constraints/requires
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_6_postOnRequiresCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/products/oaeKtufOirK2m/constraints/requires?EMextraParam123=42")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) POST:/products/{productName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_7_postOnProductFeaturWithQueryParamCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("description=RW39LZ3vqmP")
                .post(baseUrlOfSut + "/products/08QxUQCEdI/features/_EM_23_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) POST:/products/{productName}/configurations/{configurationName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_8_postOnConfigurCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/_EM_24_XYZ_/configurations/_EM_25_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) POST:/products/{productName}/constraints/excludes
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_9_postOnExcludesCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_28_XYZ_")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/products/17reIaeU8XLA/constraints/excludes")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) PUT:/products/{productName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_10_putOnFeaturCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("description=_EM_34_XYZ_")
                .put(baseUrlOfSut + "/products/9AATILM6p75/features/_EM_33_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/products/{productName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_11_deleteOnFeaturCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 79L)
                .d("NAME", "\"UN;f0X8D8NzXRNu\"")
            .and().insertInto("PRODUCT", 82L)
                .d("NAME", "\"s`Q\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 81L)
                .d("ID", "-16")
                .r("FOR_PRODUCT_ID", 79L)
                .d("EXCLUDED_FEATURE_NAME", "\"Utimj8l76FyW\"")
                .d("SOURCE_FEATURE_NAME", "\"_EM_443_XYZ_\"")
            .and().insertInto("PRODUCT", 84L)
                .d("NAME", "\"pw8J5jD_GIFxe\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 83L)
                .d("ID", "270")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("REQUIRED_FEATURE_NAME", "NULL")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/products/_EM_402_XYZ_/features/CPqj1TXGyj")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/products/{productName}/configurations/{configurationName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_12_deleteOnConfigurCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsConfigurationsDAO_71_deleteConfigurationForProduct.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_10_XYZ_")
                .delete(baseUrlOfSut + "/products/b6bes4M6r/configurations/kCXWwRoOC150He")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsConfigurationsDAO_71_deleteConfigurationForProduct
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/products/{productName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_13_deleteOnFeaturCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 79L)
                .d("NAME", "\"UM;f2Y8B8NzXRNu\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/products/_EM_402_XYZ_/features/CPql1UXG")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/products/{productName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_14_deleteOnFeaturCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 79L)
                .d("NAME", "\"UM;f0X8B8NzXRNu\"")
            .and().insertInto("PRODUCT", 82L)
                .d("NAME", "\"s`Q\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 81L)
                .d("ID", "16")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "\"Utimj8l76FyW\"")
                .d("SOURCE_FEATURE_NAME", "\"w9I\"")
            .and().insertInto("PRODUCT", 84L)
                .d("NAME", "\"pw8J5kD_GIFxeX\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 83L)
                .d("ID", "278")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("REQUIRED_FEATURE_NAME", "\"eauj_O2xXyzCtS2\"")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/products/_EM_402_XYZ_/features/CPqj1TXG")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/products/{productName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_15_deleteOnFeaturCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 79L)
                .d("NAME", "\"UN;f0X8B8NzXRN\"")
            .and().insertInto("PRODUCT", 82L)
                .d("NAME", "\"s`Q\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 81L)
                .d("ID", "0")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "\"Utimj8l76FyW\"")
                .d("SOURCE_FEATURE_NAME", "\"_EM_443_XYZ_\"")
            .and().insertInto("PRODUCT", 84L)
                .d("NAME", "\"pw8J5kD_GIFxe\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 83L)
                .d("ID", "269")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("REQUIRED_FEATURE_NAME", "NULL")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/products/_EM_402_XYZ_/features/CPqj1TXGyj")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/products/{productName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_16_deleteOnFeaturCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 79L)
                .d("NAME", "\"TN;f0X8D8NzXRNU\"")
            .and().insertInto("PRODUCT", 82L)
                .d("NAME", "\"s`Q\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 81L)
                .d("ID", "-16")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "\"Utimj8l76FyW\"")
                .d("SOURCE_FEATURE_NAME", "\"_EM_443_XYZ_\"")
            .and().insertInto("PRODUCT", 84L)
                .d("NAME", "\"pw8J5kD_GIFxe\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 83L)
                .d("ID", "270")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("REQUIRED_FEATURE_NAME", "NULL")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/products/_EM_402_XYZ_/features/CPqj1TXGy")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/products/{productName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_17_deleteOnFeaturCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 79L)
                .d("NAME", "\"UN;f0X8D8NzXRNu\"")
            .and().insertInto("PRODUCT", 82L)
                .d("NAME", "\"saQ\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 81L)
                .d("ID", "-16")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "\"Utimj8l76FyW\"")
                .d("SOURCE_FEATURE_NAME", "\"_EM_443_XYZ_\"")
            .and().insertInto("PRODUCT", 84L)
                .d("NAME", "\"pw8J5kD_GIFxe\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 83L)
                .d("ID", "270")
                .r("FOR_PRODUCT_ID", 82L)
                .d("REQUIRED_FEATURE_NAME", "NULL")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/products/_EM_402_XYZ_/features/CPqj1TXGyj")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/products/{productName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_18_deleteOnFeaturCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 79L)
                .d("NAME", "\"UN;f0X8D8NzXRNu\"")
            .and().insertInto("PRODUCT", 82L)
                .d("NAME", "\"s`Q\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 81L)
                .d("ID", "-16")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "\"Utimj8l76FyW\"")
                .d("SOURCE_FEATURE_NAME", "\"_EM_443_XYZ_\"")
            .and().insertInto("PRODUCT", 84L)
                .d("NAME", "\"pw8J5kD_GIFxe\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 83L)
                .d("ID", "270")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("REQUIRED_FEATURE_NAME", "NULL")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/products/_EM_402_XYZ_/features/CPqj1TXGyj")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/products/{productName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_19_deleteOnFeaturCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 79L)
                .d("NAME", "\"UN;f0X8D8NzXROu\"")
            .and().insertInto("PRODUCT", 82L)
                .d("NAME", "\"s`Q\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 81L)
                .d("ID", "-16")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "\"Utimj8l76FyW\"")
                .d("SOURCE_FEATURE_NAME", "\"_EM_443_XYZ_\"")
            .and().insertInto("PRODUCT", 84L)
                .d("NAME", "\"pw8J5kD_GIFxe\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 83L)
                .d("ID", "270")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("REQUIRED_FEATURE_NAME", "NULL")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/products/_EM_402_XYZ_/features/CPqj1TXGyj")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) GET:/products/{productName}/configurations/{configurationName}/features
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_20_getOnFeaturesCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 44L)
                .d("NAME", "\"\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 43L)
                .d("NAME", "\"yfFxM\"")
                .d("VALID", "false")
                .d("PRODUCT_ID", "1")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/javiermf/features/services/ProductsConfigurationsService_46_getConfigurationActivedFeaturesNames.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products/ACTIVEDFEA1_/configurations/_EM_72_XYZ_/features")
                .then()
                .statusCode(500)// org/javiermf/features/services/ProductsConfigurationsService_46_getConfigurationActivedFeaturesNames
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) GET:/products/{productName}/configurations/{configurationName}/features
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_21_getOnFeaturesCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 44L)
                .d("NAME", "\"D\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 43L)
                .d("NAME", "\"ynFxM\"")
                .d("VALID", "false")
                .r("PRODUCT_ID", 44L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/javiermf/features/services/ProductsConfigurationsService_46_getConfigurationActivedFeaturesNames.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products/ELEARNING_SITE/configurations/ACTIVEDFEA1_/features")
                .then()
                .statusCode(500)// org/javiermf/features/services/ProductsConfigurationsService_46_getConfigurationActivedFeaturesNames
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) GET:/products/{productName}/configurations/{configurationName}/features
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_22_getOnFeaturesCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/services/ProductsConfigurationsService_46_getConfigurationActivedFeaturesNames.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_5_XYZ_")
                .get(baseUrlOfSut + "/products/_EM_3_XYZ_/configurations/_EM_4_XYZ_/features")
                .then()
                .statusCode(500)// org/javiermf/features/services/ProductsConfigurationsService_46_getConfigurationActivedFeaturesNames
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) GET:/products/{productName}/configurations/{configurationName}/features
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_23_getOnFeaturesCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 19L)
                .d("NAME", "\"[1\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 18L)
                .d("NAME", "\"NN\"")
                .d("VALID", "true")
                .r("PRODUCT_ID", 19L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/javiermf/features/services/ProductsConfigurationsService_46_getConfigurationActivedFeaturesNames.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products/S8F14yWOwz/configurations/_EM_115_XYZ_/features")
                .then()
                .statusCode(500)// org/javiermf/features/services/ProductsConfigurationsService_46_getConfigurationActivedFeaturesNames
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) POST:/products/{productName}/configurations/{configurationName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_24_postOnConfigurFeaturWithQueryParamCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 22L)
                .d("NAME", "\"Jv\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 21L)
                .d("NAME", "\"hVB8f\"")
                .d("VALID", "true")
                .d("PRODUCT_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/javiermf/features/services/ProductsConfigurationsService_79_addFeatureFromConfiguration.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/g/configurations/_EM_21_XYZ_/features/eW?EMextraParam123=42")
                .then()
                .statusCode(500)// org/javiermf/features/services/ProductsConfigurationsService_79_addFeatureFromConfiguration
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/products/{productName}/configurations/{configurationName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_25_deleteOnFeaturCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 19L)
                .d("NAME", "\"LKmflcrlZbbKi\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 18L)
                .d("NAME", "\"U9\"")
                .d("VALID", "NULL")
                .d("PRODUCT_ID", "1")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/javiermf/features/services/ProductsConfigurationsService_70_removeFeatureFromConfiguration.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/products/ELEARNING_SITE/configurations/_EM_48_XYZ_/features/riWitdnUUGo7")
                .then()
                .statusCode(500)// org/javiermf/features/services/ProductsConfigurationsService_70_removeFeatureFromConfiguration
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/products/{productName}/configurations/{configurationName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_26_deleteOnFeaturCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 19L)
                .d("NAME", "\"_EM_111_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 18L)
                .d("NAME", "\"N\"")
                .d("VALID", "true")
                .d("PRODUCT_ID", "1")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/javiermf/features/services/ProductsConfigurationsService_70_removeFeatureFromConfiguration.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/products/6V/configurations/_EM_48_XYZ_/features/hiWdtdnXUgo%3F")
                .then()
                .statusCode(500)// org/javiermf/features/services/ProductsConfigurationsService_70_removeFeatureFromConfiguration
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/products/{productName}/configurations/{configurationName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_27_deleteOnFeaturCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 19L)
                .d("NAME", "\"PKUUUcslZfbSiU\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 18L)
                .d("NAME", "\"\"")
                .d("VALID", "NULL")
                .d("PRODUCT_ID", "1")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/javiermf/features/services/ProductsConfigurationsService_70_removeFeatureFromConfiguration.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/products/SYSTEM_SEQUENCE_D65BF5A4_5716_4175_8556_20E888B94169/configurations/_EM_182_XYZ_/features/riWitdnUUGo7")
                .then()
                .statusCode(500)// org/javiermf/features/services/ProductsConfigurationsService_70_removeFeatureFromConfiguration
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/products/{productName}/configurations/{configurationName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_28_deleteOnFeaturCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 19L)
                .d("NAME", "\"_EM_203_XYZ_\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 18L)
                .d("NAME", "\"\"")
                .d("VALID", "NULL")
                .r("PRODUCT_ID", 19L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/javiermf/features/services/ProductsConfigurationsService_70_removeFeatureFromConfiguration.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/products/ELEARNING_SITE/configurations/_EM_182_XYZ_/features/riWitdnUUGo7y")
                .then()
                .statusCode(500)// org/javiermf/features/services/ProductsConfigurationsService_70_removeFeatureFromConfiguration
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/products/{productName}/configurations/{configurationName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_29_deleteOnFeaturCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 19L)
                .d("NAME", "\"LKmflcrlZbbKi\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 18L)
                .d("NAME", "\"B\"")
                .d("VALID", "NULL")
                .r("PRODUCT_ID", 19L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/javiermf/features/services/ProductsConfigurationsService_70_removeFeatureFromConfiguration.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/products/ELEARNING_SITE/configurations/_EM_48_XYZ_/features/riWitdnTUGo7")
                .then()
                .statusCode(500)// org/javiermf/features/services/ProductsConfigurationsService_70_removeFeatureFromConfiguration
                .assertThat()
                .contentType("text/html");
    }


}
