/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-08-18T19:24:06.519-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 14 tests
 * <br>
*  Covered targets: 62
 * <br>
*  Used time: 0h 16m 42s
 * <br>
*  Needed budget for current results: 33%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static String baseUrlOfSut = "http://localhost:8080";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    /**
    * Calls:
    * (500) GET:/products/{productName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_0_getOnProductCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. null.
        given().accept("*/*")
                .get(baseUrlOfSut + "/products/eoULucCi")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/products/{productName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_1_deleteOnProductCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. null.
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/nRd")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) GET:/products/{productName}/features
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_2_getOnProductFeaturesCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. null.
        given().accept("*/*")
                .get(baseUrlOfSut + "/products/qrJueFkAzrifaGz/features")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) POST:/products/{productName}/constraints/excludes
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_3_postOnExcludesCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. null.
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/products/E7oRM5FJ1/constraints/excludes")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) POST:/products/{productName}/constraints/requires
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_4_postOnRequiresCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. null.
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/products/aW/constraints/requires")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) POST:/products/{productName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_5_postOnProductFeaturCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. null.
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/products/7SlkrNu/features/l")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) POST:/products/{productName}/configurations/{configurationName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_6_postOnConfigurCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. null.
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/w1wnXoVAbyx4WO/configurations/nHNMmR4p")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) PUT:/products/{productName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_7_putOnFeaturCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. null.
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .put(baseUrlOfSut + "/products/3f9zd3e4v0v/features/I3whlHKjtHa")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/products/{productName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_8_deleteOnProductFeaturCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. null.
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/Fd0DZ15/features/QaI09JY_aIPDR284")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * 1 - (201) POST:/products/{productName}
    * 2 - (201) POST:/products/{productName}/configurations/{configurationName}
    * 3 - (500) DELETE:/products/{productName}/configurations/{configurationName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_9_deleteOnConfigurCauses500_internalServerError() throws Exception {
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/Wt3LaHNmXD8qeV4")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        String location_productName__2 = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName__2));
        
        given().accept("*/*")
                .post(resolveLocation(location_productName__2, baseUrlOfSut + "/products/ELEARNING_SITE/configurations/qmVRJEZMqqIx"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Fault100. HTTP Status 500. null.
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/ELEARNING_SITE/configurations/qmVRJEZMqqIx")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
        
        // Cleanup actions
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/Wt3LaHNmXD8qeV4")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        given().accept("*/*")
                .delete(resolveLocation(location_productName__2, baseUrlOfSut + "/products/ELEARNING_SITE/configurations/qmVRJEZMqqIx"))
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/products/{productName}/configurations/{configurationName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_10_deleteOnConfigurCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. null.
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/Cjo/configurations/CROGdO9IF")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) GET:/products/{productName}/configurations/{configurationName}/features
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_11_getOnConfigurFeaturesCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. null.
        given().accept("*/*")
                .get(baseUrlOfSut + "/products/SP3opkqI/configurations/_Zmlco_M77uNt/features")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) POST:/products/{productName}/configurations/{configurationName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_12_postOnConfigurFeaturCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. null.
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/Ad8tx6JNI/configurations/lycEiFFUinUAe91/features/9dGcW")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/products/{productName}/configurations/{configurationName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_13_deleteOnConfigurFeaturCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. null.
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/QLtI/configurations/ad2/features/T7CZYE")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }


}
