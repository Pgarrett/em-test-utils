/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-08-18T19:24:06.530-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 15 tests
 * <br>
*  Covered targets: 55
 * <br>
*  Used time: 0h 16m 42s
 * <br>
*  Needed budget for current results: 33%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static String baseUrlOfSut = "http://localhost:8080";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    /**
    * Calls:
    * (200) GET:/products
    */
    @Test(timeout = 60000)
    public void test_0_getOnProductsReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/swagger.json
    */
    @Test(timeout = 60000)
    public void test_1_getOnSwagger_jsonReturnsObject() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/swagger.json")
                .then()
                .statusCode(200);
    }
    
    
    /**
    * Calls:
    * 1 - (201) POST:/products/{productName}
    * 2 - (200) GET:/products/{productName}
    */
    @Test(timeout = 60000)
    public void test_2_getOnProductReturnsObject() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/ELEARNING_SITE")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/ELEARNING_SITE")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("ELEARNING_SITE"))
                .body("'features'.size()", equalTo(0))
                .body("'constraints'.size()", equalTo(0));
        
        // Cleanup actions
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/ELEARNING_SITE")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (201) POST:/products/{productName}
    */
    @Test(timeout = 60000)
    public void test_3_postOnProductReturns201() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/G3HuNzaChylkSXJ")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Cleanup actions
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/G3HuNzaChylkSXJ")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * 1 - (201) POST:/products/{productName}
    * 2 - (204) DELETE:/products/{productName}
    */
    @Test(timeout = 60000)
    public void test_4_deleteOnProductReturns204() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/ELEARNING_SITE")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/ELEARNING_SITE")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * 1 - (201) POST:/products/{productName}
    * 2 - (200) GET:/products/{productName}/features
    */
    @Test(timeout = 60000)
    public void test_5_getOnProductFeaturesReturnsEmptyList() throws Exception {
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/ELEARNING_SITE")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        String location_productName__2 = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName__2));
        
        given().accept("application/json")
                .get(resolveLocation(location_productName__2, baseUrlOfSut + "/products/6DAoM5o/features"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Cleanup actions
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/ELEARNING_SITE")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/products/{productName}/configurations
    */
    @Test(timeout = 60000)
    public void test_6_getOnConfigurationsReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/TvfvKEZV/configurations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * 1 - (201) POST:/products/{productName}
    * 2 - (201) POST:/products/{productName}/configurations/{configurationName}
    * 3 - (200) GET:/products/{productName}/configurations/{configurationName}
    */
    @Test(timeout = 60000)
    public void test_7_getOnConfigurReturnsObject() throws Exception {
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/ELEARNING_SITE")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        String location_productName__2 = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName__2));
        
        given().accept("*/*")
                .post(resolveLocation(location_productName__2, baseUrlOfSut + "/products/ELEARNING_SITE/configurations/th"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/ELEARNING_SITE/configurations/th")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("th"))
                .body("'valid'", equalTo(true))
                .body("'activedFeatures'.size()", equalTo(0));
        
        // Cleanup actions
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/ELEARNING_SITE")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        given().accept("*/*")
                .delete(resolveLocation(location_productName__2, baseUrlOfSut + "/products/ELEARNING_SITE/configurations/th"))
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * 1 - (201) POST:/products/{productName}
    * 2 - (201) POST:/products/{productName}/features/{featureName}
    * 3 - (200) PUT:/products/{productName}/features/{featureName}
    */
    @Test(timeout = 60000)
    public void test_8_putOnFeaturReturns200() throws Exception {
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/ELEARNING_SITE")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        String location_productName__2 = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName__2));
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName__2, baseUrlOfSut + "/products/ELEARNING_SITE/features/b7omOAo"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .put(baseUrlOfSut + "/products/ELEARNING_SITE/features/b7omOAo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("b7omOAo"))
                .body("'description'", nullValue());
        
        // Cleanup actions
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/ELEARNING_SITE")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        given().accept("*/*")
                .delete(resolveLocation(location_productName__2, baseUrlOfSut + "/products/ELEARNING_SITE/features/b7omOAo"))
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/ELEARNING_SITE/features/b7omOAo")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * 1 - (201) POST:/products/{productName}
    * 2 - (201) POST:/products/{productName}/features/{featureName}
    * 3 - (204) DELETE:/products/{productName}/features/{featureName}
    */
    @Test(timeout = 60000)
    public void test_9_deleteOnFeaturReturns204() throws Exception {
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/ELEARNING_SITE")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        String location_productName__2 = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName__2));
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=g5YhNd2fhVv73")
                .post(resolveLocation(location_productName__2, baseUrlOfSut + "/products/ELEARNING_SITE/features/KiQKB48JhYayUe2F"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/ELEARNING_SITE/features/KiQKB48JhYayUe2F")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Cleanup actions
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/ELEARNING_SITE")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        given().accept("*/*")
                .delete(resolveLocation(location_productName__2, baseUrlOfSut + "/products/ELEARNING_SITE/features/KiQKB48JhYayUe2F"))
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * 1 - (201) POST:/products/{productName}
    * 2 - (201) POST:/products/{productName}/configurations/{configurationName}
    * 3 - (204) DELETE:/products/{productName}/configurations/{configurationName}
    */
    @Test(timeout = 60000)
    public void test_10_deleteOnConfigurReturns204() throws Exception {
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/ELEARNING_SITE")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        String location_productName__2 = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName__2));
        
        given().accept("*/*")
                .post(resolveLocation(location_productName__2, baseUrlOfSut + "/products/ELEARNING_SITE/configurations/aBE_IfH3X4NFRn"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/ELEARNING_SITE/configurations/aBE_IfH3X4NFRn")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        // Cleanup actions
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/ELEARNING_SITE")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        given().accept("*/*")
                .delete(resolveLocation(location_productName__2, baseUrlOfSut + "/products/ELEARNING_SITE/configurations/aBE_IfH3X4NFRn"))
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (204) GET:/products/{productName}/configurations/{configurationName}
    */
    @Test(timeout = 60000)
    public void test_11_getOnConfigurReturns204() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/products/1aumRAqE/configurations/y6YFFNSkV5eCLg")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (204) DELETE:/products/{productName}/constraints/{constraintId}
    */
    @Test(timeout = 60000)
    public void test_12_deleteOnConstraintReturns204() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/STcbxw/constraints/457")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (204) DELETE:/products/{productName}/constraints/{constraintId}
    */
    @Test(timeout = 60000)
    public void test_13_deleteOnConstraintReturns204() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/ELEARNING_SITE/constraints/-3988364993347778119")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * 1 - (201) POST:/products/{productName}
    * 2 - (201) POST:/products/{productName}/configurations/{configurationName}
    * 3 - (200) GET:/products/{productName}/configurations/{configurationName}/features
    */
    @Test(timeout = 60000)
    public void test_14_getOnConfigurFeaturesReturnsEmptyList() throws Exception {
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/ELEARNING_SITE")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        String location_productName__2 = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName__2));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .post(resolveLocation(location_productName__2, baseUrlOfSut + "/products/ELEARNING_SITE/configurations/d"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        String location_configurationName__7 = res_1.extract().header("location");
        assertTrue(isValidURIorEmpty(location_configurationName__7));
        
        given().accept("application/json")
                .get(resolveLocation(location_configurationName__7, baseUrlOfSut + "/products/ELEARNING_SITE/configurations/d/features"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Cleanup actions
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/ELEARNING_SITE")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        given().accept("*/*")
                .delete(resolveLocation(location_productName__2, baseUrlOfSut + "/products/ELEARNING_SITE/configurations/d"))
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }


}
