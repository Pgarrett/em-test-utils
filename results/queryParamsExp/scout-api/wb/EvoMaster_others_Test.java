import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-02-12T15:26:56.722-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 87 tests
 * <br>
*  Covered targets: 1295
 * <br>
*  Used time: 0h 15m 13s
 * <br>
*  Needed budget for current results: 98%
 * <br>
*  This file contains test cases that represent failed calls, but not indicative of faults.
*/
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.se.devscout.scoutapi.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("ACTIVITY","ACTIVITY_DERIVED","ACTIVITY_PROPERTIES","ACTIVITY_PROPERTIES_MEDIA_FILE","ACTIVITY_PROPERTIES_TAG","ACTIVITY_RATING","ACTIVITY_RELATION","MEDIA_FILE","MEDIA_FILE_KEYWORDS","SYSTEM_MESSAGE","TAG","TAG_DERIVED","USERS","USER_IDENTITY","tag"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * 1 - (200) POST:/api/v1/categories
    * 2 - (400) PUT:/api/v1/categories/{id}
    * 3 - (204) DELETE:/api/v1/categories/{id}
    */
    @Test(timeout = 60000)
    public void test_0_deleteOnCategoriReturns204() throws Exception {
        
        String location_categories = "";
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"group\": \"1qD9ei8wRLPS\", " + 
                    " \"name\": \"JkTvSgAnEUQ\", " + 
                    " \"media_file\": { " + 
                    " \"mime_type\": \"_EM_56562_XYZ_\", " + 
                    " \"uri\": \"UHYjGMxLsm9W437\", " + 
                    " \"name\": \"Yoo3LFmxD9\", " + 
                    " \"capture_date\": \"1971-11-18T11:57:52.847Z\", " + 
                    " \"copy_right\": \"7DtqPSX\", " + 
                    " \"author\": \"Moc\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/categories")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'group'", containsString("1qD9ei8wRLPS"))
                .body("'name'", containsString("JkTvSgAnEUQ"))
                .body("'media_file'.'mime_type'", containsString("_EM_56562_XYZ_"))
                .body("'media_file'.'uri'", containsString("UHYjGMxLsm9W437"))
                .body("'media_file'.'name'", containsString("Yoo3LFmxD9"))
                .body("'media_file'.'capture_date'", containsString("1971-11-18T11:57:52.847Z"))
                .body("'media_file'.'copy_right'", containsString("7DtqPSX"))
                .body("'media_file'.'author'", containsString("Moc"))
                .body("'activities_count'", numberMatches(0.0));
        location_categories = "/api/v1/categories" + "/" + res_0.extract().body().path("id").toString();
        
        given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 893, " + 
                    " \"media_file\": { " + 
                    " \"id\": 165, " + 
                    " \"uri\": \"BvIVP\", " + 
                    " \"capture_date\": \"2094-03-06T05:42:-1-07:58\", " + 
                    " \"copy_right\": \"_EM_56564_XYZ_\", " + 
                    " \"author\": \"OM9RXUBDf\" " + 
                    " } " + 
                    " } ")
                .put(resolveLocation(location_categories, baseUrlOfSut + "/api/v1/categories/893"))
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .delete(resolveLocation(location_categories, baseUrlOfSut + "/api/v1/categories/893"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/api/v1/users
    * 2 - (403) GET:/api/v1/users/profile
    * 3 - (400) POST:/api/v1/activities
    */
    @Test(timeout = 60000)
    public void test_1_postOnActivitiesReturns400UsingSql() throws Exception {
        
        String location_users = "";
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 3, " + 
                    " \"name\": \"291861\", " + 
                    " \"email_address\": \"zRlC2fPpsq\", " + 
                    " \"identities\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/users")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("291861"))
                .body("'email_address'", containsString("zRlC2fPpsq"))
                .body("'authorization_level'", numberMatches(0.0))
                .body("'identities'.size()", equalTo(0));
        location_users = "/api/v1/users" + "/" + res_0.extract().body().path("id").toString();
        
        given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(resolveLocation(location_users, baseUrlOfSut + "/api/v1/users/profile"))
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
        
        given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 3, " + 
                    " \"name\": \"JYYII6MS\", " + 
                    " \"date_updated\": \"2079-13-06T07:51:14.330Z\", " + 
                    " \"description_introduction\": \"yLv1tZNwr_QHkvUo\", " + 
                    " \"description_notes\": \"ntR\", " + 
                    " \"age_min\": 91, " + 
                    " \"participants_min\": 314, " + 
                    " \"participants_max\": 750, " + 
                    " \"time_min\": 48, " + 
                    " \"featured\": false, " + 
                    " \"tags\": [], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"mime_type\": \"D\", " + 
                    " \"copy_right\": \"hLU\", " + 
                    " \"author\": \"\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 864, " + 
                    " \"mime_type\": \"z\", " + 
                    " \"uri\": \"5CRb\", " + 
                    " \"capture_date\": \"2076-07-06T08:27:16.208-17:12\" " + 
                    " } " + 
                    " ], " + 
                    " \"activity\": { " + 
                    " \"properties_revisions\": [], " + 
                    " \"ratings_sum\": 78, " + 
                    " \"favourites_count\": 835, " + 
                    " \"ratings_average\": 0.23969366855212126 " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/api/v1/activities
    * 2 - (400) PUT:/api/v1/activities/{id}
    * 3 - (204) DELETE:/api/v1/activities/{id}
    */
    @Test(timeout = 60000)
    public void test_2_deleteOnActivReturns204UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 2859L)
            .and().insertInto("ACTIVITY", 2858L)
            .and().insertInto("ACTIVITY_RELATION", 2857L)
                .r("ACTIVITY_1_ID", 2858L)
                .r("ACTIVITY_2_ID", 2858L)
                .d("OWNER_ID", "2")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_activities = "";
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"Yln3POawv\", " + 
                    " \"date_created\": \"1906-03-26T09:47:46.894Z\", " + 
                    " \"description_material\": \"_EM_22946_XYZ_\", " + 
                    " \"participants_min\": 229, " + 
                    " \"participants_max\": 389, " + 
                    " \"featured\": false, " + 
                    " \"tags\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'properties_revisions'.size()", equalTo(1))
                .body("'properties_revisions'[0].'name'", containsString("Yln3POawv"))
                .body("'properties_revisions'[0].'date_created'", containsString("1906-03-26T09:47:46.894Z"))
                .body("'properties_revisions'[0].'description_material'", containsString("_EM_22946_XYZ_"))
                .body("'properties_revisions'[0].'participants_min'", numberMatches(229.0))
                .body("'properties_revisions'[0].'participants_max'", numberMatches(389.0))
                .body("'properties_revisions'[0].'featured'", equalTo(false))
                .body("'properties_revisions'[0].'tags'.size()", equalTo(0))
                .body("'properties'.'name'", containsString("Yln3POawv"))
                .body("'properties'.'date_created'", containsString("1906-03-26T09:47:46.894Z"))
                .body("'properties'.'description_material'", containsString("_EM_22946_XYZ_"))
                .body("'properties'.'participants_min'", numberMatches(229.0))
                .body("'properties'.'participants_max'", numberMatches(389.0))
                .body("'properties'.'featured'", equalTo(false))
                .body("'properties'.'tags'.size()", equalTo(0))
                .body("'ratings_count'", numberMatches(0.0))
                .body("'ratings_sum'", numberMatches(0.0))
                .body("'favourites_count'", numberMatches(0.0))
                .body("'ratings_average'", numberMatches(-1.0));
        location_activities = "/api/v1/activities" + "/" + res_0.extract().body().path("id").toString();
        
        given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"Ysl6ufsNonN9G8\", " + 
                    " \"date_published\": \"2094-06-15T21:21:23Z\", " + 
                    " \"date_updated\": \"2069-09-14T-1:22:31.663Z\", " + 
                    " \"description_prepare\": \"_EM_22953_XYZ_\", " + 
                    " \"description_notes\": \"hfFWFyKuNzY\", " + 
                    " \"age_min\": -641378182, " + 
                    " \"participants_max\": 620, " + 
                    " \"featured\": false, " + 
                    " \"media_files\": [], " + 
                    " \"author\": { " + 
                    " \"authorization_level\": 253 " + 
                    " } " + 
                    " } ")
                .put(resolveLocation(location_activities, baseUrlOfSut + "/api/v1/activities/-2096979"))
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .delete(resolveLocation(location_activities, baseUrlOfSut + "/api/v1/activities/-2096979"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * 1 - (400) POST:/api/v1/activities
    * 2 - (400) GET:/api/v1/activities
    * 3 - (200) POST:/api/v2/activities
    * 4 - (200) PUT:/api/v2/activities/{id}
    * 5 - (400) PATCH:/api/v2/activities/{id}
    * 6 - (204) GET:/api/v1/system/ping
    */
    @Test(timeout = 60000)
    public void test_3_getOnPingReturns204UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 5323L)
                .d("AUTHOR", "\"_QL3obyz\"")
                .d("CAPTURE_DATE", "\"2089-02-20 15:54:52\"")
                .d("COPY_RIGHT", "\"463792\"")
                .d("MIME_TYPE", "\"lvNGDdK\"")
                .d("NAME", "\"QArP7M\"")
                .d("URI", "\"s2rBpKZLW8MCHS\"")
            .and().insertInto("ACTIVITY", 5326L)
            .and().insertInto("MEDIA_FILE", 8469L)
                .d("URI", "\"Rn6AEIdvDFqFl2KI\"")
            .and().insertInto("TAG", 8468L)
                .d("GRP", "\"CMX\"")
                .d("NAME", "\"6PA\"")
            .and().insertInto("USERS", 8467L)
                .d("AUTHORIZATION_LEVEL", "514")
                .d("NAME", "\"M0PCG\"")
            .and().insertInto("ACTIVITY", 8466L)
            .and().insertInto("ACTIVITY", 8465L)
            .and().insertInto("ACTIVITY_PROPERTIES", 8464L)
                .r("ACTIVITY_ID", 8466L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 8463L)
                .r("ACTIVITY_PROPERTIES_ID", 8464L)
                .r("TAG_ID", 8468L)
            .and().insertInto("MEDIA_FILE", 8475L)
                .d("URI", "\"R6QQgmZUpYo55_I\"")
            .and().insertInto("USERS", 8474L)
                .d("AUTHORIZATION_LEVEL", "937")
                .d("NAME", "\"zEHzw1P1K1flNs\"")
            .and().insertInto("ACTIVITY", 8473L)
            .and().insertInto("ACTIVITY", 8472L)
            .and().insertInto("ACTIVITY_PROPERTIES", 8471L)
                .r("ACTIVITY_ID", 8473L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 8470L)
                .r("ACTIVITY_PROPERTIES_ID", 8471L)
                .r("MEDIA_FILE_ID", 8475L)
                .d("FEATURED", "true")
            .and().insertInto("SYSTEM_MESSAGE", 8575L)
                .d("KEY", "\"xygigVzcE1cWK\"")
                .d("VALID_FROM", "NULL")
                .d("VALID_TO", "\"1903-12-10 09:51:02\"")
                .d("VALUE", "\"b64YVUa[nvYsaRZm\"")
            .and().insertInto("MEDIA_FILE", 8673L)
                .d("URI", "\"pYN5Guftu3tO3GAe\"")
            .and().insertInto("TAG", 8672L)
                .d("GRP", "\"jmaOsBV2aQo\"")
                .d("NAME", "\"kEM\"")
            .and().insertInto("TAG_DERIVED", 8671L)
                .r("TAG_ID", 8672L)
                .d("ACTIVITIES_COUNT", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_activities = "";
        
        given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"YuD6571F\", " + 
                    " \"date_published\": \"2001-05-21T19:57:38-05:01\", " + 
                    " \"date_created\": \"2031-04-28T25:06:22.072Z\", " + 
                    " \"description_introduction\": \"tvnafZxmX\", " + 
                    " \"description_prepare\": \"vn\", " + 
                    " \"description_notes\": \"IwvM\", " + 
                    " \"participants_min\": 507, " + 
                    " \"participants_max\": 188, " + 
                    " \"time_min\": 47, " + 
                    " \"time_max\": 76, " + 
                    " \"featured\": true, " + 
                    " \"media_files\": [], " + 
                    " \"author\": {}, " + 
                    " \"activity\": { " + 
                    " \"properties_revisions\": [], " + 
                    " \"related\": [] " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/activities?" + 
                    "name=YuD6571F&" + 
                    "text=9yIKqZn&" + 
                    "categories=xggeKeZ_v&" + 
                    "age_1=tKG4gB7&" + 
                    "age_2=BsBI1ZJlHM7wO&" + 
                    "participants=aS2Ne3V7hwz&" + 
                    "id=QXkK&" + 
                    "ratings_average_min=0.0&" + 
                    "favourites=482&" + 
                    "group=Sy7JrWi3L")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"YuD6571F\", " + 
                    " \"description_material\": \"9pBPP_X2iorb\", " + 
                    " \"description_main\": \"9pBPP_X2iorb\", " + 
                    " \"participants_min\": 507, " + 
                    " \"source\": \"\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'properties_revisions'.size()", equalTo(1))
                .body("'properties_revisions'[0].'name'", containsString("YuD6571F"))
                .body("'properties_revisions'[0].'date_created'", containsString("2025-02-12T15:26:49.298Z"))
                .body("'properties_revisions'[0].'description_material'", containsString("9pBPP_X2iorb"))
                .body("'properties_revisions'[0].'description_main'", containsString("9pBPP_X2iorb"))
                .body("'properties_revisions'[0].'participants_min'", numberMatches(507.0))
                .body("'properties_revisions'[0].'source'", containsString(""))
                .body("'properties'.'name'", containsString("YuD6571F"))
                .body("'properties'.'date_created'", containsString("2025-02-12T15:26:49.298Z"))
                .body("'properties'.'description_material'", containsString("9pBPP_X2iorb"))
                .body("'properties'.'description_main'", containsString("9pBPP_X2iorb"))
                .body("'properties'.'participants_min'", numberMatches(507.0))
                .body("'properties'.'source'", containsString(""))
                .body("'ratings_count'", numberMatches(0.0))
                .body("'ratings_sum'", numberMatches(0.0))
                .body("'favourites_count'", numberMatches(0.0))
                .body("'ratings_average'", numberMatches(-1.0));
        location_activities = "/api/v2/activities" + "/" + res_2.extract().body().path("id").toString();
        
        given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 35, " + 
                    " \"name\": \"YuD6571F\", " + 
                    " \"description_material\": \"9pBPP_X2iorb\", " + 
                    " \"description_main\": \"9pBPP_X2iorb\", " + 
                    " \"description_safety\": \"9pBPP_X2iorb\", " + 
                    " \"participants_min\": 507, " + 
                    " \"time_min\": 0, " + 
                    " \"time_max\": 0, " + 
                    " \"featured\": true " + 
                    " } ")
                .put(resolveLocation(location_activities, baseUrlOfSut + "/api/v2/activities/35"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'properties_revisions'.size()", equalTo(2))
                .body("'properties_revisions'[0].'name'", containsString("YuD6571F"))
                .body("'properties_revisions'[0].'date_created'", containsString("2025-02-12T15:26:49.298Z"))
                .body("'properties_revisions'[0].'description_material'", containsString("9pBPP_X2iorb"))
                .body("'properties_revisions'[0].'description_main'", containsString("9pBPP_X2iorb"))
                .body("'properties_revisions'[0].'participants_min'", numberMatches(507.0))
                .body("'properties_revisions'[0].'source'", containsString(""))
                .body("'properties_revisions'[0].'tags'.size()", equalTo(0))
                .body("'properties_revisions'[0].'media_files'.size()", equalTo(0))
                .body("'properties_revisions'[1].'name'", containsString("YuD6571F"))
                .body("'properties_revisions'[1].'date_created'", containsString("2025-02-12T15:26:49.305Z"))
                .body("'properties_revisions'[1].'description_material'", containsString("9pBPP_X2iorb"))
                .body("'properties_revisions'[1].'description_main'", containsString("9pBPP_X2iorb"))
                .body("'properties_revisions'[1].'description_safety'", containsString("9pBPP_X2iorb"))
                .body("'properties_revisions'[1].'participants_min'", numberMatches(507.0))
                .body("'properties_revisions'[1].'time_min'", numberMatches(0.0))
                .body("'properties_revisions'[1].'time_max'", numberMatches(0.0))
                .body("'properties_revisions'[1].'featured'", equalTo(true))
                .body("'properties'.'name'", containsString("YuD6571F"))
                .body("'properties'.'date_created'", containsString("2025-02-12T15:26:49.305Z"))
                .body("'properties'.'description_material'", containsString("9pBPP_X2iorb"))
                .body("'properties'.'description_main'", containsString("9pBPP_X2iorb"))
                .body("'properties'.'description_safety'", containsString("9pBPP_X2iorb"))
                .body("'properties'.'participants_min'", numberMatches(507.0))
                .body("'properties'.'time_min'", numberMatches(0.0))
                .body("'properties'.'time_max'", numberMatches(0.0))
                .body("'properties'.'featured'", equalTo(true))
                .body("'ratings_count'", numberMatches(0.0))
                .body("'ratings_sum'", numberMatches(0.0))
                .body("'favourites_count'", numberMatches(0.0))
                .body("'ratings_average'", numberMatches(-1.0))
                .body("'related'.size()", equalTo(0));
        
        given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"YuD6571F\", " + 
                    " \"date_published\": \"2001-05-21T19:38:57-15:35\", " + 
                    " \"date_updated\": \"2031-04-28T25:22:06.793Z\", " + 
                    " \"description_material\": \"9pBPP_X2iorb\", " + 
                    " \"description_main\": \"9pBPP_X2iorb\", " + 
                    " \"description_safety\": \"9pBPP_X2iorb\", " + 
                    " \"time_min\": 0, " + 
                    " \"time_max\": 0, " + 
                    " \"source\": \"\", " + 
                    " \"activity\": { " + 
                    " \"properties_revisions\": [], " + 
                    " \"related\": [] " + 
                    " } " + 
                    " } ")
                .patch(resolveLocation(location_activities, baseUrlOfSut + "/api/v2/activities/35"))
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/system/ping")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/v1/system_messages
    */
    @Test(timeout = 60000)
    public void test_4_getOnSystem_messagesReturns400() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/system_messages?" + 
                    "key=T97G&" + 
                    "valid=EVOMASTER&" + 
                    "EMextraParam123=_EM_3129_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("query param valid must be one of [now, now_and_future]"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/v2/activities
    */
    @Test(timeout = 60000)
    public void test_5_getOnV2ActivitiesWithQueryParamsFeaturedNegativeRandomReturns400UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 1872L)
                .d("URI", "\"_EM_86273_XYZ_\"")
            .and().insertInto("TAG", 1871L)
                .d("GRP", "\"gxiL3RTUhgs0gO\"")
                .d("NAME", "\"LUgyFQJ\"")
                .r("MEDIA_FILE_ID", 1872L)
            .and().insertInto("ACTIVITY", 1873L)
            .and().insertInto("MEDIA_FILE", 7979L)
                .d("URI", "\"qYNeLN95d\"")
            .and().insertInto("TAG", 7978L)
                .d("GRP", "\"r4sISWRVxb_\"")
                .d("NAME", "\"0o51Q1\"")
            .and().insertInto("TAG_DERIVED", 7977L)
                .r("TAG_ID", 7978L)
                .d("ACTIVITIES_COUNT", "8772")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities?" + 
                    "name=hH4zmlMC94ZJfU3&" + 
                    "text=_EM_86272_XYZ_&" + 
                    "featured=true&" + 
                    "ages=61N0&" + 
                    "durations=WQ1&" + 
                    "id=tDl&" + 
                    "ratings_count_min=339&" + 
                    "ratings_average_min=0.0&" + 
                    "random=-524260")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/v1/activities
    */
    @Test(timeout = 60000)
    public void test_6_getOnActivitiesReturns400() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/activities?" + 
                    "attrs=_EM_2106_XYZ_&" + 
                    "text=_EM_2108_XYZ_&" + 
                    "featured=false&" + 
                    "categories=4PaWsOAFDQIfTaZn&" + 
                    "age_1=ymhsRt9TkAO6Jql&" + 
                    "age_2=HpPDKOgn&" + 
                    "random=963&" + 
                    "favourites=812")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/v1/activities
    */
    @Test(timeout = 60000)
    public void test_7_getOnV1ActivitiesWithQueryParamsReturns400UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 5323L)
                .d("AUTHOR", "\"_QL3obyz\"")
                .d("CAPTURE_DATE", "\"2089-02-20 15:54:52\"")
                .d("COPY_RIGHT", "\"463792\"")
                .d("MIME_TYPE", "\"lvNGDdK\"")
                .d("NAME", "\"QArP7M\"")
                .d("URI", "\"s2rBpKZLW8MCHS\"")
            .and().insertInto("ACTIVITY", 5326L)
            .and().insertInto("MEDIA_FILE", 8469L)
                .d("URI", "\"Rn6AEIdvDFqFl2KI\"")
            .and().insertInto("TAG", 8468L)
                .d("GRP", "\"CMX\"")
                .d("NAME", "\"6PA\"")
            .and().insertInto("USERS", 8467L)
                .d("AUTHORIZATION_LEVEL", "514")
                .d("NAME", "\"M0PCG\"")
            .and().insertInto("ACTIVITY", 8466L)
            .and().insertInto("ACTIVITY", 8465L)
            .and().insertInto("ACTIVITY_PROPERTIES", 8464L)
                .r("ACTIVITY_ID", 8466L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 8463L)
                .r("ACTIVITY_PROPERTIES_ID", 8464L)
                .r("TAG_ID", 8468L)
            .and().insertInto("MEDIA_FILE", 8475L)
                .d("URI", "\"R6QQgmZUpYo55_I\"")
            .and().insertInto("USERS", 8474L)
                .d("AUTHORIZATION_LEVEL", "937")
                .d("NAME", "\"zEHzw1P1K1flNs\"")
            .and().insertInto("ACTIVITY", 8473L)
            .and().insertInto("ACTIVITY", 8472L)
            .and().insertInto("ACTIVITY_PROPERTIES", 8471L)
                .r("ACTIVITY_ID", 8473L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 8470L)
                .r("ACTIVITY_PROPERTIES_ID", 8471L)
                .r("MEDIA_FILE_ID", 8475L)
                .d("FEATURED", "true")
            .and().insertInto("SYSTEM_MESSAGE", 8575L)
                .d("KEY", "\"xygigVzcE1cWK\"")
                .d("VALID_FROM", "NULL")
                .d("VALID_TO", "\"1903-12-10 09:51:02\"")
                .d("VALUE", "\"b64YVUa[nvYsaRZm\"")
            .and().insertInto("MEDIA_FILE", 8673L)
                .d("URI", "\"pYN5Guftu3tO3GAe\"")
            .and().insertInto("TAG", 8672L)
                .d("GRP", "\"jmaOsBV2aQo\"")
                .d("NAME", "\"kEM\"")
            .and().insertInto("TAG_DERIVED", 8671L)
                .r("TAG_ID", 8672L)
                .d("ACTIVITIES_COUNT", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/activities?" + 
                    "name=YuD6571F&" + 
                    "text=9yIKqZn&" + 
                    "categories=xggeKeZ_v&" + 
                    "age_1=tKG4gB7&" + 
                    "age_2=BsBI1ZJlHM7wO&" + 
                    "participants=aS2Ne3V7hwz&" + 
                    "id=QXkK&" + 
                    "ratings_average_min=0.0&" + 
                    "favourites=482&" + 
                    "group=Sy7JrWi3L")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/v1/activities
    */
    @Test(timeout = 60000)
    public void test_8_getOnActivitiesReturns400() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/activities?" + 
                    "attrs=j0UnaPkD0rep&" + 
                    "name=_EM_4616_XYZ_&" + 
                    "time_1=_EM_4620_XYZ_&" + 
                    "time_2=jbO6lCym4UFO9&" + 
                    "id=03iDW")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/v2/activities
    */
    @Test(timeout = 60000)
    public void test_9_getOnV2ActivitiesWithQueryParamsFeaturedNegativeRandomReturns400() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities?" + 
                    "text=_EM_20407_XYZ_&" + 
                    "featured=true&" + 
                    "categories=0&" + 
                    "ages=8&" + 
                    "participants=_EM_35862_XYZ_&" + 
                    "durations=kSVmbN1Ercs8LAnz&" + 
                    "id=E85hLhJ7RZ_nqA60&" + 
                    "ratings_count_min=516&" + 
                    "ratings_average_min=0.4287115975722917&" + 
                    "random=-1567&" + 
                    "favourites=1")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Could not understand the request. Perhaps you sent text instead of integers?"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/api/v1/users/{id}
    */
    @Test(timeout = 60000)
    public void test_10_putOnUserReturns400UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 101L)
                .d("AUTHORIZATION_LEVEL", "332")
                .d("DATE_CREATED", "\"1915-10-24 22:08:13\"")
                .d("EMAIL_ADDRESS", "NULL")
                .d("NAME", "\"qmsec1q41xTHXrSg\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 66, " + 
                    " \"email_address\": \"_EM_7133_XYZ_\", " + 
                    " \"authorization_level\": 203, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"date_created\": \"2036-12-00T14:52:38.861-09:29\", " + 
                    " \"type\": \"API\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/users/101?EMextraParam123=_EM_7134_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/v1/users
    */
    @Test(timeout = 60000)
    public void test_11_postOnUsersReturns400() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "_EM_4903_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 900, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"date_created\": \"2010-04-05T17:22:29.907Z\", " + 
                    " \"value\": \"_EM_4901_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 265, " + 
                    " \"date_created\": \"1956-05-26T16:49:41.515Z\", " + 
                    " \"type\": \"GOOGLE\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 151, " + 
                    " \"date_created\": \"1971-07-28T14:25:35.421-13:57\", " + 
                    " \"value\": \"_EM_4902_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/users?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/api/v1/system_messages/{id}
    */
    @Test(timeout = 60000)
    public void test_12_putOnSystem_messagReturns400() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "_EM_3246_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 681, " + 
                    " \"key\": \"\", " + 
                    " \"valid_from\": \"2013-09-27T02:21:41Z\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/system_messages/681")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/v1/system_messages
    */
    @Test(timeout = 60000)
    public void test_13_postOnV1System_messagesReturns400() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 601, " + 
                    " \"value\": \"_EM_72146_XYZ_\", " + 
                    " \"valid_to\": \"1998-07-27T15:24:48.513+15:55\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/system_messages")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/v1/categories
    */
    @Test(timeout = 60000)
    public void test_14_postOnCategoriesReturns400UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 5594L)
            .and().insertInto("ACTIVITY", 5596L)
            .and().insertInto("ACTIVITY_DERIVED", 5595L)
                .r("ACTIVITY_ID", 5594L)
                .d("FAVOURITES_COUNT", "1891")
                .d("RATINGS_AVG", "0.12248890240031896")
                .d("RATINGS_COUNT", "265")
                .d("RATINGS_SUM", "400")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"group\": \"kvWQfYQ\", " + 
                    " \"media_file\": { " + 
                    " \"name\": \"4cUka\", " + 
                    " \"capture_date\": \"1923-13-17T09:44:06.379-06:28\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/categories?" + 
                    "group=_EM_81447_XYZ_&" + 
                    "attrs=ynZzxlWX5wKki7a")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/v2/tags
    */
    @Test(timeout = 60000)
    public void test_15_postOnTagsReturns400() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"u4\", " + 
                    " \"media_file\": { " + 
                    " \"uri\": \"REXk1sY7Hci\", " + 
                    " \"capture_date\": \"1911-05-01T03:26:35+14:47\" " + 
                    " }, " + 
                    " \"activities_count\": 342 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/tags")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/v1/system_messages
    */
    @Test(timeout = 60000)
    public void test_16_postOnV1System_messagesWithQueryParamReturns400() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 655, " + 
                    " \"key\": \"_EM_81399_XYZ_\", " + 
                    " \"value\": \"JFKtM2\", " + 
                    " \"valid_to\": \"1961-06-08T03:18:40Z\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/system_messages?attrs=W")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/v1/categories
    */
    @Test(timeout = 60000)
    public void test_17_postOnCategoriesReturns400() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"group\": \"YtyD2kFg\", " + 
                    " \"name\": \"_EM_2186_XYZ_\", " + 
                    " \"media_file\": { " + 
                    " \"id\": -4504938609999306086, " + 
                    " \"uri\": \"_EM_2187_XYZ_\", " + 
                    " \"capture_date\": \"2064-08-31T21:33:37Z\", " + 
                    " \"copy_right\": \"sHj\", " + 
                    " \"author\": \"_EM_2188_XYZ_\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/categories?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/v2/activities
    */
    @Test(timeout = 60000)
    public void test_18_postOnV2ActivitiesWithQueryParamsReturns400() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 515, " + 
                    " \"name\": \"_EM_57808_XYZ_\", " + 
                    " \"date_created\": \"1909-02-28T20:59:06-06:38\", " + 
                    " \"date_updated\": \"2048-08-27T09:09:59.541Z\", " + 
                    " \"description_main\": \"GoDs10St\", " + 
                    " \"description_safety\": \"_EM_57809_XYZ_\", " + 
                    " \"description_notes\": \"_EM_57810_XYZ_\", " + 
                    " \"age_min\": -561, " + 
                    " \"participants_min\": 910, " + 
                    " \"time_min\": 34, " + 
                    " \"featured\": true, " + 
                    " \"source\": \"_EM_57811_XYZ_\", " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"name\": \"DWlYzV11e\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 642, " + 
                    " \"uri\": \"j39c\", " + 
                    " \"author\": \"N2Xmk4i6Hqo\" " + 
                    " } " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 941, " + 
                    " \"name\": \"qqld6eNfW2OZY\", " + 
                    " \"copy_right\": \"_EM_57813_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"email_address\": \"s9\", " + 
                    " \"authorization_level\": 145, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"type\": \"GOOGLE\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 792, " + 
                    " \"type\": \"EVOMASTER\", " + 
                    " \"value\": \"9fp0HygEQkk_RZR\" " + 
                    " } " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities?" + 
                    "ratings_average_min=lk&" + 
                    "text=_EM_57816_XYZ_&" + 
                    "id=jSJ1&" + 
                    "attrs=_EM_57817_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/v1/media_files
    */
    @Test(timeout = 60000)
    public void test_19_postOnV1Media_filesWithQueryParamReturns400UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 1920L)
                .d("AUTHOR", "NULL")
                .d("CAPTURE_DATE", "NULL")
                .d("COPY_RIGHT", "NULL")
                .d("MIME_TYPE", "\"sYIGlOJ\"")
                .d("NAME", "NULL")
                .d("URI", "\"LH8MciYBj\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"mime_type\": \"\", " + 
                    " \"uri\": \"v:\", " + 
                    " \"name\": \"_EM_38211_XYZ_\", " + 
                    " \"capture_date\": \"1931-11-11T07:29:12Z\", " + 
                    " \"copy_right\": \"0Jpv\", " + 
                    " \"author\": \"6Lg4RPSSluMhKdG\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/api/v1/categories/{id}
    */
    @Test(timeout = 60000)
    public void test_20_putOnCategoriReturns400UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 5323L)
                .d("AUTHOR", "NULL")
                .d("CAPTURE_DATE", "\"2049-10-20 23:54:52\"")
                .d("COPY_RIGHT", "\"X2tzt4Lv5\"")
                .d("MIME_TYPE", "\"lvFGDdK\"")
                .d("NAME", "\"QArP7L\"")
                .d("URI", "\"s2rBpKZLW8MCHS\"")
            .and().insertInto("ACTIVITY", 5326L)
            .and().insertInto("USERS", 6947L)
                .d("AUTHORIZATION_LEVEL", "693")
                .d("NAME", "\"7Pni5F7RxN\"")
            .and().insertInto("ACTIVITY", 6946L)
            .and().insertInto("ACTIVITY", 6945L)
            .and().insertInto("ACTIVITY_PROPERTIES", 6944L)
                .d("AGE_MAX", "NULL")
                .d("AGE_MIN", "-1061")
                .d("DATE_CREATED", "NULL")
                .d("DATE_PUBLISHED", "\"1953-10-04 15:12:22\"")
                .d("DATE_UPDATED", "NULL")
                .d("DESCRIPTION_INTRODUCTION", "NULL")
                .d("DESCRIPTION_MAIN", "NULL")
                .d("DESCRIPTION_MATERIAL", "\"Mk6TIfjTX9Wv2\"")
                .d("DESCRIPTION_NOTES", "NULL")
                .d("DESCRIPTION_PREPARE", "\"fIiM\"")
                .d("DESCRIPTION_SAFETY", "\"lsWT4\"")
                .d("FEATURED", "NULL")
                .d("NAME", "\"_EM_89894_XYZ_\"")
                .d("PARTICIPANTS_MAX", "538")
                .d("PARTICIPANTS_MIN", "NULL")
                .d("SOURCE", "\"HTkMn4x\"")
                .d("TIME_MAX", "219")
                .d("TIME_MIN", "0")
                .r("ACTIVITY_ID", 5326L)
                .d("AUTHOR_ID", "NULL")
                .r("PUBLISHING_ACTIVITY_ID", 6945L)
            .and().insertInto("ACTIVITY", 6949L)
            .and().insertInto("ACTIVITY_DERIVED", 6948L)
                .r("ACTIVITY_ID", 6945L)
                .d("FAVOURITES_COUNT", "550")
                .d("RATINGS_AVG", "NULL")
                .d("RATINGS_COUNT", "196")
                .d("RATINGS_SUM", "NULL")
            .and().insertInto("USERS", 10931L)
                .d("AUTHORIZATION_LEVEL", "26")
                .d("NAME", "\"HZ\"")
            .and().insertInto("ACTIVITY", 10930L)
            .and().insertInto("ACTIVITY_RATING", 10929L)
                .r("ACTIVITY_ID", 5326L)
                .r("USER_ID", 6947L)
                .d("FAVOURITE", "false")
                .d("RATING", "NULL")
            .and().insertInto("USERS", 10970L)
                .d("AUTHORIZATION_LEVEL", "263")
                .d("NAME", "\"WDcMre\"")
            .and().insertInto("ACTIVITY", 10969L)
            .and().insertInto("ACTIVITY", 10968L)
            .and().insertInto("ACTIVITY_RELATION", 10967L)
                .r("ACTIVITY_1_ID", 10968L)
                .r("ACTIVITY_2_ID", 10930L)
                .d("OWNER_ID", "3")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 432, " + 
                    " \"name\": \"eCL_Idi_fa2F4\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 1006621748, " + 
                    " \"mime_type\": \"RYuGnjUjivFJvVx\", " + 
                    " \"uri\": \"Mmdww\", " + 
                    " \"capture_date\": \"1932-11-23T04:20:22.022-03:17\" " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/categories/432")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/api/v2/tags/{id}
    */
    @Test(timeout = 60000)
    public void test_21_putOnTagReturns400() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"group\": \"S74kdhcVR\", " + 
                    " \"name\": \"yVGwDc\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 641, " + 
                    " \"uri\": \"Id1HxJUaieF\", " + 
                    " \"name\": \"_EM_68410_XYZ_\", " + 
                    " \"capture_date\": \"2076-06-05T11:55:46.653+00:37\", " + 
                    " \"author\": \"4\" " + 
                    " }, " + 
                    " \"activities_count\": 289 " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/tags/-481781280")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/api/v1/media_files/{id}
    */
    @Test(timeout = 60000)
    public void test_22_putOnMedia_filReturns400UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 209L)
            .and().insertInto("MEDIA_FILE", 3747L)
                .d("AUTHOR", "\"Brq\"")
                .d("CAPTURE_DATE", "\"2093-12-16 06:31:40\"")
                .d("COPY_RIGHT", "\"xg7hBYNk\"")
                .d("MIME_TYPE", "\"tCFkebyXGstiIG\"")
                .d("NAME", "NULL")
                .d("URI", "\"fkGM8K2H4E\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 0, " + 
                    " \"mime_type\": \"lFcM6fYAudnu\", " + 
                    " \"uri\": \"3wi\", " + 
                    " \"name\": \"GqZQRFT\", " + 
                    " \"capture_date\": \"2100-10-22T17:18:10-12:21\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/media_files/0")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/v1/media_files
    */
    @Test(timeout = 60000)
    public void test_23_postOnV1Media_filesWithQueryParamsReturns400UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("SYSTEM_MESSAGE", 249L)
                .d("KEY", "\"0mOsn0cb`wRSboX\"")
                .d("VALID_FROM", "\"2091-11-14 08:43:16\"")
                .d("VALID_TO", "\"1979-11-18 15:55:02\"")
                .d("VALUE", "\"UsUU\"")
            .and().insertInto("ACTIVITY", 2069L)
            .and().insertInto("USERS", 2072L)
                .d("AUTHORIZATION_LEVEL", "64")
                .d("NAME", "\"Ra\"")
            .and().insertInto("ACTIVITY", 2071L)
            .and().insertInto("ACTIVITY_RATING", 2070L)
                .r("ACTIVITY_ID", 2071L)
                .d("USER_ID", "1")
                .d("FAVOURITE", "false")
                .d("RATING", "402")
            .and().insertInto("MEDIA_FILE", 4825L)
                .d("AUTHOR", "NULL")
                .d("CAPTURE_DATE", "\"1993-12-12 04:29:50\"")
                .d("COPY_RIGHT", "\"362540\"")
                .d("MIME_TYPE", "\"gbbskZvqOTAP3LU6\"")
                .d("NAME", "\"_EM_82892_XYZ_\"")
                .d("URI", "\"_EM_69875_XYZ_\"")
            .and().insertInto("MEDIA_FILE", 4831L)
                .d("URI", "\"34l5YVD5iP\"")
            .and().insertInto("USERS", 4830L)
                .d("AUTHORIZATION_LEVEL", "110")
                .d("NAME", "\"366749\"")
            .and().insertInto("ACTIVITY", 4829L)
            .and().insertInto("ACTIVITY", 4828L)
            .and().insertInto("ACTIVITY_PROPERTIES", 4827L)
                .r("ACTIVITY_ID", 2069L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 4826L)
                .r("ACTIVITY_PROPERTIES_ID", 4827L)
                .r("MEDIA_FILE_ID", 4825L)
                .d("FEATURED", "true")
            .and().insertInto("MEDIA_FILE", 6927L)
                .d("URI", "\"af1EtSsBIn\"")
            .and().insertInto("TAG", 6926L)
                .d("GRP", "\"KiKKEmTifyYNM6\"")
                .d("NAME", "\"1Iwu7LmZwOp1pyJ1\"")
                .d("MEDIA_FILE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"mime_type\": \"\", " + 
                    " \"uri\": \"UCtFH4ak\", " + 
                    " \"name\": \"bA6u711O4xBMDH\", " + 
                    " \"capture_date\": \"2013-01-24T23:43:00.117-04:15\", " + 
                    " \"copy_right\": \"O2W\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files?" + 
                    "uri=_EM_82890_XYZ_&" + 
                    "attrs=cy7qeQm1")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
    }
    
    
    /**
    * Calls:
    * (400) PATCH:/api/v2/activities/{id}
    */
    @Test(timeout = 60000)
    public void test_24_patchOnActivReturns400() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "_EM_2058_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"_EM_2046_XYZ_\", " + 
                    " \"description_material\": \"_EM_2047_XYZ_\", " + 
                    " \"description_prepare\": \"YxbApDsohlQ\", " + 
                    " \"description_notes\": \"eMMuZFI2fK\", " + 
                    " \"age_max\": 21, " + 
                    " \"participants_min\": 524, " + 
                    " \"time_max\": 13, " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"capture_date\": \"2008-00-02T20:50:59-16:38\", " + 
                    " \"copy_right\": \"zcphR0VaRKj4U4\", " + 
                    " \"author\": \"_EM_2049_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": -5880241214988710420, " + 
                    " \"mime_type\": \"_EM_2050_XYZ_\", " + 
                    " \"name\": \"CVcjL7KPLciBa\", " + 
                    " \"author\": \"xTELJ\" " + 
                    " }, " + 
                    " { " + 
                    " \"mime_type\": \"BcaF0DhQ\", " + 
                    " \"name\": \"_EM_2054_XYZ_\", " + 
                    " \"capture_date\": \"2076-12-30T23:43:43.863+12:10\", " + 
                    " \"copy_right\": \"_EM_2055_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 300, " + 
                    " \"identities\": [] " + 
                    " } " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v2/activities/-2659170872409915885")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/api/v2/activities/{id}
    */
    @Test(timeout = 60000)
    public void test_25_putOnActivReturns400() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1278_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 920, " + 
                    " \"description_introduction\": \"gP3dOvzS\", " + 
                    " \"description_main\": \"_EM_1260_XYZ_\", " + 
                    " \"description_safety\": \"ZzYf\", " + 
                    " \"age_min\": -2147482900, " + 
                    " \"participants_min\": 108, " + 
                    " \"participants_max\": 124, " + 
                    " \"time_min\": 412397232, " + 
                    " \"time_max\": 721, " + 
                    " \"source\": \"_EM_1261_XYZ_\", " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"mime_type\": \"Q_cs6SUCWBY\", " + 
                    " \"uri\": \"_EM_1266_XYZ_\", " + 
                    " \"name\": \"INTEGRATION TEST USER\", " + 
                    " \"capture_date\": \"2093-02-29T25:10:11Z\", " + 
                    " \"copy_right\": \"_EM_1267_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 706, " + 
                    " \"mime_type\": \"_EM_1269_XYZ_\", " + 
                    " \"capture_date\": \"2026-08-05T21:41:00Z\", " + 
                    " \"copy_right\": \"_EM_1271_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"mime_type\": \"_EM_1273_XYZ_\", " + 
                    " \"uri\": \"66M\", " + 
                    " \"name\": \"zk363\", " + 
                    " \"capture_date\": \"1954-06-31T19:07:43.267-09:53\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 967, " + 
                    " \"email_address\": \"_EM_1276_XYZ_\", " + 
                    " \"identities\": [ " + 
                    " {}, " + 
                    " { " + 
                    " \"type\": \"GOOGLE\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 428, " + 
                    " \"date_created\": \"1914-05-07T18:23:16.997Z\", " + 
                    " \"type\": \"EVOMASTER\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 163, " + 
                    " \"date_created\": \"1905-07-32T09:26:11Z\", " + 
                    " \"type\": \"EVOMASTER\" " + 
                    " } " + 
                    " ] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 309, " + 
                    " \"ratings_count\": 952, " + 
                    " \"ratings_sum\": 306, " + 
                    " \"ratings_average\": 0.4219061675229019 " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/activities/920?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/api/v1/activities/{id}
    */
    @Test(timeout = 60000)
    public void test_26_putOnActivReturns400UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 5556L)
            .and().insertInto("ACTIVITY", 5555L)
            .and().insertInto("ACTIVITY_PROPERTIES", 5554L)
                .d("AGE_MAX", "-465")
                .d("AGE_MIN", "-1073741774")
                .d("DATE_CREATED", "\"1941-01-23 07:42:50\"")
                .d("DATE_PUBLISHED", "\"1937-09-12 11:29:38\"")
                .d("DATE_UPDATED", "\"1932-10-25 15:47:55\"")
                .d("DESCRIPTION_INTRODUCTION", "\"KMXShHulUb6Mt\"")
                .d("DESCRIPTION_MAIN", "\"1TRD8\"")
                .d("DESCRIPTION_MATERIAL", "\"GTlz8sguo\"")
                .d("DESCRIPTION_NOTES", "NULL")
                .d("DESCRIPTION_PREPARE", "\"\\QR\"")
                .d("DESCRIPTION_SAFETY", "NULL")
                .d("FEATURED", "false")
                .d("NAME", "\"AmuXCwLQN\"")
                .d("PARTICIPANTS_MAX", "242")
                .d("PARTICIPANTS_MIN", "984")
                .d("SOURCE", "\"zNqVPxMxfFTP_uV\"")
                .d("TIME_MAX", "NULL")
                .d("TIME_MIN", "73")
                .r("ACTIVITY_ID", 5556L)
                .d("AUTHOR_ID", "NULL")
                .d("PUBLISHING_ACTIVITY_ID", "NULL")
            .and().insertInto("ACTIVITY", 5559L)
            .and().insertInto("ACTIVITY_DERIVED", 5558L)
                .r("ACTIVITY_ID", 5559L)
                .d("FAVOURITES_COUNT", "152")
                .d("RATINGS_AVG", "0.18451919964028585")
                .d("RATINGS_COUNT", "NULL")
                .d("RATINGS_SUM", "948")
            .and().insertInto("MEDIA_FILE", 6732L)
                .d("URI", "\"MZZIS_YlfxN\"")
            .and().insertInto("TAG", 6731L)
                .d("GRP", "\"AiIZKZ8AIJZPlCKn\"")
                .d("NAME", "\"_EM_81538_XYZ_\"")
            .and().insertInto("ACTIVITY", 6729L)
            .and().insertInto("ACTIVITY", 6728L)
            .and().insertInto("ACTIVITY_PROPERTIES", 6727L)
                .r("ACTIVITY_ID", 5559L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 6726L)
                .r("ACTIVITY_PROPERTIES_ID", 5554L)
                .r("TAG_ID", 6731L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"0HA040vgo6xRKO\", " + 
                    " \"description_introduction\": \"SNus\", " + 
                    " \"description_notes\": \"\", " + 
                    " \"age_min\": -2147483240, " + 
                    " \"participants_min\": 892, " + 
                    " \"participants_max\": 1725380194, " + 
                    " \"time_min\": 1713524931, " + 
                    " \"time_max\": 716, " + 
                    " \"featured\": false, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"name\": \"GqKcFw\", " + 
                    " \"activities_count\": 491 " + 
                    " }, " + 
                    " { " + 
                    " \"group\": \"n\", " + 
                    " \"name\": \"OFc5uCy2Q4AyfztM\" " + 
                    " } " + 
                    " ], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"uri\": \"V\", " + 
                    " \"name\": \"EvC\", " + 
                    " \"capture_date\": \"1928-07-05T18:20:56Z\", " + 
                    " \"copy_right\": \"GwThoVc2VI7551va\" " + 
                    " }, " + 
                    " { " + 
                    " \"mime_type\": \"y3L7Wc2l1k\", " + 
                    " \"uri\": \"f\", " + 
                    " \"capture_date\": \"2080-07-28T21:15:04+15:35\", " + 
                    " \"author\": \"lEn4xvp\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 759, " + 
                    " \"mime_type\": \"TJJJAVp\", " + 
                    " \"name\": \"dydm3dksYE\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"email_address\": \"J\", " + 
                    " \"authorization_level\": 774, " + 
                    " \"identities\": [] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"properties_revisions\": [], " + 
                    " \"ratings_count\": 238, " + 
                    " \"ratings_sum\": 650, " + 
                    " \"ratings_average\": 0.22112127100903123, " + 
                    " \"related\": [ " + 
                    " 593, " + 
                    " 781, " + 
                    " 602, " + 
                    " 845 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/activities/276")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/v1/activities
    */
    @Test(timeout = 60000)
    public void test_27_postOnV1ActivitiesReturns400() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 86, " + 
                    " \"name\": \"DkIFKYr\", " + 
                    " \"date_published\": \"2008-10-19T-1:22:09.527Z\", " + 
                    " \"description_material\": \"_EM_67291_XYZ_\", " + 
                    " \"description_introduction\": \"O\", " + 
                    " \"description_main\": \"_EM_67291_XYZ_\", " + 
                    " \"description_safety\": \"_EM_67291_XYZ_\", " + 
                    " \"description_notes\": \"_EM_67291_XYZ_\", " + 
                    " \"age_max\": -2147483648, " + 
                    " \"participants_min\": 1082187, " + 
                    " \"participants_max\": 1082187, " + 
                    " \"time_min\": -2147483648, " + 
                    " \"time_max\": -2147482691, " + 
                    " \"featured\": true, " + 
                    " \"tags\": [], " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 579, " + 
                    " \"mime_type\": \"zU\", " + 
                    " \"uri\": \"MWfgZT8gmA\", " + 
                    " \"name\": \"_EM_36942_XYZ_\", " + 
                    " \"capture_date\": \"1949-08-16T12:28:51.921Z\", " + 
                    " \"author\": \"lH_pDUkau\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 609, " + 
                    " \"mime_type\": \"_EM_63118_XYZ_\", " + 
                    " \"uri\": \"_\", " + 
                    " \"name\": \"OF1uVWOoGr7\", " + 
                    " \"copy_right\": \"5nmF4u58qF\", " + 
                    " \"author\": \"_EM_63119_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"mime_type\": \"gDhw4Xf\", " + 
                    " \"uri\": \"_EM_63120_XYZ_\", " + 
                    " \"name\": \"\", " + 
                    " \"copy_right\": \"_EM_63121_XYZ_\", " + 
                    " \"author\": \"_EM_13839_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 906, " + 
                    " \"mime_type\": \"Mxsz\", " + 
                    " \"capture_date\": \"2051-08-04T20:59:37Z\", " + 
                    " \"copy_right\": \"5F4z2wkjbQyc_tY\" " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"_2L13\", " + 
                    " \"capture_date\": \"2008-10-19T04:-1:58Z\", " + 
                    " \"copy_right\": \"_EM_63123_XYZ_\", " + 
                    " \"author\": \"93y155jjSwqJc9\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 648, " + 
                    " \"email_address\": \"_EM_63124_XYZ_\" " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"ratings_sum\": 151, " + 
                    " \"favourites_count\": 886, " + 
                    " \"ratings_average\": 0.9143769312883369 " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
    }
    
    
    /**
    * Calls:
    * (400) PATCH:/api/v1/activities/{id}
    */
    @Test(timeout = 60000)
    public void test_28_patchOnActivReturns400UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 451L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"_FM2\", " + 
                    " \"description_material\": \"nAnO9KO1\", " + 
                    " \"description_main\": \"_EM_52422_XYZ_\", " + 
                    " \"description_notes\": \"E0aZdy\", " + 
                    " \"age_min\": -2147483648, " + 
                    " \"age_max\": -390, " + 
                    " \"participants_min\": 706, " + 
                    " \"time_min\": 628, " + 
                    " \"time_max\": 2758, " + 
                    " \"source\": \"_EM_12390_XYZ_\", " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": -736140869, " + 
                    " \"mime_type\": \"Bz6Ni\", " + 
                    " \"name\": \"_EM_12391_XYZ_\", " + 
                    " \"author\": \"_EM_12392_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"uri\": \"3DV\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 129, " + 
                    " \"mime_type\": \"_EM_12396_XYZ_\", " + 
                    " \"name\": \"\" " + 
                    " }, " + 
                    " { " + 
                    " \"mime_type\": \"x\", " + 
                    " \"name\": \"qmsec1q41xTHXrSg\", " + 
                    " \"copy_right\": \"_EM_12398_XYZ_\", " + 
                    " \"author\": \"_EM_12399_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"name\": \"_EM_12400_XYZ_\", " + 
                    " \"email_address\": \"_EM_12401_XYZ_\", " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"date_created\": \"1956-04-03T19:50:12Z\", " + 
                    " \"type\": \"API\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 303, " + 
                    " \"type\": \"GOOGLE\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 883, " + 
                    " \"date_created\": \"1913-02-16T18:40:41Z\", " + 
                    " \"value\": \"_EM_12403_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"type\": \"GOOGLE\" " + 
                    " } " + 
                    " ] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 248, " + 
                    " \"properties_revisions\": [], " + 
                    " \"ratings_count\": -440704875085218139, " + 
                    " \"ratings_sum\": 285, " + 
                    " \"favourites_count\": 33622, " + 
                    " \"ratings_average\": 0.5467309293006889, " + 
                    " \"related\": [] " + 
                    " } " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v1/activities/4611686018427256832")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'message'", containsString("Unable to process JSON"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/v2/activities
    */
    @Test(timeout = 60000)
    public void test_29_postOnV2ActivitiesReturns400UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 4394L)
                .d("AUTHORIZATION_LEVEL", "459207")
                .d("NAME", "\"_EM_65404_XYZ_\"")
            .and().insertInto("ACTIVITY", 4393L)
            .and().insertInto("ACTIVITY", 4392L)
            .and().insertInto("ACTIVITY_PROPERTIES", 4391L)
                .d("AGE_MAX", "-2147483018")
                .d("AGE_MIN", "-671")
                .d("DATE_CREATED", "\"1985-08-20 15:44:49\"")
                .d("DATE_PUBLISHED", "NULL")
                .d("DATE_UPDATED", "NULL")
                .d("DESCRIPTION_INTRODUCTION", "\"_EM_81750_XYZ_\"")
                .d("DESCRIPTION_MAIN", "\"pyWTXm03v_L\"")
                .d("DESCRIPTION_MATERIAL", "\"V8tylus\"")
                .d("DESCRIPTION_NOTES", "\"yfFoUDltxhYn\"")
                .d("DESCRIPTION_PREPARE", "\"gYz=1k\"")
                .d("DESCRIPTION_SAFETY", "\"_EM_81195_XYZ_\"")
                .d("FEATURED", "false")
                .d("NAME", "NULL")
                .d("PARTICIPANTS_MAX", "NULL")
                .d("PARTICIPANTS_MIN", "NULL")
                .d("SOURCE", "\"TABLE_TYPES\"")
                .d("TIME_MAX", "-15808")
                .d("TIME_MIN", "135")
                .r("ACTIVITY_ID", 4392L)
                .d("AUTHOR_ID", "2")
                .d("PUBLISHING_ACTIVITY_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 40, " + 
                    " \"name\": \"jz\", " + 
                    " \"date_published\": \"2065-02-18T00:29:24.051Z\", " + 
                    " \"description_material\": \"pxfvs\", " + 
                    " \"description_introduction\": \"_EM_3927_XYZ_\", " + 
                    " \"description_safety\": \"MKyELc5aIsgSn\", " + 
                    " \"age_min\": 677, " + 
                    " \"participants_min\": 955, " + 
                    " \"participants_max\": 972, " + 
                    " \"time_max\": 2123445723, " + 
                    " \"featured\": true, " + 
                    " \"source\": \"gS\", " + 
                    " \"author\": { " + 
                    " \"id\": 962, " + 
                    " \"name\": \"_EM_3937_XYZ_\", " + 
                    " \"authorization_level\": 547, " + 
                    " \"identities\": [] " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 429, " + 
                    " \"properties_revisions\": [], " + 
                    " \"ratings_sum\": 30, " + 
                    " \"favourites_count\": 514, " + 
                    " \"related\": [ " + 
                    " 332 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/v1/activities
    */
    @Test(timeout = 60000)
    public void test_30_postOnActivitiesReturns400UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 8761L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"U5oUUE\"")
            .and().insertInto("ACTIVITY", 8760L)
            .and().insertInto("ACTIVITY", 8759L)
            .and().insertInto("ACTIVITY_PROPERTIES", 8758L)
                .d("AGE_MAX", "-2147482865")
                .d("AGE_MIN", "-575")
                .d("DATE_CREATED", "NULL")
                .d("DATE_PUBLISHED", "\"1991-10-08 13:23:22\"")
                .d("DATE_UPDATED", "NULL")
                .d("DESCRIPTION_INTRODUCTION", "\"OMCywH\"")
                .d("DESCRIPTION_MAIN", "\"cuYxiym\"")
                .d("DESCRIPTION_MATERIAL", "\"lGCkCyB8Vq8CVED\"")
                .d("DESCRIPTION_NOTES", "\"yv0HoY\"")
                .d("DESCRIPTION_PREPARE", "\"_EM_89270_XYZ_\"")
                .d("DESCRIPTION_SAFETY", "NULL")
                .d("FEATURED", "true")
                .d("NAME", "NULL")
                .d("PARTICIPANTS_MAX", "392")
                .d("PARTICIPANTS_MIN", "44")
                .d("SOURCE", "\"jyaZZSqpJ6Bsf6zP\"")
                .d("TIME_MAX", "438")
                .d("TIME_MIN", "311")
                .r("ACTIVITY_ID", 8759L)
                .d("AUTHOR_ID", "2")
                .d("PUBLISHING_ACTIVITY_ID", "NULL")
            .and().insertInto("ACTIVITY", 8763L)
            .and().insertInto("ACTIVITY_DERIVED", 8762L)
                .r("ACTIVITY_ID", 8760L)
                .d("FAVOURITES_COUNT", "895")
                .d("RATINGS_AVG", "NULL")
                .d("RATINGS_COUNT", "511")
                .d("RATINGS_SUM", "23")
            .and().insertInto("MEDIA_FILE", 8769L)
                .d("URI", "\"_EM_89271_XYZ_\"")
            .and().insertInto("TAG", 8768L)
                .d("GRP", "\"73\"")
                .d("NAME", "\"pkcme5VmL31Or7\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 10619L)
                .d("URI", "\"OBFLHdv6zhPkHq\"")
            .and().insertInto("TAG", 10618L)
                .d("GRP", "\"T4lgGOG\"")
                .d("NAME", "\"Or4mCJfxeOy\"")
            .and().insertInto("USERS", 10617L)
                .d("AUTHORIZATION_LEVEL", "142")
                .d("NAME", "\"G6TH\"")
            .and().insertInto("ACTIVITY", 10616L)
            .and().insertInto("ACTIVITY", 10615L)
            .and().insertInto("ACTIVITY_PROPERTIES", 10614L)
                .r("ACTIVITY_ID", 8760L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 10613L)
                .r("ACTIVITY_PROPERTIES_ID", 10614L)
                .r("TAG_ID", 10618L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"description_prepare\": \"F5gmb\", " + 
                    " \"description_main\": \"cMav0XJOew\", " + 
                    " \"description_notes\": \"cMav0XJOew\", " + 
                    " \"age_max\": 256, " + 
                    " \"participants_min\": 121, " + 
                    " \"time_min\": 256, " + 
                    " \"time_max\": -494, " + 
                    " \"featured\": true, " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 362, " + 
                    " \"group\": \"2fJf102UJO\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 393, " + 
                    " \"group\": \"_5Qz24I71s\", " + 
                    " \"name\": \"\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 9, " + 
                    " \"activities_count\": 0 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 129, " + 
                    " \"media_file\": { " + 
                    " \"id\": 379, " + 
                    " \"capture_date\": \"2033-08-24T19:48:26.363Z\", " + 
                    " \"author\": \"_EM_32314_XYZ_\" " + 
                    " }, " + 
                    " \"activities_count\": 664 " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (401) DELETE:/api/v2/activities/{id}/rating
    */
    @Test(timeout = 60000)
    public void test_31_deleteOnActivRatingWithQueryParamReturns401() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v2/activities/128/rating?EMextraParam123=_EM_3_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
    }
    
    
    /**
    * Calls:
    * (401) DELETE:/api/v1/activities/{id}/rating
    */
    @Test(timeout = 60000)
    public void test_32_deleteOnActivRatingReturns401() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/activities/551/rating")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
    }
    
    
    /**
    * Calls:
    * (401) DELETE:/api/v2/activities/{id}
    */
    @Test(timeout = 60000)
    public void test_33_deleteOnV2ActivWithQueryParamReturns401() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v2/activities/585?EMextraParam123=_EM_35_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
    }
    
    
    /**
    * Calls:
    * (401) DELETE:/api/v1/system_messages/{id}
    */
    @Test(timeout = 60000)
    public void test_34_deleteOnSystem_messagReturns401() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v1/system_messages/589?EMextraParam123=_EM_43_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
    }
    
    
    /**
    * Calls:
    * (401) DELETE:/api/v2/tags/{id}
    */
    @Test(timeout = 60000)
    public void test_35_deleteOnTagReturns401() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v2/tags/562?EMextraParam123=_EM_47_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
    }
    
    
    /**
    * Calls:
    * (401) DELETE:/api/v1/users/{id}
    */
    @Test(timeout = 60000)
    public void test_36_deleteOnUserReturns401() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_49_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/users/264")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
    }
    
    
    /**
    * Calls:
    * (401) GET:/api/v1/users/profile
    */
    @Test(timeout = 60000)
    public void test_37_getOnProfileReturns401() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/users/profile")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
    }
    
    
    /**
    * Calls:
    * (401) DELETE:/api/v1/activities/{id}
    */
    @Test(timeout = 60000)
    public void test_38_deleteOnV1ActivReturns401() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_86_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/activities/155")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
    }
    
    
    /**
    * Calls:
    * (401) DELETE:/api/v1/categories/{id}
    */
    @Test(timeout = 60000)
    public void test_39_deleteOnCategoriReturns401() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/categories/3536571952916661772?EMextraParam123=_EM_90_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
    }
    
    
    /**
    * Calls:
    * (401) POST:/api/v2/tags
    */
    @Test(timeout = 60000)
    public void test_40_postOnTagsReturns401() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_153_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 60588025, " + 
                    " \"group\": \"_EM_148_XYZ_\", " + 
                    " \"name\": \"v\", " + 
                    " \"media_file\": { " + 
                    " \"mime_type\": \"_EM_149_XYZ_\", " + 
                    " \"uri\": \"_EM_150_XYZ_\", " + 
                    " \"capture_date\": \"1929-09-01T25:54:40Z\", " + 
                    " \"author\": \"_EM_152_XYZ_\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/tags?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
    }
    
    
    /**
    * Calls:
    * (401) GET:/api/v1/favourites
    */
    @Test(timeout = 60000)
    public void test_41_getOnFavouritesReturns401() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_114_XYZ_")
                .get(baseUrlOfSut + "/api/v1/favourites")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
    }
    
    
    /**
    * Calls:
    * (401) POST:/api/v2/activities
    */
    @Test(timeout = 60000)
    public void test_42_postOnV2ActivitiesWithQueryParamReturns401() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"_EM_118_XYZ_\", " + 
                    " \"date_created\": \"2057-13-12T25:16:14.830+17:12\", " + 
                    " \"description_material\": \"_EM_119_XYZ_\", " + 
                    " \"description_prepare\": \"jpgp\", " + 
                    " \"description_safety\": \"_EM_121_XYZ_\", " + 
                    " \"description_notes\": \"_EM_122_XYZ_\", " + 
                    " \"age_min\": -404, " + 
                    " \"participants_max\": 517, " + 
                    " \"featured\": true, " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 171, " + 
                    " \"author\": \"f0taarO7S0v0s\" " + 
                    " }, " + 
                    " { " + 
                    " \"mime_type\": \"_EM_132_XYZ_\", " + 
                    " \"uri\": \"_EM_133_XYZ_\", " + 
                    " \"name\": \"_EM_134_XYZ_\", " + 
                    " \"capture_date\": \"2031-03-07T-1:13:17Z\", " + 
                    " \"author\": \"_EM_135_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 953, " + 
                    " \"mime_type\": \"_EM_136_XYZ_\", " + 
                    " \"capture_date\": \"2032-10-26T00:60:15-07:14\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"email_address\": \"_EM_141_XYZ_\" " + 
                    " }, " + 
                    " \"activity\": { " + 
                    " \"id\": 707, " + 
                    " \"properties_revisions\": [], " + 
                    " \"ratings_count\": 382 " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities?EMextraParam123=_EM_142_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
    }
    
    
    /**
    * Calls:
    * (401) POST:/api/v1/media_files
    */
    @Test(timeout = 60000)
    public void test_43_postOnMedia_filesReturns401() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .post(baseUrlOfSut + "/api/v1/media_files")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
    }
    
    
    /**
    * Calls:
    * (401) POST:/api/v1/system_messages
    */
    @Test(timeout = 60000)
    public void test_44_postOnSystem_messagesReturns401() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_147_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 543 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/system_messages?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
    }
    
    
    /**
    * Calls:
    * (401) POST:/api/v1/users
    */
    @Test(timeout = 60000)
    public void test_45_postOnUsersReturns401() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"_EM_154_XYZ_\", " + 
                    " \"email_address\": \"8BdSv6jItIoX6yJ\", " + 
                    " \"authorization_level\": 531, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"date_created\": \"2014-09-06T04:59:32.568+13:17\", " + 
                    " \"type\": \"API\", " + 
                    " \"value\": \"gK\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/users?EMextraParam123=_EM_155_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
    }
    
    
    /**
    * Calls:
    * (401) POST:/api/v1/activities
    */
    @Test(timeout = 60000)
    public void test_46_postOnV1ActivitiesWithQueryParamReturns401() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .post(baseUrlOfSut + "/api/v1/activities?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
    }
    
    
    /**
    * Calls:
    * (401) POST:/api/v1/categories
    */
    @Test(timeout = 60000)
    public void test_47_postOnCategoriesReturns401() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 159, " + 
                    " \"name\": \"OoOoaLiq13kSS\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 295, " + 
                    " \"uri\": \"uetLhUSu\", " + 
                    " \"capture_date\": \"2071-11-32T10:34:31Z\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/categories?EMextraParam123=_EM_181_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
    }
    
    
    /**
    * Calls:
    * (401) GET:/api/v2/activities/{id}/rating
    */
    @Test(timeout = 60000)
    public void test_48_getOnActivRatingReturns401() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2_XYZ_")
                .get(baseUrlOfSut + "/api/v2/activities/64/rating")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
    }
    
    
    /**
    * Calls:
    * (401) GET:/api/v1/activities/{id}/rating
    */
    @Test(timeout = 60000)
    public void test_49_getOnActivRatingWithQueryParamsReturns401() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/activities/144/rating?" + 
                    "attrs=_48Y&" + 
                    "EMextraParam123=_EM_4_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
    }
    
    
    /**
    * Calls:
    * (401) PATCH:/api/v2/activities/{id}
    */
    @Test(timeout = 60000)
    public void test_50_patchOnV2ActivReturns401() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 860, " + 
                    " \"date_created\": \"2069-07-27T09:45:00.118Z\", " + 
                    " \"description_introduction\": \"WdlKx_uXxpsXze\", " + 
                    " \"description_prepare\": \"EeIXrnTsD23mRvd\", " + 
                    " \"description_notes\": \"_EM_11_XYZ_\", " + 
                    " \"participants_min\": 334, " + 
                    " \"participants_max\": 220, " + 
                    " \"time_min\": 276, " + 
                    " \"time_max\": 623, " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"id\": 2518395582765302841, " + 
                    " \"uri\": \"_EM_23_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"mime_type\": \"\", " + 
                    " \"uri\": \"g0\", " + 
                    " \"name\": \"_EM_24_XYZ_\", " + 
                    " \"copy_right\": \"G7erfA\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": -1612207994, " + 
                    " \"capture_date\": \"2022-01-27T12:31:21.539+08:45\", " + 
                    " \"author\": \"2eC5mAoe\" " + 
                    " }, " + 
                    " { " + 
                    " \"mime_type\": \"_EM_27_XYZ_\", " + 
                    " \"name\": \"_EM_28_XYZ_\", " + 
                    " \"author\": \"_EM_29_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"copy_right\": \"_EM_31_XYZ_\", " + 
                    " \"author\": \"Knxo74UDNpGwe3\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 844, " + 
                    " \"email_address\": \"_EM_33_XYZ_\", " + 
                    " \"authorization_level\": 372, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": -2142671272821755457, " + 
                    " \"date_created\": \"1952-09-12T24:57:53.245Z\" " + 
                    " }, " + 
                    " { " + 
                    " \"type\": \"EVOMASTER\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 1912798279, " + 
                    " \"type\": \"EVOMASTER\" " + 
                    " } " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v2/activities/860")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
    }
    
    
    /**
    * Calls:
    * (401) DELETE:/api/v1/media_files/{id}
    */
    @Test(timeout = 60000)
    public void test_51_deleteOnMedia_filReturns401() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/media_files/252")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
    }
    
    
    /**
    * Calls:
    * (401) GET:/api/v1/users/{id}
    */
    @Test(timeout = 60000)
    public void test_52_getOnUserReturns401() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/users/315?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
    }
    
    
    /**
    * Calls:
    * (401) PATCH:/api/v1/activities/{id}
    */
    @Test(timeout = 60000)
    public void test_53_patchOnV1ActivReturns401() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_85_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 267, " + 
                    " \"name\": \"_EM_51_XYZ_\", " + 
                    " \"date_created\": \"2067-10-23T01:42:26Z\", " + 
                    " \"date_updated\": \"1949-00-25T06:47:28.559Z\", " + 
                    " \"age_min\": -2147483494, " + 
                    " \"age_max\": -1971082740, " + 
                    " \"participants_min\": 836, " + 
                    " \"participants_max\": 123, " + 
                    " \"time_max\": 327, " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"mime_type\": \"_EM_64_XYZ_\", " + 
                    " \"copy_right\": \"_EM_66_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 910, " + 
                    " \"mime_type\": \"_EM_68_XYZ_\", " + 
                    " \"uri\": \"_EM_69_XYZ_\", " + 
                    " \"name\": \"_EM_70_XYZ_\", " + 
                    " \"copy_right\": \"_EM_71_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 854, " + 
                    " \"uri\": \"_EM_73_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"capture_date\": \"1921-10-16T24:58:45.071+04:10\", " + 
                    " \"author\": \"GKV0IvB\" " + 
                    " } " + 
                    " ], " + 
                    " \"author\": { " + 
                    " \"id\": 267, " + 
                    " \"name\": \"\", " + 
                    " \"email_address\": \"_EM_78_XYZ_\", " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"type\": \"EVOMASTER\", " + 
                    " \"value\": \"_EM_79_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 425, " + 
                    " \"type\": \"GOOGLE\" " + 
                    " }, " + 
                    " {}, " + 
                    " { " + 
                    " \"type\": \"GOOGLE\", " + 
                    " \"value\": \"_EM_82_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"date_created\": \"1947-10-31T08:41:42.573-08:28\", " + 
                    " \"value\": \"_EM_83_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .patch(baseUrlOfSut + "/api/v1/activities/267")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
    }
    
    
    /**
    * Calls:
    * (401) GET:/api/v1/users
    */
    @Test(timeout = 60000)
    public void test_54_getOnUsersReturns401() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/users?" + 
                    "name=_EM_104_XYZ_&" + 
                    "attrs=_EM_105_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
    }
    
    
    /**
    * Calls:
    * (401) POST:/api/v2/activities/{id}/rating
    */
    @Test(timeout = 60000)
    public void test_55_postOnRatingReturns401() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_116_XYZ_")
                .contentType("application/json")
                .post(baseUrlOfSut + "/api/v2/activities/239/rating")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
    }
    
    
    /**
    * Calls:
    * (401) PUT:/api/v1/media_files/{id}
    */
    @Test(timeout = 60000)
    public void test_56_putOnMedia_filReturns401() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_273_XYZ_")
                .contentType("application/json")
                .put(baseUrlOfSut + "/api/v1/media_files/825")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
    }
    
    
    /**
    * Calls:
    * (401) POST:/api/v1/activities/{id}/rating
    */
    @Test(timeout = 60000)
    public void test_57_postOnRatingReturns401() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .post(baseUrlOfSut + "/api/v1/activities/360/rating")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
    }
    
    
    /**
    * Calls:
    * (401) POST:/api/v1/favourites
    */
    @Test(timeout = 60000)
    public void test_58_postOnFavouritesReturns401() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .post(baseUrlOfSut + "/api/v1/favourites?EMextraParam123=_EM_182_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
    }
    
    
    /**
    * Calls:
    * (401) PUT:/api/v2/activities/{id}
    */
    @Test(timeout = 60000)
    public void test_59_putOnV2ActivWithQueryParamReturns401() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .put(baseUrlOfSut + "/api/v2/activities/785?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
    }
    
    
    /**
    * Calls:
    * (401) PUT:/api/v1/activities/{id}
    */
    @Test(timeout = 60000)
    public void test_60_putOnV1ActivWithQueryParamReturns401() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_308_XYZ_")
                .contentType("application/json")
                .put(baseUrlOfSut + "/api/v1/activities/-1652594557?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
    }
    
    
    /**
    * Calls:
    * (401) PUT:/api/v1/system_messages/{id}
    */
    @Test(timeout = 60000)
    public void test_61_putOnSystem_messagReturns401() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" {} ")
                .put(baseUrlOfSut + "/api/v1/system_messages/1148955480?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
    }
    
    
    /**
    * Calls:
    * (401) PUT:/api/v2/tags/{id}
    */
    @Test(timeout = 60000)
    public void test_62_putOnTagReturns401() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"group\": \"_EM_276_XYZ_\", " + 
                    " \"name\": \"_EM_277_XYZ_\", " + 
                    " \"activities_count\": 302 " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/tags/116?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
    }
    
    
    /**
    * Calls:
    * (401) PUT:/api/v1/users/{id}
    */
    @Test(timeout = 60000)
    public void test_63_putOnUserReturns401() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .put(baseUrlOfSut + "/api/v1/users/894")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
    }
    
    
    /**
    * Calls:
    * (401) PUT:/api/v1/categories/{id}
    */
    @Test(timeout = 60000)
    public void test_64_putOnCategoriReturns401() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"group\": \"ln1XkJcoYllDfuF\", " + 
                    " \"name\": \"_EM_309_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/categories/1019344333975274041?EMextraParam123=_EM_312_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Credentials are required to access this resource."));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/api/v1/system_messages/{id}
    */
    @Test(timeout = 60000)
    public void test_65_deleteOnSystem_messagReturns403() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1121_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/system_messages/887")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/api/v2/tags/{id}
    */
    @Test(timeout = 60000)
    public void test_66_deleteOnTagReturns403() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v2/tags/784?EMextraParam123=_EM_1123_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/api/v1/users/{id}
    */
    @Test(timeout = 60000)
    public void test_67_deleteOnUserReturns403() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/users/-1258529037?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/api/v2/activities/{id}
    */
    @Test(timeout = 60000)
    public void test_68_deleteOnV2ActivReturns403() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/v2/activities/431")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
    }
    
    
    /**
    * Calls:
    * (403) GET:/api/v1/users/{id}
    */
    @Test(timeout = 60000)
    public void test_69_getOnUserReturns403() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/users/559")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/api/v1/activities/{id}
    */
    @Test(timeout = 60000)
    public void test_70_deleteOnV1ActivWithQueryParamReturns403() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/activities/331?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/api/v1/categories/{id}
    */
    @Test(timeout = 60000)
    public void test_71_deleteOnCategoriReturns403() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/categories/524")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/api/v2/tags/{id}
    */
    @Test(timeout = 60000)
    public void test_72_putOnTagReturns403() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .put(baseUrlOfSut + "/api/v2/tags/-283668010?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
    }
    
    
    /**
    * Calls:
    * (403) DELETE:/api/v1/media_files/{id}
    */
    @Test(timeout = 60000)
    public void test_73_deleteOnMedia_filReturns403() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1117_XYZ_")
                .delete(baseUrlOfSut + "/api/v1/media_files/504?" + 
                    "verify_unused=true&" + 
                    "EMextraParam123=_EM_1116_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/api/v1/activities/{id}
    */
    @Test(timeout = 60000)
    public void test_74_putOnV1ActivReturns403() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .put(baseUrlOfSut + "/api/v1/activities/9055302055634207277")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/api/v1/categories/{id}
    */
    @Test(timeout = 60000)
    public void test_75_putOnCategoriReturns403() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .put(baseUrlOfSut + "/api/v1/categories/751?EMextraParam123=_EM_1328_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
    }
    
    
    /**
    * Calls:
    * (403) PATCH:/api/v1/activities/{id}
    */
    @Test(timeout = 60000)
    public void test_76_patchOnV1ActivReturns403() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .patch(baseUrlOfSut + "/api/v1/activities/480")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
    }
    
    
    /**
    * Calls:
    * (403) PATCH:/api/v2/activities/{id}
    */
    @Test(timeout = 60000)
    public void test_77_patchOnV2ActivWithQueryParamReturns403() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .patch(baseUrlOfSut + "/api/v2/activities/814?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/api/v1/users
    */
    @Test(timeout = 60000)
    public void test_78_postOnUsersReturns403UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("SYSTEM_MESSAGE", 249L)
                .d("KEY", "\"0mOsj0cb`wRSboX\"")
                .d("VALID_FROM", "\"2091-11-14 00:43:16\"")
                .d("VALID_TO", "\"2009-07-18 00:23:02\"")
                .d("VALUE", "\"WsUU\"")
            .and().insertInto("ACTIVITY", 2069L)
            .and().insertInto("USERS", 2072L)
                .d("AUTHORIZATION_LEVEL", "2080")
                .d("NAME", "\"R_q\"")
            .and().insertInto("ACTIVITY", 2071L)
            .and().insertInto("ACTIVITY_RATING", 2070L)
                .r("ACTIVITY_ID", 2071L)
                .d("USER_ID", "1")
                .d("FAVOURITE", "true")
                .d("RATING", "402")
            .and().insertInto("MEDIA_FILE", 4825L)
                .d("AUTHOR", "\"6YMNP2h\"")
                .d("CAPTURE_DATE", "\"1900-12-12 11:29:35\"")
                .d("COPY_RIGHT", "\"H9F_ZsYkUUY\"")
                .d("MIME_TYPE", "\"gdbskZvqOTAP3LU6\"")
                .d("NAME", "\"z2DfTlM2\"")
                .d("URI", "\"cEM_69875_XYZ_\"")
            .and().insertInto("MEDIA_FILE", 4831L)
                .d("URI", "\"ZurgVZF\"")
            .and().insertInto("USERS", 4830L)
                .d("AUTHORIZATION_LEVEL", "108")
                .d("NAME", "\"UEM_69876]UYY_\"")
            .and().insertInto("ACTIVITY", 4829L)
            .and().insertInto("ACTIVITY", 4828L)
            .and().insertInto("ACTIVITY_PROPERTIES", 4827L)
                .r("ACTIVITY_ID", 2069L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 4826L)
                .r("ACTIVITY_PROPERTIES_ID", 4827L)
                .r("MEDIA_FILE_ID", 4831L)
                .d("FEATURED", "true")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"Q23z4n1WU\", " + 
                    " \"authorization_level\": 572 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/users")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("Cannot set authorization level to higher than your own."));
    }
    
    
    /**
    * Calls:
    * (403) POST:/api/v1/system_messages
    */
    @Test(timeout = 60000)
    public void test_79_postOnSystem_messagesReturns403() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 459, " + 
                    " \"key\": \"P31p\", " + 
                    " \"valid_to\": \"1904-09-16T11:50:37.232Z\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/system_messages")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/api/v1/users/{id}
    */
    @Test(timeout = 60000)
    public void test_80_putOnUserReturns403() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 1750116838, " + 
                    " \"authorization_level\": 683, " + 
                    " \"identities\": [ " + 
                    " { " + 
                    " \"id\": 153, " + 
                    " \"date_created\": \"2038-01-32T18:44:51.567Z\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/users/1750116838")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("Cannot set authorization level to higher than your own."));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/api/v1/system_messages/{id}
    */
    @Test(timeout = 60000)
    public void test_81_putOnSystem_messagReturns403UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("SYSTEM_MESSAGE", 6465L)
                .d("KEY", "\"y2ZrbR\"")
                .d("VALID_FROM", "NULL")
                .d("VALID_TO", "\"2062-09-13 10:13:49\"")
                .d("VALUE", "\"_EM_80649_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 100, " + 
                    " \"key\": \"Pv\", " + 
                    " \"value\": \"Q2cZGBR9cRMggLYb\", " + 
                    " \"valid_from\": \"1973-02-11T09:22:41.348Z\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/system_messages/100")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/api/v1/media_files/{id}
    */
    @Test(timeout = 60000)
    public void test_82_putOnMedia_filReturns403() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1282_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"mime_type\": \"3lAh\", " + 
                    " \"uri\": \"_EM_1279_XYZ_\", " + 
                    " \"name\": \"jpxez0\", " + 
                    " \"capture_date\": \"1987-10-09T20:60:08.957Z\", " + 
                    " \"author\": \"_EM_1280_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v1/media_files/808")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/api/v1/media_files
    */
    @Test(timeout = 60000)
    public void test_83_postOnMedia_filesReturns403UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 1050L)
                .d("AUTHOR", "\"kOSJV\"")
                .d("CAPTURE_DATE", "\"2056-09-12 16:42:22\"")
                .d("COPY_RIGHT", "\"_EM_92470_XYZ_\"")
                .d("MIME_TYPE", "NULL")
                .d("NAME", "\"Da7wilzcgrR\"")
                .d("URI", "\"C1fNoJQSj\"")
            .and().insertInto("SYSTEM_MESSAGE", 1051L)
                .d("KEY", "\"UUFCFbUC\"")
                .d("VALID_FROM", "\"2057-07-17 21:20:55\"")
                .d("VALID_TO", "NULL")
                .d("VALUE", "\"ky4rSCk7deNC8YK\"")
            .and().insertInto("USERS", 3590L)
                .d("AUTHORIZATION_LEVEL", "751")
                .d("NAME", "\"_EM_92471_XYZ_\"")
            .and().insertInto("ACTIVITY", 3589L)
            .and().insertInto("ACTIVITY_RATING", 3588L)
                .r("ACTIVITY_ID", 3589L)
                .d("USER_ID", "1")
                .d("FAVOURITE", "false")
                .d("RATING", "974")
            .and().insertInto("MEDIA_FILE", 154L)
                .d("AUTHOR", "NULL")
                .d("CAPTURE_DATE", "\"2097-12-29 13:24:12\"")
                .d("COPY_RIGHT", "\"_EM_8423_XYZ_\"")
                .d("MIME_TYPE", "\"_EM_8424_XYZ_\"")
                .d("NAME", "NULL")
                .d("URI", "\"http://PTn3qoKfw97:24747/iqzwWzCtQ4bI/3jGs\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 7, " + 
                    " \"mime_type\": \"0c03F3kGybDXv5b\", " + 
                    " \"uri\": \"sI90ej3CL7\", " + 
                    " \"name\": \"kr7l\", " + 
                    " \"copy_right\": \"cIAAGI1\", " + 
                    " \"author\": \"ND9vmE\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/api/v2/tags
    */
    @Test(timeout = 60000)
    public void test_84_postOnTagsReturns403UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 6673L)
                .d("AUTHORIZATION_LEVEL", "135")
                .d("NAME", "\"TUY6BIXpPgWN\"")
            .and().insertInto("ACTIVITY", 6672L)
            .and().insertInto("ACTIVITY", 6671L)
            .and().insertInto("ACTIVITY_PROPERTIES", 6670L)
                .d("AGE_MAX", "NULL")
                .d("AGE_MIN", "NULL")
                .d("DATE_CREATED", "NULL")
                .d("DATE_PUBLISHED", "\"1977-02-03 06:30:06\"")
                .d("DATE_UPDATED", "\"2067-03-24 02:43:53\"")
                .d("DESCRIPTION_INTRODUCTION", "NULL")
                .d("DESCRIPTION_MAIN", "NULL")
                .d("DESCRIPTION_MATERIAL", "\"Lwao88Ka\"")
                .d("DESCRIPTION_NOTES", "NULL")
                .d("DESCRIPTION_PREPARE", "\"5oVy\"")
                .d("DESCRIPTION_SAFETY", "\"THRq2ETIO\"")
                .d("FEATURED", "false")
                .d("NAME", "\"qMzA\"")
                .d("PARTICIPANTS_MAX", "13")
                .d("PARTICIPANTS_MIN", "486")
                .d("SOURCE", "\"PCZx\"")
                .d("TIME_MAX", "-268633613")
                .d("TIME_MIN", "532")
                .r("ACTIVITY_ID", 6671L)
                .d("AUTHOR_ID", "NULL")
                .r("PUBLISHING_ACTIVITY_ID", 6671L)
            .and().insertInto("ACTIVITY", 6675L)
            .and().insertInto("ACTIVITY_DERIVED", 6674L)
                .r("ACTIVITY_ID", 6672L)
                .d("FAVOURITES_COUNT", "NULL")
                .d("RATINGS_AVG", "-3117.1723931018687")
                .d("RATINGS_COUNT", "NULL")
                .d("RATINGS_SUM", "NULL")
            .and().insertInto("MEDIA_FILE", 7497L)
                .d("URI", "\"ClCi2JUUWmQ\"")
            .and().insertInto("TAG", 7496L)
                .d("GRP", "\"Ze_2_bha\"")
                .d("NAME", "\"8i3uKZ82hz7\"")
                .r("MEDIA_FILE_ID", 7497L)
            .and().insertInto("MEDIA_FILE", 7509L)
                .d("URI", "\"QpVkGD\"")
            .and().insertInto("TAG", 7508L)
                .d("GRP", "\"z50tsv\"")
                .d("NAME", "\"\"")
            .and().insertInto("TAG_DERIVED", 7507L)
                .r("TAG_ID", 7496L)
                .d("ACTIVITIES_COUNT", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"group\": \"gLJ\", " + 
                    " \"name\": \"uOoco0I\", " + 
                    " \"media_file\": { " + 
                    " \"id\": 293, " + 
                    " \"capture_date\": \"1939-02-18T24:56:46.568Z\", " + 
                    " \"copy_right\": \"v_X\", " + 
                    " \"author\": \"F9PyD_wqkopGg\" " + 
                    " }, " + 
                    " \"activities_count\": 379 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/tags")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/api/v1/categories
    */
    @Test(timeout = 60000)
    public void test_85_postOnCategoriesReturns403() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"media_file\": { " + 
                    " \"uri\": \"_EM_1220_XYZ_\", " + 
                    " \"capture_date\": \"2056-06-20T21:-1:07.532Z\", " + 
                    " \"copy_right\": \"WECaj_4WNFC\", " + 
                    " \"author\": \"pP0g\" " + 
                    " }, " + 
                    " \"activities_count\": 876 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/categories?EMextraParam123=42")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
    }
    
    
    /**
    * Calls:
    * (403) PUT:/api/v2/activities/{id}
    */
    @Test(timeout = 60000)
    public void test_86_putOnV2ActivReturns403() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 869, " + 
                    " \"name\": \"zqAXPJlyU9z_\", " + 
                    " \"description_material\": \"_EM_23281_XYZ_\", " + 
                    " \"description_safety\": \"_EM_23284_XYZ_\", " + 
                    " \"age_max\": -2147483308, " + 
                    " \"participants_max\": 790, " + 
                    " \"time_min\": 417, " + 
                    " \"time_max\": 56, " + 
                    " \"featured\": false, " + 
                    " \"source\": \"_EM_23286_XYZ_\", " + 
                    " \"media_files\": [ " + 
                    " { " + 
                    " \"uri\": \"_EM_23291_XYZ_\", " + 
                    " \"name\": \"_EM_23292_XYZ_\", " + 
                    " \"copy_right\": \"fLm\", " + 
                    " \"author\": \"O\" " + 
                    " } " + 
                    " ], " + 
                    " \"activity\": { " + 
                    " \"ratings_count\": 175, " + 
                    " \"ratings_sum\": 711, " + 
                    " \"favourites_count\": 294, " + 
                    " \"related\": [ " + 
                    " 714, " + 
                    " 2792048747748787171, " + 
                    " 498, " + 
                    " 4, " + 
                    " 788 " + 
                    " ] " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/v2/activities/869")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(403.0))
                .body("'message'", containsString("HTTP 403 Forbidden"));
    }


}
