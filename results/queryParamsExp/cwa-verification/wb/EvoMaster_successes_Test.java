/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-08-17T20:30:07.014-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 19 tests
 * <br>
*  Covered targets: 752
 * <br>
*  Used time: 0h 15m 5s
 * <br>
*  Needed budget for current results: 74%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static final SutHandler controller = new em.embedded.app.coronawarn.verification.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("APP_SESSION","TAN","app_session","tan"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (200) POST:/version/v1/testresult
    */
    @Test(timeout = 60000)
    public void test_0_postOnV1TestresultReturns200() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 50L)
                .d("VERSION", "-370")
                .d("CREATED_AT", "\"1970-08-21 18:41:57\"")
                .d("UPDATED_AT", "\"1915-10-16 03:22:29\"")
                .d("HASHED_GUID", "\"2067-07-19 19:58:59\"")
                .d("REGISTRATION_TOKEN_HASH", "\"3587d639f77fb195cfd580dab6938775020048bd9d25977f2db4ff9a8491ffb9\"")
                .d("TELE_TAN_HASH", "\"USERS\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"w93inXfv8Dw8ZKb\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 154L)
                .d("VERSION", "-32")
                .d("CREATED_AT", "\"2017-05-21 18:55:29\"")
                .d("UPDATED_AT", "\"2079-01-01 14:40:30\"")
                .d("VALID_FROM", "\"1909-03-04 03:42:10\"")
                .d("VALID_UNTIL", "\"2065-06-18 22:05:39\"")
                .d("TAN_HASH", "\"ZMwwLyiF8OJx\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("cwa-fake", "_EM_35652_XYZ_")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"640d9c41-3265-4a49-a6ac-9bda6a222a1e\", " + 
                    " \"responsePadding\": \"r5pf2_rz\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'testResult'", numberMatches(2.0))
                .body("'sc'", numberMatches(2.0112117E7))
                .body("'responsePadding'", containsString("feNnJ6xLAqwYGJpVUAGry8fmGzAltek6LYgdccOX0BsPN"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/version/v1/testresult
    */
    @Test(timeout = 60000)
    public void test_1_postOnV1TestresultWithQueryParamReturns200() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 14L)
                .d("VERSION", "-67108556")
                .d("CREATED_AT", "\"2100-06-19 16:00:29\"")
                .d("UPDATED_AT", "\"1973-06-07 20:18:29\"")
                .d("HASHED_GUID", "\"qU]5XU2>\"")
                .d("REGISTRATION_TOKEN_HASH", "\"_EM_5332_XYZ_\"")
                .d("TELE_TAN_HASH", "\"LsO7QwpTxgc7\"")
                .d("TAN_COUNTER", "524942")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_624_XYZ_\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("cwa-fake", "1")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "_EM_5331_XYZ_")
                .header("b3", "AYjztYWsq7DeImDR")
                .header("X-B3-Sampled", "TRUe")
                .header("X-B3-TraceId", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"4e299567-dd1a-4b85-A241-d8cf51cd80fc\", " + 
                    " \"responsePadding\": \"7S571VP\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult?EMextraParam123=_EM_347_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'testResult'", numberMatches(2.0))
                .body("'sc'", numberMatches(1.755462601E9))
                .body("'responsePadding'", containsString("2ouGmCi8vAr7L3JEaNjqykiEA93SYHgE9jdrNbgCLKru0"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/tan
    */
    @Test(timeout = 60000)
    public void test_2_postOnTanReturns201() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 50L)
                .d("VERSION", "7806")
                .d("CREATED_AT", "\"1970-10-21 18:45:58\"")
                .d("UPDATED_AT", "\"1915-10-16 03:22:29\"")
                .d("HASHED_GUID", "\"_EM_11367_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"649b566971ec289fcb1efb12df0740b0604fe308de31400a1778e9f35ebbed60\"")
                .d("TELE_TAN_HASH", "\"USERS\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"w9UiUUUv8Uw9UKb\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 154L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1953-06-21 20:55:51\"")
                .d("UPDATED_AT", "\"2100-06-13 11:29:28\"")
                .d("VALID_FROM", "\"1900-04-01 02:50:10\"")
                .d("VALID_UNTIL", "\"2000-01-08 11:13:39\"")
                .d("TAN_HASH", "\"da26ac90240a1999bb8d46a35469059370324f89485132ae38f4dea77e098114\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("cwa-fake", "")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "1")
                .header("b3", "_us_Om4gTmCM")
                .header("X-B3-Sampled", "fALsE")
                .header("X-B3-TraceId", "p4b9F^eQW0")
                .header("X-CWA-TELETAN-TYPE", "tFX")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"eca8448a-7bfe-4b26-Af8d-4ef79fa1a2de\", " + 
                    " \"responsePadding\": \"\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'tan'", containsString("de50d515-cf24-40ab-afe2-a2165f93a7d1"))
                .body("'responsePadding'", containsString("Ke1fehTFL1ngkEx"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/registrationToken
    */
    @Test(timeout = 60000)
    public void test_3_postOnRegistrationTokenReturns201() throws Exception {
        
        given().accept("application/json")
                .header("cwa-fake", "_EM_2271_XYZ_")
                .header("x-EMextraHeader123", "42")
                .header("X-B3-Flags", "uVuhL_dMDy3O0V")
                .header("b3", "1wbQpEy6kA5dXU")
                .header("X-B3-Sampled", "_EM_2274_XYZ_")
                .header("X-B3-TraceId", "_EM_3154_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"CCbfFdaff1bA96Ff2BDDc9CFff5A726d15cb8aC5D33C34c6abcFBc56DaA7ba6d\", " + 
                    " \"keyDob\": \"B3dBFD369CbbE8c6d10BeaeC3fCA659dC7DBCb2Ac3F752ffcBA5551bb4d3EBe2\", " + 
                    " \"keyType\": \"GUID\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'registrationToken'", containsString("749fc45d-d041-47f8-a0fc-b14e16aa31d9"))
                .body("'responsePadding'", containsString("J"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/tan
    */
    @Test(timeout = 60000)
    public void test_4_postOnTanReturns201() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 32L)
                .d("VERSION", "294880")
                .d("CREATED_AT", "\"2059-06-03 11:29:44\"")
                .d("UPDATED_AT", "\"2069-07-11 03:29:29\"")
                .d("HASHED_GUID", "\"SHARE_LINKED_CONNECTIONS\"")
                .d("REGISTRATION_TOKEN_HASH", "\"a774287672522629a46976f999ef8526ecf21cf7d520ae65581f0acd405f2517\"")
                .d("TELE_TAN_HASH", "\"Dr3sOBg3jGDaSDV\"")
                .d("TAN_COUNTER", "-63361")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"TABLE_TYPE\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 33L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1972-02-15 11:32:15\"")
                .d("UPDATED_AT", "\"1995-12-26 10:00:09\"")
                .d("VALID_FROM", "\"2000-02-18 11:29:37\"")
                .d("VALID_UNTIL", "\"2048-10-15 02:28:21\"")
                .d("TAN_HASH", "\"0be94ac8a251044f1f3d8626fa1d1365907954dd005e06e08dbe7b51a5ca652b\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .header("X-B3-Flags", "_EM_1326_XYZ_")
                .header("b3", "5n8")
                .header("X-B3-Sampled", "gwC4s")
                .header("X-B3-TraceId", "ZtVwfdFiM2vkNB4")
                .header("x-cwa-teletan-type", "_EM_8261_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"cba6432e-4e4c-41d4-b20b-84fcd3db064c\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'tan'", containsString("0bc09cf2-65d9-465b-8058-e3c03394a4ff"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/registrationToken
    */
    @Test(timeout = 60000)
    public void test_5_postOnV1RegistrationTokenWithQueryParamReturns201() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 32L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2100-05-17 00:00:43\"")
                .d("UPDATED_AT", "\"2067-01-03 01:57:38\"")
                .d("HASHED_GUID", "\"_EM_6039_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"6a6000c615a9647e79b9f193f82a78181691ce6f3c76be711591fc1bdde3d370\"")
                .d("TELE_TAN_HASH", "\"772e60b378a67b91e1e7218558f145d3ef4d162abeecbaad4136f1cb8f785a2e\"")
                .d("TAN_COUNTER", "512")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"COndDCMM\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 33L)
                .d("VERSION", "-128")
                .d("CREATED_AT", "\"2000-04-09 10:00:03\"")
                .d("UPDATED_AT", "\"1926-11-26 17:50:53\"")
                .d("VALID_FROM", "\"1974-06-04 13:11:14\"")
                .d("VALID_UNTIL", "\"2072-12-16 11:29:37\"")
                .d("TAN_HASH", "\"049bb7d8e8092f067ab6ff8fdd9959f0a493f7706e7cc4d81de351538e9e8171\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "1")
                .header("X-B3-TraceId", "foo")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"D2ceAEDA1e35CeC5cF1EaCca5bcD2D34AE9cF5A2b264a4B1f0A8C29dEAA2D9AB\", " + 
                    " \"keyDob\": \"dDCbD0A7Afdd3EdcA3AA8B1EbcbfeC61ccF7Aa4cfdF34cabFF2ceF13cc83B8CF\", " + 
                    " \"keyType\": \"GUID\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken?EMextraParam123=42")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'registrationToken'", containsString("2e51752e-4d70-4b7f-b66e-ecbaeccef86a"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/tan
    */
    @Test(timeout = 60000)
    public void test_6_postOnTanReturns201() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 50L)
                .d("VERSION", "-370")
                .d("CREATED_AT", "\"1970-08-29 18:41:57\"")
                .d("UPDATED_AT", "\"1915-10-01 00:30:29\"")
                .d("HASHED_GUID", "\"_EM_11367_XYZ_z\"")
                .d("REGISTRATION_TOKEN_HASH", "\"3587d639f77fb195cfd580dab6938775020048bd9d25977f2db4ff9a8491ffb9\"")
                .d("TELE_TAN_HASH", "\"USERS\"")
                .d("TAN_COUNTER", "-512")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"w93inXfv8Dw8ZKb\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 132L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1933-08-17 04:34:30\"")
                .d("UPDATED_AT", "\"1995-09-14 10:16:57\"")
                .d("VALID_FROM", "\"2043-07-25 11:28:54\"")
                .d("VALID_UNTIL", "\"2037-01-14 10:50:56\"")
                .d("TAN_HASH", "\"PegQHn\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("cwa-fake", "1")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "UXFyClW3e")
                .header("b3", "Uus_Om4gTmCM")
                .header("X-B3-Sampled", "FaLSe")
                .header("X-B3-TraceId", "_EM_11364_XYZ_")
                .header("X-CWA-TELETAN-TYPE", "_EM_5284_XYZ_")
                .header("x-forwarded-for", "foo")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"eca8448a-7bfe-4b26-Af8d-4ef79fa1a2de\", " + 
                    " \"responsePadding\": \"_EM_1912_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'tan'", containsString("e4a488c7-b724-4011-9f74-1771f0f0d3d5"))
                .body("'responsePadding'", containsString("d01079R76exelmm"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/registrationToken
    */
    @Test(timeout = 60000)
    public void test_7_postOnRegistrationTokenReturns201() throws Exception {
        
        given().accept("application/json")
                .header("cwa-fake", "1")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "uVuhL_bMDy4O0V")
                .header("b3", "_EM_13526_XYZ_")
                .header("X-B3-Sampled", "8FrbwjpIbkgxAmMO")
                .header("X-B3-TraceId", "FyBF3bM2")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"CCbfFdaff1bA96Ff2BDDc9CFff5A726d15cb8aC5D33C34c6abcFBc56DaA7ba6d\", " + 
                    " \"keyDob\": \"ee28b7693808557247b82b8086bb3fbdc3e48576e276d14b041663d1e0195026\", " + 
                    " \"keyType\": \"GUID\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'registrationToken'", containsString("c32e4d92-9856-4302-88b2-12495d2de2bc"))
                .body("'responsePadding'", containsString("h"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/registrationToken
    */
    @Test(timeout = 60000)
    public void test_8_postOnRegistrationTokenReturns201() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 32L)
                .d("VERSION", "-8388609")
                .d("CREATED_AT", "\"2059-06-03 11:29:29\"")
                .d("UPDATED_AT", "\"2002-09-20 02:00:59\"")
                .d("HASHED_GUID", "\"_EM_3760_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"a774287672522629a46976f999ef8526ecf21cf7d520ae65581f0acd405f2517\"")
                .d("TELE_TAN_HASH", "\"Bc06E73GN9\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"_UM_2U17U_XYUU\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 33L)
                .d("VERSION", "1")
                .d("CREATED_AT", "\"2032-06-25 11:29:29\"")
                .d("UPDATED_AT", "\"1993-07-26 00:01:41\"")
                .d("VALID_FROM", "\"2000-03-17 09:30:41\"")
                .d("VALID_UNTIL", "\"2002-05-17 11:29:20\"")
                .d("TAN_HASH", "\"049bb7d8e8092f067ab6ff8fdd9959f0a493f7706e7cc4d81de351538e9e8171\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("cwa-fake", "_EM_19574_XYZ_")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "2ZWx")
                .header("X-B3-Sampled", "")
                .header("X-CWA-TELETAN-TYPE", "_EM_19260_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"1b2dF73A6FDad9BC7f6cafe2fa6b23Dedd9dEEdBA23D4AECDe9CadAB6BCaBbCc\", " + 
                    " \"keyDob\": \"eDDaB0B7Becd4Fdd839A9A2Cbca0dC71cca79b3cfdE33bbbFF3dfa03cd84C7CE\", " + 
                    " \"keyType\": \"GUID\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'registrationToken'", containsString("d3335e24-3738-4ecd-93ab-9962fa0797ed"))
                .body("'responsePadding'", containsString("g"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/version/v1/tan/verify
    */
    @Test(timeout = 60000)
    public void test_9_postOnVerifyReturns200() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 32L)
                .d("VERSION", "-229344")
                .d("CREATED_AT", "\"2059-06-03 00:29:44\"")
                .d("UPDATED_AT", "\"2039-06-19 11:29:00\"")
                .d("HASHED_GUID", "\"SHARE_LINKED_CONNECTIONS\"")
                .d("REGISTRATION_TOKEN_HASH", "\"a774287672522629a46976f999ef8526ecf21cf7d520ae65581f0acd405f2517\"")
                .d("TELE_TAN_HASH", "\"Dr3sOBg3jGDaSD\"")
                .d("TAN_COUNTER", "-62849")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"5;h6VeWrkbL_UikQ\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 33L)
                .d("VERSION", "-65536")
                .d("CREATED_AT", "\"1972-05-11 11:16:15\"")
                .d("UPDATED_AT", "\"1995-12-17 10:00:29\"")
                .d("VALID_FROM", "\"2000-02-18 11:29:37\"")
                .d("VALID_UNTIL", "\"2040-10-16 02:28:21\"")
                .d("TAN_HASH", "\"f86d6b031f54f9c8e640b72fc36f9e5010d84748847677d78964f2a7cae082b7\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "_EM_10491_XYZ_")
                .header("cwa-fake", "noo")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"add38ebc-635b-49c0-85fd-efccc29d8d5d\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/tan/teletan
    */
    @Test(timeout = 60000)
    public void test_10_postOnTeletanReturns201() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 32L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2100-05-17 00:00:45\"")
                .d("UPDATED_AT", "\"2067-01-03 01:57:38\"")
                .d("HASHED_GUID", "\"07d1a841020a5607b6c6d77ef6de324f1a82777aee56414f4e19e4986b7d3582\"")
                .d("REGISTRATION_TOKEN_HASH", "\"6a6000c615a9647e79b9f193f82a78181691ce6f3c76be711591fc1bdde3d370\"")
                .d("TELE_TAN_HASH", "\"_EM_4321_XYZ_\"")
                .d("TAN_COUNTER", "512")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"COndDCMM\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 33L)
                .d("VERSION", "-128")
                .d("CREATED_AT", "\"2000-04-09 10:00:03\"")
                .d("UPDATED_AT", "\"1926-11-26 17:50:53\"")
                .d("VALID_FROM", "\"1974-06-04 13:11:14\"")
                .d("VALID_UNTIL", "\"2072-12-16 11:29:37\"")
                .d("TAN_HASH", "\"049bb7d8e8092f067ab6ff8fdd9959f0a493f7706e7cc4d81de351538e9e8171\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"ljO\"}")
                .header("x-EMextraHeader123", "_EM_563_XYZ_")
                .header("b3", "dDCbD0A7Afdd3EdcA3AA8B1EbcbfeC61ccF7Aa4cfdF34cabFF2ceF13cc83B8CF")
                .header("X-B3-Flags", "wZUIj")
                .header("X-B3-Sampled", "fAlSe")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("33JWR4FWHB"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/tan/teletan
    */
    @Test(timeout = 60000)
    public void test_11_postOnTeletanReturns201() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 32L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2059-06-03 00:29:44\"")
                .d("UPDATED_AT", "\"2039-01-19 11:29:00\"")
                .d("HASHED_GUID", "\"SHARE_LINKED_CONNECTIONS\"")
                .d("REGISTRATION_TOKEN_HASH", "\"_EM_2467_XYZ_\"")
                .d("TELE_TAN_HASH", "\"Dr3sOBg3jGDaSD\"")
                .d("TAN_COUNTER", "-54657")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"TABLE_TYPE\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 33L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1972-06-15 11:16:15\"")
                .d("UPDATED_AT", "\"2000-10-17 11:00:29\"")
                .d("VALID_FROM", "\"2000-10-18 11:29:37\"")
                .d("VALID_UNTIL", "\"2000-10-16 02:28:21\"")
                .d("TAN_HASH", "\"pYapPO9tXYAq6\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"82PSAWVtxNO3N45q\"}")
                .header("x-EMextraHeader123", "")
                .header("b3", "Bz7sO")
                .header("X-B3-Flags", "_EM_3828_XYZ_")
                .header("X-B3-Sampled", "FaLse")
                .header("X-B3-TraceId", "_EM_3755_XYZ_")
                .header("X-CWA-TELETAN-TYPE", "")
                .header("cwa-fake", "oIyn\\y^a;]")
                .header("X-Forwarded-For", "Afoo")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("E47W4M7WY3"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/tan/teletan
    */
    @Test(timeout = 60000)
    public void test_12_postOnTeletanReturns201() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 32L)
                .d("VERSION", "294944")
                .d("CREATED_AT", "\"2058-01-03 11:00:44\"")
                .d("UPDATED_AT", "\"2039-06-19 11:29:00\"")
                .d("HASHED_GUID", "\"SHARE_LINKED_CONNECTIONS\"")
                .d("REGISTRATION_TOKEN_HASH", "\"a774287672522629a46976f999ef8526ecf21cf7d520ae65581f0acd405f2517\"")
                .d("TELE_TAN_HASH", "\"Dr3sOBg3jGDaSD\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"TABLE_TYPE\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 33L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1972-06-15 11:16:15\"")
                .d("UPDATED_AT", "\"1995-12-17 10:00:29\"")
                .d("VALID_FROM", "\"2000-02-18 11:29:37\"")
                .d("VALID_UNTIL", "\"2040-10-16 02:28:21\"")
                .d("TAN_HASH", "\"f86d6b031f54f9c8e640b72fc36f9e5010d84748847677d78964f2a7cae082b7\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"92PSAWVtxNM3N45q\"}")
                .header("x-EMextraHeader123", "")
                .header("b3", "By7sO")
                .header("X-B3-Flags", "_EM_3828_XYZ_")
                .header("X-B3-Sampled", "FaLse")
                .header("X-CWA-TELETAN-TYPE", "EVENT")
                .header("cwa-fake", "oIyn\\y^a;]")
                .header("X-Forwarded-For", "boo")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("QMKK5EJ7U2"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/tan/teletan
    */
    @Test(timeout = 60000)
    public void test_13_postOnTeletanReturns201() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 32L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2059-06-03 00:29:44\"")
                .d("UPDATED_AT", "\"2039-01-16 11:29:00\"")
                .d("HASHED_GUID", "\"SHARE_LINKED_CONNECTIONS\"")
                .d("REGISTRATION_TOKEN_HASH", "\"a774287672522629a46976f999ef8526ecf21cf7d520ae65581f0acd405f2517\"")
                .d("TELE_TAN_HASH", "\"Dr3sOBg3jGDaSD\"")
                .d("TAN_COUNTER", "-62849")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"TABLE_TYPE\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 33L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1988-06-16 11:16:15\"")
                .d("UPDATED_AT", "\"1995-12-17 10:00:29\"")
                .d("VALID_FROM", "\"2000-02-18 11:29:37\"")
                .d("VALID_UNTIL", "\"2040-10-16 02:28:21\"")
                .d("TAN_HASH", "\"01d207699ae6f25f48e7edc7054097f7463852d5605b332e85fc03c1fe8c23b2\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"92PSAWVtxNM3N45qP\"}")
                .header("x-EMextraHeader123", "")
                .header("b3", "By7{O")
                .header("X-B3-Flags", "1")
                .header("X-B3-Sampled", "FaLse")
                .header("X-CWA-TELETAN-TYPE", "TEST")
                .header("cwa-fake", "oIyn\\y^a;]")
                .header("X-Forwarded-For", "_EM_11256_XYZ_")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("2UK9FWTT39"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/tan/teletan
    */
    @Test(timeout = 60000)
    public void test_14_postOnTeletanReturns201() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 50L)
                .d("VERSION", "-354")
                .d("CREATED_AT", "\"1970-08-21 18:41:57\"")
                .d("UPDATED_AT", "\"2043-06-16 11:30:29\"")
                .d("HASHED_GUID", "\"c5m8lY1\"")
                .d("REGISTRATION_TOKEN_HASH", "\"3587d639f77fb195cfd580dab6938775020048bd9d25977f2db4ff9a8491ffb9\"")
                .d("TELE_TAN_HASH", "\"eeQOQI\"")
                .d("TAN_COUNTER", "4653")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"w93inXfv8Dw8ZKb\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"T2deo8UE2gZ\"}")
                .header("x-EMextraHeader123", "")
                .header("x-b3-sampled", "FAlse")
                .header("X-B3-Sampled", "_EM_1921_XYZ_")
                .header("x-b3-flags", "_EM_1922_XYZ_")
                .header("x-cwa-teletan-type", "EVENT")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("6QP3M34HEC"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/tan/teletan
    */
    @Test(timeout = 60000)
    public void test_15_postOnTeletanReturns201() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 50L)
                .d("VERSION", "-354")
                .d("CREATED_AT", "\"1970-08-21 18:41:56\"")
                .d("UPDATED_AT", "\"2043-10-24 07:30:00\"")
                .d("HASHED_GUID", "\"_EM_12343_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"TEST\"")
                .d("TELE_TAN_HASH", "\"eeQKQID\"")
                .d("TAN_COUNTER", "4397")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"w97inXVv8Dw8ZKb\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"T2dUo9UU2gZ\"}")
                .header("x-EMextraHeader123", "")
                .header("x-b3-sampled", "faLSe")
                .header("b3", "4wwS9VJyKoQ8cv")
                .header("x-b3-traceid", "yMCf6X9sZsvnhPxr")
                .header("X-B3-Sampled", "_EM_1921_XYZ_")
                .header("x-b3-flags", "_EM_1922_XYZ_")
                .header("x-cwa-teletan-type", "TEST")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("7RA4HTW6H7"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/tan/teletan
    */
    @Test(timeout = 60000)
    public void test_16_postOnTanTeletanWithQueryParamReturns201() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 50L)
                .d("VERSION", "-354")
                .d("CREATED_AT", "\"1970-08-21 18:41:57\"")
                .d("UPDATED_AT", "\"2043-10-24 07:30:29\"")
                .d("HASHED_GUID", "\"c5m8lY1\"")
                .d("REGISTRATION_TOKEN_HASH", "\"3587d639f77fb195cfd580dab6938775020048bd9d25977f2db4ff9a8491ffb9\"")
                .d("TELE_TAN_HASH", "\"eeQOQI\"")
                .d("TAN_COUNTER", "4653")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"w93inXfv8Dw8ZKb\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"T2dUo8UU2gZ\"}")
                .header("x-EMextraHeader123", "")
                .header("x-b3-sampled", "FAlSE")
                .header("x-b3-flags", "_EM_1922_XYZ_")
                .header("x-cwa-teletan-type", "")
                .post(baseUrlOfSut + "/version/v1/tan/teletan?EMextraParam123=42")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("TRJW35D3RB"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/tan/teletan
    */
    @Test(timeout = 60000)
    public void test_17_postOnTeletanReturns201() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 32L)
                .d("VERSION", "294944")
                .d("CREATED_AT", "\"2059-06-03 00:29:44\"")
                .d("UPDATED_AT", "\"2039-06-19 11:25:02\"")
                .d("HASHED_GUID", "\"M9tFSAn_2q5S5C\"")
                .d("REGISTRATION_TOKEN_HASH", "\"_EM_2467_XYZ_\"")
                .d("TELE_TAN_HASH", "\"Dr3sOBg3jGDaSD\"")
                .d("TAN_COUNTER", "-62849")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"TABLE_TYPE\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 33L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1972-06-15 11:16:15\"")
                .d("UPDATED_AT", "\"2000-04-17 11:00:29\"")
                .d("VALID_FROM", "\"2000-02-18 11:29:37\"")
                .d("VALID_UNTIL", "\"2040-06-01 06:29:21\"")
                .d("TAN_HASH", "\"f86d6b031f54f9c8e640b72fc36f9e5010d84748847677d78964f2a7cae082b7\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"92PSAWVtxNM3N45q\"}")
                .header("x-EMextraHeader123", "")
                .header("b3", "By7s")
                .header("X-B3-Flags", "1")
                .header("X-B3-Sampled", "FaLse")
                .header("X-CWA-TELETAN-TYPE", "TEST")
                .header("cwa-fake", "oIyn\\y^a;]")
                .header("X-Forwarded-For", "_EM_22736_XYZ_")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("F8M7SQX3S5"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/tan/teletan
    */
    @Test(timeout = 60000)
    public void test_18_postOnTeletanReturns201() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("TAN", 64L)
                .d("VERSION", "131627")
                .d("CREATED_AT", "\"2100-01-30 07:42:26\"")
                .d("UPDATED_AT", "\"1945-02-25 02:58:22\"")
                .d("VALID_FROM", "\"2000-08-15 13:00:38\"")
                .d("VALID_UNTIL", "\"1979-07-28 07:18:29\"")
                .d("TAN_HASH", "\"_EM_27678_XYZ_\"")
                .d("SOT", "NULL")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 335L)
                .d("VERSION", "99")
                .d("CREATED_AT", "\"1922-01-23 11:00:29\"")
                .d("UPDATED_AT", "\"2025-02-02 03:35:52\"")
                .d("HASHED_GUID", "NULL")
                .d("REGISTRATION_TOKEN_HASH", "\"7bDwJz2\"")
                .d("TELE_TAN_HASH", "\"_EM_27679_XYZ_\"")
                .d("TAN_COUNTER", "646")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"EaZVNqBc45IM\"")
                .d("TELETAN_TYPE", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"SUtfqMUU\"}")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "_EM_27668_XYZ_")
                .header("b3", "7tTNivt49tFI")
                .header("X-B3-Sampled", "_ZPlOW4T6")
                .header("X-B3-TraceId", "rF2")
                .header("x-forwarded-for", "_EM_27670_XYZ_")
                .header("cwa-fake", "1")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("VDXKVQZ3M9"));
    }


}
