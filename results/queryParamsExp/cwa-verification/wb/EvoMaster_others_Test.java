/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-08-17T20:30:07.023-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 23 tests
 * <br>
*  Covered targets: 254
 * <br>
*  Used time: 0h 15m 5s
 * <br>
*  Needed budget for current results: 74%
 * <br>
*  This file contains test cases that represent failed calls, but not indicative of faults.
*/
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.app.coronawarn.verification.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("APP_SESSION","TAN"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/tan
    */
    @Test(timeout = 60000)
    public void test_0_postOnTanReturns400() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 32L)
                .d("VERSION", "-1046512")
                .d("CREATED_AT", "\"2055-04-01 11:29:28\"")
                .d("UPDATED_AT", "\"2067-11-11 11:56:43\"")
                .d("HASHED_GUID", "\"SHARE_LINKED_CONNECTIONS\"")
                .d("REGISTRATION_TOKEN_HASH", "\"a774287672522629a46976f999ef8526ecf21cf7d520ae65581f0acd405f2517\"")
                .d("TELE_TAN_HASH", "\"FeU6EU3U\"")
                .d("TAN_COUNTER", "8388608")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"94d312bcd76e234832ba04f9bdd253d235ab09ae9c880faf07c7b7b3e4881248\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 33L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1968-06-15 11:00:14\"")
                .d("UPDATED_AT", "\"1992-06-26 11:01:09\"")
                .d("VALID_FROM", "\"1975-06-04 13:29:29\"")
                .d("VALID_UNTIL", "\"2040-10-16 02:31:29\"")
                .d("TAN_HASH", "\"Y6YZCzI0O_0GqOnM\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("cwa-fake", "_EM_10439_XYZ_")
                .header("x-EMextraHeader123", "")
                .header("b3", "6m8")
                .header("X-B3-Sampled", "}vlxlO")
                .header("X-B3-TraceId", "zWntGOWr17YH")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"cba6432e-4e4c-41d4-b20b-84fcd3db064c\", " + 
                    " \"responsePadding\": \"_EM_10430_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/tan
    */
    @Test(timeout = 60000)
    public void test_1_postOnTanReturns400() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 50L)
                .d("VERSION", "-386")
                .d("CREATED_AT", "\"1970-10-21 19:41:59\"")
                .d("UPDATED_AT", "\"1915-10-12 03:06:00\"")
                .d("HASHED_GUID", "\"_EM_11367_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"649b566971ec289fcb1efb12df0740b0604fe308de31400a1778e9f35ebbed60\"")
                .d("TELE_TAN_HASH", "\"2079-06-17 13:00:28\"")
                .d("TAN_COUNTER", "-64")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"w9UiUUUv8Uw9UKb\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 154L)
                .d("VERSION", "-18432")
                .d("CREATED_AT", "\"2032-05-21 04:55:51\"")
                .d("UPDATED_AT", "\"2079-06-17 13:00:28\"")
                .d("VALID_FROM", "\"1941-06-01 11:29:14\"")
                .d("VALID_UNTIL", "\"2000-10-15 23:17:39\"")
                .d("TAN_HASH", "\"ZMwwLyiF9OJx\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("cwa-fake", "")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "fALsE")
                .header("b3", "UusmOmUgRmCQ2")
                .header("X-B3-Sampled", "1")
                .header("X-B3-TraceId", "n4b9F^eQX0")
                .header("X-CWA-TELETAN-TYPE", "tFV")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"ec98448a-7bfe-4c16-Ae8d-5ef89fa1b1de\", " + 
                    " \"responsePadding\": \"W\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/registrationToken
    */
    @Test(timeout = 60000)
    public void test_2_postOnRegistrationTokenReturns400() throws Exception {
        
        given().accept("*/*")
                .header("cwa-fake", "9wJ3pVb")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "_EM_1224_XYZ_")
                .header("b3", "fo_")
                .header("X-B3-Sampled", "foq")
                .header("X-B3-TraceId", "_EM_1225_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"AKWYH3DX48\", " + 
                    " \"keyDob\": \"_EM_1223_XYZ_\", " + 
                    " \"keyType\": \"TELETAN\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/registrationToken
    */
    @Test(timeout = 60000)
    public void test_3_postOnRegistrationTokenReturns400() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 32L)
                .d("VERSION", "-8388609")
                .d("CREATED_AT", "\"2059-06-03 11:29:29\"")
                .d("UPDATED_AT", "\"2002-09-20 02:00:59\"")
                .d("HASHED_GUID", "\"_EM_3760_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"a774287672522629a46976f999ef8526ecf21cf7d520ae65581f0acd405f2517\"")
                .d("TELE_TAN_HASH", "\"Bc06E73GN9\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"_UM_2U17U_XYUU\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 33L)
                .d("VERSION", "1")
                .d("CREATED_AT", "\"2032-06-25 11:29:29\"")
                .d("UPDATED_AT", "\"1993-07-26 00:01:41\"")
                .d("VALID_FROM", "\"2000-03-17 09:30:41\"")
                .d("VALID_UNTIL", "\"2002-05-17 11:29:20\"")
                .d("TAN_HASH", "\"049bb7d8e8092f067ab6ff8fdd9959f0a493f7706e7cc4d81de351538e9e8171\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("cwa-fake", "_EM_19573_XYZ_")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Sampled", "_EM_2463_XYZ_")
                .header("X-CWA-TELETAN-TYPE", "5vMw51BDR")
                .header("X-B3-Flags", "_EM_18719_XYZ_")
                .header("x-b3-traceid", "_EM_21518_XYZ_")
                .header("X-B3-TraceId", "o")
                .contentType("application/json")
                .body(" { " + 
                    " \"keyDob\": \"7J234wlPPVSzYWBa\", " + 
                    " \"keyType\": \"GUID\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/registrationToken
    */
    @Test(timeout = 60000)
    public void test_4_postOnRegistrationTokenReturns400() throws Exception {
        
        given().accept("*/*")
                .header("cwa-fake", "_EM_3505_XYZ_")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "2pR")
                .header("X-B3-TraceId", "_EM_3508_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"j38D6V\", " + 
                    " \"keyDob\": \"OXk6aljW\", " + 
                    " \"keyType\": \"TELETAN\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/testresult
    */
    @Test(timeout = 60000)
    public void test_5_postOnTestresultReturns400() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 32L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2059-06-03 00:29:44\"")
                .d("UPDATED_AT", "\"2039-01-19 11:29:00\"")
                .d("HASHED_GUID", "\"SHARE_LINKED_CONNECTIONS\"")
                .d("REGISTRATION_TOKEN_HASH", "\"_EM_2467_XYZ_\"")
                .d("TELE_TAN_HASH", "\"Dr3sOBg3jGDaSD\"")
                .d("TAN_COUNTER", "-54657")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"TABLE_TYPE\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 33L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1972-06-15 11:16:15\"")
                .d("UPDATED_AT", "\"2000-10-17 11:00:29\"")
                .d("VALID_FROM", "\"2000-10-18 11:29:37\"")
                .d("VALID_UNTIL", "\"2000-10-16 02:28:21\"")
                .d("TAN_HASH", "\"pYapPO9tXYAq6\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("cwa-fake", "")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "_EM_4161_XYZ_")
                .header("b3", "6LpgG77WOD")
                .header("X-B3-Sampled", "tRue")
                .header("X-B3-TraceId", "/_rciZi0_AlY")
                .header("X-CWA-TELETAN-TYPE", "RpyD0zzt5d")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"d7bcafa4-c47a-4934-A0c8-ca1a3eb9f559\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/registrationToken
    */
    @Test(timeout = 60000)
    public void test_6_postOnRegistrationTokenReturns400() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("TAN", 64L)
                .d("VERSION", "427")
                .d("CREATED_AT", "\"2100-09-30 07:42:26\"")
                .d("UPDATED_AT", "\"1947-02-25 18:59:26\"")
                .d("VALID_FROM", "\"1996-06-15 12:29:38\"")
                .d("VALID_UNTIL", "\"1979-07-28 07:18:03\"")
                .d("TAN_HASH", "\"W0JQ4XaR\"")
                .d("SOT", "NULL")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "_EM_7187_XYZ_")
                .header("X-B3-TraceId", "cpDl9ZYwHsyktEBw")
                .header("X-CWA-TELETAN-TYPE", "_EM_3064_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"tHx\", " + 
                    " \"keyType\": \"GUID\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/registrationToken
    */
    @Test(timeout = 60000)
    public void test_7_postOnRegistrationTokenReturns400() throws Exception {
        
        given().accept("*/*")
                .header("cwa-fake", "G")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "sE03RHu4Xc")
                .header("x-cwa-teletan-type", "")
                .header("X-B3-Sampled", "U")
                .header("X-B3-TraceId", "I2w2nBWNeDq")
                .header("x-b3-flags", "rcS3GHxeppF4")
                .header("X-B3-SpanId", "ASmv_rxx2")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"t\", " + 
                    " \"keyDob\": \"_EM_30612_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/registrationToken
    */
    @Test(timeout = 60000)
    public void test_8_postOnRegistrationTokenReturns400() throws Exception {
        
        given().accept("*/*")
                .header("cwa-fake", "")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "C_igEz67bk")
                .header("b3", "1wbQpEy6kA5dXU")
                .header("X-B3-Sampled", "_EM_13613_XYZ_")
                .header("X-B3-TraceId", "_EM_3154_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"SQ8C3QDK9K\", " + 
                    " \"keyDob\": \"B3dBFD369CbbE8c6d10BeaeC3fCA659dC7DBCb2Ac3F752ffcBA5551bb4d3EBe2\", " + 
                    " \"keyType\": \"EVOMASTER\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/testresult
    */
    @Test(timeout = 60000)
    public void test_9_postOnV1TestresultWithQueryParamReturns400() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 9L)
                .d("VERSION", "239")
                .d("CREATED_AT", "\"2025-02-14 04:36:07\"")
                .d("UPDATED_AT", "\"2074-03-28 02:06:35\"")
                .d("HASHED_GUID", "NULL")
                .d("REGISTRATION_TOKEN_HASH", "\"PfN3C\"")
                .d("TELE_TAN_HASH", "NULL")
                .d("TAN_COUNTER", "159")
                .d("SOT", "\"AfCq_IISspBqkHKD\"")
                .d("HASHED_GUID_DOB", "\"D7vnbQWfCPdoax\"")
                .d("TELETAN_TYPE", "\"zwbFCnvt\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("cwa-fake", "")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "fo")
                .header("b3", "_EM_305_XYZ_")
                .header("X-B3-Sampled", "fpo")
                .header("X-B3-TraceId", "_EM_306_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"be2ad40b-ede5-4c07-b395-19c4d16edafc\", " + 
                    " \"responsePadding\": \"_EM_304_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/registrationToken
    */
    @Test(timeout = 60000)
    public void test_10_postOnRegistrationTokenReturns400() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 32L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2075-07-02 01:00:43\"")
                .d("UPDATED_AT", "\"2067-07-19 17:29:46\"")
                .d("HASHED_GUID", "\"Lz\"")
                .d("REGISTRATION_TOKEN_HASH", "\"EujxFOAQ\"")
                .d("TELE_TAN_HASH", "\"_EM_3415_XYZ_\"")
                .d("TAN_COUNTER", "-65573")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"TABLE_TYPE\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 33L)
                .d("VERSION", "-268435456")
                .d("CREATED_AT", "\"2007-02-28 13:22:14\"")
                .d("UPDATED_AT", "\"1928-06-10 17:50:53\"")
                .d("VALID_FROM", "\"1975-04-04 05:02:12\"")
                .d("VALID_UNTIL", "\"2030-12-11 17:34:36\"")
                .d("TAN_HASH", "\"5d3b61903289f5eb2c68de012ea23e9a85f0a53d3f93db94a338bd4d66bb2696\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "dop")
                .header("b3", "foo")
                .header("X-B3-Sampled", "fso")
                .header("X-B3-TraceId", "fwt")
                .contentType("application/json")
                .body(" { " + 
                    " \"keyDob\": \"_EM_568_XYZ_\", " + 
                    " \"keyType\": \"EVOMASTER\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/testresult
    */
    @Test(timeout = 60000)
    public void test_11_postOnTestresultReturns400() throws Exception {
        
        given().accept("*/*")
                .header("cwa-fake", "hOSKSx7F5el0fnx")
                .header("x-EMextraHeader123", "")
                .header("X-B3-TraceId", "_EM_5014_XYZ_")
                .header("x-b3-flags", "_EM_5015_XYZ_")
                .header("X-CWA-TELETAN-TYPE", "3GjzGb6S2YY9D")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"fe1ebc8e-dc35-417f-89fa-caacc181c2ee\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/tan
    */
    @Test(timeout = 60000)
    public void test_12_postOnTanReturns400() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 50L)
                .d("VERSION", "-338")
                .d("CREATED_AT", "\"1954-08-31 23:39:57\"")
                .d("UPDATED_AT", "\"1915-10-16 07:30:29\"")
                .d("HASHED_GUID", "\"J3P5K\"")
                .d("REGISTRATION_TOKEN_HASH", "\"3587d639f77fb195cfd580dab6938775020048bd9d25977f2db4ff9a8491ffb9\"")
                .d("TELE_TAN_HASH", "\"_EM_11368_XYZ_\"")
                .d("TAN_COUNTER", "131072")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_12325_XYZ_\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 154L)
                .d("VERSION", "253")
                .d("CREATED_AT", "\"2000-05-19 20:55:51\"")
                .d("UPDATED_AT", "\"2079-01-16 12:08:28\"")
                .d("VALID_FROM", "\"1909-03-04 03:42:14\"")
                .d("VALID_UNTIL", "\"2097-10-26 22:13:39\"")
                .d("TAN_HASH", "\"_EM_12326_XYZ_\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("cwa-fake", "1")
                .header("x-EMextraHeader123", "")
                .header("b3", "uaEn")
                .header("X-B3-Sampled", "fo")
                .header("X-B3-TraceId", "fo")
                .header("X-CWA-TELETAN-TYPE", "BxsoKO")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"f055b7da-8db6-42de-9950-062b524f73b9\", " + 
                    " \"responsePadding\": \"ePLtqK\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/registrationToken
    */
    @Test(timeout = 60000)
    public void test_13_postOnRegistrationTokenReturns400() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 50L)
                .d("VERSION", "-386")
                .d("CREATED_AT", "\"1970-10-21 19:41:59\"")
                .d("UPDATED_AT", "\"1915-10-12 03:06:00\"")
                .d("HASHED_GUID", "\"_EM_11367_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"649b566971ec289fcb1efb12df0740b0604fe308de31400a1778e9f35ebbed60\"")
                .d("TELE_TAN_HASH", "\"2079-06-17 13:00:28\"")
                .d("TAN_COUNTER", "-64")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"w9UiUUUv8Uw9UKb\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 154L)
                .d("VERSION", "-18432")
                .d("CREATED_AT", "\"2032-05-21 04:55:51\"")
                .d("UPDATED_AT", "\"2079-06-17 13:00:28\"")
                .d("VALID_FROM", "\"1941-06-01 11:29:14\"")
                .d("VALID_UNTIL", "\"2000-10-15 23:17:39\"")
                .d("TAN_HASH", "\"ZMwwLyiF9OJx\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("cwa-fake", "kdUCEE5FXgZSSl")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "o2K")
                .header("b3", "R488_")
                .header("X-B3-Sampled", "falSE")
                .header("X-B3-TraceId", "_EM_21421_XYZ_")
                .header("X-CWA-TELETAN-TYPE", "_EM_1927_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"lWg5vkHpICt\", " + 
                    " \"keyDob\": \"cDCaCfB7Addc3Dde948B7B3CadF0cC81beF68a4c1dD22bbbaa3beE04bb63A7DE\", " + 
                    " \"keyType\": \"EVOMASTER\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/tan
    */
    @Test(timeout = 60000)
    public void test_14_postOnTanReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("x-b3-flags", "_EM_35094_XYZ_")
                .header("x-forwarded-for", "_EM_35095_XYZ_")
                .header("x-b3-spanid", "_EM_35096_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"048ea8a0-2cbb-4f68-9d78-86949f9b2cce\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/tan/teletan
    */
    @Test(timeout = 60000)
    public void test_15_postOnTeletanReturns400() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "{\"token\":\"Dyr5Prl\"}")
                .header("x-EMextraHeader123", "")
                .header("b3", "_EM_667_XYZ_")
                .header("X-B3-Flags", "foo")
                .header("X-B3-Sampled", "foo")
                .header("X-B3-TraceId", "foo")
                .header("X-CWA-TELETAN-TYPE", "fo")
                .post(baseUrlOfSut + "/version/v1/tan/teletan?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/tan/verify
    */
    @Test(timeout = 60000)
    public void test_16_postOnVerifyReturns400() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("TAN", 64L)
                .d("VERSION", "427")
                .d("CREATED_AT", "\"2100-09-30 07:42:26\"")
                .d("UPDATED_AT", "\"1947-02-25 18:59:26\"")
                .d("VALID_FROM", "\"1996-06-15 12:29:38\"")
                .d("VALID_UNTIL", "\"1979-07-28 07:18:03\"")
                .d("TAN_HASH", "\"W0JQ4XaR\"")
                .d("SOT", "NULL")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_3077_XYZ_")
                .header("X-B3-Flags", "fo")
                .header("b3", "foo")
                .header("X-B3-Sampled", "foo")
                .header("X-B3-TraceId", "foo")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"8947afe7-46ad-408b-bd1a-d0529fd24f5c\", " + 
                    " \"responsePadding\": \"_EM_3075_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (404) POST:/version/v1/tan/verify
    */
    @Test(timeout = 60000)
    public void test_17_postOnVerifyReturns404() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 32L)
                .d("VERSION", "294944")
                .d("CREATED_AT", "\"2059-06-03 00:29:44\"")
                .d("UPDATED_AT", "\"2039-06-19 11:29:00\"")
                .d("HASHED_GUID", "\"SHARE_LINKED_CONNECTIONS\"")
                .d("REGISTRATION_TOKEN_HASH", "\"a774287672522629a46976f999ef8526ecf21cf7d520ae65581f0acd405f2517\"")
                .d("TELE_TAN_HASH", "\"Dr3sOBg3jGDaSD\"")
                .d("TAN_COUNTER", "-62849")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"TABLE_TYPE\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 33L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1972-06-15 11:16:15\"")
                .d("UPDATED_AT", "\"1995-12-16 10:00:09\"")
                .d("VALID_FROM", "\"2000-02-18 11:29:37\"")
                .d("VALID_UNTIL", "\"2040-10-16 02:28:21\"")
                .d("TAN_HASH", "\"f86d6b031f54f9c8e640b72fc36f9e5010d84748847677d78964f2a7cae082b7\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_562_XYZ_")
                .header("X-B3-Flags", "_EM_10491_XYZ_")
                .header("b3", "_EM_8510_XYZ_")
                .header("X-B3-Sampled", "foo")
                .header("X-B3-TraceId", "foo")
                .header("cwa-fake", "foo")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"add38ebc-635b-49c0-85fd-efccc29d8d5d\", " + 
                    " \"responsePadding\": \"Hh5\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify?EMextraParam123=_EM_561_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) POST:/version/v1/tan/verify
    */
    @Test(timeout = 60000)
    public void test_18_postOnVerifyReturns404() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_562_XYZ_")
                .header("x-b3-flags", "_EM_4102_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"2263ffcb-476a-45b8-ab8e-8941dbfd0993\", " + 
                    " \"responsePadding\": \"_EM_4100_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify?EMextraParam123=_EM_561_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) POST:/version/v1/tan/verify
    */
    @Test(timeout = 60000)
    public void test_19_postOnVerifyReturns404() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 32L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2059-01-03 11:29:29\"")
                .d("UPDATED_AT", "\"2039-06-19 12:29:00\"")
                .d("HASHED_GUID", "\"M9tFSAn_2q5S5C\"")
                .d("REGISTRATION_TOKEN_HASH", "\"a774287672522629a46976f999ef8526ecf21cf7d520ae65581f0acd405f2517\"")
                .d("TELE_TAN_HASH", "\"c5m8lY1\"")
                .d("TAN_COUNTER", "-62841")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"TABLE_TYPE\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 33L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1972-06-15 11:16:15\"")
                .d("UPDATED_AT", "\"1995-12-16 10:01:25\"")
                .d("VALID_FROM", "\"2064-06-18 11:21:37\"")
                .d("VALID_UNTIL", "\"2040-12-16 02:28:37\"")
                .d("TAN_HASH", "\"f86d6b031f54f9c8e640b72fc36f9e5010d84748847677d78964f2a7cae082b7\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"add38ebc-635b-49c0-85fd-efccc29d8d5d\", " + 
                    " \"responsePadding\": \"Hh5\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) POST:/version/v1/tan/verify
    */
    @Test(timeout = 60000)
    public void test_20_postOnVerifyReturns404() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 32L)
                .d("VERSION", "294944")
                .d("CREATED_AT", "\"2059-06-03 00:29:44\"")
                .d("UPDATED_AT", "\"2039-06-19 11:29:08\"")
                .d("HASHED_GUID", "\"M9tFSAn_2q5S5C\"")
                .d("REGISTRATION_TOKEN_HASH", "\"a774287672522629a46976f999ef8526ecf21cf7d520ae65581f0acd405f2517\"")
                .d("TELE_TAN_HASH", "\"c5m8lY1\"")
                .d("TAN_COUNTER", "-62849")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"TABLE_TYPE\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 33L)
                .d("VERSION", "-131072")
                .d("CREATED_AT", "\"1972-06-15 11:16:15\"")
                .d("UPDATED_AT", "\"1995-12-17 10:00:29\"")
                .d("VALID_FROM", "\"2000-02-18 03:31:37\"")
                .d("VALID_UNTIL", "\"1976-02-16 02:28:00\"")
                .d("TAN_HASH", "\"01d207699ae6f25f48e7edc7054097f7463852d5605b332e85fc03c1fe8c23b2\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("b3", "t6_U9JaLdKZZfP3")
                .header("X-B3-TraceId", "SMPe8tlBP8Jr")
                .header("x-b3-flags", "yrfafzbH{H8IySj")
                .header("X-CWA-TELETAN-TYPE", "jXuPra|QYQx")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"f2fad4d9-0ca2-4ef8-Adee-fedd1bfbfe5a\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify?EMextraParam123=_EM_561_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) POST:/version/v1/tan/verify
    */
    @Test(timeout = 60000)
    public void test_21_postOnVerifyReturns404() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 50L)
                .d("VERSION", "-370")
                .d("CREATED_AT", "\"1970-08-21 18:41:57\"")
                .d("UPDATED_AT", "\"1915-10-16 07:30:29\"")
                .d("HASHED_GUID", "\"2067-07-19 19:58:59\"")
                .d("REGISTRATION_TOKEN_HASH", "\"649b566971ec289fcb1efb12df0740b0604fe308de31400a1778e9f35ebbed60\"")
                .d("TELE_TAN_HASH", "\"_EM_11368_XYZ_\"")
                .d("TAN_COUNTER", "256")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"_EM_11498_XYZ_\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 132L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1933-08-17 04:34:30\"")
                .d("UPDATED_AT", "\"1991-10-14 10:16:57\"")
                .d("VALID_FROM", "\"2043-07-17 12:30:52\"")
                .d("VALID_UNTIL", "\"2037-01-14 06:49:56\"")
                .d("TAN_HASH", "NULL")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("b3", "8fhumPvVzbq")
                .header("X-B3-Flags", "gQSXgC5vhIxoS8e")
                .header("X-B3-Sampled", "Bq7FePH=5Jtb")
                .header("X-B3-TraceId", "G7qgjscujs")
                .header("cwa-fake", "lmMlz0jex")
                .header("X-CWA-TELETAN-TYPE", "_EM_11494_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"6c3d6bed-4ebd-4ff9-90c8-8197f6b34dea\", " + 
                    " \"responsePadding\": \"2EfAFQBpiMl\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) POST:/version/v1/tan/verify
    */
    @Test(timeout = 60000)
    public void test_22_postOnVerifyReturns404() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("TAN", 64L)
                .d("VERSION", "427")
                .d("CREATED_AT", "\"2100-09-30 07:42:26\"")
                .d("UPDATED_AT", "\"1947-02-25 18:59:26\"")
                .d("VALID_FROM", "\"2000-12-15 11:05:38\"")
                .d("VALID_UNTIL", "\"1979-07-28 07:18:03\"")
                .d("TAN_HASH", "\"W0LQ4Xa\"")
                .d("SOT", "NULL")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 303L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2000-06-27 16:29:00\"")
                .d("UPDATED_AT", "\"2072-02-21 01:31:45\"")
                .d("HASHED_GUID", "\"DwTU58w\"")
                .d("REGISTRATION_TOKEN_HASH", "\"2EnzAqXaQW\"")
                .d("TELE_TAN_HASH", "\"hbAAE7nd1\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"U_ZN\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("b3", "I0tRq9LGtsF")
                .header("X-B3-Flags", "ddvQgXn")
                .header("X-B3-Sampled", "Iv")
                .header("X-B3-TraceId", "_EM_25869_XYZ_")
                .header("cwa-fake", "_EM_25868_XYZ_")
                .header("x-b3-flags", "c7LrXmyJtKR?n")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"7b5027f5-90bd-4f20-Bf17-1e0b86dabc3e\", " + 
                    " \"responsePadding\": \"JeajtHWqYYAsZt\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }


}
