/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-08-17T20:30:06.978-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 11 tests
 * <br>
*  Covered targets: 167
 * <br>
*  Used time: 0h 15m 5s
 * <br>
*  Needed budget for current results: 74%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.embedded.app.coronawarn.verification.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("APP_SESSION","TAN"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (500) POST:/version/v1/tan
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_0_postOnTanCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 50L)
                .d("VERSION", "-386")
                .d("CREATED_AT", "\"1970-10-21 18:45:58\"")
                .d("UPDATED_AT", "\"1915-10-12 11:29:29\"")
                .d("HASHED_GUID", "\"2067-07-19 19:58:59\"")
                .d("REGISTRATION_TOKEN_HASH", "\"649b566971ec289fcb1efb12df0740b0604fe308de31400a1778e9f35ebbed60\"")
                .d("TELE_TAN_HASH", "\"USERS\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"_EM_33649_XYZ_\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 154L)
                .d("VERSION", "-2048")
                .d("CREATED_AT", "\"2000-01-21 04:55:51\"")
                .d("UPDATED_AT", "\"2079-06-17 11:29:28\"")
                .d("VALID_FROM", "\"1909-03-01 16:46:14\"")
                .d("VALID_UNTIL", "\"2100-04-15 23:17:39\"")
                .d("TAN_HASH", "\"ZMwULyiFUOJU\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. app/coronawarn/verification/service/TestResultServerService_49_result.
        given().accept("*/*")
                .header("cwa-fake", "")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "1")
                .header("b3", "UusmOmUgRmCQ2")
                .header("X-B3-Sampled", "fAlse")
                .header("X-B3-TraceId", "n4b9F^eQX0")
                .header("X-CWA-TELETAN-TYPE", "tFV")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"eca8448a-7bfe-4b26-Af8d-4ef79fa1a2de\", " + 
                    " \"responsePadding\": \"\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(500)// app/coronawarn/verification/service/TestResultServerService_49_result
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (500) POST:/version/v1/testresult
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_1_postOnTestresultCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 50L)
                .d("VERSION", "-262272")
                .d("CREATED_AT", "\"1970-08-21 18:09:57\"")
                .d("UPDATED_AT", "\"1915-10-16 07:30:29\"")
                .d("HASHED_GUID", "\"_EKUU13U7`XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"3587d639f77fb195cfd580dab6938775020048bd9d25977f2db4ff9a8491ffb9\"")
                .d("TELE_TAN_HASH", "\"USERS\"")
                .d("TAN_COUNTER", "392")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"_EM_29794_XYZ_\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 154L)
                .d("VERSION", "8477")
                .d("CREATED_AT", "\"1945-06-10 20:57:51\"")
                .d("UPDATED_AT", "\"2079-06-16 12:29:29\"")
                .d("VALID_FROM", "\"1900-01-01 03:38:22\"")
                .d("VALID_UNTIL", "\"2097-06-26 21:29:31\"")
                .d("TAN_HASH", "\"UMwwLUiB:UJx\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. app/coronawarn/verification/service/TestResultServerService_49_result.
        given().accept("*/*")
                .header("cwa-fake", "_EM_21069_XYZ_")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"640d9c41-3265-4a49-a6ac-9bda6a222a1e\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(500)// app/coronawarn/verification/service/TestResultServerService_49_result
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (500) POST:/version/v1/registrationToken
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_2_postOnRegistrationTokenCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. app/coronawarn/verification/config/RequestSizeLimitFilter_60_doFilterInternal.
        given().accept("*/*")
                .header("cwa-fake", "uZ4")
                .header("x-EMextraHeader123", "42")
                .header("X-B3-Flags", "_EM_6619_XYZ_")
                .header("b3", "1wbQpEy6kA5dXU")
                .header("X-B3-Sampled", "yJGkDgYZVXQ0h4")
                .header("X-B3-TraceId", "_EM_3154_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"CCbfFdaff1bA96Ff2BDDc9CFff5A726d15cb8aC5D33C34c6abcFBc56DaA7ba6d\", " + 
                    " \"keyDob\": \"B3dBFD369CbbE8c6d10BeaeC3fCA659dC7DBCb2Ac3F752ffcBA5551bb4d3EBe2\", " + 
                    " \"keyType\": \"TELETAN\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(500)// app/coronawarn/verification/config/RequestSizeLimitFilter_60_doFilterInternal
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (500) POST:/version/v1/tan
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_3_postOnTanCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 32L)
                .d("VERSION", "-8388609")
                .d("CREATED_AT", "\"2059-06-03 11:29:29\"")
                .d("UPDATED_AT", "\"2002-09-20 02:00:59\"")
                .d("HASHED_GUID", "\"_EM_3760_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"a774287672522629a46976f999ef8526ecf21cf7d520ae65581f0acd405f2517\"")
                .d("TELE_TAN_HASH", "\"Bc06E73GN9\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"_UM_2U17U_XYUU\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 33L)
                .d("VERSION", "1")
                .d("CREATED_AT", "\"2032-06-25 11:29:29\"")
                .d("UPDATED_AT", "\"1993-07-26 00:01:41\"")
                .d("VALID_FROM", "\"2000-03-17 09:30:41\"")
                .d("VALID_UNTIL", "\"2002-05-17 11:29:20\"")
                .d("TAN_HASH", "\"049bb7d8e8092f067ab6ff8fdd9959f0a493f7706e7cc4d81de351538e9e8171\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. app/coronawarn/verification/service/TestResultServerService_49_result.
        given().accept("*/*")
                .header("cwa-fake", "_EM_21519_XYZ_")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "_EM_19704_XYZ_")
                .header("b3", "6m@")
                .header("X-B3-Sampled", "}VLXLo")
                .header("X-B3-TraceId", "_EM_1113_XYZ_9")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"cba6432e-4e4c-41d4-b20b-84fcd3db064c\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(500)// app/coronawarn/verification/service/TestResultServerService_49_result
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (500) POST:/version/v1/testresult
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_4_postOnTestresultCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 50L)
                .d("VERSION", "-354")
                .d("CREATED_AT", "\"1970-08-21 18:41:56\"")
                .d("UPDATED_AT", "\"2043-10-24 07:30:21\"")
                .d("HASHED_GUID", "\"c5m8lY\"")
                .d("REGISTRATION_TOKEN_HASH", "\"3587d639f77fb195cfd580dab6938775020048bd9d25977f2db4ff9a8491ffb9\"")
                .d("TELE_TAN_HASH", "\"eeQKMI\"")
                .d("TAN_COUNTER", "4653")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"w93inXVv8Dw8ZLb\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. app/coronawarn/verification/service/TestResultServerService_49_result.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"640d9c41-3265-4a49-a6ac-9bda6a222a1e\", " + 
                    " \"responsePadding\": \"mAde3j\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(500)// app/coronawarn/verification/service/TestResultServerService_49_result
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (500) POST:/version/v1/testresult
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_5_postOnTestresultCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 32L)
                .d("VERSION", "1015808")
                .d("CREATED_AT", "\"2059-05-16 13:37:44\"")
                .d("UPDATED_AT", "\"2067-07-19 07:59:59\"")
                .d("HASHED_GUID", "\"SHARE_LINKED_CONNECTIONS\"")
                .d("REGISTRATION_TOKEN_HASH", "\"a774287672522629a46976f999ef8526ecf21cf7d520ae65581f0acd405f2517\"")
                .d("TELE_TAN_HASH", "\"Bc06E73GN9\"")
                .d("TAN_COUNTER", "-67713")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"1;h6^eWrkbL_UikQ\"")
                .d("TELETAN_TYPE", "NULL")
            .and().insertInto("TAN", 33L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2000-04-29 11:29:14\"")
                .d("UPDATED_AT", "\"1993-06-26 00:01:41\"")
                .d("VALID_FROM", "\"2000-04-16 09:28:25\"")
                .d("VALID_UNTIL", "\"2040-10-17 03:37:21\"")
                .d("TAN_HASH", "\"049bb7d8e8092f067ab6ff8fdd9959f0a493f7706e7cc4d81de351538e9e8171\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. app/coronawarn/verification/config/RequestSizeLimitFilter_60_doFilterInternal.
        given().accept("*/*")
                .header("cwa-fake", "")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "xkts")
                .header("b3", "QIgNjVC")
                .header("X-B3-Sampled", "49t7r")
                .header("X-B3-TraceId", "N0SNPo")
                .header("x-cwa-teletan-type", "foo")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"191c0c74-b511-401a-bb4d-c8b0f482fca1\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(500)// app/coronawarn/verification/config/RequestSizeLimitFilter_60_doFilterInternal
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (500) POST:/version/v1/tan
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_6_postOnTanCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 41L)
                .d("VERSION", "698")
                .d("CREATED_AT", "\"1974-02-10 05:55:21\"")
                .d("UPDATED_AT", "\"2065-10-22 04:37:44\"")
                .d("HASHED_GUID", "NULL")
                .d("REGISTRATION_TOKEN_HASH", "NULL")
                .d("TELE_TAN_HASH", "\"fPAh\"")
                .d("TAN_COUNTER", "-131037")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "NULL")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 42L)
                .d("VERSION", "690")
                .d("CREATED_AT", "\"2079-07-06 18:08:09\"")
                .d("UPDATED_AT", "\"1904-07-22 16:10:41\"")
                .d("VALID_FROM", "\"1912-10-25 03:16:27\"")
                .d("VALID_UNTIL", "\"1952-08-01 08:25:36\"")
                .d("TAN_HASH", "\"sZUTMDL3JiL\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. app/coronawarn/verification/config/RequestSizeLimitFilter_60_doFilterInternal.
        given().accept("*/*")
                .header("cwa-fake", "fLYx8tYEt")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "7")
                .header("b3", "6m0")
                .header("X-B3-Sampled", "ftt59NnVGyNgGX")
                .header("X-B3-TraceId", "_EM_5946_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"cb96432f-405c-41d4-b11b-94fcd1db073c\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(500)// app/coronawarn/verification/config/RequestSizeLimitFilter_60_doFilterInternal
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (500) POST:/version/v1/testresult
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_7_postOnV1TestresultWithQueryParamCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 32L)
                .d("VERSION", "-16")
                .d("CREATED_AT", "\"2059-06-03 11:29:44\"")
                .d("UPDATED_AT", "\"2067-07-19 03:56:59\"")
                .d("HASHED_GUID", "\"fQ\"")
                .d("REGISTRATION_TOKEN_HASH", "\"1ea9fecfc1f5543259ca4f65b4b9acad9b21dafbdae795da6a06087297e99253\"")
                .d("TELE_TAN_HASH", "\"_EM_8275_XYZ_\"")
                .d("TAN_COUNTER", "-67457")
                .d("SOT", "NULL")
                .d("HASHED_GUID_DOB", "\"5;h6VeWrkbL_UikQ\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 33L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1968-06-15 11:00:14\"")
                .d("UPDATED_AT", "\"2000-06-16 10:33:09\"")
                .d("VALID_FROM", "\"1911-12-20 11:29:29\"")
                .d("VALID_UNTIL", "\"2040-10-15 03:29:29\"")
                .d("TAN_HASH", "\"Y6YZCzI0O_0GqOn\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. app/coronawarn/verification/controller/ExternalTestStateController_108_getTestState.
        given().accept("*/*")
                .header("cwa-fake", "_EM_1586_XYZ_")
                .header("x-EMextraHeader123", "wmwj")
                .header("X-B3-Flags", "_EM_3756_XYZ_")
                .header("b3", "_EM_1011_XYZ_")
                .header("X-B3-TraceId", "M0SNPk")
                .header("x-cwa-teletan-type", "foo")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"282c0c84-b511-401a-bb4d-c8b0f482fca1\", " + 
                    " \"responsePadding\": \"ZCV\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult?EMextraParam123=qJAmgKBx7RXuS_a")
                .then()
                .statusCode(500)// app/coronawarn/verification/controller/ExternalTestStateController_108_getTestState
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (500) POST:/version/v1/tan
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_8_postOnTanCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 50L)
                .d("VERSION", "7822")
                .d("CREATED_AT", "\"1970-10-21 18:45:58\"")
                .d("UPDATED_AT", "\"1915-10-16 03:22:29\"")
                .d("HASHED_GUID", "\"2067-07-19 19:58:59\"")
                .d("REGISTRATION_TOKEN_HASH", "\"649b566971ec289fcb1efb12df0740b0604fe308de31400a1778e9f35ebbed60\"")
                .d("TELE_TAN_HASH", "\"USERS\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "NULL")
                .d("HASHED_GUID_DOB", "\"w9UiUUUv8Uw9UKb\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 154L)
                .d("VERSION", "16384")
                .d("CREATED_AT", "\"1952-06-21 20:55:51\"")
                .d("UPDATED_AT", "\"2079-06-01 11:29:28\"")
                .d("VALID_FROM", "\"1911-12-01 15:29:10\"")
                .d("VALID_UNTIL", "\"2065-06-18 21:13:41\"")
                .d("TAN_HASH", "\"_EM_31944_XYZ_\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. app/coronawarn/verification/controller/ExternalTanController_116_generateTan.
        given().accept("*/*")
                .header("cwa-fake", "NHt46B6x")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "1")
                .header("b3", "Uus_Om4gTmCM")
                .header("X-B3-Sampled", "falsE")
                .header("X-B3-TraceId", "Y4V9FBeQg0")
                .header("X-CWA-TELETAN-TYPE", "_EM_21418_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"eca8448a-7bfe-4b26-Af8d-4ef79fa1a2de\", " + 
                    " \"responsePadding\": \"q\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(500)// app/coronawarn/verification/controller/ExternalTanController_116_generateTan
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (500) POST:/version/v1/tan/teletan
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_9_postOnTeletanCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("TAN", 64L)
                .d("VERSION", "131627")
                .d("CREATED_AT", "\"2100-01-30 07:42:26\"")
                .d("UPDATED_AT", "\"1945-02-25 02:58:22\"")
                .d("VALID_FROM", "\"2000-08-15 13:00:38\"")
                .d("VALID_UNTIL", "\"1979-07-28 07:18:29\"")
                .d("TAN_HASH", "\"_EM_27678_XYZ_\"")
                .d("SOT", "NULL")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 335L)
                .d("VERSION", "99")
                .d("CREATED_AT", "\"1922-01-23 11:00:29\"")
                .d("UPDATED_AT", "\"2025-02-02 03:35:52\"")
                .d("HASHED_GUID", "NULL")
                .d("REGISTRATION_TOKEN_HASH", "\"7bDwJz2\"")
                .d("TELE_TAN_HASH", "\"_EM_27679_XYZ_\"")
                .d("TAN_COUNTER", "646")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"EaZVNqBc45IM\"")
                .d("TELETAN_TYPE", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. app/coronawarn/verification/config/RequestSizeLimitFilter_60_doFilterInternal.
        given().accept("*/*")
                .header("Authorization", "{\"token\":\"SUtfqMUU\"}")
                .header("x-EMextraHeader123", "")
                .header("x-b3-sampled", "WKtRZ1z")
                .header("X-B3-Flags", "_EM_27668_XYZ_")
                .header("x-cwa-teletan-type", "_EM_27688_XYZ_")
                .header("X-B3-Sampled", "_ZPlOW4T6")
                .header("X-Forwarded-For", "_EM_27669_XYZ_")
                .header("X-B3-TraceId", "rF2")
                .header("cwa-fake", "_EM_27671_XYZ_")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(500)// app/coronawarn/verification/config/RequestSizeLimitFilter_60_doFilterInternal
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (500) POST:/version/v1/tan/verify
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_10_postOnVerifyCauses500_internalServerError() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 50L)
                .d("VERSION", "-370")
                .d("CREATED_AT", "\"1970-08-29 18:41:57\"")
                .d("UPDATED_AT", "\"1915-10-01 00:30:29\"")
                .d("HASHED_GUID", "\"_EM_11367_XYZ_z\"")
                .d("REGISTRATION_TOKEN_HASH", "\"3587d639f77fb195cfd580dab6938775020048bd9d25977f2db4ff9a8491ffb9\"")
                .d("TELE_TAN_HASH", "\"USERS\"")
                .d("TAN_COUNTER", "-512")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"w93inXfv8Dw8ZKb\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 132L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1933-08-17 04:34:30\"")
                .d("UPDATED_AT", "\"1995-09-14 10:16:57\"")
                .d("VALID_FROM", "\"2043-07-25 11:28:54\"")
                .d("VALID_UNTIL", "\"2037-01-14 10:50:56\"")
                .d("TAN_HASH", "\"PegQHn\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. app/coronawarn/verification/config/RequestSizeLimitFilter_60_doFilterInternal.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("b3", "8fhumPvVzb")
                .header("X-B3-Flags", "_EM_11502_XYZ_")
                .header("X-B3-Sampled", "Bq7FePH55Jtb")
                .header("X-B3-TraceId", "_EM_11505_XYZ_")
                .header("cwa-fake", "lmMlz0jex")
                .header("X-CWA-TELETAN-TYPE", "_EM_11503_XYZ_")
                .header("X-Forwarded-For", "_EM_11504_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"6c3d6bed-4ebd-4ff9-90c8-8197f6b34dea\", " + 
                    " \"responsePadding\": \"2EfAHFQBpiMl\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(500)// app/coronawarn/verification/config/RequestSizeLimitFilter_60_doFilterInternal
                .assertThat()
                .body(isEmptyOrNullString());
    }


}
