/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-08-18T20:08:08.213-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 612 tests
 * <br>
*  Covered targets: 14923
 * <br>
*  Used time: 0h 17m 33s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static final SutHandler controller = new em.external.org.devgateway.ocvn.ExternalEvoMasterController("/Users/philip/evoMaster/EMB/jdk_8_maven/cs/rest-gui/ocvn/web/target/ocvn-sut.jar");
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (200) GET:/api/qualityAverageTenderPeriod
    */
    @Test(timeout = 60000)
    public void test_0_getOnQualityAverageTenderPeriodReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/qualityAverageTenderPeriod?" + 
                    "notBidSelectionMethod=ZXSCQAiXr3NoXL&notBidSelectionMethod=rpspEO3m&notBidSelectionMethod=_EM_74728_XYZ_&notBidSelectionMethod=JJIVMWm2&" + 
                    "procurementMethod=_EM_74737_XYZ_&procurementMethod=_EM_74738_XYZ_&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityDepartmentId=501&" + 
                    "procuringEntityGroupId=405&" + 
                    "pageNumber=424&" + 
                    "pageSize=157&" + 
                    "electronicSubmission=false&" + 
                    "defaultFilterPagingRequest=oAT&" + 
                    "username=MgmVnbaG9eS&" + 
                    "skip=J3p9dMsqFZZc&" + 
                    "class=zKQA9")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/qualityAverageTenderPeriod
    */
    @Test(timeout = 60000)
    public void test_1_getOnQualityAverageTenderPeriodReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/qualityAverageTenderPeriod?" + 
                    "bidTypeId=RpIeMmK&bidTypeId=COLLUSION&bidTypeId=&bidTypeId=dVPRs9mvXD1EFy&" + 
                    "supplierId=qrJoy&supplierId=FgdSrRo&supplierId=SnxqJMa0DyXXMG&" + 
                    "notBidSelectionMethod=BYue2okQ&notBidSelectionMethod=BDa4deVY3mV1I&notBidSelectionMethod=dsNx9zIx&notBidSelectionMethod=_EM_88297_XYZ_&" + 
                    "tenderLoc=qQKHeFj81SU&tenderLoc=UzmC&tenderLoc=_EM_88300_XYZ_&tenderLoc=&tenderLoc=_EM_88301_XYZ_&" + 
                    "procuringEntityCityId=IGN4dwI&procuringEntityCityId=j4&procuringEntityCityId=2dAiC%7EFiEvxxsQ&" + 
                    "pageSize=209&" + 
                    "minTenderValue=0.7722091816032617&" + 
                    "minAwardValue=0.8698295551437915&" + 
                    "maxAwardValue=0.9045418725644988&" + 
                    "flagged=true&" + 
                    "password=2pbM&" + 
                    "defaultFilterPagingRequest=qcByYbaAD&" + 
                    "username=J7CPn1wmmyM0J&" + 
                    "skip=_EM_88305_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/qualityAverageTenderPeriod
    */
    @Test(timeout = 60000)
    public void test_2_getOnApiQualityAverageTenderPeriodWithQueryParamsElectronicSubmission() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/qualityAverageTenderPeriod?" + 
                    "supplierId=_EM_58343_XYZ_&supplierId=_EM_58344_XYZ_&supplierId=_EM_58345_XYZ_&supplierId=Zeh9hQ1ZgjZ&" + 
                    "bidSelectionMethod=q3u&bidSelectionMethod=wIjfBwvbWHUruUO&bidSelectionMethod=_EM_58346_XYZ_&bidSelectionMethod=41kCelsJM52&bidSelectionMethod=zZN_i6_QjqfAOuy&" + 
                    "notBidSelectionMethod=RvYM8yNwo8L&notBidSelectionMethod=_EM_92165_XYZ_&notBidSelectionMethod=_EM_92166_XYZ_&notBidSelectionMethod=1q4e0n_A6nFCHU&" + 
                    "planningLoc=_EM_58348_XYZ_&" + 
                    "procurementMethod=8j&procurementMethod=_EM_58349_XYZ_&procurementMethod=221T&" + 
                    "procuringEntityCityId=_EM_58350_XYZ_&" + 
                    "procuringEntityDepartmentId=&" + 
                    "procuringEntityGroupId=81&procuringEntityGroupId=893&procuringEntityGroupId=131330&procuringEntityGroupId=0&procuringEntityGroupId=328&" + 
                    "pageNumber=39&" + 
                    "minTenderValue=0.3386972193812493&" + 
                    "minAwardValue=80.39158114794404&" + 
                    "electronicSubmission=true&" + 
                    "flagged=true&" + 
                    "password=_EM_58351_XYZ_u&" + 
                    "defaultFilterPagingRequest=_EM_58352_XYZ_&" + 
                    "username=_EM_58353_XYZ_&" + 
                    "skip=OOsga8r4IeA&" + 
                    "class=_EM_58355_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/qualityAverageTenderPeriod
    */
    @Test(timeout = 60000)
    public void test_3_getOnQualityAverageTenderPeriodReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/qualityAverageTenderPeriod?" + 
                    "procuringEntityId=&" + 
                    "bidSelectionMethod=_EM_53216_XYZ_&bidSelectionMethod=4FZlBHEP&bidSelectionMethod=S&bidSelectionMethod=x&bidSelectionMethod=u9aTmBtLBrDhl8O&" + 
                    "notBidSelectionMethod=ZJ9dTDRCYZo&notBidSelectionMethod=lKBmRoVz5xhr&notBidSelectionMethod=4rq5J7Ye6n1wo&notBidSelectionMethod=_EM_53217_XYZ_&notBidSelectionMethod=8Dpowo9Y&" + 
                    "contrMethod=&" + 
                    "tenderLoc=_EM_53218_XYZ_&tenderLoc=WIaU5&tenderLoc=iisLy2q9&tenderLoc=_EM_53219_XYZ_&tenderLoc=hJoq&" + 
                    "pageSize=224&" + 
                    "minTenderValue=0.3839486597189886&" + 
                    "maxTenderValue=0.0147401483968298&" + 
                    "maxAwardValue=0.14407162445642707&" + 
                    "EMextraParam123=_EM_31338_XYZ_&" + 
                    "username=_EM_53221_XYZ_&" + 
                    "skip=kOYcXB")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/qualityAverageTenderPeriod
    */
    @Test(timeout = 60000)
    public void test_4_getOnQualityAverageTenderPeriodReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/qualityAverageTenderPeriod?" + 
                    "bidTypeId=&" + 
                    "notBidTypeId=RPuRSvPk7pwqvX&notBidTypeId=mH3d&notBidTypeId=G&notBidTypeId=YRsD4wpQeTJ9xcu&" + 
                    "bidSelectionMethod=5cGlfwvMwJdx&bidSelectionMethod=YF&bidSelectionMethod=_EM_92161_XYZ_&bidSelectionMethod=9jibp&bidSelectionMethod=&" + 
                    "notBidSelectionMethod=w3b&" + 
                    "contrMethod=&" + 
                    "planningLoc=SfvJoq4QOP&planningLoc=yijMmDP&planningLoc=tdPcSBRKuKoY&planningLoc=xWDUNz5eR&planningLoc=gXEkbIsmnuZY&" + 
                    "procurementMethod=WAf&procurementMethod=Wf9XK3u0&" + 
                    "procuringEntityDepartmentId=304&procuringEntityDepartmentId=738&procuringEntityDepartmentId=-1638447684&" + 
                    "procuringEntityGroupId=937&procuringEntityGroupId=320&procuringEntityGroupId=8&procuringEntityGroupId=545&" + 
                    "pageNumber=10770&" + 
                    "pageSize=893&" + 
                    "minTenderValue=-0.6100782743348663&" + 
                    "maxTenderValue=642.5524902817792&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "password=fxAOKobk8gt&" + 
                    "defaultFilterPagingRequest=teNvNMchCDurGbcV3&" + 
                    "class=_EM_96780_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/totalEligibleIndicatorsByIndicatorType
    */
    @Test(timeout = 60000)
    public void test_5_getOnTotalEligibleIndicatorsByIndicatorTypeReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/totalEligibleIndicatorsByIndicatorType?" + 
                    "notBidTypeId=CmMtsP&notBidTypeId=nHjO8Z&" + 
                    "notProcuringEntityId=&" + 
                    "supplierId=skA8PL2y8&supplierId=1BBb0H5KlURhFkC&" + 
                    "bidSelectionMethod=Q64Yc&bidSelectionMethod=HWISDriWyv35lbQ&" + 
                    "notBidSelectionMethod=R&notBidSelectionMethod=JF3Hm2xnepkEa&" + 
                    "planningLoc=&" + 
                    "tenderLoc=l&tenderLoc=8&tenderLoc=2&tenderLoc=&" + 
                    "procuringEntityCityId=dPIeds&procuringEntityCityId=yPnNHJLhD79YRu&procuringEntityCityId=lU2PEV7aZ3Ro&procuringEntityCityId=w&" + 
                    "procuringEntityDepartmentId=&" + 
                    "month=&" + 
                    "pageSize=418&" + 
                    "minTenderValue=0.8506086626846672&" + 
                    "maxTenderValue=0.07390794737839046&" + 
                    "minAwardValue=0.4248623095668973&" + 
                    "maxAwardValue=859147.0617218494&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "password=IONI3nKCY&" + 
                    "class=IVHoBZ3i5")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/totalEligibleIndicatorsByIndicatorType
    */
    @Test(timeout = 60000)
    public void test_6_getOnTotalEligibleIndicatorsByIndicatorTypeReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/totalEligibleIndicatorsByIndicatorType?" + 
                    "notBidTypeId=CmMtsP&notBidTypeId=nHjO8Z&" + 
                    "notProcuringEntityId=&" + 
                    "supplierId=skA8PL2y8&supplierId=1BBb0H5KlURhFkC&" + 
                    "notBidSelectionMethod=R&notBidSelectionMethod=JF3Hm2xnepkEa&" + 
                    "planningLoc=&" + 
                    "tenderLoc=l&tenderLoc=8&tenderLoc=C6vTvSkh_L_vi5&tenderLoc=2&tenderLoc=&" + 
                    "procuringEntityCityId=dPIeds&procuringEntityCityId=yPnNHJLhD79YRu&procuringEntityCityId=lU2PEV7aZ3Ro&procuringEntityCityId=w&" + 
                    "month=&" + 
                    "pageSize=418&" + 
                    "minTenderValue=0.8506086626846672&" + 
                    "minAwardValue=0.4248623095668973&" + 
                    "maxAwardValue=859148.3225657459&" + 
                    "flagged=false&" + 
                    "password=IONI3nKCY&" + 
                    "class=IVHoBZ3i5")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/totalEligibleIndicatorsByIndicatorType
    */
    @Test(timeout = 60000)
    public void test_7_getOnTotalEligibleIndicatorsByIndicatorTypeReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/totalEligibleIndicatorsByIndicatorType?" + 
                    "notProcuringEntityId=O4hgCGkbRHIAcJ&" + 
                    "bidSelectionMethod=baIaPHqxzL0ML&bidSelectionMethod=ZzmrMXqqa&" + 
                    "notBidSelectionMethod=&" + 
                    "planningLoc=&" + 
                    "tenderLoc=ei7vMwrTLvFGp8&" + 
                    "procuringEntityCityId=_EM_84134_XYZ_&procuringEntityCityId=2sJlyfUBTQyRrL5j&" + 
                    "procuringEntityDepartmentId=60&procuringEntityDepartmentId=981&procuringEntityDepartmentId=609&procuringEntityDepartmentId=272&" + 
                    "procuringEntityGroupId=38274708&procuringEntityGroupId=713&procuringEntityGroupId=300&procuringEntityGroupId=339&" + 
                    "pageNumber=415&" + 
                    "minTenderValue=0.4072350892549169&" + 
                    "maxAwardValue=0.22898985016833762&" + 
                    "electronicSubmission=true&" + 
                    "skip=_EM_84135_XYZ_&" + 
                    "password=_EM_84136_XYZ_&" + 
                    "yearFilterPagingRequest=_EM_84137_XYZ_&" + 
                    "username=sh")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/activeAwardsCount
    */
    @Test(timeout = 60000)
    public void test_8_getOnActiveAwardsCountReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/activeAwardsCount?" + 
                    "bidTypeId=nDrmUrsMx2JOPzLl&bidTypeId=toR1FK6rSbaAz&" + 
                    "notBidTypeId=DRkZg&notBidTypeId=L1zOm58Hmj&" + 
                    "supplierId=_EM_95173_XYZ_&supplierId=_EM_95174_XYZ_&" + 
                    "notBidSelectionMethod=qsV_fe6XMA_4&notBidSelectionMethod=hrGUjcW&notBidSelectionMethod=CJ&" + 
                    "planningLoc=dyO&" + 
                    "tenderLoc=p30U8LAX2lvlbjyR&tenderLoc=Q46x3&tenderLoc=BM&" + 
                    "procuringEntityCityId=eqdnZLYHI2sEVXN&procuringEntityCityId=W&" + 
                    "procuringEntityDepartmentId=&" + 
                    "procuringEntityGroupId=574&procuringEntityGroupId=27&procuringEntityGroupId=187&procuringEntityGroupId=225&" + 
                    "month=&" + 
                    "minTenderValue=0.22199442299051975&" + 
                    "maxTenderValue=0.6465286619209938&" + 
                    "minAwardValue=0.18115027216542545&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "skip=_EM_95177_XYZ_&" + 
                    "class=dY&" + 
                    "yearFilterPagingRequest=ZKIcQ8fhwV9GbnW&" + 
                    "password=jU&" + 
                    "username=_EM_95165_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/avgTimeFromPlanToTenderPhase
    */
    @Test(timeout = 60000)
    public void test_9_getOnApiAvgTimeFromPlanToTenderPhaseWithQueryParamsFlagged() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/avgTimeFromPlanToTenderPhase?" + 
                    "bidTypeId=SYpBPu&bidTypeId=wKu9h9XzQbd9DRy&bidTypeId=Pr5ov1e&" + 
                    "procuringEntityId=&" + 
                    "bidSelectionMethod=_EM_18602_XYZ_&bidSelectionMethod=_EM_18603_XYZ_&bidSelectionMethod=y6vrimP007ubXr&bidSelectionMethod=wr9a0HyeKmU&bidSelectionMethod=_EM_18604_XYZ_&" + 
                    "notBidSelectionMethod=_EM_18605_XYZ_&" + 
                    "planningLoc=Gu&planningLoc=hzF6b6G&planningLoc=_EM_18607_XYZ_&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=_EM_18608_XYZ_&procurementMethod=_EM_18609_XYZ_&procurementMethod=IFcON_gj&procurementMethod=_EM_18610_XYZ_&procurementMethod=io3_uFYaR&" + 
                    "procuringEntityGroupId=677&" + 
                    "pageSize=98&" + 
                    "minTenderValue=0.4880341786696544&" + 
                    "minAwardValue=0.7453659784493082&" + 
                    "flagged=true&" + 
                    "skip=v_T&" + 
                    "password=jQNqz5z&" + 
                    "class=vZW&" + 
                    "yearFilterPagingRequest=yJCiN&" + 
                    "username=lnheAKxZ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/avgTimeFromPlanToTenderPhase
    */
    @Test(timeout = 60000)
    public void test_10_getOnAvgTimeFromPlanToTenderPhaseReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/avgTimeFromPlanToTenderPhase?" + 
                    "bidTypeId=SYpBPu&bidTypeId=wKu9h9XzQbd9DRy&bidTypeId=Pr5ov1e&" + 
                    "procuringEntityId=&" + 
                    "bidSelectionMethod=_EM_18602_XYZ_&bidSelectionMethod=_EM_18603_XYZ_&bidSelectionMethod=y6vrimP007ubXr&bidSelectionMethod=wr9a0HyeKmU&bidSelectionMethod=_EM_18604_XYZ_&" + 
                    "notBidSelectionMethod=_EM_18605_XYZ_&" + 
                    "planningLoc=Gu&planningLoc=hzF6b6G&planningLoc=_EM_18607_XYZ_&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=_EM_18608_XYZ_&procurementMethod=_EM_18609_XYZ_&procurementMethod=IFcON_gj&procurementMethod=_EM_18610_XYZ_&procurementMethod=io3_uFYaR&" + 
                    "procuringEntityGroupId=677&" + 
                    "pageSize=98&" + 
                    "minTenderValue=0.4880341786696544&" + 
                    "minAwardValue=0.7453659784493082&" + 
                    "skip=v_T&" + 
                    "password=jONqz5z&" + 
                    "class=vZW&" + 
                    "yearFilterPagingRequest=yJCiN&" + 
                    "username=lnheAKxZ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/avgTimeFromPlanToTenderPhase
    */
    @Test(timeout = 60000)
    public void test_11_getOnAvgTimeFromPlanToTenderPhaseReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/avgTimeFromPlanToTenderPhase?" + 
                    "bidTypeId=SYpBPu&bidTypeId=wKu9h9XzQbd9DRy&bidTypeId=Pr5ov1e&" + 
                    "procuringEntityId=&" + 
                    "bidSelectionMethod=_EM_18602_XYZ_&bidSelectionMethod=_EM_18603_XYZ_&bidSelectionMethod=y6vrimP007ubXr&bidSelectionMethod=wr9a0HyeKmU&bidSelectionMethod=_EM_18604_XYZ_&" + 
                    "notBidSelectionMethod=_EM_18605_XYZ_&" + 
                    "planningLoc=Gu&planningLoc=hzF6b6G&planningLoc=_EM_18607_XYZ_&" + 
                    "procurementMethod=_EM_18608_XYZ_&procurementMethod=_EM_18609_XYZ_&procurementMethod=IFcON_gj&procurementMethod=_EM_18610_XYZ_&procurementMethod=io3_uFYaR&" + 
                    "procuringEntityGroupId=677&" + 
                    "pageSize=98&" + 
                    "minTenderValue=0.4880341786696544&" + 
                    "minAwardValue=0.7453659784493082&" + 
                    "EMextraParam123=_EM_18611_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/awardsByLocation
    */
    @Test(timeout = 60000)
    public void test_12_getOnApiAwardsByLocationWithQueryParamsFlaggedReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/awardsByLocation?" + 
                    "supplierId=G1h&supplierId=_EM_79144_XYZ_&supplierId=_EM_79145_XYZ_&" + 
                    "notBidSelectionMethod=&" + 
                    "planningLoc=u5LYa&" + 
                    "tenderLoc=xu9&tenderLoc=_EM_79146_XYZ_&tenderLoc=gje&tenderLoc=l1X2pRKL3&tenderLoc=DAtDBHrFkMep1qbR&" + 
                    "procuringEntityDepartmentId=2104629277&procuringEntityDepartmentId=487&procuringEntityDepartmentId=283&" + 
                    "procuringEntityGroupId=605&" + 
                    "pageNumber=475&" + 
                    "pageSize=436&" + 
                    "minTenderValue=0.7408147322353698&" + 
                    "maxTenderValue=0.7820907908620365&" + 
                    "minAwardValue=0.20473576250409675&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "skip=Jp9I3SyABXm5eTEu&" + 
                    "class=t9H4ctx6&" + 
                    "yearFilterPagingRequest=wijsstksEKt0S2bF")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/awardsByLocation
    */
    @Test(timeout = 60000)
    public void test_13_getOnApiAwardsByLocationWithQueryParamsElectronicSubmission() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/awardsByLocation?" + 
                    "supplierId=_EM_23821_XYZ_&supplierId=ukc62XV5fA8Y&supplierId=_EM_23822_XYZ_&supplierId=B31gJ03F6&" + 
                    "notBidSelectionMethod=_EM_23823_XYZ_&notBidSelectionMethod=Chr&" + 
                    "tenderLoc=&tenderLoc=_EM_23828_XYZ_&tenderLoc=_EM_23829_XYZ_&tenderLoc=mY9DbuOI1BRbl&tenderLoc=_EM_23830_XYZ_&" + 
                    "procuringEntityDepartmentId=220&procuringEntityDepartmentId=183&procuringEntityDepartmentId=748&procuringEntityDepartmentId=762&procuringEntityDepartmentId=509&" + 
                    "procuringEntityGroupId=735&" + 
                    "pageNumber=628&" + 
                    "pageSize=676&" + 
                    "maxTenderValue=0.452730445552912&" + 
                    "electronicSubmission=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/corruptionRiskOverviewTable
    */
    @Test(timeout = 60000)
    public void test_14_getOnCorruptionRiskOverviewTableReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/corruptionRiskOverviewTable?" + 
                    "bidTypeId=lerC&bidTypeId=DTCMVWjVjspsO&" + 
                    "procuringEntityId=&" + 
                    "notProcuringEntityId=A6Vs&notProcuringEntityId=oixV7&notProcuringEntityId=Ckk7YKLDndl&" + 
                    "supplierId=_EM_92336_XYZ_&" + 
                    "planningLoc=j5PXKNVhBJQzcRhG&" + 
                    "tenderLoc=_EM_92339_XYZ_&tenderLoc=x&" + 
                    "procurementMethod=_EM_92340_XYZ_&" + 
                    "procuringEntityGroupId=-918354849&procuringEntityGroupId=204&procuringEntityGroupId=460&procuringEntityGroupId=751&procuringEntityGroupId=399&" + 
                    "pageNumber=883&" + 
                    "pageSize=525&" + 
                    "minTenderValue=-0.9933174394788135&" + 
                    "maxTenderValue=0.49528391903524915&" + 
                    "maxAwardValue=0.5250677411179402&" + 
                    "monthly=false&" + 
                    "skip=fKdJ&" + 
                    "password=BcEZYSk3kfIrm&" + 
                    "class=35Kn90ENgvme74w9&" + 
                    "yearFilterPagingRequest=R&" + 
                    "username=TeXLHz6t")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/corruptionRiskOverviewTable
    */
    @Test(timeout = 60000)
    public void test_15_getOnCorruptionRiskOverviewTableReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/corruptionRiskOverviewTable?" + 
                    "procuringEntityId=&" + 
                    "notProcuringEntityId=A8Vs&notProcuringEntityId=oiwV7&notProcuringEntityId=Ckk7YKMDndl&" + 
                    "supplierId=_EM_92336_XYZ_&" + 
                    "planningLoc=_EM_92338_XYZ_&" + 
                    "tenderLoc=_EM_92339_XYZ_&tenderLoc=x&" + 
                    "procuringEntityGroupId=-918354849&procuringEntityGroupId=204&procuringEntityGroupId=460&procuringEntityGroupId=751&procuringEntityGroupId=399&" + 
                    "pageNumber=883&" + 
                    "pageSize=525&" + 
                    "minTenderValue=-0.9933174394788135&" + 
                    "maxTenderValue=0.49528391903524915&" + 
                    "maxAwardValue=0.5250677411179402&" + 
                    "monthly=false&" + 
                    "skip=fKdJ&" + 
                    "password=BcEZYSk3kfIrm&" + 
                    "class=35Kn90ENgvme74w9&" + 
                    "yearFilterPagingRequest=R&" + 
                    "username=TeXLHz6t")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/costEffectivenessAwardAmount
    */
    @Test(timeout = 60000)
    public void test_16_getOnCostEffectivenessAwardAmountReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/costEffectivenessAwardAmount?" + 
                    "bidTypeId=pFZTcKL0ut4shZ7&" + 
                    "procuringEntityId=bJFZP&" + 
                    "notProcuringEntityId=&" + 
                    "supplierId=ccRud&supplierId=qQv9Sdr5W&supplierId=p743tF9CNXVWX_p&supplierId=D7&supplierId=_EM_60167_XYZ_&" + 
                    "bidSelectionMethod=_EM_60168_XYZ_&" + 
                    "notBidSelectionMethod=360XF&" + 
                    "contrMethod=&" + 
                    "planningLoc=iL98jEvrrazGclz5&planningLoc=ZTuklogUyN_&planningLoc=rMc9pm8&planningLoc=wRI4tEf&planningLoc=_EM_60169_XYZ_&" + 
                    "tenderLoc=t5V6C&tenderLoc=bpr2xUs&tenderLoc=6j&" + 
                    "procuringEntityCityId=_EM_60172_XYZ_&procuringEntityCityId=_EM_60173_XYZ_&procuringEntityCityId=_EM_60174_XYZ_&" + 
                    "procuringEntityDepartmentId=430&procuringEntityDepartmentId=931&" + 
                    "procuringEntityGroupId=798&procuringEntityGroupId=1213293174&" + 
                    "pageSize=535&" + 
                    "minTenderValue=1.1053017355014192&" + 
                    "maxTenderValue=0.841510754&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "skip=_EM_60176_XYZ_&" + 
                    "password=C8jx1&" + 
                    "class=hEtn8nU2XHEB&" + 
                    "yearFilterPagingRequest=20V&" + 
                    "username=CGcA8")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/costEffectivenessAwardAmount
    */
    @Test(timeout = 60000)
    public void test_17_getOnCostEffectivenessAwardAmountReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/costEffectivenessAwardAmount?" + 
                    "bidTypeId=pFZTcKL0ut4shZ7&" + 
                    "procuringEntityId=bJFZP&" + 
                    "notProcuringEntityId=&" + 
                    "bidSelectionMethod=_EM_60168_XYZ_&" + 
                    "notBidSelectionMethod=360XF&" + 
                    "contrMethod=&" + 
                    "planningLoc=iL98jEvrrazGclz5&planningLoc=ZTuklogUyN_&planningLoc=rMc9pm8&planningLoc=wRI4tEf&planningLoc=_EM_60169_XYZ_&" + 
                    "tenderLoc=s5V6C&tenderLoc=bpr2xUs&tenderLoc=6j&" + 
                    "procuringEntityCityId=_EM_60172_XYZ_&procuringEntityCityId=_EM_60173_XYZ_&procuringEntityCityId=_EM_60174_XYZ_&" + 
                    "procuringEntityDepartmentId=430&procuringEntityDepartmentId=931&" + 
                    "procuringEntityGroupId=798&procuringEntityGroupId=1213293174&" + 
                    "pageSize=535&" + 
                    "minTenderValue=0.43373320626909917&" + 
                    "maxTenderValue=0.841510754&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "skip=_EM_60176_XYZ_&" + 
                    "password=C8jx1&" + 
                    "class=hEtn8nU2XHEB&" + 
                    "yearFilterPagingRequest=20V&" + 
                    "username=CGcA8")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/costEffectivenessAwardAmount
    */
    @Test(timeout = 60000)
    public void test_18_getOnCostEffectivenessAwardAmountReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/costEffectivenessAwardAmount?" + 
                    "procuringEntityId=bJFZP&" + 
                    "notProcuringEntityId=&" + 
                    "notBidSelectionMethod=360XF&" + 
                    "contrMethod=&" + 
                    "planningLoc=iL98jEvrrazGclz5&planningLoc=ZTuklogUyN_&planningLoc=rMc9pm8&planningLoc=wRI4tEf&planningLoc=_EM_60169_XYZ_&" + 
                    "procuringEntityDepartmentId=428&procuringEntityDepartmentId=931&" + 
                    "pageSize=535&" + 
                    "minTenderValue=0.43373320626909917&" + 
                    "maxTenderValue=0.8415107536844817&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "password=C8jx1&" + 
                    "yearFilterPagingRequest=20V&" + 
                    "username=CGcA8")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/costEffectivenessAwardAmount
    */
    @Test(timeout = 60000)
    public void test_19_getOnCostEffectivenessAwardAmountReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/costEffectivenessAwardAmount?" + 
                    "procuringEntityId=ExS&" + 
                    "bidSelectionMethod=6vCsXh6CKu&bidSelectionMethod=5AQPH2NqgJweRbk&bidSelectionMethod=wrI1l&bidSelectionMethod=aZzdZlsJQ&bidSelectionMethod=_EM_54011_XYZ_&" + 
                    "contrMethod=&" + 
                    "planningLoc=_EM_54012_XYZ_&planningLoc=_EM_54013_XYZ_&planningLoc=_EM_54014_XYZ_&planningLoc=&planningLoc=_EM_54015_XYZ_&" + 
                    "procuringEntityCityId=&" + 
                    "minAwardValue=0.02237817197135261&" + 
                    "maxAwardValue=0.0468683733304468&" + 
                    "monthly=false&" + 
                    "skip=_EM_54019_XYZ_&" + 
                    "class=L2gtxQpZL4RYd&" + 
                    "yearFilterPagingRequest=_EM_54021_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/countBidPlansByYear
    */
    @Test(timeout = 60000)
    public void test_20_getOnApiCountBidPlansByYearWithQueryParamsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/countBidPlansByYear?" + 
                    "notBidTypeId=URf&" + 
                    "supplierId=zg&supplierId=_EM_15574_XYZ_&supplierId=pQhLbi&" + 
                    "planningLoc=_EM_15580_XYZ_&planningLoc=mKXIN3mda&planningLoc=_EM_15581_XYZ_&planningLoc=dqgAdk9Daq&planningLoc=tSXaxP&" + 
                    "tenderLoc=_EM_15582_XYZ_&tenderLoc=6WyraEeslROD&tenderLoc=_EM_15583_XYZ_&tenderLoc=o614g1fhn8ZM02&" + 
                    "procuringEntityCityId=k_jng0Al&" + 
                    "pageNumber=294&" + 
                    "pageSize=240&" + 
                    "minAwardValue=0.1297947598826974&" + 
                    "maxAwardValue=0.6947714301496166&" + 
                    "flagged=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/countBidPlansByYear
    */
    @Test(timeout = 60000)
    public void test_21_getOnCountBidPlansByYearReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/countBidPlansByYear?" + 
                    "procuringEntityId=Kqqr29J45Y5R&procuringEntityId=DE&procuringEntityId=cYxcG4SoXSj9thdL&procuringEntityId=5XZrHYkQ&" + 
                    "notProcuringEntityId=pXNqaJ7rGW0x7&" + 
                    "supplierId=&" + 
                    "bidSelectionMethod=w5&bidSelectionMethod=A7cSzPk1MsVtA4dh&bidSelectionMethod=D&bidSelectionMethod=7&" + 
                    "notBidSelectionMethod=N4ev8FxHXn1Mrla&" + 
                    "planningLoc=oQLmCNF&planningLoc=Paz&planningLoc=4s3T007S6UvgJee&planningLoc=sd&planningLoc=Cc&" + 
                    "procuringEntityDepartmentId=180&procuringEntityDepartmentId=38&procuringEntityDepartmentId=209&" + 
                    "month=&" + 
                    "minTenderValue=0.09364354495861027&" + 
                    "minAwardValue=0.2101&" + 
                    "maxAwardValue=81.69528076773364&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "skip=mW8Oc4o1qt_zdC&" + 
                    "password=7ayA3kanYW7b0&" + 
                    "class=c4gUDcjWpMZ&" + 
                    "username=TgnnoX_ZcRn")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/countBidPlansByYear
    */
    @Test(timeout = 60000)
    public void test_22_getOnCountBidPlansByYearReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/countBidPlansByYear?" + 
                    "notProcuringEntityId=pXNqaJ7rGW0x7&" + 
                    "supplierId=&" + 
                    "planningLoc=oQLmCNF&planningLoc=Paz&planningLoc=4s3T007S6UvgJee&planningLoc=sd&planningLoc=Cc&" + 
                    "tenderLoc=lNs&tenderLoc=DbbdR6E1YpPcxe&" + 
                    "procurementMethod=YH9LR2vi5B_NYZ9&procurementMethod=yi&procurementMethod=&procurementMethod=tMTvuwHFg3FLnS&" + 
                    "procuringEntityCityId=DCF&procuringEntityCityId=w1dqzk&procuringEntityCityId=MVD&" + 
                    "procuringEntityDepartmentId=180&procuringEntityDepartmentId=38&procuringEntityDepartmentId=209&" + 
                    "procuringEntityGroupId=943&procuringEntityGroupId=125&procuringEntityGroupId=167&procuringEntityGroupId=34&" + 
                    "month=&" + 
                    "minTenderValue=0.09364354495861027&" + 
                    "minAwardValue=0.2101&" + 
                    "maxAwardValue=82.47406437776728&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "skip=mW8Oc4o1qt_zdC&" + 
                    "password=7ayA3karYW7b0&" + 
                    "class=c4gUDcjWpMZ&" + 
                    "username=TgnnoX_ZcRn")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/countBidPlansByYear
    */
    @Test(timeout = 60000)
    public void test_23_getOnCountBidPlansByYearReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/countBidPlansByYear?" + 
                    "procuringEntityId=Kqqr29J45Y5R&procuringEntityId=DF&procuringEntityId=cYxcG4SoXSj9thdL&procuringEntityId=5XZrHYkQ&" + 
                    "notProcuringEntityId=pXNqaJ7rGW0x7&" + 
                    "supplierId=&" + 
                    "bidSelectionMethod=w5&bidSelectionMethod=A7cSzPk1MsVtA4dh&bidSelectionMethod=D&bidSelectionMethod=7&" + 
                    "notBidSelectionMethod=N4ev8FxHXn1Mrla&" + 
                    "planningLoc=oQLmCNF&planningLoc=Paz&planningLoc=4s3T007S6UvgJee&planningLoc=sd&planningLoc=Cc&" + 
                    "tenderLoc=lNr&tenderLoc=DbbdR6E1YpPcxi&" + 
                    "procurementMethod=YH9LR2vi5B_NYZ9&procurementMethod=yi&procurementMethod=&procurementMethod=tMTvuwHFg3FLnS&" + 
                    "procuringEntityCityId=DCF&procuringEntityCityId=w1dqzk&procuringEntityCityId=MVD&" + 
                    "procuringEntityDepartmentId=180&procuringEntityDepartmentId=209&" + 
                    "minTenderValue=-1.0848276089671698&" + 
                    "minAwardValue=0.2101&" + 
                    "maxAwardValue=81.69528076773364&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "skip=mW8Oc4o1qt_zdC&" + 
                    "password=7ayA3kanYW7b4&" + 
                    "class=c4gUDcjWpMZ&" + 
                    "username=TgnnoX_ZcRn")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/countTendersByYear
    */
    @Test(timeout = 60000)
    public void test_24_getOnApiCountTendersByYearWithQueryParamsNegativeMaxTenderValue() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/countTendersByYear?" + 
                    "notProcuringEntityId=3nnb4w&" + 
                    "supplierId=QFz2&" + 
                    "bidSelectionMethod=&" + 
                    "planningLoc=_EM_10026_XYZ_&planningLoc=6Qgd&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=m&procurementMethod=d&" + 
                    "procuringEntityCityId=_EM_10027_XYZ_&procuringEntityCityId=v8&procuringEntityCityId=_EM_10028_XYZ_&procuringEntityCityId=_EM_100U9_XYZ_&procuringEntityCityId=3V7UcfpW&" + 
                    "procuringEntityDepartmentId=0&procuringEntityDepartmentId=880&procuringEntityDepartmentId=953&procuringEntityDepartmentId=23&procuringEntityDepartmentId=529&" + 
                    "pageNumber=692&" + 
                    "minTenderValue=0.6309881686985236&" + 
                    "maxTenderValue=-10.573579327480134&" + 
                    "maxAwardValue=0.035287215724774335&" + 
                    "monthly=false&" + 
                    "password=Hi8Vg1aW4WI&" + 
                    "yearFilterPagingRequest=4h&" + 
                    "username=7")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/countTendersByYear
    */
    @Test(timeout = 60000)
    public void test_25_getOnCountTendersByYearReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/countTendersByYear?" + 
                    "supplierId=_EM_10023_XYZ_&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=&procurementMethod=c&" + 
                    "procuringEntityCityId=_EM_10027_XYZ_&procuringEntityCityId=v8&procuringEntityCityId=_EM_10028_XYZ_&procuringEntityCityId=_EM_10029_XYZ_&procuringEntityCityId=3V7tcfpW&" + 
                    "procuringEntityDepartmentId=810&procuringEntityDepartmentId=880&procuringEntityDepartmentId=953&procuringEntityDepartmentId=7&procuringEntityDepartmentId=529&" + 
                    "pageNumber=692&" + 
                    "minTenderValue=0.6309881686985236&" + 
                    "maxTenderValue=0.4856913615872326&" + 
                    "maxAwardValue=0.035287215724774335&" + 
                    "monthly=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/countTendersByYear
    */
    @Test(timeout = 60000)
    public void test_26_getOnCountTendersByYearReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/countTendersByYear?" + 
                    "supplierId=_EM_10023_XYZ_&" + 
                    "bidSelectionMethod=&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=&procurementMethod=c&" + 
                    "procuringEntityCityId=_EM_10027_XYZ_&procuringEntityCityId=v8&procuringEntityCityId=_EM_10028_XYZ_&procuringEntityCityId=_EM_10029_XYZ_&procuringEntityCityId=3V7tcfpW&" + 
                    "procuringEntityDepartmentId=810&procuringEntityDepartmentId=880&procuringEntityDepartmentId=953&procuringEntityDepartmentId=7&procuringEntityDepartmentId=529&" + 
                    "pageNumber=692&" + 
                    "minTenderValue=0.6309881686985236&" + 
                    "maxTenderValue=0.4856913615872326&" + 
                    "maxAwardValue=0.035287215724774335&" + 
                    "monthly=true&" + 
                    "password=Hi8Vg1aW4WI&" + 
                    "yearFilterPagingRequest=4i&" + 
                    "username=7")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/countTendersByYear
    */
    @Test(timeout = 60000)
    public void test_27_getOnApiCountTendersByYearWithQueryParamsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/countTendersByYear?" + 
                    "notProcuringEntityId=3nnb4w&" + 
                    "supplierId=QFz2&" + 
                    "bidSelectionMethod=&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=&procurementMethod=c&" + 
                    "procuringEntityCityId=_EM_10027_XYZ_&procuringEntityCityId=v8&procuringEntityCityId=_EM_10028_XYZ_&procuringEntityCityId=_EM_100U9_XYZ_&procuringEntityCityId=3V7UcfpW&" + 
                    "procuringEntityDepartmentId=810&procuringEntityDepartmentId=880&procuringEntityDepartmentId=953&procuringEntityDepartmentId=23&procuringEntityDepartmentId=529&" + 
                    "pageNumber=692&" + 
                    "minTenderValue=0.6309881686985236&" + 
                    "maxTenderValue=0.4856913615872326&" + 
                    "maxAwardValue=0.035287215724774335&" + 
                    "monthly=false&" + 
                    "password=Hi8Vg1aW4WI&" + 
                    "yearFilterPagingRequest=4h&" + 
                    "username=7")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/frequentSuppliersTimeInterval
    */
    @Test(timeout = 60000)
    public void test_28_getOnApiFrequentSuppliersTimeIntervalWithQueryParamsNegativeMaxAwards() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/frequentSuppliersTimeInterval?" + 
                    "intervalDays=680&" + 
                    "maxAwards=-236779884&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/frequentSuppliersTimeInterval
    */
    @Test(timeout = 60000)
    public void test_29_getOnFrequentSuppliersTimeIntervalReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/frequentSuppliersTimeInterval?" + 
                    "maxAwards=448&" + 
                    "EMextraParam123=42&" + 
                    "password=_EM_26609_XYZ_&" + 
                    "username=_EM_26610_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/frequentSuppliersTimeInterval
    */
    @Test(timeout = 60000)
    public void test_30_getOnFrequentSuppliersTimeIntervalReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/frequentSuppliersTimeInterval?" + 
                    "intervalDays=49&" + 
                    "maxAwards=495&" + 
                    "username=hlxTgm")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/frequentSuppliersTimeInterval
    */
    @Test(timeout = 60000)
    public void test_31_getOnFrequentSuppliersTimeIntervalReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_1023_XYZ_")
                .get(baseUrlOfSut + "/api/frequentSuppliersTimeInterval?" + 
                    "maxAwards=402&" + 
                    "EMextraParam123=_EM_1022_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/indicatorTypesMapping
    */
    @Test(timeout = 60000)
    public void test_32_getOnIndicatorTypesMappingReturnsObject() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/indicatorTypesMapping")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'i038'.'types'.size()", equalTo(1))
                .body("'i038'.'types'", hasItems("RIGGING"))
                .body("'i038'.'rationale'", containsString("Preconditions that are not met: Needs to have tender start date; Needs to have tender end date; Needs to have open tender procurement method; "))
                .body("'i003'.'types'.size()", equalTo(2))
                .body("'i003'.'types'", hasItems("RIGGING", "FRAUD"))
                .body("'i003'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one unsuccessful award; Needs to have at least one active award; Needs to have electronic submission tender submission method; Needs to have open tender procurement method; "))
                .body("'i007'.'types'.size()", equalTo(1))
                .body("'i007'.'types'", hasItems("RIGGING"))
                .body("'i007'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have electronic submission tender submission method; Needs to have open tender procurement method; "))
                .body("'i004'.'types'.size()", equalTo(1))
                .body("'i004'.'types'", hasItems("RIGGING"))
                .body("'i004'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one award with awarded amount; Needs to have tender with items classification; Needs to have at least one active award; Needs to have limited tender procurement method; "))
                .body("'i077'.'types'.size()", equalTo(1))
                .body("'i077'.'types'", hasItems("RIGGING"))
                .body("'i077'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have open tender procurement method OR Needs to have selective tender procurement method; "))
                .body("'i019'.'types'.size()", equalTo(1))
                .body("'i019'.'types'", hasItems("RIGGING"))
                .body("'i019'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have tender end date; Needs to have open tender procurement method; "))
                .body("'i180'.'types'.size()", equalTo(1))
                .body("'i180'.'types'", hasItems("RIGGING"))
                .body("'i180'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have tender procuring entity; Needs to have limited tender procurement method; "))
                .body("'i002'.'types'.size()", equalTo(2))
                .body("'i002'.'types'", hasItems("RIGGING", "FRAUD"))
                .body("'i002'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one unsuccessful award; Needs to have at least one active award; Needs to have electronic submission tender submission method; Needs to have open tender procurement method; "))
                .body("'i085'.'types'.size()", equalTo(2))
                .body("'i085'.'types'", hasItems("FRAUD", "COLLUSION"))
                .body("'i085'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have electronic submission tender submission method; "))
                .body("'i171'.'types'.size()", equalTo(2))
                .body("'i171'.'types'", hasItems("RIGGING", "FRAUD"))
                .body("'i171'.'rationale'", containsString("Preconditions that are not met: Needs to have tender value amount; Needs to have at least one active award; Needs to have electronic submission tender submission method; Needs to have open tender procurement method; "));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/percentOfEligibleProjectsFlaggedByYear
    */
    @Test(timeout = 60000)
    public void test_33_getOnPercentOfEligibleProjectsFlaggedByYearReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/percentOfEligibleProjectsFlaggedByYear?" + 
                    "bidTypeId=FRAUD&bidTypeId=yIEwMe&bidTypeId=_EM_74703_XYZ_&" + 
                    "notBidTypeId=_EM_74704_XYZ_&notBidTypeId=_EM_74705_XYZ_&notBidTypeId=_EM_74706_XYZ_&" + 
                    "procuringEntityId=PHkMU4iqi2T&procuringEntityId=504E&procuringEntityId=szdilLYvVy5V&" + 
                    "tenderLoc=&" + 
                    "year=755&year=387&year=484&year=991627558&" + 
                    "month=381&" + 
                    "pageSize=200&" + 
                    "minTenderValue=0.9214878113854832&" + 
                    "maxTenderValue=0.3385990013842879&" + 
                    "minAwardValue=0.5880747436212059&" + 
                    "maxAwardValue=0.7983944122800399&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "skip=Z&" + 
                    "class=&" + 
                    "username=jyb6")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/percentOfEligibleProjectsFlaggedByYear
    */
    @Test(timeout = 60000)
    public void test_34_getOnApiPercentOfEligibleProjectsFlaggedByYearWithQueryParamsAndFlagged() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/percentOfEligibleProjectsFlaggedByYear?" + 
                    "notBidTypeId=&" + 
                    "notProcuringEntityId=_EM_36306_XYZ_&notProcuringEntityId=hODlFSfWF&" + 
                    "supplierId=0sb0xQwaHvde&supplierId=_EM_36307_XYZ_&supplierId=_EM_36308_XYZ_&supplierId=EfoW40gkf1nRt24&supplierId=_EM_36309_XYZ_&" + 
                    "notBidSelectionMethod=Bg0jbTtJf33EqcH&notBidSelectionMethod=B1ZlehO&notBidSelectionMethod=_EM_36312_XYZ_&" + 
                    "tenderLoc=_EM_36317_XYZ_&tenderLoc=_EM_36318_XYZ_&tenderLoc=_PxhdjSC&tenderLoc=NZ_iCI1bZ6a15RI7&tenderLoc=_EM_36319_XYZ_&" + 
                    "procurementMethod=_EM_36320_XYZ_&" + 
                    "procuringEntityDepartmentId=322&procuringEntityDepartmentId=555&procuringEntityDepartmentId=923&procuringEntityDepartmentId=863&" + 
                    "procuringEntityGroupId=&" + 
                    "month=621&" + 
                    "pageNumber=555&" + 
                    "minTenderValue=0.29272323705036907&" + 
                    "minAwardValue=0.6958236103158526&" + 
                    "electronicSubmission=true&" + 
                    "flagged=true&" + 
                    "skip=_EM_36321_XYZ_&" + 
                    "password=SxoGPvoflPVuYei&" + 
                    "class=W6is4cGUoc&" + 
                    "username=OrEB9p40awsA")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/percentOfEligibleProjectsFlaggedByYear
    */
    @Test(timeout = 60000)
    public void test_35_getOnPercentOfEligibleProjectsFlaggedByYearReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/percentOfEligibleProjectsFlaggedByYear?" + 
                    "bidTypeId=sbnEo&bidTypeId=Ftl&bidTypeId=COLLUSION&" + 
                    "supplierId=_EM_70529_XYZ_&" + 
                    "notBidSelectionMethod=&" + 
                    "procurementMethod=_EM_70537_XYZ_&procurementMethod=hZd9H28Uw&procurementMethod=B&" + 
                    "procuringEntityDepartmentId=382&procuringEntityDepartmentId=135&procuringEntityDepartmentId=735&" + 
                    "month=551&month=245&month=172&month=431&" + 
                    "pageNumber=658&" + 
                    "minTenderValue=0.08628538268517227&" + 
                    "minAwardValue=0.7337522564363412&" + 
                    "maxAwardValue=0.3438565966085614&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "class=_EM_70539_XYZ_&" + 
                    "username=_EM_70540_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/percentOfEligibleProjectsFlaggedByYear
    */
    @Test(timeout = 60000)
    public void test_36_getOnPercentOfEligibleProjectsFlaggedByYearReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/percentOfEligibleProjectsFlaggedByYear?" + 
                    "bidTypeId=FRAUD&bidTypeId=FRAUD&bidTypeId=8Vbpd6GgTccsMTM&bidTypeId=Z1W&" + 
                    "notBidTypeId=_y8qBkRcTm9&notBidTypeId=RIGGING&notBidTypeId=_EM_71385_XYZ_&notBidTypeId=_EM_71386_XYZ_&" + 
                    "procuringEntityId=&procuringEntityId=eF&procuringEntityId=EAbWZC&procuringEntityId=JR5LOoqLbNThgUP0&procuringEntityId=TGfB&" + 
                    "supplierId=_EM_71387_XYZ_&" + 
                    "bidSelectionMethod=_EM_71388_XYZ_&bidSelectionMethod=PFcPY&bidSelectionMethod=D2Z&bidSelectionMethod=_EM_71389_XYZ_&bidSelectionMethod=fNhozQ&" + 
                    "planningLoc=&" + 
                    "procurementMethod=&" + 
                    "procuringEntityDepartmentId=276&" + 
                    "year=38&year=813&year=222&year=651&" + 
                    "pageSize=403&" + 
                    "minTenderValue=0.6671291008977782&" + 
                    "maxTenderValue=0.681080095697431&" + 
                    "minAwardValue=0.17941857086390522&" + 
                    "electronicSubmission=false&" + 
                    "class=1MScuBS64zu7&" + 
                    "yearFilterPagingRequest=_EM_71399_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/percentOfEligibleProjectsFlaggedByYear
    */
    @Test(timeout = 60000)
    public void test_37_getOnPercentOfEligibleProjectsFlaggedByYearReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "ceZfUDsTlXf")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/percentOfEligibleProjectsFlaggedByYear?" + 
                    "bidTypeId=&" + 
                    "notBidTypeId=dfMxt0UPjH&notBidTypeId=_EM_29625_XYZ_&notBidTypeId=Z8vJqpjojLpYH5WN&notBidTypeId=_EM_29626_XYZ_&" + 
                    "notProcuringEntityId=&notProcuringEntityId=2OWFzn&notProcuringEntityId=2uSLPiLbggKF1T&" + 
                    "planningLoc=&" + 
                    "tenderLoc=_EM_29635_XYZ_&tenderLoc=_EM_29636_XYZ_&" + 
                    "procurementMethod=FbTUKXt3OcWmku&procurementMethod=_EM_29637_XYZ_&" + 
                    "procuringEntityCityId=wM&procuringEntityCityId=jv&" + 
                    "procuringEntityGroupId=874&procuringEntityGroupId=-2056404006&procuringEntityGroupId=479&" + 
                    "year=577&year=499&" + 
                    "month=742&month=677&month=972&month=856&" + 
                    "minTenderValue=0.623095734510899&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "skip=_EM_29638_XYZ_&" + 
                    "class=_EM_29639_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/percentOfEligibleProjectsFlaggedByYear
    */
    @Test(timeout = 60000)
    public void test_38_getOnPercentOfEligibleProjectsFlaggedByYearReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/percentOfEligibleProjectsFlaggedByYear?" + 
                    "notBidTypeId=_EM_69353_XYZ_&notBidTypeId=_EM_69354_XYZ_&notBidTypeId=&" + 
                    "procuringEntityId=T&procuringEntityId=_EM_69355_XYZ_&procuringEntityId=jZB3GAlhRP1lRE&" + 
                    "supplierId=_EM_69357_XYZ_&" + 
                    "notBidSelectionMethod=_EM_69363_XYZ_&notBidSelectionMethod=pjAK&notBidSelectionMethod=7BXA8sxXiaG2w&" + 
                    "procurementMethod=xCd425uCgP2YQh&procurementMethod=_EM_69366_XYZ_&" + 
                    "procuringEntityGroupId=750&procuringEntityGroupId=223&procuringEntityGroupId=842&" + 
                    "month=807&month=521&month=478&month=-1268632973&month=476&" + 
                    "minTenderValue=0.9734193360057322&" + 
                    "minAwardValue=0.47423811479689115&" + 
                    "maxAwardValue=0.40901842454548654&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "password=V7dLxj&" + 
                    "class=YglEmUM&" + 
                    "yearFilterPagingRequest=37&" + 
                    "username=_EM_69370_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/percentOfEligibleProjectsFlaggedByYear
    */
    @Test(timeout = 60000)
    public void test_39_getOnPercentOfEligibleProjectsFlaggedByYearReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/percentOfEligibleProjectsFlaggedByYear?" + 
                    "bidTypeId=_EM_10059_XYZ_&" + 
                    "supplierId=_EM_10064_XYZ_&supplierId=2b6VEXljf4&supplierId=&" + 
                    "bidSelectionMethod=&" + 
                    "planningLoc=_EM_10065_XYZ_&planningLoc=_EM_10066_XYZ_&planningLoc=_EM_10067_XYZ_&" + 
                    "tenderLoc=z5WC4FWHZ5V&tenderLoc=_EM_10068_XYZ_&tenderLoc=xPqEmuV&tenderLoc=FUaZPQeQ&" + 
                    "procurementMethod=&" + 
                    "procuringEntityGroupId=-452183909&procuringEntityGroupId=249&procuringEntityGroupId=0&procuringEntityGroupId=583&procuringEntityGroupId=704&" + 
                    "month=302207396&" + 
                    "pageNumber=557&" + 
                    "pageSize=349&" + 
                    "minTenderValue=0.11754635599332597&" + 
                    "maxTenderValue=0.9540644775166544&" + 
                    "EMextraParam123=_EM_10070_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/percentOfEligibleProjectsFlaggedByYear
    */
    @Test(timeout = 60000)
    public void test_40_getOnPercentOfEligibleProjectsFlaggedByYearReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/percentOfEligibleProjectsFlaggedByYear?" + 
                    "bidTypeId=_EM_41622_XYZ_&bidTypeId=COLLUSION&bidTypeId=FRAUD&bidTypeId=pXe&bidTypeId=_EM_41623_XYZ_&" + 
                    "procuringEntityId=_EM_41624_XYZ_&procuringEntityId=CQEjs&procuringEntityId=_EM_41625_XYZ_&" + 
                    "bidSelectionMethod=&" + 
                    "tenderLoc=_EM_41630_XYZ_&tenderLoc=_EM_41631_XYZ_&" + 
                    "procuringEntityCityId=o&" + 
                    "procuringEntityDepartmentId=308&procuringEntityDepartmentId=520&procuringEntityDepartmentId=497&procuringEntityDepartmentId=867&" + 
                    "year=725&" + 
                    "pageNumber=295&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "skip=_EM_41633_XYZ_&" + 
                    "password=_EM_41634_XYZ_&" + 
                    "class=O5jX1t6SzRt&" + 
                    "username=_EM_41635_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/percentTendersAwardedWithTwoOrMoreTenderers
    */
    @Test(timeout = 60000)
    public void test_41_getOnPercentTendersAwardedWithTwoOrMoreTenderersReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/percentTendersAwardedWithTwoOrMoreTenderers?" + 
                    "notBidTypeId=AlfyEEZWqpW&notBidTypeId=&notBidTypeId=UM&" + 
                    "procuringEntityId=Ezwi4g3df&procuringEntityId=x&procuringEntityId=QNygh3UTXK&procuringEntityId=pX5&procuringEntityId=e4GajbogWVN4RCg&" + 
                    "supplierId=NL900&supplierId=dS2dKn9soOYLNI&supplierId=9KOxfdUJA&supplierId=Q0x55kz6jcOq8j9D&supplierId=QMDqAfh&" + 
                    "notBidSelectionMethod=qN6ZRebT6k7Qph&notBidSelectionMethod=QCYk1TGPiOAA&notBidSelectionMethod=trGhHmomvVoon&" + 
                    "planningLoc=WKbRoFZ&planningLoc=dK1&planningLoc=yHOAEH4H2bcRCnt&planningLoc=dbxR7AAyrMOHFNOr&planningLoc=Bb6ZLZp3&" + 
                    "tenderLoc=Rd&tenderLoc=XlshQzCS2Y&" + 
                    "procuringEntityGroupId=19&procuringEntityGroupId=303&" + 
                    "pageNumber=806&" + 
                    "maxTenderValue=0.2506865670531554&" + 
                    "maxAwardValue=0.5253896222242608&" + 
                    "skip=JdKDQ&" + 
                    "password=18lYg5x&" + 
                    "class=KTQwgl&" + 
                    "yearFilterPagingRequest=3hv&" + 
                    "username=KhNq0huqgSP")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/percentTendersAwardedWithTwoOrMoreTenderers
    */
    @Test(timeout = 60000)
    public void test_42_getOnPercentTendersAwardedWithTwoOrMoreTenderersReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/percentTendersAwardedWithTwoOrMoreTenderers?" + 
                    "notBidTypeId=AlfyEEZWqpW&notBidTypeId=&notBidTypeId=UM&" + 
                    "procuringEntityId=Ezwi4g3df&procuringEntityId=x&procuringEntityId=QNygh3UTXK&procuringEntityId=pX5&procuringEntityId=e4GajbogWVN4RCg&" + 
                    "supplierId=NL900&supplierId=dS2dKn9soOYLNI&supplierId=9KOxfdUJA&supplierId=Q0x55kz6jcOq8j9D&supplierId=QMDqAfh&" + 
                    "planningLoc=WKbRoFZ&planningLoc=dK1&planningLoc=yHOAEH4H2bcRCnt&planningLoc=dbxR7AAyrMOHFNOr&planningLoc=Bb6ZLZp3&" + 
                    "tenderLoc=Rd&tenderLoc=XlshQzCS2Y&" + 
                    "procuringEntityGroupId=19&procuringEntityGroupId=303&" + 
                    "pageNumber=806&" + 
                    "maxAwardValue=0.5253896222242608&" + 
                    "EMextraParam123=42&" + 
                    "password=18lYg5x&" + 
                    "yearFilterPagingRequest=3hv")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/percentTendersCancelled
    */
    @Test(timeout = 60000)
    public void test_43_getOnPercentTendersCancelledReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/percentTendersCancelled?" + 
                    "bidSelectionMethod=&" + 
                    "notBidSelectionMethod=_EM_18823_XYZ_&notBidSelectionMethod=_EM_18824_XYZ_&notBidSelectionMethod=aF&notBidSelectionMethod=_EM_18825_XYZ_&notBidSelectionMethod=W_V3tLt3zT&" + 
                    "contrMethod=&" + 
                    "procurementMethod=X6UEChdGaqj7TNR&procurementMethod=_EM_18828_XYZ_&" + 
                    "procuringEntityGroupId=&" + 
                    "pageNumber=780&" + 
                    "minTenderValue=0.5137530015328924&" + 
                    "maxTenderValue=0.8710601217297456&" + 
                    "electronicSubmission=false&" + 
                    "monthly=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/percentTendersUsingEBid
    */
    @Test(timeout = 60000)
    public void test_44_getOnApiPercentTendersUsingEBidWithQueryParamsElectronicSubmission() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/percentTendersUsingEBid?" + 
                    "bidTypeId=RIGGING&bidTypeId=tzoMN&bidTypeId=RIGGING&" + 
                    "bidSelectionMethod=&" + 
                    "procuringEntityCityId=_EM_56855_XYZ_&procuringEntityCityId=WIlEtAm0sbt&procuringEntityCityId=_EM_56856_XYZ_&procuringEntityCityId=2gH&procuringEntityCityId=JDZr6B8&" + 
                    "procuringEntityDepartmentId=&" + 
                    "pageSize=386&" + 
                    "minTenderValue=0.06537941426344851&" + 
                    "maxAwardValue=0.5033499554972466&" + 
                    "electronicSubmission=true&" + 
                    "monthly=true&" + 
                    "EMextraParam123=42&" + 
                    "yearFilterPagingRequest=_EM_56857_XYZ_&" + 
                    "password=Twm1i1MQt5k4BV&" + 
                    "username=_EM_56858_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/percentTendersUsingEBid
    */
    @Test(timeout = 60000)
    public void test_45_getOnPercentTendersUsingEBidReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/percentTendersUsingEBid?" + 
                    "notProcuringEntityId=YEaVts6m7a&notProcuringEntityId=G&notProcuringEntityId=pC&" + 
                    "supplierId=hht3ygY&supplierId=_EM_50594_XYZ_&supplierId=_EM_50595_XYZ_&supplierId=IgscnwtK6dQXIMv7&supplierId=_EM_50596_XYZ_&" + 
                    "bidSelectionMethod=_EM_50597_XYZ_&bidSelectionMethod=_EM_50598_XYZ_&bidSelectionMethod=oP1VSb17aJmkt&bidSelectionMethod=_EM_50599_XYZ_&bidSelectionMethod=ZgcXnkx2j5s&" + 
                    "notBidSelectionMethod=C&notBidSelectionMethod=_EM_50600_XYZ_&notBidSelectionMethod=ysEke&" + 
                    "planningLoc=7H40N4wuccr&planningLoc=_EM_50604_XYZ_&" + 
                    "procurementMethod=diBcHLHg&procurementMethod=FGY4_5Dh1&procurementMethod=_EM_50605_XYZ_&procurementMethod=9NgeFBv1ns34dqb3&procurementMethod=_EM_50606_XYZ_&" + 
                    "procuringEntityCityId=_EM_50607_XYZ_&" + 
                    "procuringEntityDepartmentId=185&" + 
                    "pageNumber=603&" + 
                    "minTenderValue=0.6204493097916361&" + 
                    "maxTenderValue=0.8219811836945323&" + 
                    "electronicSubmission=false&" + 
                    "monthly=false&" + 
                    "skip=iZfiZcOw&" + 
                    "class=YFaVts6m7a&" + 
                    "yearFilterPagingRequest=e79lqqoNNhAU&" + 
                    "password=_EM_50608_XYZ_&" + 
                    "username=sI7lPQxrd1btu")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/percentTendersUsingEBid
    */
    @Test(timeout = 60000)
    public void test_46_getOnPercentTendersUsingEBidReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/percentTendersUsingEBid?" + 
                    "procuringEntityId=&" + 
                    "notProcuringEntityId=&" + 
                    "contrMethod=&" + 
                    "planningLoc=&planningLoc=6JTl7vXB1WBOn2&" + 
                    "tenderLoc=2uEJ7wXqoV_HaZs&tenderLoc=_EM_69888_XYZ_&tenderLoc=_EM_69889_XYZ_&tenderLoc=_EM_69890_XYZ_&tenderLoc=D4XMb65IlHd09&" + 
                    "procurementMethod=phyi6BjUJ&procurementMethod=IGujk&" + 
                    "procuringEntityDepartmentId=90&procuringEntityDepartmentId=877&procuringEntityDepartmentId=755&procuringEntityDepartmentId=703&" + 
                    "month=&" + 
                    "pageSize=237&" + 
                    "maxTenderValue=0.4326212463965081&" + 
                    "electronicSubmission=false&" + 
                    "skip=356VY_awx&" + 
                    "username=5K93nkEsMaN")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/percentTendersUsingEBid
    */
    @Test(timeout = 60000)
    public void test_47_getOnPercentTendersUsingEBidReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_36651_XYZ_")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/percentTendersUsingEBid?" + 
                    "notProcuringEntityId=YFaVts6m7a&notProcuringEntityId=G&notProcuringEntityId=pC6&" + 
                    "supplierId=hht3ygY&supplierId=_EM_50594_XYZ_&supplierId=_EM_50595_XYZ_&supplierId=IgscnwtK6dQXIMv7&supplierId=_EM_50596_XYZ_&" + 
                    "bidSelectionMethod=_EM_50597_XYZ_&bidSelectionMethod=_EM_50598_XYZ_&bidSelectionMethod=oP1VSb17aJmkt&bidSelectionMethod=_EM_50599_XYZ_&bidSelectionMethod=ZgcXnkx2j5s&" + 
                    "notBidSelectionMethod=C&notBidSelectionMethod=_EM_50600_XYZ_&notBidSelectionMethod=ysEke&" + 
                    "planningLoc=7H40N4wuccr&planningLoc=_EM_50604_XYZ_&" + 
                    "procurementMethod=diBcHLHg&procurementMethod=FGY4_5Dh1&procurementMethod=_EM_50605_XYZ_&procurementMethod=9NgeFBv1ns34dqb3&procurementMethod=_EM_50606_XYZ_&" + 
                    "procuringEntityCityId=_EM_50607_XYZ_&" + 
                    "procuringEntityDepartmentId=185&" + 
                    "pageNumber=603&" + 
                    "minTenderValue=0.6204493097916361&" + 
                    "maxTenderValue=0.8219811836945323&" + 
                    "electronicSubmission=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/percentTendersWithTwoOrMoreTenderers
    */
    @Test(timeout = 60000)
    public void test_48_getOnPercentTendersWithTwoOrMoreTenderersReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/percentTendersWithTwoOrMoreTenderers?" + 
                    "bidTypeId=kiV&bidTypeId=GN5SoBIe&" + 
                    "notProcuringEntityId=&" + 
                    "supplierId=6lzief&supplierId=_EM_40699_XYZ_&" + 
                    "bidSelectionMethod=_EM_40700_XYZ_&" + 
                    "notBidSelectionMethod=_EM_40701_XYZ_&notBidSelectionMethod=6xPyjw4XS8u&notBidSelectionMethod=_EM_40702_XYZ_&notBidSelectionMethod=8Euresu&notBidSelectionMethod=_EM_40703_XYZ_&" + 
                    "planningLoc=_EM_40704_XYZ_&planningLoc=_EM_40705_XYZ_&planningLoc=_EM_40706_XYZ_&planningLoc=mqX4PzvtCS&" + 
                    "tenderLoc=8HWZBmRzd2ULb6&tenderLoc=_EM_40707_XYZ_&" + 
                    "procuringEntityCityId=BqYGqjbLJNPQdt&procuringEntityCityId=azH2O&procuringEntityCityId=l6hsMurGVc46gOk&procuringEntityCityId=_EM_40708_XYZ_&" + 
                    "procuringEntityGroupId=507&procuringEntityGroupId=38&procuringEntityGroupId=844&procuringEntityGroupId=46&procuringEntityGroupId=114&" + 
                    "month=&" + 
                    "pageSize=319&" + 
                    "maxTenderValue=0.3872042313286&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "skip=_EM_40709_XYZ_&" + 
                    "password=kiFoCqR&" + 
                    "class=_EM_40710_XYZ_&" + 
                    "yearFilterPagingRequest=_EM_40711_XYZ_&" + 
                    "username=H54XsXauFi1hWd")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/percentTendersWithTwoOrMoreTenderers
    */
    @Test(timeout = 60000)
    public void test_49_getOnApiPercentTendersWithTwoOrMoreTenderersWithQueryParamsAndMonthly() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/percentTendersWithTwoOrMoreTenderers?" + 
                    "procuringEntityId=&" + 
                    "bidSelectionMethod=&" + 
                    "contrMethod=&" + 
                    "planningLoc=&" + 
                    "procurementMethod=&" + 
                    "procuringEntityGroupId=686&procuringEntityGroupId=750&procuringEntityGroupId=141&procuringEntityGroupId=820&procuringEntityGroupId=523&" + 
                    "pageNumber=280&" + 
                    "minTenderValue=0.2578117639438753&" + 
                    "maxAwardValue=0.4566336237899009&" + 
                    "electronicSubmission=true&" + 
                    "monthly=true&" + 
                    "skip=1rc7iH&" + 
                    "username=_EM_61931_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/percentTendersWithTwoOrMoreTenderers
    */
    @Test(timeout = 60000)
    public void test_50_getOnPercentTendersWithTwoOrMoreTenderersReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/percentTendersWithTwoOrMoreTenderers?" + 
                    "bidTypeId=kiV&bidTypeId=GN5SoBIe&" + 
                    "notProcuringEntityId=&" + 
                    "bidSelectionMethod=_EM_40700_XYZ_&" + 
                    "planningLoc=_EM_40704_XYZ_&planningLoc=_EM_40705_XYZ_&planningLoc=_EM_40706_XYZ_&planningLoc=mqX4PzvtCS&" + 
                    "tenderLoc=8HWZBmRzd2ULb6&tenderLoc=_EM_40707_XYZ_&" + 
                    "procuringEntityGroupId=507&procuringEntityGroupId=38&procuringEntityGroupId=844&procuringEntityGroupId=46&procuringEntityGroupId=114&" + 
                    "month=&" + 
                    "pageSize=319&" + 
                    "minTenderValue=0.7544546087820871&" + 
                    "maxTenderValue=0.3872042313285694&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "password=kiFoCqR&" + 
                    "username=H54XsXauFi1hWd")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/percentTendersWithTwoOrMoreTenderers
    */
    @Test(timeout = 60000)
    public void test_51_getOnPercentTendersWithTwoOrMoreTenderersReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/percentTendersWithTwoOrMoreTenderers?" + 
                    "bidTypeId=kiV&bidTypeId=GN5SoBIe&" + 
                    "notProcuringEntityId=&" + 
                    "bidSelectionMethod=_EM_40700_XYZ_&" + 
                    "planningLoc=_EM_40704_XYZ_&planningLoc=_EM_40705_XYZ_&planningLoc=_EM_40706_XYZ_&planningLoc=mqX4PzvtCS&" + 
                    "tenderLoc=8HWZBmRzd2ULb6&tenderLoc=_EM_40707_XYZ_&" + 
                    "procuringEntityCityId=BqYGqjbLJNPQdt&procuringEntityCityId=azH2O&procuringEntityCityId=l6hsMurGVc46gOk&procuringEntityCityId=_EM_40708_XYZ_&" + 
                    "procuringEntityGroupId=507&procuringEntityGroupId=38&procuringEntityGroupId=844&procuringEntityGroupId=46&procuringEntityGroupId=114&" + 
                    "month=&" + 
                    "pageSize=319&" + 
                    "minTenderValue=0.7544546087820871&" + 
                    "maxTenderValue=0.3872042313285694&" + 
                    "monthly=false&" + 
                    "skip=_EM_40709_XYZ_&" + 
                    "password=kiFoCqR&" + 
                    "class=_EM_40710_XYZ_&" + 
                    "yearFilterPagingRequest=_EM_40711_XYZ_&" + 
                    "username=H54XsXauFi1hWd")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/percentTotalProjectsEligibleByYear
    */
    @Test(timeout = 60000)
    public void test_52_getOnPercentTotalProjectsEligibleByYearReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/percentTotalProjectsEligibleByYear?" + 
                    "procuringEntityId=&" + 
                    "notProcuringEntityId=AU&notProcuringEntityId=OXrOK7CrOD&notProcuringEntityId=_EM_61473_XYZ_&notProcuringEntityId=Lw8vkQ6ck26viodI&" + 
                    "supplierId=_EM_61474_XYZ_&supplierId=_EM_61475_XYZ_&" + 
                    "notBidSelectionMethod=&" + 
                    "planningLoc=&" + 
                    "procurementMethod=v&procurementMethod=_EM_61479_XYZ_&procurementMethod=_EM_61480_XYZ_&procurementMethod=_EM_61481_XYZ_&procurementMethod=jS1&" + 
                    "procuringEntityDepartmentId=774&procuringEntityDepartmentId=423&procuringEntityDepartmentId=959&" + 
                    "month=469524742&" + 
                    "pageSize=998&" + 
                    "minTenderValue=0.3725485730858894&" + 
                    "minAwardValue=0.9305422023467562&" + 
                    "maxAwardValue=0.04304700598115574&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "class=l6A1&" + 
                    "yearFilterPagingRequest=Da1tKk")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/percentTotalProjectsEligibleByYear
    */
    @Test(timeout = 60000)
    public void test_53_getOnApiPercentTotalProjectsEligibleByYearWithQueryParamsAndFlagged() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/percentTotalProjectsEligibleByYear?" + 
                    "procuringEntityId=9QVFsHer2W1&procuringEntityId=_fOrL5bq&procuringEntityId=Yu&procuringEntityId=mO&" + 
                    "notProcuringEntityId=BzWm6w4LGCFQ&" + 
                    "bidSelectionMethod=ku7D&bidSelectionMethod=&bidSelectionMethod=1R&bidSelectionMethod=Kx96T9nzuV&bidSelectionMethod=NDLtLEcRYWUNL&" + 
                    "notBidSelectionMethod=bJkpkQMeFwUHgeGF&notBidSelectionMethod=0W3G1ZrSwMk6cK&notBidSelectionMethod=x1oQ&notBidSelectionMethod=NjG7Ht4SS8Wf&" + 
                    "month=302&month=205&month=819&" + 
                    "pageNumber=442&" + 
                    "pageSize=100&" + 
                    "maxTenderValue=0.9277799478653785&" + 
                    "minAwardValue=0.3903593944595646&" + 
                    "maxAwardValue=0.6227034271974875&" + 
                    "electronicSubmission=true&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "skip=PJHzd9Bj8&" + 
                    "password=up8GxZ8fFmFUSJ&" + 
                    "class=dH")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/percentTotalProjectsEligibleByYear
    */
    @Test(timeout = 60000)
    public void test_54_getOnPercentTotalProjectsEligibleByYearReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/percentTotalProjectsEligibleByYear?" + 
                    "bidTypeId=COLLUSION&" + 
                    "notBidTypeId=_EM_63957_XYZ_&notBidTypeId=JY&notBidTypeId=FRAUD&notBidTypeId=FRAUD&notBidTypeId=_EM_63958_XYZ_&" + 
                    "contrMethod=&" + 
                    "tenderLoc=_EM_63966_XYZ_&tenderLoc=_EM_63967_XYZ_&tenderLoc=vC06Am&tenderLoc=_EM_63968_XYZ_&tenderLoc=aL7FAC0Lz&" + 
                    "procurementMethod=YJwiWz&procurementMethod=_EM_63969_XYZ_&procurementMethod=Lc9UrO0ZU&procurementMethod=OyXcpVXz&procurementMethod=_EM_63970_XYZ_&" + 
                    "procuringEntityCityId=&" + 
                    "year=705&year=611&year=447&" + 
                    "pageNumber=246&" + 
                    "pageSize=401&" + 
                    "minTenderValue=0.4202012734854902&" + 
                    "maxTenderValue=0.8239980088681816&" + 
                    "minAwardValue=0.559344572830468&" + 
                    "flagged=false&" + 
                    "skip=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/percentTotalProjectsEligibleByYear
    */
    @Test(timeout = 60000)
    public void test_55_getOnPercentTotalProjectsEligibleByYearReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/percentTotalProjectsEligibleByYear?" + 
                    "supplierId=_EM_59804_XYZ_&supplierId=EzUPy3rGrwZ&supplierId=aAFbQZdg&supplierId=KRicUD3UpnPwR0d&supplierId=FKpPCC&" + 
                    "planningLoc=&" + 
                    "procurementMethod=&" + 
                    "procuringEntityCityId=_EM_59809_XYZ_&procuringEntityCityId=_EM_59810_XYZ_&procuringEntityCityId=_EM_59811_XYZ_&procuringEntityCityId=kaYzJWqAeX2s&procuringEntityCityId=br6&" + 
                    "procuringEntityDepartmentId=715&" + 
                    "procuringEntityGroupId=691&" + 
                    "year=402&year=809&" + 
                    "minTenderValue=0.18068839363408928&" + 
                    "maxTenderValue=0.14780080033978427&" + 
                    "maxAwardValue=0.6675550500936135&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "skip=_EM_59814_XYZ_&" + 
                    "password=_EM_59815_XYZ_&" + 
                    "yearFilterPagingRequest=FlvqGc&" + 
                    "username=_EM_59817_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/percentTotalProjectsEligibleByYear
    */
    @Test(timeout = 60000)
    public void test_56_getOnApiPercentTotalProjectsEligibleByYearWithQueryParamsFlagged() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/percentTotalProjectsEligibleByYear?" + 
                    "bidTypeId=Rx&bidTypeId=_EM_16225_XYZ_&bidTypeId=FRAUD&" + 
                    "procuringEntityId=tNQGeqgwy&procuringEntityId=_EM_16226_XYZ_&" + 
                    "notProcuringEntityId=&" + 
                    "supplierId=&" + 
                    "bidSelectionMethod=&" + 
                    "planningLoc=fv6zy&planningLoc=&planningLoc=i1uI6bN0xARtCx&" + 
                    "tenderLoc=71e&" + 
                    "procurementMethod=&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityGroupId=142&procuringEntityGroupId=795&procuringEntityGroupId=296&procuringEntityGroupId=108&procuringEntityGroupId=1011578212&" + 
                    "month=417&month=225&month=697&" + 
                    "pageSize=858&" + 
                    "maxTenderValue=0.12453434887393267&" + 
                    "maxAwardValue=0.017170875113528217&" + 
                    "flagged=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/percentTotalProjectsEligibleByYear
    */
    @Test(timeout = 60000)
    public void test_57_getOnPercentTotalProjectsEligibleByYearReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/percentTotalProjectsEligibleByYear?" + 
                    "notProcuringEntityId=ew&notProcuringEntityId=_EM_80813_XYZ_&notProcuringEntityId=Xf3eK&notProcuringEntityId=xP61ySgmX5Qfz5KI&" + 
                    "bidSelectionMethod=sdd1wUv3jjc&bidSelectionMethod=ancjMtuXJLU&bidSelectionMethod=_EM_89866_XYZ_&bidSelectionMethod=_EM_89867_XYZ_&bidSelectionMethod=niI3&" + 
                    "notBidSelectionMethod=_EM_80815_XYZ_&notBidSelectionMethod=_EM_80816_XYZ_&" + 
                    "contrMethod=BC552Bde9efb86aE4ABaC07F&" + 
                    "planningLoc=nxL_xm0u&planningLoc=bDc_uvoI7pgG1V&planningLoc=lL&planningLoc=_EM_80818_XYZ_&" + 
                    "procurementMethod=&" + 
                    "procuringEntityCityId=8B7vyFX7Q04fAHh&procuringEntityCityId=1Lfuq26rPDk&procuringEntityCityId=_EM_80819_XYZ_&procuringEntityCityId=pmOUKO0uyi&procuringEntityCityId=coztu57&" + 
                    "year=502&" + 
                    "month=583&month=537&month=961&month=350&month=486&" + 
                    "pageNumber=427&" + 
                    "maxTenderValue=0.6613167445815784&" + 
                    "maxAwardValue=0.2879997891704833&" + 
                    "monthly=false&" + 
                    "skip=JGnbGkXhv&" + 
                    "class=yTrqu&" + 
                    "yearFilterPagingRequest=_EM_89873_XYZ_&" + 
                    "username=_EM_80821_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/percentTotalProjectsEligibleByYear
    */
    @Test(timeout = 60000)
    public void test_58_getOnPercentTotalProjectsEligibleByYearReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/percentTotalProjectsEligibleByYear?" + 
                    "notBidTypeId=meiBKs8InFS&notBidTypeId=_EM_66581_XYZ_&notBidTypeId=_EM_66582_XYZ_&notBidTypeId=LkQC_vLqbh&notBidTypeId=_EM_66583_XYZ_&" + 
                    "notProcuringEntityId=t1wihR&" + 
                    "bidSelectionMethod=TJy8Pu5M&bidSelectionMethod=&bidSelectionMethod=9he&" + 
                    "notBidSelectionMethod=bKVu52P2Mh&notBidSelectionMethod=X0lXZ3e96qeCdqpg&notBidSelectionMethod=1lUwmj4lh3WjmjM&notBidSelectionMethod=ROq03EY&" + 
                    "procurementMethod=_EM_66587_XYZ_&procurementMethod=&procurementMethod=_EM_66588_XYZ_&procurementMethod=_EM_66589_XYZ_&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityDepartmentId=776&procuringEntityDepartmentId=-1294824250&procuringEntityDepartmentId=656&procuringEntityDepartmentId=403&procuringEntityDepartmentId=67&" + 
                    "procuringEntityGroupId=190&procuringEntityGroupId=611&procuringEntityGroupId=501&" + 
                    "year=900&year=-544794213&year=258&" + 
                    "maxTenderValue=0.32598063639626496&" + 
                    "minAwardValue=0.679472502036087&" + 
                    "skip=&" + 
                    "password=dBIq2&" + 
                    "class=8b8k32Bq0bIqxp&" + 
                    "username=_EM_66592_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/percentTotalProjectsFlaggedByYear
    */
    @Test(timeout = 60000)
    public void test_59_getOnPercentTotalProjectsFlaggedByYearReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/percentTotalProjectsFlaggedByYear?" + 
                    "notBidTypeId=RIGGING&notBidTypeId=_EM_18902_XYZ_&notBidTypeId=lkFgm4GOdZjhP8&notBidTypeId=_EM_18903_XYZ_&" + 
                    "notProcuringEntityId=&" + 
                    "bidSelectionMethod=&" + 
                    "planningLoc=Ymmn_BGVDlIn&" + 
                    "procurementMethod=&" + 
                    "procuringEntityDepartmentId=494&procuringEntityDepartmentId=350&procuringEntityDepartmentId=22&procuringEntityDepartmentId=387&procuringEntityDepartmentId=317&" + 
                    "procuringEntityGroupId=404&procuringEntityGroupId=702&procuringEntityGroupId=742&procuringEntityGroupId=53&" + 
                    "year=441&year=487&year=154&" + 
                    "month=919&month=547&month=230&" + 
                    "pageNumber=373&" + 
                    "pageSize=661&" + 
                    "maxTenderValue=0.4871962641472438&" + 
                    "minAwardValue=0.09931711209679361&" + 
                    "monthly=false&" + 
                    "EMextraParam123=_EM_18910_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/percentTotalProjectsFlaggedByYear
    */
    @Test(timeout = 60000)
    public void test_60_getOnPercentTotalProjectsFlaggedByYearReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/percentTotalProjectsFlaggedByYear?" + 
                    "procuringEntityId=KrnKRBCeBYH3bM&procuringEntityId=JrtCA9zOd4&procuringEntityId=IxgzLWkfl197&procuringEntityId=FIB82_&procuringEntityId=z_yowXqK&" + 
                    "notProcuringEntityId=&" + 
                    "supplierId=Wv0DP&supplierId=_EM_71779_XYZ_&" + 
                    "contrMethod=&" + 
                    "planningLoc=&planningLoc=KggvrNOaeb&planningLoc=_EM_71782_XYZ_&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=&" + 
                    "procuringEntityDepartmentId=7&procuringEntityDepartmentId=522&procuringEntityDepartmentId=576&" + 
                    "pageSize=836&" + 
                    "minTenderValue=0.6038865323716428&" + 
                    "minAwardValue=0.5038587903311191&" + 
                    "electronicSubmission=true&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "yearFilterPagingRequest=_EM_71788_XYZ_&" + 
                    "username=bu8azp")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/percentTotalProjectsFlaggedByYear
    */
    @Test(timeout = 60000)
    public void test_61_getOnPercentTotalProjectsFlaggedByYearReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/percentTotalProjectsFlaggedByYear?" + 
                    "bidTypeId=&" + 
                    "notBidTypeId=aYH9KFLGUn2A&" + 
                    "notProcuringEntityId=WwneTR4Xc&notProcuringEntityId=inz6lnz&" + 
                    "tenderLoc=YQ9E9f5EyL5IC&tenderLoc=eo1zKD7lyQHw9ud&" + 
                    "procurementMethod=TgnZBWRO&" + 
                    "procuringEntityCityId=4sK6gilg&procuringEntityCityId=j7xzHJVrrJq&procuringEntityCityId=RVSshn0xcdpn5gyT&procuringEntityCityId=uWYUNqiLeAMFObZ&" + 
                    "pageNumber=231&" + 
                    "minTenderValue=0.36632817990834954&" + 
                    "minAwardValue=0.030747160590908873&" + 
                    "maxAwardValue=0.18189417889967896&" + 
                    "electronicSubmission=true&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "EMextraParam123=_EM_18910_XYZ_&" + 
                    "class=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/percentTotalProjectsFlaggedByYear
    */
    @Test(timeout = 60000)
    public void test_62_getOnPercentTotalProjectsFlaggedByYearReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_46726_XYZ_")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/percentTotalProjectsFlaggedByYear?" + 
                    "bidTypeId=&" + 
                    "notBidTypeId=FRAUD&notBidTypeId=p0EmVMXZWCxK0&notBidTypeId=HHTapxwsWVD_YV_h&notBidTypeId=UXzYVc6&" + 
                    "notProcuringEntityId=jfg2Y1lOd&notProcuringEntityId=TNUDD_VGnMqKqJ&notProcuringEntityId=WU6sSIu6&" + 
                    "bidSelectionMethod=&" + 
                    "notBidSelectionMethod=eC5PS_23ivoUmi&" + 
                    "tenderLoc=_EM_46722_XYZ_&tenderLoc=_EM_46723_XYZ_&tenderLoc=zFe&tenderLoc=&" + 
                    "procurementMethod=Z4i&" + 
                    "procuringEntityGroupId=61&procuringEntityGroupId=851&procuringEntityGroupId=297&procuringEntityGroupId=-575780737&procuringEntityGroupId=441&" + 
                    "maxTenderValue=0.9549739314148477&" + 
                    "maxAwardValue=0.6692193583685139&" + 
                    "electronicSubmission=false&" + 
                    "monthly=false&" + 
                    "skip=n6pzfUygwzpfGHup&" + 
                    "password=PC3aatmChxbJWHb&" + 
                    "class=_EM_46727_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/percentTotalProjectsFlaggedByYear
    */
    @Test(timeout = 60000)
    public void test_63_getOnPercentTotalProjectsFlaggedByYearReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/percentTotalProjectsFlaggedByYear?" + 
                    "procuringEntityId=_EM_76529_XYZ_&procuringEntityId=SY9zsjKeWopob&procuringEntityId=_EM_76530_XYZ_&procuringEntityId=b3R1R63BuBhL&procuringEntityId=_EM_76531_XYZ_&" + 
                    "notProcuringEntityId=BZ&notProcuringEntityId=_EM_76532_XYZ_&notProcuringEntityId=_EM_76533_XYZ_&" + 
                    "supplierId=lurY8f7gn&supplierId=2x&supplierId=TfwocAlLqNk23U7U&supplierId=Mjq03JQNKYZ8&supplierId=gTDHaV53emeeR&" + 
                    "bidSelectionMethod=&" + 
                    "planningLoc=a7uhdb8pTSgrwdZ&planningLoc=SL2ffqKacdVces_&planningLoc=KYLAkmPAa&planningLoc=_EM_76536_XYZ_&" + 
                    "procuringEntityDepartmentId=2&procuringEntityDepartmentId=2&" + 
                    "month=55&month=-697871830&month=935&" + 
                    "pageNumber=161&" + 
                    "pageSize=571&" + 
                    "flagged=false&" + 
                    "yearFilterPagingRequest=dNv2p4VROSotxY")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/plannedFundingByLocation
    */
    @Test(timeout = 60000)
    public void test_64_getOnPlannedFundingByLocationReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_10217_XYZ_")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/plannedFundingByLocation?" + 
                    "notBidSelectionMethod=&" + 
                    "procurementMethod=N&" + 
                    "procuringEntityGroupId=581&procuringEntityGroupId=292&procuringEntityGroupId=929&procuringEntityGroupId=268&procuringEntityGroupId=281&" + 
                    "pageNumber=899&" + 
                    "pageSize=902&" + 
                    "maxAwardValue=0.6060554358217014&" + 
                    "electronicSubmission=true&" + 
                    "monthly=false&" + 
                    "EMextraParam123=42&" + 
                    "skip=dZ1OzZ62bs&" + 
                    "password=_EM_45681_XYZ_&" + 
                    "class=1")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/plannedFundingByLocation
    */
    @Test(timeout = 60000)
    public void test_65_getOnApiPlannedFundingByLocationWithQueryParamsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/plannedFundingByLocation?" + 
                    "supplierId=Ye&supplierId=L&" + 
                    "bidSelectionMethod=_EM_36037_XYZ_&bidSelectionMethod=_wXQA&" + 
                    "notBidSelectionMethod=_EM_36038_XYZ_&notBidSelectionMethod=_EM_36039_XYZ_&notBidSelectionMethod=_EM_36040_XYZ_&" + 
                    "procuringEntityGroupId=715&procuringEntityGroupId=869&procuringEntityGroupId=980&procuringEntityGroupId=843&procuringEntityGroupId=556&" + 
                    "minAwardValue=0.2803692210264518&" + 
                    "maxAwardValue=0.043929508989290156&" + 
                    "flagged=false&" + 
                    "EMextraParam123=42&" + 
                    "yearFilterPagingRequest=1zkJniNFkq")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/plannedFundingByLocation
    */
    @Test(timeout = 60000)
    public void test_66_getOnPlannedFundingByLocationReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/plannedFundingByLocation?" + 
                    "bidSelectionMethod=&" + 
                    "notBidSelectionMethod=SYDbplt4I&notBidSelectionMethod=kB&" + 
                    "planningLoc=CnwL6OhYvysFIqP&planningLoc=&planningLoc=W9e_6byq00iSRm&planningLoc=n2EHj_UmQv&" + 
                    "procuringEntityCityId=qbUjoIcNIB47P4&procuringEntityCityId=d1v8ZHzfvUYxDI&procuringEntityCityId=GZpxtURbiC&" + 
                    "procuringEntityGroupId=362&" + 
                    "pageSize=104&" + 
                    "maxTenderValue=0.3873890385369597&" + 
                    "electronicSubmission=true&" + 
                    "flagged=true&" + 
                    "EMextraParam123=42&" + 
                    "skip=85_Z71Vrbkxm&" + 
                    "password=gy&" + 
                    "class=ByVd9T7uSeFm&" + 
                    "yearFilterPagingRequest=knG6qsWgImxt")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/plannedFundingByLocation
    */
    @Test(timeout = 60000)
    public void test_67_getOnPlannedFundingByLocationReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/plannedFundingByLocation?" + 
                    "notBidSelectionMethod=_EM_7646_XYZ_&notBidSelectionMethod=chC1c&" + 
                    "contrMethod=1en&" + 
                    "planningLoc=VhdpMpXNSrs&" + 
                    "procurementMethod=_EM_7649_XYZ_&procurementMethod=_EM_7650_XYZ_&procurementMethod=_EM_7651_XYZ_&" + 
                    "procuringEntityDepartmentId=725&" + 
                    "procuringEntityGroupId=&" + 
                    "pageSize=836&" + 
                    "minAwardValue=0.06396906968302873&" + 
                    "maxAwardValue=0.9146269822640231&" + 
                    "electronicSubmission=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/planningByLocation
    */
    @Test(timeout = 60000)
    public void test_68_getOnPlanningByLocationReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/planningByLocation?" + 
                    "bidTypeId=2CLAqKV&bidTypeId=bLHhgRYs3pa8o9RG&" + 
                    "notBidTypeId=&" + 
                    "notProcuringEntityId=PhmrhKct&notProcuringEntityId=JOTn1dQ2qaFjEo5&notProcuringEntityId=JlSYaURJtiI55pjv&notProcuringEntityId=lO&" + 
                    "bidSelectionMethod=_EM_88360_XYZ_&bidSelectionMethod=C7KIvlYUh&" + 
                    "notBidSelectionMethod=hd5JWVSpPe9rNR&notBidSelectionMethod=_EM_88359_XYZ_&" + 
                    "planningLoc=_8EmDw81r23gae&planningLoc=cgNPz5&" + 
                    "tenderLoc=g8mM&" + 
                    "procurementMethod=fSxc3juOw50VN&" + 
                    "procuringEntityCityId=rWJLL&procuringEntityCityId=d9xo25dfPCX&procuringEntityCityId=&procuringEntityCityId=_I7ZdkkkCdJI&procuringEntityCityId=JHw1pt&" + 
                    "month=2&" + 
                    "pageSize=788&" + 
                    "minTenderValue=0.41786209658353524&" + 
                    "minAwardValue=0.25902543857988&" + 
                    "flagged=false&" + 
                    "skip=KNOT3xwGHxV3eX&" + 
                    "password=RBu7Ri&" + 
                    "class=K_4K5XhOOYC&" + 
                    "yearFilterPagingRequest=rh7uJOKoOQgphYf&" + 
                    "username=_EM_88361_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/planningByLocation
    */
    @Test(timeout = 60000)
    public void test_69_getOnPlanningByLocationReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/planningByLocation?" + 
                    "bidTypeId=2CLAqKV&bidTypeId=bLHhgRYs3pa8o9RG&" + 
                    "notBidTypeId=&" + 
                    "notProcuringEntityId=PhmrhKct&notProcuringEntityId=JOTn1dQ2qaFjEo5&notProcuringEntityId=JlSYaURJtiI55pjv&notProcuringEntityId=lO&" + 
                    "bidSelectionMethod=_EM_88360_XYZ_&bidSelectionMethod=C7KIvlYUh&" + 
                    "notBidSelectionMethod=hd5JWVSpPe9rNR&notBidSelectionMethod=_EM_88359_XYZ_&" + 
                    "planningLoc=_8EmDw81r23gae&planningLoc=cgNPz5&" + 
                    "tenderLoc=g8mM&" + 
                    "procurementMethod=fSxc3juOw50VN&" + 
                    "procuringEntityCityId=rWJLL&procuringEntityCityId=d9xo25dfPCX&procuringEntityCityId=&procuringEntityCityId=_I7ZdkkkCdJI&procuringEntityCityId=JHw1pt&" + 
                    "pageSize=788&" + 
                    "minTenderValue=0.41786209658353524&" + 
                    "minAwardValue=0.25902543857988&" + 
                    "flagged=false&" + 
                    "skip=KNOT3xwGHxV3eX&" + 
                    "class=K_4K5XhOOYC&" + 
                    "yearFilterPagingRequest=rh7uJOKoOQgphYf&" + 
                    "username=_EM_88361_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/planningByLocation
    */
    @Test(timeout = 60000)
    public void test_70_getOnPlanningByLocationReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/planningByLocation?" + 
                    "bidTypeId=2CLAqKV&bidTypeId=bLHhgRYs3pa8o9RG&" + 
                    "notBidTypeId=&" + 
                    "notProcuringEntityId=PhmrhKct&notProcuringEntityId=JOTn1dQ2qaFjEo5&notProcuringEntityId=JlSYaURJtiI55pjv&notProcuringEntityId=lO&" + 
                    "bidSelectionMethod=_EM_88360_XYZ_&bidSelectionMethod=C7KIvlYUh&" + 
                    "notBidSelectionMethod=hd5JWVSpPe9rNR&notBidSelectionMethod=_EM_88359_XYZ_&" + 
                    "planningLoc=_8EmDw81r23gae&planningLoc=cgNPz5&" + 
                    "tenderLoc=g8mM&" + 
                    "procurementMethod=fSxc3juOw50VN&" + 
                    "procuringEntityCityId=rWJLL&procuringEntityCityId=d9xo25dfPCX&procuringEntityCityId=&procuringEntityCityId=_I7ZdkkkCdJI&procuringEntityCityId=JHw1pt&" + 
                    "month=2&" + 
                    "pageSize=788&" + 
                    "minTenderValue=0.41786209658353524&" + 
                    "minAwardValue=0.25902543857988&" + 
                    "flagged=false&" + 
                    "skip=KNOT3xwGHxV3eX&" + 
                    "class=K_4K5XhOOYC&" + 
                    "yearFilterPagingRequest=rh7uJOKoOQgphYf&" + 
                    "username=_EM_88361_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/qualityAverageAwardPeriod
    */
    @Test(timeout = 60000)
    public void test_71_getOnApiQualityAverageAwardPeriodWithQueryParamsElectronicSubmission() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/qualityAverageAwardPeriod?" + 
                    "procuringEntityId=rorj&procuringEntityId=r5&procuringEntityId=ln6d&procuringEntityId=M&procuringEntityId=xr5MvGgYnDoW&" + 
                    "notProcuringEntityId=&" + 
                    "bidSelectionMethod=lDx5gvHw3Qn&bidSelectionMethod=jXm0MQjcJW&bidSelectionMethod=nHBNqtr1&bidSelectionMethod=cJMgne0FUaiHHuP&bidSelectionMethod=7hK0wVn&" + 
                    "notBidSelectionMethod=U1PtF0lFjUqw&notBidSelectionMethod=Tef&notBidSelectionMethod=riwXlE&notBidSelectionMethod=B9v_r27iU&" + 
                    "planningLoc=M5YEIRxbVF&planningLoc=_EM_67783_XYZ_&planningLoc=37uk_VSPZAabhy&" + 
                    "procurementMethod=P67se&procurementMethod=SK_BLQ&procurementMethod=Q2NbK0ults1bBE&" + 
                    "procuringEntityCityId=t59L7PTh8dKdZt&procuringEntityCityId=0sacyCkrVl&procuringEntityCityId=V0h6&procuringEntityCityId=8BAwjmDx2ddFncs&" + 
                    "procuringEntityDepartmentId=702&procuringEntityDepartmentId=535&procuringEntityDepartmentId=799&procuringEntityDepartmentId=145&procuringEntityDepartmentId=450&" + 
                    "procuringEntityGroupId=899&procuringEntityGroupId=318&procuringEntityGroupId=992&" + 
                    "pageNumber=128&" + 
                    "electronicSubmission=true&" + 
                    "flagged=true&" + 
                    "defaultFilterPagingRequest=d2&" + 
                    "skip=_EM_67784_XYZ_&" + 
                    "password=YW1&" + 
                    "class=S3&" + 
                    "username=SU9I9fjMD7f")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/qualityAverageAwardPeriod
    */
    @Test(timeout = 60000)
    public void test_72_getOnQualityAverageAwardPeriodReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/qualityAverageAwardPeriod?" + 
                    "notProcuringEntityId=Os&notProcuringEntityId=R7LD6fANmOmD&" + 
                    "supplierId=_EM_7766_XYZ_&supplierId=_EM_7767_XYZ_&supplierId=_EM_7768_XYZ_&supplierId=_EM_7769_XYZ_&supplierId=&" + 
                    "bidSelectionMethod=DwCVjGaRSZJ7C76&bidSelectionMethod=kbPicoDFD&bidSelectionMethod=KU&bidSelectionMethod=7s4UgzpW7jovtn&" + 
                    "procuringEntityCityId=_EM_7774_XYZ_&" + 
                    "procuringEntityDepartmentId=212&procuringEntityDepartmentId=813&procuringEntityDepartmentId=516&procuringEntityDepartmentId=2002536552&" + 
                    "pageNumber=857&" + 
                    "minTenderValue=0.17821119943518327&" + 
                    "minAwardValue=0.7909317199135887&" + 
                    "maxAwardValue=0.7139101396641384&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "defaultFilterPagingRequest=ndxkj6x2&" + 
                    "skip=q8Tf&" + 
                    "class=4pjZ8Pi")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/qualityAverageAwardPeriod
    */
    @Test(timeout = 60000)
    public void test_73_getOnApiQualityAverageAwardPeriodWithQueryParamsEmptySkip() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/qualityAverageAwardPeriod?" + 
                    "bidTypeId=b&bidTypeId=jrkrL0fqxx&" + 
                    "notBidTypeId=KG&" + 
                    "notProcuringEntityId=1n1Z6&notProcuringEntityId=CibBb1Jt53DDwf&notProcuringEntityId=c6vYz5rJfVmuC9Qj&notProcuringEntityId=zWmRPgWh&notProcuringEntityId=aN4PjU&" + 
                    "notBidSelectionMethod=&" + 
                    "planningLoc=5NvoveqFxTnZCUS5&planningLoc=eiiuVOUsnV3LXd0&" + 
                    "procuringEntityDepartmentId=824&" + 
                    "procuringEntityGroupId=316&procuringEntityGroupId=338&procuringEntityGroupId=916&" + 
                    "pageNumber=177&" + 
                    "minAwardValue=0.3561401222444728&" + 
                    "maxAwardValue=0.035095670495660314&" + 
                    "EMextraParam123=_EM_10251_XYZ_&" + 
                    "skip=&" + 
                    "class=bm2wqqOhM0RPT&" + 
                    "username=kSZdHu")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/qualityAverageAwardPeriod
    */
    @Test(timeout = 60000)
    public void test_74_getOnQualityAverageAwardPeriodReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/qualityAverageAwardPeriod?" + 
                    "procuringEntityId=rorj&procuringEntityId=b5&procuringEntityId=ln6d&procuringEntityId=M&procuringEntityId=xr5MvGgYnDoW&" + 
                    "notBidSelectionMethod=U1PtF0lFjUqw&notBidSelectionMethod=Tef&notBidSelectionMethod=riwXlE&notBidSelectionMethod=B9v_r27iU&" + 
                    "tenderLoc=&" + 
                    "pageNumber=128&" + 
                    "pageSize=237&" + 
                    "minAwardValue=0.34490608485109564&" + 
                    "flagged=true&" + 
                    "EMextraParam123=_EM_10251_XYZ_&" + 
                    "password=YW1")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/qualityAverageTenderPeriod
    */
    @Test(timeout = 60000)
    public void test_75_getOnQualityAverageTenderPeriodReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_10268_XYZ_")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/qualityAverageTenderPeriod?" + 
                    "supplierId=_EM_58343_XYZ_&supplierId=_EM_58344_XYZ_&supplierId=_EM_58345_XYZ_&supplierId=Zeh9hQ1ZgjZ&" + 
                    "bidSelectionMethod=q3u&bidSelectionMethod=wIjfBwvbWHUruUO&bidSelectionMethod=_EM_58346_XYZ_&bidSelectionMethod=41kCelsJM52&bidSelectionMethod=zZN_i6_QjqfAOuy&" + 
                    "notBidSelectionMethod=RvYM8yNwo8L&notBidSelectionMethod=jA&notBidSelectionMethod=_EM_58347_XYZ_&notBidSelectionMethod=1q4e0n_A6nFCHU&" + 
                    "procurementMethod=8j&procurementMethod=_EM_58349_XYZ_&procurementMethod=221T&" + 
                    "procuringEntityCityId=_EM_58350_XYZ_&" + 
                    "procuringEntityGroupId=81&procuringEntityGroupId=893&procuringEntityGroupId=258&procuringEntityGroupId=562&procuringEntityGroupId=328&" + 
                    "minAwardValue=0.752183164615005&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/qualityFundingByTenderDeliveryLocation
    */
    @Test(timeout = 60000)
    public void test_76_getOnQualityFundingByTenderDeliveryLocationReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/qualityFundingByTenderDeliveryLocation?" + 
                    "bidTypeId=&" + 
                    "procuringEntityId=o&procuringEntityId=unPzAjMd&procuringEntityId=LQR&procuringEntityId=d0gC5cHSR&procuringEntityId=COsPyAiz4CYFPGDR&" + 
                    "supplierId=moOTh797Dx&supplierId=NTSdGJ_&supplierId=asKlcTQW&" + 
                    "bidSelectionMethod=fwNseWXhmGEzt&" + 
                    "notBidSelectionMethod=3mRWh&notBidSelectionMethod=h0nzc_UkI8TA&notBidSelectionMethod=KURYCCM7s9Fb7Ys&notBidSelectionMethod=Bn5RdqWGF&notBidSelectionMethod=WaoTFh8K&" + 
                    "planningLoc=Eqe4O&" + 
                    "procuringEntityDepartmentId=&" + 
                    "procuringEntityGroupId=-1659376702&procuringEntityGroupId=841&procuringEntityGroupId=22&procuringEntityGroupId=767&" + 
                    "pageNumber=957&" + 
                    "maxTenderValue=0.9347554506565147&" + 
                    "maxAwardValue=0.22286544385308615&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "EMextraParam123=_EM_27192_XYZ_&" + 
                    "password=kezwLhWv")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/qualityFundingByTenderDeliveryLocation
    */
    @Test(timeout = 60000)
    public void test_77_getOnQualityFundingByTenderDeliveryLocationReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/qualityFundingByTenderDeliveryLocation?" + 
                    "notBidTypeId=Ia6P&" + 
                    "procuringEntityId=o&procuringEntityId=unPzAjMd&procuringEntityId=LQR&procuringEntityId=d0gC5cHSR&procuringEntityId=COsPyAiz4CYFPGDR&" + 
                    "supplierId=moOTh797Dx&supplierId=NTSdGJ_&supplierId=asKlcTQW&" + 
                    "bidSelectionMethod=fwNseWXhmGEzt&" + 
                    "notBidSelectionMethod=3mRWh&notBidSelectionMethod=h0nzc_UkI8TA&notBidSelectionMethod=KURYCCM7s9Fb7Ys&notBidSelectionMethod=Bn5RdqWGF&notBidSelectionMethod=WaoTFh8K&" + 
                    "planningLoc=Eqe4O&" + 
                    "procurementMethod=NrWIpX4sFrHsX4q&procurementMethod=iptnxtt6Oe8&" + 
                    "procuringEntityDepartmentId=&" + 
                    "procuringEntityGroupId=-1659376702&procuringEntityGroupId=841&procuringEntityGroupId=22&procuringEntityGroupId=767&" + 
                    "pageNumber=957&" + 
                    "maxTenderValue=0.9347554506565147&" + 
                    "maxAwardValue=0.22286544385308615&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "skip=L3Oh0dAUXWavVR43&" + 
                    "class=SR1&" + 
                    "yearFilterPagingRequest=cRs&" + 
                    "password=kezwLhWv&" + 
                    "username=k_6Et")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/qualityFundingByTenderDeliveryLocation
    */
    @Test(timeout = 60000)
    public void test_78_getOnQualityFundingByTenderDeliveryLocationReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/qualityFundingByTenderDeliveryLocation?" + 
                    "bidTypeId=&" + 
                    "notBidTypeId=Ia6P&" + 
                    "procuringEntityId=o&procuringEntityId=unPzAjMd&procuringEntityId=LQR&procuringEntityId=d0gC5cHSR&procuringEntityId=COsPyAiz4CYFPGDR&" + 
                    "supplierId=moOTh797Dx&supplierId=NTSdGJ_&supplierId=asKlcTQW&" + 
                    "bidSelectionMethod=fwNseWXhmGEzt&" + 
                    "notBidSelectionMethod=3mRWh&notBidSelectionMethod=h0nzc_UkI8TA&notBidSelectionMethod=KURYCCM7s9Fb7Ys&notBidSelectionMethod=Bn5RdqWGF&notBidSelectionMethod=WaoTFh8K&" + 
                    "planningLoc=Eqe4O&" + 
                    "procuringEntityDepartmentId=&" + 
                    "procuringEntityGroupId=-1659376702&procuringEntityGroupId=841&procuringEntityGroupId=22&procuringEntityGroupId=767&" + 
                    "pageNumber=957&" + 
                    "maxTenderValue=0.9347554506565147&" + 
                    "maxAwardValue=0.22286544385308615&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "skip=L3Oh0dAUXWavVR43&" + 
                    "class=SR1&" + 
                    "yearFilterPagingRequest=cRs&" + 
                    "password=kezwLhWv&" + 
                    "username=k_6Et")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/qualityPlannedFundingByLocation
    */
    @Test(timeout = 60000)
    public void test_79_getOnQualityPlannedFundingByLocationReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/qualityPlannedFundingByLocation?" + 
                    "procuringEntityId=oDqNOZO&procuringEntityId=hQUI0OufrJhseXiq&procuringEntityId=RDeBoA4&" + 
                    "supplierId=4XE7JmRvVY6SFghA&supplierId=J4Haz&supplierId=RucgEOoxXwMC2Sv0&supplierId=RjV1281tK&supplierId=Xx2arOiSMT9EYG&" + 
                    "contrMethod=&" + 
                    "planningLoc=_EM_69448_XYZ_&" + 
                    "procurementMethod=_EM_69452_XYZ_&procurementMethod=MY6sSH&procurementMethod=b81gXIynERG&procurementMethod=_EM_69453_XYZ_&" + 
                    "procuringEntityDepartmentId=212&procuringEntityDepartmentId=624&procuringEntityDepartmentId=466&" + 
                    "pageNumber=348&" + 
                    "pageSize=569&" + 
                    "minAwardValue=0.7371498655375326&" + 
                    "electronicSubmission=false&" + 
                    "defaultFilterPagingRequest=_EM_69454_XYZ_&" + 
                    "skip=_EM_69455_XYZ_&" + 
                    "username=2Hnxx8BKuPa6gM")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/qualityPlannedFundingByLocation
    */
    @Test(timeout = 60000)
    public void test_80_getOnApiQualityPlannedFundingByLocationWithQueryParamsFlagged() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/qualityPlannedFundingByLocation?" + 
                    "bidTypeId=FZ9JKMoNI64FC&bidTypeId=UZjdEe&bidTypeId=EyfyFU&" + 
                    "notProcuringEntityId=&" + 
                    "contrMethod=Ve25&" + 
                    "tenderLoc=&tenderLoc=_EM_73776_XYZ_&tenderLoc=9tr0Pix8p6CSh&tenderLoc=_EM_73777_XYZ_&tenderLoc=_EM_73778_XYZ_&" + 
                    "procuringEntityCityId=_EM_73782_XYZ_&" + 
                    "procuringEntityDepartmentId=-192076424&procuringEntityDepartmentId=538&" + 
                    "procuringEntityGroupId=372&procuringEntityGroupId=60&procuringEntityGroupId=140&procuringEntityGroupId=885&" + 
                    "pageNumber=512&" + 
                    "maxAwardValue=0.6848527858697947&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "username=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/qualityPlannedFundingByLocation
    */
    @Test(timeout = 60000)
    public void test_81_getOnQualityPlannedFundingByLocationReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/qualityPlannedFundingByLocation?" + 
                    "bidTypeId=S&bidTypeId=pWRP2cVha&bidTypeId=7WY&bidTypeId=6&bidTypeId=&" + 
                    "notBidTypeId=Aj1XxyGuRX3q&notBidTypeId=&notBidTypeId=i0v&notBidTypeId=Fgd1XkahW&notBidTypeId=ZRtZijLflbC2Gak&" + 
                    "bidSelectionMethod=yoTpwtGv0nzbWp&bidSelectionMethod=0SfuXlY&bidSelectionMethod=YV5_5T&bidSelectionMethod=&" + 
                    "notBidSelectionMethod=8oYk&notBidSelectionMethod=oNZVFuUNiWmsPi&notBidSelectionMethod=_fEE6zGnhLVwP&notBidSelectionMethod=zRoVHRA_yNZ&notBidSelectionMethod=MCYrjtk&" + 
                    "procurementMethod=PMPOD&procurementMethod=jNkg8CD0qj&procurementMethod=hKiSXT&" + 
                    "procuringEntityCityId=cPyKElPRc1D&procuringEntityCityId=0CDE8k2ScEYN62A&procuringEntityCityId=hx7WfqtfL5BzOu3&procuringEntityCityId=TCBIEx&procuringEntityCityId=7&" + 
                    "procuringEntityDepartmentId=211&procuringEntityDepartmentId=330&" + 
                    "procuringEntityGroupId=682&procuringEntityGroupId=642&procuringEntityGroupId=902&procuringEntityGroupId=835&procuringEntityGroupId=458&" + 
                    "pageSize=11&" + 
                    "minTenderValue=0.6038903924431946&" + 
                    "flagged=false&" + 
                    "defaultFilterPagingRequest=ulS7XQHX8wXLr")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/qualityPlannedFundingByLocation
    */
    @Test(timeout = 60000)
    public void test_82_getOnApiQualityPlannedFundingByLocationWithQueryParamsAndFlagged() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/qualityPlannedFundingByLocation?" + 
                    "bidTypeId=&" + 
                    "notBidTypeId=PLthBscXPoZX&notBidTypeId=p&" + 
                    "notProcuringEntityId=&" + 
                    "supplierId=LA2TT1LFTRsbLSR&supplierId=_EM_29829_XYZ_&supplierId=_EM_29830_XYZ_&supplierId=EqL2ECouIk&" + 
                    "bidSelectionMethod=&" + 
                    "planningLoc=_EM_29835_XYZ_&planningLoc=h8U1HlHozzk0pT4&" + 
                    "tenderLoc=&" + 
                    "procuringEntityGroupId=575&procuringEntityGroupId=787&procuringEntityGroupId=897&procuringEntityGroupId=628&" + 
                    "pageNumber=79&" + 
                    "minTenderValue=0.09188086074276303&" + 
                    "maxTenderValue=0.8212144899528676&" + 
                    "minAwardValue=0.8044729065752573&" + 
                    "electronicSubmission=true&" + 
                    "flagged=true&" + 
                    "skip=d&" + 
                    "class=_EM_29840_XYZ_&" + 
                    "password=_EM_29841_XYZ_&" + 
                    "username=_EM_29842_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/qualityPlannedFundingByLocation
    */
    @Test(timeout = 60000)
    public void test_83_getOnQualityPlannedFundingByLocationReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/qualityPlannedFundingByLocation?" + 
                    "bidSelectionMethod=_EM_7936_XYZ_&bidSelectionMethod=dMGIsUdTK13w0aI&bidSelectionMethod=8qqc6YoLIt&bidSelectionMethod=_EM_7937_XYZ_&" + 
                    "notBidSelectionMethod=_EM_7938_XYZ_&" + 
                    "tenderLoc=ckqE5ERfkPdWRz&tenderLoc=_EM_7943_XYZ_&" + 
                    "procuringEntityCityId=&" + 
                    "maxTenderValue=0.22283516992909314&" + 
                    "minAwardValue=0.6024917451560035&" + 
                    "electronicSubmission=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/tenderPriceByProcurementMethod
    */
    @Test(timeout = 60000)
    public void test_84_getOnTenderPriceByProcurementMethodReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/tenderPriceByProcurementMethod?" + 
                    "bidTypeId=HPpwTQ6Yf&" + 
                    "notBidSelectionMethod=ToQY1IgY0t3IK6&notBidSelectionMethod=_EM_25296_XYZ_&notBidSelectionMethod=IL2kjgswGA0&notBidSelectionMethod=_EM_25297_XYZ_&" + 
                    "planningLoc=_EM_25299_XYZ_&planningLoc=49&planningLoc=fBXnTo2tB&planningLoc=_EM_25300_XYZ_&planningLoc=wEcRlaTB&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityDepartmentId=407&" + 
                    "procuringEntityGroupId=778&" + 
                    "pageNumber=121&" + 
                    "minTenderValue=0.2371589772150713&" + 
                    "maxTenderValue=0.575838851511959&" + 
                    "minAwardValue=0.189585896639742&" + 
                    "maxAwardValue=0.23028822664317028&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/tenderPriceByProcurementMethod
    */
    @Test(timeout = 60000)
    public void test_85_getOnApiTenderPriceByProcurementMethodWithQueryParamsAndMonthly() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/tenderPriceByProcurementMethod?" + 
                    "notBidTypeId=&" + 
                    "procuringEntityId=1rz1xk6qDd4&" + 
                    "notProcuringEntityId=&" + 
                    "supplierId=_EM_73687_XYZ_&supplierId=8LkXEjIayDNhy2ZK&supplierId=Pya3xtvq&supplierId=AHx&supplierId=_EM_73688_XYZ_&" + 
                    "notBidSelectionMethod=Ll8EK6_IJl_Q7u&" + 
                    "planningLoc=_EM_73693_XYZ_&planningLoc=SSFQqUptN0jDzstJ&planningLoc=_EM_73694_XYZ_&planningLoc=0HgpcxN68NK&" + 
                    "procurementMethod=_EM_73696_XYZ_&procurementMethod=_EM_73697_XYZ_&" + 
                    "procuringEntityCityId=XT4ys1b&procuringEntityCityId=&procuringEntityCityId=_EM_73698_XYZ_&procuringEntityCityId=_EM_73699_XYZ_&" + 
                    "procuringEntityDepartmentId=304&procuringEntityDepartmentId=865&procuringEntityDepartmentId=-1843023960&procuringEntityDepartmentId=526&procuringEntityDepartmentId=300&" + 
                    "procuringEntityGroupId=330&procuringEntityGroupId=904&" + 
                    "pageNumber=496&" + 
                    "pageSize=314&" + 
                    "minAwardValue=0.683164155322774&" + 
                    "electronicSubmission=true&" + 
                    "monthly=true&" + 
                    "skip=_EM_73702_XYZ_&" + 
                    "password=xFU1ov3ia&" + 
                    "class=lE2NpXb7l40X&" + 
                    "yearFilterPagingRequest=FbJBpyrAbILC&" + 
                    "username=9VWqRhB8Z_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/tenderPriceByProcurementMethod
    */
    @Test(timeout = 60000)
    public void test_86_getOnTenderPriceByProcurementMethodReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/tenderPriceByProcurementMethod?" + 
                    "notBidTypeId=&" + 
                    "procuringEntityId=&" + 
                    "notProcuringEntityId=&" + 
                    "notBidSelectionMethod=Ll8EK6_IJl_Q7u&" + 
                    "planningLoc=_EM_73693_XYZ_&planningLoc=SSFQqUptN0jDzstJ&planningLoc=_EM_73694_XYZ_&planningLoc=0HgpcxN68NK&" + 
                    "procuringEntityDepartmentId=304&procuringEntityDepartmentId=865&procuringEntityDepartmentId=-1843023960&procuringEntityDepartmentId=526&procuringEntityDepartmentId=300&" + 
                    "procuringEntityGroupId=74&procuringEntityGroupId=904&" + 
                    "pageNumber=496&" + 
                    "pageSize=314&" + 
                    "minAwardValue=0.683164155322774&" + 
                    "electronicSubmission=false&" + 
                    "skip=_EM_73702_XYZ_&" + 
                    "password=xFU1ov3ia&" + 
                    "class=lE2NpXb7l40X")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/tenderValueInterval
    */
    @Test(timeout = 60000)
    public void test_87_getOnTenderValueIntervalReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/tenderValueInterval?" + 
                    "procuringEntityId=&" + 
                    "notProcuringEntityId=hcxrdTmg&" + 
                    "supplierId=&" + 
                    "bidSelectionMethod=_EM_8180_XYZ_&bidSelectionMethod=_EM_8181_XYZ_&bidSelectionMethod=ttkmXhQ&" + 
                    "procurementMethod=ssxDAse9&procurementMethod=_EM_8186_XYZ_&procurementMethod=&" + 
                    "procuringEntityCityId=vZarK2bwUE&" + 
                    "procuringEntityGroupId=330&procuringEntityGroupId=862&procuringEntityGroupId=657&procuringEntityGroupId=664&procuringEntityGroupId=79&" + 
                    "minTenderValue=0.5738637316063091&" + 
                    "minAwardValue=0.1623755015703332&" + 
                    "maxAwardValue=0.16012634366706968&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "yearFilterPagingRequest=1IFb2i08f")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/tenderValueInterval
    */
    @Test(timeout = 60000)
    public void test_88_getOnTenderValueIntervalReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/tenderValueInterval?" + 
                    "procuringEntityId=&" + 
                    "supplierId=&" + 
                    "bidSelectionMethod=_EM_8180_XYZ_&bidSelectionMethod=_EM_8181_XYZ_&bidSelectionMethod=ttkmXhQ&" + 
                    "tenderLoc=F0rcjsUopLie&tenderLoc=_EM_8185_XYZ_&tenderLoc=fcTs&" + 
                    "procurementMethod=ssxDAse9&procurementMethod=_EM_8186_XYZ_&procurementMethod=&" + 
                    "procuringEntityCityId=vZarK2bwUE&" + 
                    "minTenderValue=0.5738637316063091&" + 
                    "maxAwardValue=0.16012634366706968&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "yearFilterPagingRequest=1IFb2i08f")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/tenderValueInterval
    */
    @Test(timeout = 60000)
    public void test_89_getOnTenderValueIntervalReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/tenderValueInterval?" + 
                    "procuringEntityId=&" + 
                    "supplierId=&" + 
                    "bidSelectionMethod=_EM_8180_XYZ_&bidSelectionMethod=_EM_8181_XYZ_&bidSelectionMethod=ttkmXhQ&" + 
                    "tenderLoc=F0rcjsUopLie&tenderLoc=_EM_8185_XYZ_&tenderLoc=fcTs&" + 
                    "procurementMethod=ssxDAse9&procurementMethod=_EM_8186_XYZ_&procurementMethod=&" + 
                    "procuringEntityCityId=vZarK2bwUE&" + 
                    "procuringEntityGroupId=330&procuringEntityGroupId=862&procuringEntityGroupId=657&procuringEntityGroupId=664&procuringEntityGroupId=79&" + 
                    "minTenderValue=0.5738637316063091&" + 
                    "minAwardValue=0.1623755015703332&" + 
                    "maxAwardValue=0.16012634366706968&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "yearFilterPagingRequest=1IFb2i08f")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/tenderValueInterval
    */
    @Test(timeout = 60000)
    public void test_90_getOnTenderValueIntervalReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/tenderValueInterval?" + 
                    "procuringEntityId=&" + 
                    "supplierId=&" + 
                    "bidSelectionMethod=_EM_8180_XYZ_&bidSelectionMethod=_EM_8181_XYZ_&bidSelectionMethod=ttkmXhQ&" + 
                    "procurementMethod=ssxDAse9&procurementMethod=_EM_8186_XYZ_&procurementMethod=&" + 
                    "procuringEntityCityId=vZarK2bwUE&" + 
                    "procuringEntityGroupId=330&procuringEntityGroupId=862&procuringEntityGroupId=657&procuringEntityGroupId=664&procuringEntityGroupId=79&" + 
                    "minTenderValue=0.5738637316063091&" + 
                    "minAwardValue=0.1623755015703332&" + 
                    "maxAwardValue=0.16012634366706968&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/tendersAwardsYears
    */
    @Test(timeout = 60000)
    public void test_91_getOnTendersAwardsYearsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/tendersAwardsYears?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/tendersAwardsYears
    */
    @Test(timeout = 60000)
    public void test_92_getOnTendersAwardsYearsReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/tendersAwardsYears?username=VjCe")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/totalFlaggedIndicatorsByIndicatorTypeByYear
    */
    @Test(timeout = 60000)
    public void test_93_getOnTotalFlaggedIndicatorsByIndicatorTypeByYearReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/totalFlaggedIndicatorsByIndicatorTypeByYear?" + 
                    "bidTypeId=&" + 
                    "notProcuringEntityId=&" + 
                    "supplierId=zTD12&supplierId=_EM_31422_XYZ_&supplierId=y&supplierId=_EM_31423_XYZ_&supplierId=_EM_31424_XYZ_&" + 
                    "bidSelectionMethod=_EM_31425_XYZ_&bidSelectionMethod=_EM_31426_XYZ_&" + 
                    "notBidSelectionMethod=_EM_31427_XYZ_&notBidSelectionMethod=bzObG_&notBidSelectionMethod=jsB5JHCw9d3xnkZc&notBidSelectionMethod=_EM_31428_XYZ_&" + 
                    "procurementMethod=KYZoxfE3o0_o&procurementMethod=vgCHIdbpuH_uCBi&procurementMethod=_ghsIn2A_1y3ipI0&" + 
                    "pageNumber=452&" + 
                    "pageSize=801&" + 
                    "minTenderValue=-12.614202017970596&" + 
                    "maxTenderValue=0.9684055153544777&" + 
                    "skip=IRkcyh_Wy&" + 
                    "password=_EM_31436_XYZ_&" + 
                    "class=&" + 
                    "yearFilterPagingRequest=cGOZ&" + 
                    "username=_EM_31438_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/totalFlaggedIndicatorsByIndicatorTypeByYear
    */
    @Test(timeout = 60000)
    public void test_94_getOnTotalFlaggedIndicatorsByIndicatorTypeByYearReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/totalFlaggedIndicatorsByIndicatorTypeByYear?" + 
                    "notBidTypeId=FRAUD&notBidTypeId=FRAUD&" + 
                    "supplierId=_EM_57764_XYZ_&supplierId=zAt9atnGVsu&supplierId=8MdSvUr&" + 
                    "procuringEntityDepartmentId=958&procuringEntityDepartmentId=1104291302&procuringEntityDepartmentId=652&procuringEntityDepartmentId=606&" + 
                    "pageNumber=914&" + 
                    "pageSize=80&" + 
                    "minTenderValue=0.9871138475928156&" + 
                    "electronicSubmission=false&" + 
                    "monthly=true&" + 
                    "class=lWztFaiwSJnR4&" + 
                    "yearFilterPagingRequest=_EM_57772_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/totalFlaggedIndicatorsByIndicatorTypeByYear
    */
    @Test(timeout = 60000)
    public void test_95_getOnTotalFlaggedIndicatorsByIndicatorTypeByYearReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/totalFlaggedIndicatorsByIndicatorTypeByYear?" + 
                    "bidTypeId=RIGGING&bidTypeId=FRAUD&bidTypeId=&" + 
                    "supplierId=&" + 
                    "bidSelectionMethod=&bidSelectionMethod=_EM_79746_XYZ_&" + 
                    "procurementMethod=TfFh13iFAT&procurementMethod=YzXVrBuE&procurementMethod=_EM_79750_XYZ_&procurementMethod=_EM_79751_XYZ_&procurementMethod=HdbKefdFnHNBImNw&" + 
                    "procuringEntityCityId=RSww9cMuIdM&" + 
                    "procuringEntityDepartmentId=435&procuringEntityDepartmentId=922&procuringEntityDepartmentId=107&" + 
                    "pageSize=41&" + 
                    "password=H")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/tendersByLocation
    */
    @Test(timeout = 60000)
    public void test_96_getOnTendersByLocationReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/tendersByLocation?" + 
                    "bidTypeId=&" + 
                    "procuringEntityId=&" + 
                    "procurementMethod=9X7QSgcYRwk&procurementMethod=_EM_93801_XYZ_&" + 
                    "procuringEntityCityId=Q6xg7&procuringEntityCityId=l5GpNU8WkP4zp5sC&procuringEntityCityId=SYVHd&procuringEntityCityId=_EM_93802_XYZ_&" + 
                    "procuringEntityDepartmentId=189&procuringEntityDepartmentId=132&procuringEntityDepartmentId=848&" + 
                    "procuringEntityGroupId=774&procuringEntityGroupId=537&procuringEntityGroupId=885&procuringEntityGroupId=842&" + 
                    "pageNumber=693&" + 
                    "electronicSubmission=false&" + 
                    "monthly=false&" + 
                    "password=HPj6rGg6NGHeGn&" + 
                    "class=Qns3LwhcQSFvs_&" + 
                    "yearFilterPagingRequest=_EM_93803_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/topTenLargestAwards
    */
    @Test(timeout = 60000)
    public void test_97_getOnTopTenLargestAwardsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/topTenLargestAwards?" + 
                    "notBidTypeId=&" + 
                    "procuringEntityId=4rBb9&procuringEntityId=MGONotEQr9&procuringEntityId=OKS&" + 
                    "notProcuringEntityId=HWCKlKklNCfzNBy8&notProcuringEntityId=gGEdx&" + 
                    "planningLoc=r11bcPhIoySq2&planningLoc=7lDBgXTGi&planningLoc=_EM_73806_XYZ_&" + 
                    "procurementMethod=_EM_73809_XYZ_&procurementMethod=_EM_73810_XYZ_&procurementMethod=3s8C_YgKWw&" + 
                    "procuringEntityCityId=48kJ&procuringEntityCityId=_EM_73811_XYZ_&procuringEntityCityId=_EM_73812_XYZ_&" + 
                    "procuringEntityGroupId=176&procuringEntityGroupId=649&procuringEntityGroupId=463&procuringEntityGroupId=303&procuringEntityGroupId=305&" + 
                    "pageNumber=402&" + 
                    "pageSize=234&" + 
                    "maxTenderValue=0.8779447967888058&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "skip=la_&" + 
                    "password=NJB3iCxGUeX4Ofk&" + 
                    "class=_EM_73813_XYZ_&" + 
                    "yearFilterPagingRequest=pF5NxITcnvkx&" + 
                    "username=_EM_73814_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/topTenLargestAwards
    */
    @Test(timeout = 60000)
    public void test_98_getOnTopTenLargestAwardsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/topTenLargestAwards?" + 
                    "procurementMethod=_EM_73809_XYZ_&procurementMethod=_EM_73810_XYZ_&procurementMethod=3s8C_YgKWw&" + 
                    "procuringEntityCityId=48kJ&procuringEntityCityId=_EM_73811_XYZ_&procuringEntityCityId=_EM_73812_XYZ_&" + 
                    "pageNumber=410&" + 
                    "pageSize=234&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "skip=la_&" + 
                    "password=NJB3iCxGUgX4Ofk&" + 
                    "class=_EM_73813_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/topTenLargestAwards
    */
    @Test(timeout = 60000)
    public void test_99_getOnTopTenLargestAwardsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/topTenLargestAwards?" + 
                    "notBidTypeId=&" + 
                    "procuringEntityId=4rBb9&procuringEntityId=MGONotEQr9&procuringEntityId=OKS&" + 
                    "notProcuringEntityId=HWCKlKklNCfzNBy8&notProcuringEntityId=gGEdx&" + 
                    "planningLoc=r11bcPhIoySq2&planningLoc=7lDBgXTGi&planningLoc=_EM_73806_XYZ_&" + 
                    "procurementMethod=_EM_73809_XYZ_&procurementMethod=_EM_73810_XYZ_&procurementMethod=3s8C_YgKWw&" + 
                    "procuringEntityCityId=48kJ&procuringEntityCityId=_EM_73811_XYZ_&procuringEntityCityId=_EM_73812_XYZ_&" + 
                    "pageNumber=410&" + 
                    "pageSize=234&" + 
                    "maxTenderValue=0.8779447967888058&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "skip=la_&" + 
                    "password=NJB3iCxGUeX4Ofk&" + 
                    "class=_EM_73813_XYZ_&" + 
                    "yearFilterPagingRequest=pF5NxITcnvkx&" + 
                    "username=_EM_73814_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/topTenLargestTenders
    */
    @Test(timeout = 60000)
    public void test_100_getOnApiTopTenLargestTendersWithQueryParamsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/topTenLargestTenders?" + 
                    "notProcuringEntityId=Bz&" + 
                    "supplierId=_EM_32152_XYZ_&supplierId=h&" + 
                    "bidSelectionMethod=&" + 
                    "notBidSelectionMethod=ek&" + 
                    "tenderLoc=5IJwB702qjyU6Y&tenderLoc=_EM_32156_XYZ_&" + 
                    "procurementMethod=5MY2xx9&procurementMethod=_EM_32157_XYZ_&" + 
                    "procuringEntityCityId=z8&procuringEntityCityId=ksxedYU1&" + 
                    "procuringEntityDepartmentId=296&procuringEntityDepartmentId=219&procuringEntityDepartmentId=694&procuringEntityDepartmentId=150&procuringEntityDepartmentId=483&" + 
                    "procuringEntityGroupId=378&procuringEntityGroupId=603&procuringEntityGroupId=2&procuringEntityGroupId=508&procuringEntityGroupId=874&" + 
                    "maxTenderValue=0.18541896737709174&" + 
                    "minAwardValue=0.24883216129890462&" + 
                    "maxAwardValue=0.4203933387732516&" + 
                    "flagged=false&" + 
                    "EMextraParam123=42&" + 
                    "skip=QlEKPJR&" + 
                    "class=mT8XKf7RRWfH9&" + 
                    "yearFilterPagingRequest=_EM_32158_XYZ_&" + 
                    "username=_EM_32159_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/topTenLargestTenders
    */
    @Test(timeout = 60000)
    public void test_101_getOnApiTopTenLargestTendersWithQueryParamsMonthlyReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/topTenLargestTenders?" + 
                    "bidTypeId=FRAUD&bidTypeId=RIGGING&" + 
                    "notBidTypeId=Ng&notBidTypeId=4amCW4&notBidTypeId=YjwnpUTLmhNPjBe&" + 
                    "notProcuringEntityId=&" + 
                    "supplierId=yTSIkqZfnLqw2tmw&supplierId=C&supplierId=_EM_63109_XYZ_&supplierId=&" + 
                    "bidSelectionMethod=_EM_63110_XYZ_&bidSelectionMethod=&bidSelectionMethod=iNSUxJaQlhaUdUe&" + 
                    "planningLoc=_EM_63115_XYZ_&planningLoc=_EM_63116_XYZ_&" + 
                    "procurementMethod=GIG12_X1cI0a1s&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityDepartmentId=16&procuringEntityDepartmentId=602&procuringEntityDepartmentId=291&" + 
                    "pageNumber=237&" + 
                    "pageSize=640&" + 
                    "maxAwardValue=0.691100487377803&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "password=_EM_63121_XYZ_&" + 
                    "class=_EM_63122_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/topTenSuppliers
    */
    @Test(timeout = 60000)
    public void test_102_getOnApiTopTenSuppliersWithQueryParamsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/topTenSuppliers?" + 
                    "notBidTypeId=COLLUSION&notBidTypeId=zd1jOu&" + 
                    "planningLoc=9lZ1wyljcqCls&planningLoc=_EM_95142_XYZ_&planningLoc=ePeCk7KOxbH5jUc&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=_EM_95143_XYZ_&procurementMethod=_EM_95144_XYZ_&" + 
                    "procuringEntityGroupId=942&procuringEntityGroupId=422&procuringEntityGroupId=977&procuringEntityGroupId=-1429599135&" + 
                    "pageSize=745&" + 
                    "minTenderValue=0.010621134498583928&" + 
                    "maxTenderValue=0.6776544467823815&" + 
                    "minAwardValue=0.2716172325903997&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "class=VF_O&" + 
                    "yearFilterPagingRequest=KSbb2v87T5S&" + 
                    "username=_EM_95145_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/topTenSuppliers
    */
    @Test(timeout = 60000)
    public void test_103_getOnApiTopTenSuppliersWithQueryParamsElectronicSubmission() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_10432_XYZ_")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/topTenSuppliers?" + 
                    "procurementMethod=_EM_44099_XYZ_&procurementMethod=Ur87qn4P&" + 
                    "procuringEntityCityId=_EM_44100_XYZ_&procuringEntityCityId=_EM_44101_XYZ_&procuringEntityCityId=_EM_44102_XYZ_&" + 
                    "procuringEntityGroupId=621&procuringEntityGroupId=893&" + 
                    "month=&" + 
                    "pageNumber=428&" + 
                    "minTenderValue=0.16346762944198356&" + 
                    "maxTenderValue=0.9838032357252842&" + 
                    "maxAwardValue=0.6279360754793786&" + 
                    "electronicSubmission=true&" + 
                    "monthly=false&" + 
                    "EMextraParam123=_EM_10431_XYZ_&" + 
                    "password=gOQM12PNX7s7hK&" + 
                    "username=xRzz7J3")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/totalCancelledTendersByYearByRationale
    */
    @Test(timeout = 60000)
    public void test_104_getOnTotalCancelledTendersByYearByRationaleReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/totalCancelledTendersByYearByRationale?" + 
                    "bidTypeId=&" + 
                    "notProcuringEntityId=&" + 
                    "bidSelectionMethod=DNSsTxd&bidSelectionMethod=a3Az&bidSelectionMethod=6voWgEOkC&" + 
                    "tenderLoc=FhIfR1PuBLVgw7&" + 
                    "procuringEntityCityId=_EM_68723_XYZ_&procuringEntityCityId=HhAM2F5Vi&procuringEntityCityId=_EM_68724_XYZ_&" + 
                    "procuringEntityGroupId=761&procuringEntityGroupId=649&procuringEntityGroupId=84&" + 
                    "pageNumber=151&" + 
                    "pageSize=140&" + 
                    "maxTenderValue=0.6644295813819666&" + 
                    "minAwardValue=0.8099961960890419&" + 
                    "maxAwardValue=0.7393119980519831&" + 
                    "flagged=false&" + 
                    "skip=_EM_68725_XYZ_&" + 
                    "class=_EM_68726_XYZ_&" + 
                    "yearFilterPagingRequest=_EM_68727_XYZ_&" + 
                    "password=u2LxV8XLWLMvqEA0&" + 
                    "username=_EM_68728_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/totalCancelledTendersByYearByRationale
    */
    @Test(timeout = 60000)
    public void test_105_getOnTotalCancelledTendersByYearByRationaleReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/totalCancelledTendersByYearByRationale?" + 
                    "notProcuringEntityId=&" + 
                    "bidSelectionMethod=DNSsRxd&bidSelectionMethod=_EM_68722_XYZ_&bidSelectionMethod=6voWgEOkC&" + 
                    "tenderLoc=FhIfR1PuBLVgw7&" + 
                    "procuringEntityCityId=_EM_68723_XYZ_&procuringEntityCityId=HhAM2F5Vi&procuringEntityCityId=_EM_68724_XYZ_&" + 
                    "procuringEntityDepartmentId=396&" + 
                    "procuringEntityGroupId=761&procuringEntityGroupId=649&procuringEntityGroupId=84&" + 
                    "pageNumber=151&" + 
                    "pageSize=140&" + 
                    "maxTenderValue=0.6644295813819666&" + 
                    "minAwardValue=0.8099961960890419&" + 
                    "maxAwardValue=0.7393119980519831&" + 
                    "flagged=false&" + 
                    "skip=_EM_68725_XYZ_&" + 
                    "class=_EM_68726_XYZ_&" + 
                    "yearFilterPagingRequest=_EM_68727_XYZ_&" + 
                    "password=u2LxV8XLWLMvqEA0&" + 
                    "username=_EM_68728_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/totalCancelledTendersByYearByRationale
    */
    @Test(timeout = 60000)
    public void test_106_getOnTotalCancelledTendersByYearByRationaleReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/totalCancelledTendersByYearByRationale?" + 
                    "notProcuringEntityId=&" + 
                    "bidSelectionMethod=DNSsRxd&bidSelectionMethod=_EM_68722_XYZ_&bidSelectionMethod=6voWgEOkC&" + 
                    "tenderLoc=FhIfR1PuBLVgw7&" + 
                    "procuringEntityCityId=_EM_68723_XYZ_&procuringEntityCityId=HhAM2F5Vi&procuringEntityCityId=_EM_68724_XYZ_&" + 
                    "procuringEntityDepartmentId=396&" + 
                    "pageNumber=151&" + 
                    "pageSize=140&" + 
                    "maxTenderValue=0.6644295813819666&" + 
                    "minAwardValue=0.8099961960890419&" + 
                    "maxAwardValue=0.7393119980519831&" + 
                    "flagged=false&" + 
                    "skip=_EM_68725_XYZ_&" + 
                    "class=_EM_68726_XYZ_&" + 
                    "yearFilterPagingRequest=_EM_68727_XYZ_&" + 
                    "password=u2LxV8XLWLMvqEA0&" + 
                    "username=_EM_68728_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/totalCancelledTendersByYearByRationale
    */
    @Test(timeout = 60000)
    public void test_107_getOnTotalCancelledTendersByYearByRationaleReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/totalCancelledTendersByYearByRationale?" + 
                    "notProcuringEntityId=&" + 
                    "bidSelectionMethod=DNSsRxd&bidSelectionMethod=_EM_68722_XYZ_&bidSelectionMethod=6voWgEOkC&" + 
                    "tenderLoc=FhIfR1PuBLVgw7&" + 
                    "procuringEntityCityId=_EM_68723_XYZ_&procuringEntityCityId=HhAM2F5Vi&procuringEntityCityId=_EM_68724_XYZ_&" + 
                    "procuringEntityDepartmentId=396&" + 
                    "pageNumber=151&" + 
                    "pageSize=140&" + 
                    "maxTenderValue=0.6644295813819666&" + 
                    "minAwardValue=0.8099961960890419&" + 
                    "flagged=false&" + 
                    "skip=_EM_68725_XYZ_&" + 
                    "class=_EM_68726_XYZ_&" + 
                    "yearFilterPagingRequest=_EM_68727_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/totalEligibleIndicatorsByIndicatorTypeByYear
    */
    @Test(timeout = 60000)
    public void test_108_getOnTotalEligibleIndicatorsByIndicatorTypeByYearReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/totalEligibleIndicatorsByIndicatorTypeByYear?" + 
                    "bidTypeId=hh23vd2NzMZWGJ4b&" + 
                    "tenderLoc=_EM_52242_XYZ_&tenderLoc=Z8Hcn9YsTy4vA2N&" + 
                    "procuringEntityDepartmentId=715&procuringEntityDepartmentId=391&procuringEntityDepartmentId=241&procuringEntityDepartmentId=671&" + 
                    "pageNumber=545&" + 
                    "pageSize=431&" + 
                    "maxTenderValue=0.7799354683427607&" + 
                    "EMextraParam123=42&" + 
                    "skip=_EM_52245_XYZ_&" + 
                    "password=zw&" + 
                    "yearFilterPagingRequest=_EM_52246_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/totalFlaggedIndicatorsByIndicatorTypeByYear
    */
    @Test(timeout = 60000)
    public void test_109_getOnTotalFlaggedIndicatorsByIndicatorTypeByYearReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/totalFlaggedIndicatorsByIndicatorTypeByYear?" + 
                    "notProcuringEntityId=&" + 
                    "supplierId=zTD10&supplierId=_EM_31422_XYZ_&supplierId=y&supplierId=_EM_31423_XYZ_&supplierId=_EM_31424_XYZ_&" + 
                    "bidSelectionMethod=_EM_31425_XYZ_&bidSelectionMethod=_EM_31426_XYZ_&" + 
                    "notBidSelectionMethod=_EM_31427_XYZ_&notBidSelectionMethod=bzObG_&notBidSelectionMethod=jsB5JHCw9d3xnkZc&notBidSelectionMethod=_EM_31428_XYZ_&" + 
                    "procurementMethod=KYZoxfE3o0_o&procurementMethod=vgCHIdbpuH_uCBi&procurementMethod=_ghsIn2A_1y3ipI0&" + 
                    "pageNumber=452&" + 
                    "pageSize=801&" + 
                    "minTenderValue=0.42830058709647234&" + 
                    "maxTenderValue=0.9684055153544777&" + 
                    "EMextraParam123=_EM_31435_XYZ_&" + 
                    "skip=IRkcyh_Wy&" + 
                    "username=_EM_31438_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/totalFlags
    */
    @Test(timeout = 60000)
    public void test_110_getOnApiTotalFlagsWithQueryParamsFlaggedAndMonthlyReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/totalFlags?" + 
                    "bidTypeId=&" + 
                    "procuringEntityId=llcdHM4wBiQPRmZ&procuringEntityId=vpb5SGw4&" + 
                    "notProcuringEntityId=JD0JLxUwDJ_ZNGM&notProcuringEntityId=_EM_55377_XYZ_&" + 
                    "supplierId=HRtPS9PPFct0y&supplierId=_EM_55378_XYZ_&" + 
                    "bidSelectionMethod=LY7PYKecsjj&bidSelectionMethod=ukt&bidSelectionMethod=&" + 
                    "notBidSelectionMethod=KVa8Z8t_oMySi2&" + 
                    "procurementMethod=M4sb2D8&procurementMethod=KsUXEbjfNR&procurementMethod=RuuuRtar7BuuYqA&procurementMethod=_EM_55382_XYZ_&" + 
                    "procuringEntityCityId=_EM_55383_XYZ_&procuringEntityCityId=5hUDO0m_bOJKHj&procuringEntityCityId=_EM_55384_XYZ_&procuringEntityCityId=gShWMGOVi&procuringEntityCityId=TeYsziI&" + 
                    "procuringEntityDepartmentId=674&procuringEntityDepartmentId=713&procuringEntityDepartmentId=527&procuringEntityDepartmentId=564&" + 
                    "procuringEntityGroupId=760&procuringEntityGroupId=93&" + 
                    "month=501&month=716&month=67&month=-701146631&month=831&" + 
                    "pageNumber=921&" + 
                    "minTenderValue=0.010723697400064958&" + 
                    "maxTenderValue=0.8315519948338026&" + 
                    "minAwardValue=0.828689835458441&" + 
                    "maxAwardValue=0.7385379521661383&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "EMextraParam123=_EM_55385_XYZ_&" + 
                    "password=_EM_55387_XYZ_&" + 
                    "class=_EM_55388_XYZ_&" + 
                    "username=OtwXE8eS")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/totalFlags
    */
    @Test(timeout = 60000)
    public void test_111_getOnTotalFlagsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/totalFlags?" + 
                    "bidTypeId=&" + 
                    "supplierId=_EM_42536_XYZ_&supplierId=kZZ_A5bur1n6TY2&" + 
                    "bidSelectionMethod=_EM_42537_XYZ_&bidSelectionMethod=bDf&bidSelectionMethod=H&bidSelectionMethod=_EM_42538_XYZ_&" + 
                    "notBidSelectionMethod=_EM_42539_XYZ_&" + 
                    "tenderLoc=3zf&tenderLoc=_EM_42541_XYZ_&tenderLoc=8eUEcFn&tenderLoc=_EM_42542_XYZ_&" + 
                    "procuringEntityCityId=526x1v0&" + 
                    "procuringEntityDepartmentId=366&procuringEntityDepartmentId=721&procuringEntityDepartmentId=955&" + 
                    "procuringEntityGroupId=144&procuringEntityGroupId=733&procuringEntityGroupId=113&procuringEntityGroupId=349&procuringEntityGroupId=6&" + 
                    "pageNumber=254&" + 
                    "pageSize=81&" + 
                    "maxTenderValue=0.6542650798967038&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "password=bjh4_dYl&" + 
                    "class=IdMuWB50PgZ4myB&" + 
                    "username=oSXTT5ntXo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/totalFlags
    */
    @Test(timeout = 60000)
    public void test_112_getOnTotalFlagsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/totalFlags?" + 
                    "notBidTypeId=COLLUSION&notBidTypeId=_EM_30883_XYZ_&notBidTypeId=_EM_30884_XYZ_&notBidTypeId=FRAUD&notBidTypeId=ZQz&" + 
                    "procuringEntityId=&" + 
                    "bidSelectionMethod=_EM_30887_XYZ_&bidSelectionMethod=_EM_30888_XYZ_&bidSelectionMethod=tdNyk7Y_eO1h&bidSelectionMethod=DV&bidSelectionMethod=CWVDFI1vD&" + 
                    "procurementMethod=_EM_30890_XYZ_&procurementMethod=sy3sprt&procurementMethod=Fpb5OodD4&" + 
                    "procuringEntityCityId=_EM_30891_XYZ_&procuringEntityCityId=miGhQ_em6V9&procuringEntityCityId=dcYar&" + 
                    "procuringEntityGroupId=732&procuringEntityGroupId=329&procuringEntityGroupId=603&procuringEntityGroupId=826&" + 
                    "year=360&year=251&year=441&" + 
                    "month=826&month=445&month=953&" + 
                    "pageSize=587&" + 
                    "maxAwardValue=0.05185653615381036&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "EMextraParam123=_EM_10568_XYZ_&" + 
                    "username=_EM_30894_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/totalFlags
    */
    @Test(timeout = 60000)
    public void test_113_getOnTotalFlagsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/totalFlags?" + 
                    "bidTypeId=Ei4st4&bidTypeId=FRAUD&bidTypeId=Fz&bidTypeId=71GwdHsbl&" + 
                    "notBidTypeId=_EM_53667_XYZ_&notBidTypeId=_EM_53668_XYZ_&notBidTypeId=COLLUSION&notBidTypeId=RIGGING&" + 
                    "notBidSelectionMethod=rYlivpxvKgwN&notBidSelectionMethod=_EM_53679_XYZ_&notBidSelectionMethod=2lfgfsqKIJ0wr&" + 
                    "tenderLoc=6TgGKimtH&tenderLoc=_EM_53680_XYZ_&tenderLoc=i2XxyaBSj9ZmSm&" + 
                    "procurementMethod=_EM_53681_XYZ_&procurementMethod=_EM_53682_XYZ_&procurementMethod=_EM_53683_XYZ_&procurementMethod=_EM_53684_XYZ_&procurementMethod=1OqOoUfAZ2lQ&" + 
                    "procuringEntityCityId=_EM_53685_XYZ_&procuringEntityCityId=HkyAZZgI&procuringEntityCityId=_EM_53686_XYZ_&procuringEntityCityId=lNBJ6P4LZ1lEE1&procuringEntityCityId=BF&" + 
                    "year=-372290550&year=103&year=546&year=979&" + 
                    "month=499&month=932&month=630&month=41&" + 
                    "pageNumber=711&" + 
                    "pageSize=240&" + 
                    "minTenderValue=0.06840257950915052&" + 
                    "maxTenderValue=0.8438370311565008&" + 
                    "minAwardValue=0.14244419924418772&" + 
                    "electronicSubmission=false&" + 
                    "monthly=true&" + 
                    "password=_EM_53688_XYZ_&" + 
                    "yearFilterPagingRequest=7lZXf_XYAce")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/totalFlags
    */
    @Test(timeout = 60000)
    public void test_114_getOnApiTotalFlagsWithQueryParamsElectronicSubmissionAndFlagged() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/totalFlags?" + 
                    "bidTypeId=aEyJfW&bidTypeId=a5f9XaD2ealdngC&bidTypeId=_EM_26282_XYZ_&" + 
                    "notBidTypeId=OY_Agy&notBidTypeId=V&notBidTypeId=Qg7rHs2aw61&notBidTypeId=_EM_26283_XYZ_&notBidTypeId=syLuHm6nem&" + 
                    "procuringEntityId=w_2WB9hanbl&" + 
                    "notProcuringEntityId=_EM_26284_XYZ_&" + 
                    "supplierId=_EM_26285_XYZ_&supplierId=_EM_26286_XYZ_&supplierId=&supplierId=Md_ARtCq13A&" + 
                    "contrMethod=&" + 
                    "planningLoc=F&" + 
                    "procurementMethod=Yc&procurementMethod=_EM_26291_XYZ_&procurementMethod=VXvESnkX4H&procurementMethod=3xlUdEk6gAWj9LyS&procurementMethod=_a&" + 
                    "procuringEntityDepartmentId=334&" + 
                    "procuringEntityGroupId=1641866932&" + 
                    "year=839&year=479&year=969&" + 
                    "maxAwardValue=0.9080410081351545&" + 
                    "electronicSubmission=true&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "EMextraParam123=_3BY1drjFA90RwWT&" + 
                    "password=_EM_26294_XYZ_&" + 
                    "class=_EM_26295_XYZ_&" + 
                    "username=BjI0yF")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/totalFlags
    */
    @Test(timeout = 60000)
    public void test_115_getOnApiTotalFlagsWithQueryParamsElectronicSubmissionReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_31538_XYZ_")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/totalFlags?" + 
                    "notBidTypeId=_EM_31523_XYZ_&notBidTypeId=RIGGING&notBidTypeId=VxKIzi&" + 
                    "procuringEntityId=_EM_31524_XYZ_&procuringEntityId=eYq&" + 
                    "supplierId=_ls&supplierId=_EM_31526_XYZ_&supplierId=edLEavfA_nuE&supplierId=sMELb9cPs6BINJRt&supplierId=_EM_31527_XYZ_&" + 
                    "procuringEntityCityId=_EM_31536_XYZ_&" + 
                    "procuringEntityDepartmentId=396&procuringEntityDepartmentId=525&procuringEntityDepartmentId=903&procuringEntityDepartmentId=883&" + 
                    "procuringEntityGroupId=989&procuringEntityGroupId=818&procuringEntityGroupId=772&procuringEntityGroupId=354&procuringEntityGroupId=509&" + 
                    "minTenderValue=0.5486633798166511&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "yearFilterPagingRequest=40FXGitgmeI_2&" + 
                    "username=zGEbdRffoY")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/totalProjectsByYear
    */
    @Test(timeout = 60000)
    public void test_116_getOnTotalProjectsByYearReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/totalProjectsByYear?" + 
                    "bidTypeId=COLLUSION&bidTypeId=RIGGING&" + 
                    "notBidTypeId=RIGGING&notBidTypeId=_EM_60972_XYZ_&" + 
                    "procuringEntityId=5Vn&procuringEntityId=pX8&procuringEntityId=_EM_60973_XYZ_&" + 
                    "notProcuringEntityId=&" + 
                    "bidSelectionMethod=_EM_60977_XYZ_&" + 
                    "notBidSelectionMethod=_EM_60978_XYZ_&notBidSelectionMethod=UJ_R3zo&notBidSelectionMethod=_EM_60979_XYZ_&notBidSelectionMethod=FY0Bs3A7XkaN&notBidSelectionMethod=_EM_60980_XYZ_&" + 
                    "planningLoc=&planningLoc=j4uFOO&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityDepartmentId=277&" + 
                    "procuringEntityGroupId=&" + 
                    "year=328&year=519&" + 
                    "pageNumber=727&" + 
                    "pageSize=450&" + 
                    "minTenderValue=0.46329515910975194&" + 
                    "maxTenderValue=0.4072482641333016&" + 
                    "maxAwardValue=0.46600917155749844&" + 
                    "electronicSubmission=true&" + 
                    "monthly=true&" + 
                    "username=g0kosBKpC9T2i&" + 
                    "class=_EM_60984_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/totalProjectsByYear
    */
    @Test(timeout = 60000)
    public void test_117_getOnTotalProjectsByYearReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/totalProjectsByYear?" + 
                    "notBidTypeId=COLLUSION&notBidTypeId=iFMAT6ulJcFMvIQ&" + 
                    "procuringEntityId=_EM_70404_XYZ_&" + 
                    "bidSelectionMethod=OrZ012zwUMB&" + 
                    "notBidSelectionMethod=F7s&notBidSelectionMethod=d_MzoYQrhNs&notBidSelectionMethod=iI678H&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=&" + 
                    "procuringEntityGroupId=787&procuringEntityGroupId=157&procuringEntityGroupId=325&procuringEntityGroupId=-306246037&procuringEntityGroupId=425&" + 
                    "pageNumber=363&" + 
                    "pageSize=19&" + 
                    "maxTenderValue=0.3660386827944714&" + 
                    "minAwardValue=0.6082473026875488&" + 
                    "maxAwardValue=0.40118430071711064&" + 
                    "electronicSubmission=false&" + 
                    "monthly=false&" + 
                    "password=_EM_70406_XYZ_&" + 
                    "yearFilterPagingRequest=MW9Bl8sLrfBBwI&" + 
                    "username=H35qqsxY&" + 
                    "skip=_EM_70407_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/totalProjectsByYear
    */
    @Test(timeout = 60000)
    public void test_118_getOnApiTotalProjectsByYearWithQueryParamsFlaggedReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/totalProjectsByYear?" + 
                    "procuringEntityId=tMw&procuringEntityId=_EM_77570_XYZ_&procuringEntityId=Ed&procuringEntityId=EYIjzjFL9k6&" + 
                    "notProcuringEntityId=_EM_77571_XYZ_&notProcuringEntityId=_EM_77572_XYZ_&notProcuringEntityId=_EM_77573_XYZ_&notProcuringEntityId=h08vs&notProcuringEntityId=mhm3TnTScwf30&" + 
                    "supplierId=AhZoUfo&supplierId=6d0HvqCCQ&" + 
                    "notBidSelectionMethod=_EM_77574_XYZ_&notBidSelectionMethod=HypFR_fhstzqm&notBidSelectionMethod=_EM_77575_XYZ_&" + 
                    "planningLoc=_EM_77577_XYZ_&planningLoc=_EM_77578_XYZ_&planningLoc=Lj&" + 
                    "procuringEntityCityId=aiZGKWpUI&procuringEntityCityId=wuEexEJXxjkA&" + 
                    "year=982&" + 
                    "month=720&month=751&month=517&" + 
                    "pageNumber=585&" + 
                    "pageSize=587&" + 
                    "maxTenderValue=0.19819349467650638&" + 
                    "minAwardValue=0.2543687478836383&" + 
                    "maxAwardValue=0.28072604556761227&" + 
                    "flagged=true&" + 
                    "password=biAJ7yap9e3Ni&" + 
                    "username=E&" + 
                    "class=8TXVu94Tr4N")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/totalProjectsByYear
    */
    @Test(timeout = 60000)
    public void test_119_getOnTotalProjectsByYearReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "2joTxPnI")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/totalProjectsByYear?" + 
                    "bidTypeId=bAH7lUJeAtCtRwV0&bidTypeId=_EM_26392_XYZ_&bidTypeId=_EM_26393_XYZ_&bidTypeId=_EM_26394_XYZ_&bidTypeId=cJha&" + 
                    "notBidTypeId=ak&notBidTypeId=COLLUSION&" + 
                    "procuringEntityId=_EM_26395_XYZ_&procuringEntityId=_EM_26396_XYZ_&procuringEntityId=_EM_26397_XYZ_&procuringEntityId=_EM_26398_XYZ_&" + 
                    "notProcuringEntityId=_EM_26399_XYZ_&notProcuringEntityId=VEUXfaF&notProcuringEntityId=&notProcuringEntityId=0KvS&notProcuringEntityId=ALMM&" + 
                    "bidSelectionMethod=P8&bidSelectionMethod=uhBicF&bidSelectionMethod=If24Ir88e55&bidSelectionMethod=ClfmDN&" + 
                    "planningLoc=_EM_26407_XYZ_&planningLoc=_EM_26408_XYZ_&planningLoc=oahQb5FM&planningLoc=HPmWaiIE7OXXj&planningLoc=g&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=_EM_26409_XYZ_&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityGroupId=726&" + 
                    "year=852&" + 
                    "month=823&" + 
                    "pageNumber=828&" + 
                    "maxTenderValue=0.6426675458220539&" + 
                    "electronicSubmission=true&" + 
                    "EMextraParam123=_EM_26410_XYZ_&" + 
                    "username=_EM_26412_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/totalProjectsByYear
    */
    @Test(timeout = 60000)
    public void test_120_getOnApiTotalProjectsByYearWithQueryParamsMonthlyReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/totalProjectsByYear?" + 
                    "notBidTypeId=&" + 
                    "procuringEntityId=&" + 
                    "bidSelectionMethod=OKKHv&bidSelectionMethod=I&" + 
                    "notBidSelectionMethod=5LI518&notBidSelectionMethod=PolKTI2ESZ0P4I&notBidSelectionMethod=7OP8T2si9fAwKYcT&notBidSelectionMethod=_EM_64288_XYZ_&notBidSelectionMethod=_EM_64289_XYZ_&" + 
                    "planningLoc=&" + 
                    "procurementMethod=_EM_64291_XYZ_&procurementMethod=BQUzg&procurementMethod=uQWCaTM8&procurementMethod=_EM_64292_XYZ_&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityGroupId=281&" + 
                    "year=445&year=441&year=446&" + 
                    "month=&" + 
                    "pageNumber=906&" + 
                    "minTenderValue=0.1713531383322897&" + 
                    "monthly=true&" + 
                    "password=_EM_64293_XYZ_&" + 
                    "yearFilterPagingRequest=&" + 
                    "class=AUkLIB")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/totalProjectsByYear
    */
    @Test(timeout = 60000)
    public void test_121_getOnApiTotalProjectsByYearWithQueryParamsMonthlyNegativePageNumber() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/totalProjectsByYear?" + 
                    "notBidTypeId=K10V0&notBidTypeId=_EM_67495_XYZ_&notBidTypeId=Cdfn70XXzeDnr7L1&notBidTypeId=_EM_67496_XYZ_&notBidTypeId=_EM_67497_XYZ_&" + 
                    "procuringEntityId=e1Ijp72s&" + 
                    "notBidSelectionMethod=&" + 
                    "planningLoc=F8FpktKC_&planningLoc=bdD2&" + 
                    "procuringEntityCityId=_EM_67503_XYZ_&" + 
                    "procuringEntityDepartmentId=202&procuringEntityDepartmentId=9&procuringEntityDepartmentId=703&procuringEntityDepartmentId=2086146985&" + 
                    "year=970&year=145&year=103461517&" + 
                    "pageNumber=-33039275&" + 
                    "maxAwardValue=0.4473174634787793&" + 
                    "monthly=true&" + 
                    "password=bQkvw80SZHFCTZWB")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/totalProjectsByYear
    */
    @Test(timeout = 60000)
    public void test_122_getOnTotalProjectsByYearReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/totalProjectsByYear?" + 
                    "bidTypeId=COLLUSION&bidTypeId=mnlTWdwddzdT6F&bidTypeId=9YNephQ&bidTypeId=kqsJ&" + 
                    "supplierId=P&supplierId=_EM_75242_XYZ_&supplierId=Hq6n4krYLtw&" + 
                    "bidSelectionMethod=&" + 
                    "contrMethod=&" + 
                    "procuringEntityDepartmentId=544&procuringEntityDepartmentId=255&procuringEntityDepartmentId=369&procuringEntityDepartmentId=181&procuringEntityDepartmentId=873&" + 
                    "month=&" + 
                    "pageNumber=505&" + 
                    "minTenderValue=0.5645921311465033&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "yearFilterPagingRequest=GY&" + 
                    "skip=_EM_75252_XYZ_&" + 
                    "class=_EM_75253_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/totalProjectsByYear
    */
    @Test(timeout = 60000)
    public void test_123_getOnTotalProjectsByYearReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/totalProjectsByYear?" + 
                    "procuringEntityId=O13rSLtFOzLPEvo&procuringEntityId=5Phzj3fbkf&procuringEntityId=_EM_58810_XYZ_&procuringEntityId=b0&" + 
                    "notProcuringEntityId=_EM_58811_XYZ_&notProcuringEntityId=_EM_58812_XYZ_&notProcuringEntityId=_EM_58813_XYZ_&notProcuringEntityId=_EM_58814_XYZ_&notProcuringEntityId=_EM_58815_XYZ_&" + 
                    "bidSelectionMethod=&" + 
                    "notBidSelectionMethod=_EM_58816_XYZ_&notBidSelectionMethod=_EM_58817_XYZ_&" + 
                    "planningLoc=&" + 
                    "year=89&year=887243160&year=792&year=363&" + 
                    "pageNumber=674&" + 
                    "maxTenderValue=0.6501945865676138&" + 
                    "maxAwardValue=0.0509096958700882&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "password=_EM_58826_XYZ_&" + 
                    "username=7S9a4p0Av9ZNx&" + 
                    "skip=rDsXqlb1Uxb&" + 
                    "class=N81")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/totalProjectsByYear
    */
    @Test(timeout = 60000)
    public void test_124_getOnTotalProjectsByYearReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/totalProjectsByYear?" + 
                    "bidSelectionMethod=Je&bidSelectionMethod=_EM_56968_XYZ_&" + 
                    "planningLoc=&" + 
                    "procurementMethod=&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityGroupId=&" + 
                    "year=395&year=921&year=485&year=834&year=296&" + 
                    "month=625&month=353&month=767&month=183&month=180&" + 
                    "minTenderValue=0.39666778230901945&" + 
                    "maxTenderValue=0.22662892478542984&" + 
                    "minAwardValue=0.9081519194565583&" + 
                    "yearFilterPagingRequest=MD&" + 
                    "skip=vwe")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/tendersAwardsYears
    */
    @Test(timeout = 60000)
    public void test_125_getOnApiTendersAwardsYearsWithQueryParamsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/tendersAwardsYears?" + 
                    "password=QaCnpmlG&" + 
                    "username=cb5EemD")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/tendersAwardsYears
    */
    @Test(timeout = 60000)
    public void test_126_getOnApiTendersAwardsYearsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/tendersAwardsYears")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/corruptionRiskOverviewTable
    */
    @Test(timeout = 60000)
    public void test_127_getOnCorruptionRiskOverviewTableReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/corruptionRiskOverviewTable?" + 
                    "procuringEntityId=&" + 
                    "notProcuringEntityId=A8Vs&notProcuringEntityId=oiwV7&notProcuringEntityId=Ckk7YKMDndl&" + 
                    "supplierId=_EM_92336_XYZ_&" + 
                    "planningLoc=_EM_92338_XYZ_&" + 
                    "tenderLoc=_EM_92339_XYZ_&tenderLoc=x&" + 
                    "procuringEntityGroupId=-918354849&procuringEntityGroupId=204&procuringEntityGroupId=460&procuringEntityGroupId=751&procuringEntityGroupId=399&" + 
                    "pageNumber=883&" + 
                    "pageSize=525&" + 
                    "minTenderValue=-0.9933174394788135&" + 
                    "maxTenderValue=0.49528391903524915&" + 
                    "monthly=false&" + 
                    "skip=fKdJ&" + 
                    "password=BcEZYSk3kfIrm&" + 
                    "class=35Kn90ENgvme94w9&" + 
                    "yearFilterPagingRequest=_EM_92346_XYZ_&" + 
                    "username=TeXLHz6t")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/frequentSuppliersTimeInterval
    */
    @Test(timeout = 60000)
    public void test_128_getOnFrequentSuppliersTimeIntervalReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_50834_XYZ_")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/frequentSuppliersTimeInterval?" + 
                    "intervalDays=91&" + 
                    "EMextraParam123=42&" + 
                    "username=_EM_50836_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/percentOfEligibleProjectsFlaggedByYear
    */
    @Test(timeout = 60000)
    public void test_129_getOnPercentOfEligibleProjectsFlaggedByYearReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/percentOfEligibleProjectsFlaggedByYear?" + 
                    "notProcuringEntityId=_EM_15833_XYZ_&notProcuringEntityId=OoEVdFsaz&notProcuringEntityId=dIMS&" + 
                    "notBidSelectionMethod=1EQNORt_A8_zpV&notBidSelectionMethod=_EM_15835_XYZ_&notBidSelectionMethod=w&notBidSelectionMethod=_EM_15836_XYZ_&" + 
                    "contrMethod=&" + 
                    "planningLoc=LJ4u_Q&" + 
                    "procuringEntityCityId=&" + 
                    "month=894&" + 
                    "pageSize=328&" + 
                    "minTenderValue=0.39341221637892265&" + 
                    "minAwardValue=0.41052220175400334&" + 
                    "electronicSubmission=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/percentTotalProjectsEligibleByYear
    */
    @Test(timeout = 60000)
    public void test_130_getOnPercentTotalProjectsEligibleByYearReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/percentTotalProjectsEligibleByYear?" + 
                    "procuringEntityId=LfSk72_jM&" + 
                    "supplierId=HO24KiWw&supplierId=IkfUlt4&" + 
                    "bidSelectionMethod=y2&bidSelectionMethod=_EM_56925_XYZ_&bidSelectionMethod=_EM_56926_XYZ_&bidSelectionMethod=&" + 
                    "notBidSelectionMethod=_EM_56927_XYZ_&" + 
                    "tenderLoc=PVHI96sTsg&tenderLoc=zeMnmAYZtvLqFObH&tenderLoc=_EM_56929_XYZ_&" + 
                    "procurementMethod=&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityDepartmentId=185&procuringEntityDepartmentId=732&" + 
                    "procuringEntityGroupId=985&procuringEntityGroupId=25&procuringEntityGroupId=114&" + 
                    "month=59&" + 
                    "pageNumber=-1046352503&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/totalFlags
    */
    @Test(timeout = 60000)
    public void test_131_getOnTotalFlagsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_52527_XYZ_")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/totalFlags?" + 
                    "bidTypeId=_EM_52514_XYZ_&bidTypeId=DW78sJn5&bidTypeId=yTUdqKKetCGMAY&bidTypeId=jAhoFDy&bidTypeId=_EM_52515_XYZ_&" + 
                    "bidSelectionMethod=_EM_52518_XYZ_&bidSelectionMethod=ED8jX8D&bidSelectionMethod=h1C&bidSelectionMethod=_EM_52519_XYZ_&bidSelectionMethod=_EM_52520_XYZ_&" + 
                    "notBidSelectionMethod=G50T_E8KPjBK&notBidSelectionMethod=xw&" + 
                    "procuringEntityCityId=&procuringEntityCityId=_EM_52526_XYZ_&" + 
                    "procuringEntityDepartmentId=525&procuringEntityDepartmentId=225&procuringEntityDepartmentId=730&" + 
                    "month=943&month=1509855564&month=620&month=246&month=449&" + 
                    "maxTenderValue=0.9140270819649292&" + 
                    "minAwardValue=0.1297229929980348&" + 
                    "skip=ADhcjG&" + 
                    "class=P6&" + 
                    "yearFilterPagingRequest=eygJTX35CJZet")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/indicatorTypesMapping
    */
    @Test(timeout = 60000)
    public void test_132_getOnIndicatorTypesMappingReturnsObject() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/indicatorTypesMapping")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'i038'.'types'.size()", equalTo(1))
                .body("'i038'.'types'", hasItems("RIGGING"))
                .body("'i038'.'rationale'", containsString("Preconditions that are not met: Needs to have tender start date; Needs to have tender end date; Needs to have open tender procurement method; "))
                .body("'i003'.'types'.size()", equalTo(2))
                .body("'i003'.'types'", hasItems("RIGGING", "FRAUD"))
                .body("'i003'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one unsuccessful award; Needs to have at least one active award; Needs to have electronic submission tender submission method; Needs to have open tender procurement method; "))
                .body("'i007'.'types'.size()", equalTo(1))
                .body("'i007'.'types'", hasItems("RIGGING"))
                .body("'i007'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have electronic submission tender submission method; Needs to have open tender procurement method; "))
                .body("'i004'.'types'.size()", equalTo(1))
                .body("'i004'.'types'", hasItems("RIGGING"))
                .body("'i004'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one award with awarded amount; Needs to have tender with items classification; Needs to have at least one active award; Needs to have limited tender procurement method; "))
                .body("'i077'.'types'.size()", equalTo(1))
                .body("'i077'.'types'", hasItems("RIGGING"))
                .body("'i077'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have open tender procurement method OR Needs to have selective tender procurement method; "))
                .body("'i019'.'types'.size()", equalTo(1))
                .body("'i019'.'types'", hasItems("RIGGING"))
                .body("'i019'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have tender end date; Needs to have open tender procurement method; "))
                .body("'i180'.'types'.size()", equalTo(1))
                .body("'i180'.'types'", hasItems("RIGGING"))
                .body("'i180'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have tender procuring entity; Needs to have limited tender procurement method; "))
                .body("'i002'.'types'.size()", equalTo(2))
                .body("'i002'.'types'", hasItems("RIGGING", "FRAUD"))
                .body("'i002'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one unsuccessful award; Needs to have at least one active award; Needs to have electronic submission tender submission method; Needs to have open tender procurement method; "))
                .body("'i085'.'types'.size()", equalTo(2))
                .body("'i085'.'types'", hasItems("FRAUD", "COLLUSION"))
                .body("'i085'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have electronic submission tender submission method; "))
                .body("'i171'.'types'.size()", equalTo(2))
                .body("'i171'.'types'", hasItems("RIGGING", "FRAUD"))
                .body("'i171'.'rationale'", containsString("Preconditions that are not met: Needs to have tender value amount; Needs to have at least one active award; Needs to have electronic submission tender submission method; Needs to have open tender procurement method; "));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/indicatorTypesMapping
    */
    @Test(timeout = 60000)
    public void test_133_getOnIndicatorTypesMappingReturnsObject() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/indicatorTypesMapping?" + 
                    "EMextraParam123=42&" + 
                    "password=_EM_34988_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'i038'.'types'.size()", equalTo(1))
                .body("'i038'.'types'", hasItems("RIGGING"))
                .body("'i038'.'rationale'", containsString("Preconditions that are not met: Needs to have tender start date; Needs to have tender end date; Needs to have open tender procurement method; "))
                .body("'i003'.'types'.size()", equalTo(2))
                .body("'i003'.'types'", hasItems("RIGGING", "FRAUD"))
                .body("'i003'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one unsuccessful award; Needs to have at least one active award; Needs to have electronic submission tender submission method; Needs to have open tender procurement method; "))
                .body("'i007'.'types'.size()", equalTo(1))
                .body("'i007'.'types'", hasItems("RIGGING"))
                .body("'i007'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have electronic submission tender submission method; Needs to have open tender procurement method; "))
                .body("'i004'.'types'.size()", equalTo(1))
                .body("'i004'.'types'", hasItems("RIGGING"))
                .body("'i004'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one award with awarded amount; Needs to have tender with items classification; Needs to have at least one active award; Needs to have limited tender procurement method; "))
                .body("'i077'.'types'.size()", equalTo(1))
                .body("'i077'.'types'", hasItems("RIGGING"))
                .body("'i077'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have open tender procurement method OR Needs to have selective tender procurement method; "))
                .body("'i019'.'types'.size()", equalTo(1))
                .body("'i019'.'types'", hasItems("RIGGING"))
                .body("'i019'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have tender end date; Needs to have open tender procurement method; "))
                .body("'i180'.'types'.size()", equalTo(1))
                .body("'i180'.'types'", hasItems("RIGGING"))
                .body("'i180'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have tender procuring entity; Needs to have limited tender procurement method; "))
                .body("'i002'.'types'.size()", equalTo(2))
                .body("'i002'.'types'", hasItems("RIGGING", "FRAUD"))
                .body("'i002'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one unsuccessful award; Needs to have at least one active award; Needs to have electronic submission tender submission method; Needs to have open tender procurement method; "))
                .body("'i085'.'types'.size()", equalTo(2))
                .body("'i085'.'types'", hasItems("FRAUD", "COLLUSION"))
                .body("'i085'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have electronic submission tender submission method; "))
                .body("'i171'.'types'.size()", equalTo(2))
                .body("'i171'.'types'", hasItems("RIGGING", "FRAUD"))
                .body("'i171'.'rationale'", containsString("Preconditions that are not met: Needs to have tender value amount; Needs to have at least one active award; Needs to have electronic submission tender submission method; Needs to have open tender procurement method; "));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/topTenLargestTenders
    */
    @Test(timeout = 60000)
    public void test_134_getOnApiTopTenLargestTendersWithQueryParamsElectronicSubmission() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/topTenLargestTenders?" + 
                    "procuringEntityId=1Hh8gI4Yl9vl0&" + 
                    "supplierId=_EM_8424_XYZ_&supplierId=I9qpMfbztWhFt&supplierId=fDyAiUXJ4&supplierId=_EM_8425_XYZ_&supplierId=nqoQBYhDA&" + 
                    "notBidSelectionMethod=&" + 
                    "tenderLoc=_EM_8426_XYZ_&tenderLoc=_EM_8427_XYZ_&tenderLoc=_EM_8428_XYZ_&tenderLoc=_EM_8429_XYZ_&" + 
                    "procuringEntityCityId=7T&procuringEntityCityId=8KsBzLMzzTTzEENB&procuringEntityCityId=u9qMRdbS&procuringEntityCityId=_EM_8430_XYZ_&" + 
                    "procuringEntityDepartmentId=742&procuringEntityDepartmentId=799&procuringEntityDepartmentId=909&" + 
                    "procuringEntityGroupId=211&procuringEntityGroupId=-130648&procuringEntityGroupId=66169&" + 
                    "minTenderValue=0.48542406335138777&" + 
                    "minAwardValue=0.39738917658545103&" + 
                    "maxAwardValue=118846.29549815824&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "yearFilterPagingRequest=KH")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/tenderValueInterval
    */
    @Test(timeout = 60000)
    public void test_135_getOnTenderValueIntervalReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/tenderValueInterval?" + 
                    "procuringEntityId=&" + 
                    "supplierId=&" + 
                    "bidSelectionMethod=_EM_8180_XYZ_&bidSelectionMethod=_EM_8181_XYZ_&bidSelectionMethod=ttkmXhQ&" + 
                    "tenderLoc=F0rcjsUopLie&tenderLoc=_EM_8185_XYZ_&tenderLoc=fcTs&" + 
                    "procurementMethod=ssxDAse9&procurementMethod=_EM_8186_XYZ_&procurementMethod=&" + 
                    "procuringEntityCityId=vZarK2bwUE&" + 
                    "procuringEntityGroupId=330&procuringEntityGroupId=862&procuringEntityGroupId=657&procuringEntityGroupId=664&procuringEntityGroupId=79&" + 
                    "minTenderValue=0.5738637316063091&" + 
                    "maxAwardValue=0.16012634366706968&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "yearFilterPagingRequest=1IFb2i08f")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/indicatorTypesMapping
    */
    @Test(timeout = 60000)
    public void test_136_getOnIndicatorTypesMappingReturnsObject() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_46432_XYZ_")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/indicatorTypesMapping?" + 
                    "password=6PRBf1l8&" + 
                    "username=_EM_46433_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'i038'.'types'.size()", equalTo(1))
                .body("'i038'.'types'", hasItems("RIGGING"))
                .body("'i038'.'rationale'", containsString("Preconditions that are not met: Needs to have tender start date; Needs to have tender end date; Needs to have open tender procurement method; "))
                .body("'i003'.'types'.size()", equalTo(2))
                .body("'i003'.'types'", hasItems("RIGGING", "FRAUD"))
                .body("'i003'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one unsuccessful award; Needs to have at least one active award; Needs to have electronic submission tender submission method; Needs to have open tender procurement method; "))
                .body("'i007'.'types'.size()", equalTo(1))
                .body("'i007'.'types'", hasItems("RIGGING"))
                .body("'i007'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have electronic submission tender submission method; Needs to have open tender procurement method; "))
                .body("'i004'.'types'.size()", equalTo(1))
                .body("'i004'.'types'", hasItems("RIGGING"))
                .body("'i004'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one award with awarded amount; Needs to have tender with items classification; Needs to have at least one active award; Needs to have limited tender procurement method; "))
                .body("'i077'.'types'.size()", equalTo(1))
                .body("'i077'.'types'", hasItems("RIGGING"))
                .body("'i077'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have open tender procurement method OR Needs to have selective tender procurement method; "))
                .body("'i019'.'types'.size()", equalTo(1))
                .body("'i019'.'types'", hasItems("RIGGING"))
                .body("'i019'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have tender end date; Needs to have open tender procurement method; "))
                .body("'i180'.'types'.size()", equalTo(1))
                .body("'i180'.'types'", hasItems("RIGGING"))
                .body("'i180'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have tender procuring entity; Needs to have limited tender procurement method; "))
                .body("'i002'.'types'.size()", equalTo(2))
                .body("'i002'.'types'", hasItems("RIGGING", "FRAUD"))
                .body("'i002'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one unsuccessful award; Needs to have at least one active award; Needs to have electronic submission tender submission method; Needs to have open tender procurement method; "))
                .body("'i085'.'types'.size()", equalTo(2))
                .body("'i085'.'types'", hasItems("FRAUD", "COLLUSION"))
                .body("'i085'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have electronic submission tender submission method; "))
                .body("'i171'.'types'.size()", equalTo(2))
                .body("'i171'.'types'", hasItems("RIGGING", "FRAUD"))
                .body("'i171'.'rationale'", containsString("Preconditions that are not met: Needs to have tender value amount; Needs to have at least one active award; Needs to have electronic submission tender submission method; Needs to have open tender procurement method; "));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/frequentSuppliersTimeInterval
    */
    @Test(timeout = 60000)
    public void test_137_getOnFrequentSuppliersTimeIntervalReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/frequentSuppliersTimeInterval?" + 
                    "maxAwards=3&" + 
                    "username=_EM_68467_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/qualityAverageTenderPeriod
    */
    @Test(timeout = 60000)
    public void test_138_getOnQualityAverageTenderPeriodReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/qualityAverageTenderPeriod?" + 
                    "bidTypeId=&" + 
                    "bidSelectionMethod=9JiM2r&bidSelectionMethod=Ck5dE5t4vC_J_y&bidSelectionMethod=n5h0jHMg0tBnU8&" + 
                    "contrMethod=&" + 
                    "tenderLoc=pFOScSjT0&tenderLoc=7ARaadWjy&tenderLoc=F8KOv9ha&tenderLoc=B8DGK&tenderLoc=uFM7L1r&" + 
                    "procuringEntityDepartmentId=&" + 
                    "procuringEntityGroupId=960&procuringEntityGroupId=839&procuringEntityGroupId=508&" + 
                    "pageNumber=171&" + 
                    "pageSize=899&" + 
                    "minAwardValue=0.7204124021357265&" + 
                    "maxAwardValue=0.455187320034911&" + 
                    "username=fVwqCdENxWM2ju0&" + 
                    "skip=Co&" + 
                    "class=iIZDd")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/v2/api-docs
    */
    @Test(timeout = 60000)
    public void test_139_getOnApi_docsReturnsEmpty() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/api-docs?group=1ocDashboardsApi")
                .then()
                .statusCode(200);
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/tenderValueInterval
    */
    @Test(timeout = 60000)
    public void test_140_postOnTenderValueIntervalReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/tenderValueInterval?" + 
                    "notProcuringEntityId=&" + 
                    "bidSelectionMethod=_EM_61766_XYZ_&bidSelectionMethod=MbU7A&bidSelectionMethod=2XhuTu&bidSelectionMethod=A__k&" + 
                    "planningLoc=_EM_61768_XYZ_&planningLoc=_EM_61769_XYZ_&planningLoc=Bt&planningLoc=xvZYJtZrF&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityGroupId=279&procuringEntityGroupId=938&procuringEntityGroupId=576&procuringEntityGroupId=127&" + 
                    "pageNumber=973&" + 
                    "minTenderValue=0.6571021977187411&" + 
                    "maxAwardValue=0.2320659606322989&" + 
                    "monthly=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/topTenSuppliers
    */
    @Test(timeout = 60000)
    public void test_141_postOnTopTenSuppliersReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/topTenSuppliers?" + 
                    "procurementMethod=&" + 
                    "procuringEntityDepartmentId=&" + 
                    "maxTenderValue=0.5709410802272077&" + 
                    "maxAwardValue=0.6416965948213378&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/totalFlaggedProjectsByIndicatorTypeByYear
    */
    @Test(timeout = 60000)
    public void test_142_postOnTotalFlaggedProjectsByIndicatorTypeByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_12120_XYZ_")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/totalFlaggedProjectsByIndicatorTypeByYear?" + 
                    "bidTypeId=&" + 
                    "supplierId=_EM_48030_XYZ_&supplierId=_EM_48031_XYZ_&supplierId=_EM_48032_XYZ_&" + 
                    "bidSelectionMethod=_EM_48033_XYZ_&bidSelectionMethod=3bj3Iyf4dVF8&bidSelectionMethod=_EM_48034_XYZ_&bidSelectionMethod=_EM_48035_XYZ_&bidSelectionMethod=TN0MQ1&" + 
                    "planningLoc=_EM_48038_XYZ_&planningLoc=&planningLoc=c_6or&planningLoc=lH0Ki7a7gLUHUs&planningLoc=_EM_48039_XYZ_&" + 
                    "tenderLoc=&" + 
                    "procuringEntityCityId=&procuringEntityCityId=_EM_48041_XYZ_&procuringEntityCityId=_EM_48042_XYZ_&procuringEntityCityId=cM4e&" + 
                    "procuringEntityDepartmentId=&" + 
                    "month=&" + 
                    "maxTenderValue=0.32896075767923205&" + 
                    "minAwardValue=0.5945658122746801&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "EMextraParam123=42&" + 
                    "skip=_EM_48043_XYZ_&" + 
                    "password=_EM_48044_XYZ_&" + 
                    "class=_EM_48045_XYZ_&" + 
                    "username=qZew")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/totalFlaggedProjectsByIndicatorTypeByYear
    */
    @Test(timeout = 60000)
    public void test_143_postOnTotalFlaggedProjectsByIndicatorTypeByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/totalFlaggedProjectsByIndicatorTypeByYear?" + 
                    "bidTypeId=&" + 
                    "notBidTypeId=BgJZ&" + 
                    "supplierId=&" + 
                    "notBidSelectionMethod=WYtqNmgK6nKjl5&notBidSelectionMethod=jMEEsq9&notBidSelectionMethod=WscV2TZBhVYIv&notBidSelectionMethod=03w4xiPdWrhKl8Y&" + 
                    "planningLoc=_EM_96346_XYZ_&planningLoc=bOZe6nrCu4uSm&planningLoc=_EM_96347_XYZ_&planningLoc=_EM_96348_XYZ_&" + 
                    "procurementMethod=_EM_96349_XYZ_&procurementMethod=_EM_96350_XYZ_&procurementMethod=pve23&procurementMethod=_qDQTFw&procurementMethod=5OG&" + 
                    "procuringEntityCityId=pgLdqELHQrRo&procuringEntityCityId=62g3YRH79A&procuringEntityCityId=_EM_96351_XYZ_&procuringEntityCityId=_ATWFOP0lr_o&" + 
                    "procuringEntityDepartmentId=278&procuringEntityDepartmentId=254&procuringEntityDepartmentId=799&procuringEntityDepartmentId=112&" + 
                    "procuringEntityGroupId=&" + 
                    "month=&" + 
                    "pageNumber=335&" + 
                    "maxTenderValue=0.2771530678702401&" + 
                    "minAwardValue=0.04109164083920025&" + 
                    "electronicSubmission=true&" + 
                    "flagged=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/totalFlaggedProjectsByIndicatorTypeByYear
    */
    @Test(timeout = 60000)
    public void test_144_postOnTotalFlaggedProjectsByIndicatorTypeByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/totalFlaggedProjectsByIndicatorTypeByYear?" + 
                    "supplierId=vnPaq8lAYyA30&" + 
                    "bidSelectionMethod=2sichvWW4Q0BClf&bidSelectionMethod=_EM_55483_XYZ_&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=TRScX&" + 
                    "pageSize=244&" + 
                    "minTenderValue=0.5469745114981&" + 
                    "minAwardValue=0.4630993341920445&" + 
                    "electronicSubmission=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/totalFlaggedProjectsByIndicatorTypeByYear
    */
    @Test(timeout = 60000)
    public void test_145_postOnTotalFlaggedProjectsByIndicatorTypeByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_12120_XYZ_")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/totalFlaggedProjectsByIndicatorTypeByYear?" + 
                    "notBidTypeId=&" + 
                    "supplierId=_EM_44944_XYZ_&supplierId=_EM_44945_XYZ_&supplierId=_EM_44946_XYZ_&" + 
                    "bidSelectionMethod=_EM_44947_XYZ_&bidSelectionMethod=_EM_44948_XYZ_&bidSelectionMethod=T&bidSelectionMethod=Q61jd3k6ABYmvdQ&" + 
                    "notBidSelectionMethod=_EM_44949_XYZ_&notBidSelectionMethod=wiOz&" + 
                    "procurementMethod=_EM_44954_XYZ_&procurementMethod=Xhk&" + 
                    "procuringEntityCityId=_EM_44955_XYZ_&procuringEntityCityId=_EM_44956_XYZ_&procuringEntityCityId=LerAndph6JQjh&procuringEntityCityId=_EM_44957_XYZ_&" + 
                    "procuringEntityDepartmentId=875&procuringEntityDepartmentId=434&" + 
                    "pageSize=250&" + 
                    "maxTenderValue=0.7337106351669174&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentageAwardsNarrowPublicationDates
    */
    @Test(timeout = 60000)
    public void test_146_postOnPercentageAwardsNarrowPublicationDatesReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/percentageAwardsNarrowPublicationDates?" + 
                    "bidTypeId=COLLUSION&" + 
                    "procuringEntityId=&" + 
                    "supplierId=&supplierId=7&supplierId=GJj99Vgl3wy4jnfY&" + 
                    "notBidSelectionMethod=kzsojKBMfZBk4&notBidSelectionMethod=_pk7aoyTvr&notBidSelectionMethod=ahlWnVor2VsC&notBidSelectionMethod=_EM_60695_XYZ_&notBidSelectionMethod=_EM_60696_XYZ_&" + 
                    "planningLoc=_EM_60698_XYZ_&" + 
                    "tenderLoc=&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityDepartmentId=745&procuringEntityDepartmentId=715&" + 
                    "procuringEntityGroupId=1196810380&procuringEntityGroupId=915&procuringEntityGroupId=62&procuringEntityGroupId=596&procuringEntityGroupId=36&" + 
                    "month=&" + 
                    "pageNumber=278&" + 
                    "pageSize=523&" + 
                    "maxTenderValue=0.3259372339782406&" + 
                    "minAwardValue=0.5806957176630428&" + 
                    "electronicSubmission=false&" + 
                    "class=L&" + 
                    "yearFilterPagingRequest=cw&" + 
                    "username=WLS68Xv4")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentageAwardsNarrowPublicationDates
    */
    @Test(timeout = 60000)
    public void test_147_postOnPercentageAwardsNarrowPublicationDatesReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/percentageAwardsNarrowPublicationDates?" + 
                    "bidSelectionMethod=EljeahcbnWZ&bidSelectionMethod=_EM_40774_XYZ_&bidSelectionMethod=_EM_40775_XYZ_&bidSelectionMethod=_EM_40776_XYZ_&bidSelectionMethod=_EM_40777_XYZ_&" + 
                    "tenderLoc=dBml58uDhcHEFc_C&tenderLoc=_EM_40780_XYZ_&" + 
                    "procurementMethod=zORn_LS6uN&procurementMethod=_EM_40781_XYZ_&" + 
                    "procuringEntityCityId=&" + 
                    "minTenderValue=0.19604575901343557&" + 
                    "maxTenderValue=0.7966182920566247&" + 
                    "minAwardValue=0.13476305593027404&" + 
                    "monthly=false&" + 
                    "EMextraParam123=_EM_10200_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/countBidPlansByYear
    */
    @Test(timeout = 60000)
    public void test_148_postOnCountBidPlansByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/countBidPlansByYear?" + 
                    "procuringEntityId=&" + 
                    "notProcuringEntityId=&" + 
                    "notBidSelectionMethod=WryRvomT1b9w&notBidSelectionMethod=_EM_70830_XYZ_&notBidSelectionMethod=niCsW2p_&notBidSelectionMethod=BpIDctC5YwhqYsCM&notBidSelectionMethod=_EM_70831_XYZ_&" + 
                    "planningLoc=_EM_70834_XYZ_&" + 
                    "tenderLoc=p5s_TZzpApHlj2&tenderLoc=k1V4PQoe7&tenderLoc=8sn_Pp1QllBRgP&" + 
                    "procuringEntityCityId=OHegpC0z&procuringEntityCityId=_EM_70836_XYZ_&" + 
                    "procuringEntityGroupId=402&" + 
                    "maxTenderValue=0.9591070826138312&" + 
                    "electronicSubmission=true&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "yearFilterPagingRequest=9iPn0y&" + 
                    "username=1aGb4Ug15ETdqZ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/countBidPlansByYear
    */
    @Test(timeout = 60000)
    public void test_149_postOnCountBidPlansByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/countBidPlansByYear?" + 
                    "supplierId=_EM_15554_XYZ_&supplierId=HJwwFi&supplierId=pQhLbi&" + 
                    "notBidSelectionMethod=6kSLcIOglV6EdSUi&notBidSelectionMethod=_EM_15556_XYZ_&notBidSelectionMethod=_EM_15557_XYZ_&" + 
                    "procuringEntityCityId=_EM_15567_XYZ_&" + 
                    "procuringEntityGroupId=634&procuringEntityGroupId=531&" + 
                    "pageSize=240&" + 
                    "maxTenderValue=0.285703431564708&" + 
                    "minAwardValue=0.1297947598826974&" + 
                    "maxAwardValue=0.6947714301496166&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/qualityAverageTenderPeriod
    */
    @Test(timeout = 60000)
    public void test_150_postOnQualityAverageTenderPeriodReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/qualityAverageTenderPeriod?" + 
                    "notProcuringEntityId=MQkJ&notProcuringEntityId=E&notProcuringEntityId=MnNyzeqKT&notProcuringEntityId=PnBzO&" + 
                    "notBidSelectionMethod=_EM_16557_XYZ_&notBidSelectionMethod=jv&" + 
                    "planningLoc=_EM_16560_XYZ_&planningLoc=h4WRFLj6uSoAE&planningLoc=_EM_16561_XYZ_&planningLoc=_EM_16562_XYZ_&" + 
                    "procurementMethod=kS9EUhp9BB&" + 
                    "procuringEntityDepartmentId=509&procuringEntityDepartmentId=903&" + 
                    "procuringEntityGroupId=604&procuringEntityGroupId=682&procuringEntityGroupId=165&procuringEntityGroupId=204&procuringEntityGroupId=34&" + 
                    "minTenderValue=0.658713812696569&" + 
                    "maxAwardValue=0.8541108115686424&" + 
                    "flagged=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/qualityAverageTenderPeriod
    */
    @Test(timeout = 60000)
    public void test_151_postOnQualityAverageTenderPeriodReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/qualityAverageTenderPeriod?" + 
                    "procuringEntityId=&" + 
                    "bidSelectionMethod=nDo&bidSelectionMethod=_EM_81179_XYZ_&bidSelectionMethod=_EM_81180_XYZ_&bidSelectionMethod=_EM_81181_XYZ_&bidSelectionMethod=_EM_81182_XYZ_&" + 
                    "planningLoc=_EM_81183_XYZ_&planningLoc=Hu82_QUd1JrZ3lf&planningLoc=_EM_81184_XYZ_&planningLoc=IoANcCBGZRw&" + 
                    "tenderLoc=rQXaKbl2D&tenderLoc=_EM_81185_XYZ_&tenderLoc=_EM_81186_XYZ_&tenderLoc=_EM_81187_XYZ_&tenderLoc=_EM_81188_XYZ_&" + 
                    "procuringEntityCityId=Uzhz4d&procuringEntityCityId=_EM_81190_XYZ_&" + 
                    "minTenderValue=0.9841850518482033&" + 
                    "maxTenderValue=0.6832700998211035&" + 
                    "minAwardValue=0.5902734526941412&" + 
                    "flagged=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/qualityAverageTenderPeriod
    */
    @Test(timeout = 60000)
    public void test_152_postOnApiQualityAverageTenderPeriodWithQueryParamsElectronicSubmission() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/qualityAverageTenderPeriod?" + 
                    "bidTypeId=fsXQRRxb1PCMNRb&" + 
                    "bidSelectionMethod=9JiM2r&bidSelectionMethod=Ck5dE5t4vC_J_y&bidSelectionMethod=n5h0jHMg0tBnU8&" + 
                    "notBidSelectionMethod=9hERX&notBidSelectionMethod=619QXHSi&" + 
                    "contrMethod=&" + 
                    "planningLoc=4OL2mbmlZ9YN&planningLoc=&" + 
                    "procuringEntityCityId=VOLLOwnnmm&" + 
                    "procuringEntityGroupId=960&procuringEntityGroupId=508&" + 
                    "pageNumber=171&" + 
                    "pageSize=899&" + 
                    "maxTenderValue=0.3677735480828104&" + 
                    "maxAwardValue=0.455187320034911&" + 
                    "electronicSubmission=true&" + 
                    "defaultFilterPagingRequest=_EM_92157_XYZ_&" + 
                    "password=rh1&" + 
                    "username=En")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/activeAwardsCount
    */
    @Test(timeout = 60000)
    public void test_153_postOnApiActiveAwardsCountWithQueryParamsFlaggedReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/activeAwardsCount?" + 
                    "supplierId=_EM_46350_XYZ_&supplierId=w93TzaNPcvKD8hL2&" + 
                    "bidSelectionMethod=BE&bidSelectionMethod=4&bidSelectionMethod=_EM_46351_XYZ_&bidSelectionMethod=D&bidSelectionMethod=&" + 
                    "notBidSelectionMethod=VNxBrcz&notBidSelectionMethod=_EM_46352_XYZ_&notBidSelectionMethod=tJN_po&notBidSelectionMethod=_EM_46353_XYZ_&" + 
                    "procuringEntityCityId=oV&" + 
                    "procuringEntityDepartmentId=95&procuringEntityDepartmentId=432&procuringEntityDepartmentId=976&procuringEntityDepartmentId=593&procuringEntityDepartmentId=148&" + 
                    "month=&" + 
                    "pageSize=220&" + 
                    "maxAwardValue=0.1738300858875771&" + 
                    "flagged=true&" + 
                    "skip=_EM_46357_XYZ_&" + 
                    "password=Rpw1TL&" + 
                    "class=_EM_46358_XYZ_&" + 
                    "yearFilterPagingRequest=waoxmQAFXI7c&" + 
                    "username=_EM_46359_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/activeAwardsCount
    */
    @Test(timeout = 60000)
    public void test_154_postOnActiveAwardsCountReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/activeAwardsCount?" + 
                    "supplierId=_EM_46350_XYZ_&supplierId=w93TzaNPcvKD8hL2&" + 
                    "bidSelectionMethod=BE&bidSelectionMethod=4&bidSelectionMethod=_EM_46351_XYZ_&bidSelectionMethod=D&bidSelectionMethod=&" + 
                    "planningLoc=hpBPNaGT__Xw80l&planningLoc=NRxByqy2aawLJ4uV&" + 
                    "procuringEntityCityId=oV&" + 
                    "procuringEntityDepartmentId=95&procuringEntityDepartmentId=432&procuringEntityDepartmentId=976&procuringEntityDepartmentId=593&procuringEntityDepartmentId=148&" + 
                    "pageSize=220&" + 
                    "skip=_EM_46357_XYZ_&" + 
                    "password=Rpw1TL&" + 
                    "class=_EM_46358_XYZ_&" + 
                    "yearFilterPagingRequest=waoxmQAFXI7c&" + 
                    "username=_EM_46359_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/awardsByLocation
    */
    @Test(timeout = 60000)
    public void test_155_postOnApiAwardsByLocationWithQueryParamsElectronicSubmissionReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/awardsByLocation?" + 
                    "bidTypeId=&" + 
                    "notBidTypeId=&" + 
                    "procuringEntityId=joGmS&" + 
                    "notBidSelectionMethod=9bvZ9rdrC3h0&notBidSelectionMethod=_EM_78021_XYZ_&" + 
                    "planningLoc=OJHvILZw31etK&" + 
                    "tenderLoc=_EM_78024_XYZ_&" + 
                    "procurementMethod=&procurementMethod=LYeFdNZ&procurementMethod=&" + 
                    "procuringEntityCityId=_EM_78025_XYZ_&procuringEntityCityId=8oMTvBeZ&procuringEntityCityId=bhDy&" + 
                    "procuringEntityDepartmentId=&" + 
                    "pageNumber=449&" + 
                    "pageSize=375&" + 
                    "minAwardValue=0.5371319010154129&" + 
                    "electronicSubmission=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/awardsByLocation
    */
    @Test(timeout = 60000)
    public void test_156_postOnAwardsByLocationReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/awardsByLocation?" + 
                    "planningLoc=dp&planningLoc=unj9bQHInfwiDz&planningLoc=26rmQ&planningLoc=rQ9VkvGoUt9bOraT&" + 
                    "pageNumber=795&" + 
                    "pageSize=135&" + 
                    "maxTenderValue=0.8409966105172747&" + 
                    "minAwardValue=0.7385227266926011&" + 
                    "maxAwardValue=0.33176290560491917&" + 
                    "flagged=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/fundingByTenderDeliveryLocation
    */
    @Test(timeout = 60000)
    public void test_157_postOnFundingByTenderDeliveryLocationReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/fundingByTenderDeliveryLocation?" + 
                    "notBidSelectionMethod=_EM_96032_XYZ_&" + 
                    "contrMethod=&" + 
                    "planningLoc=&planningLoc=&planningLoc=BHr1CdJ9BA33veX&" + 
                    "tenderLoc=K3EMTzZKsLChHg&tenderLoc=Ar&tenderLoc=GsLfZwICVR6w7M&tenderLoc=_EM_96033_XYZ_&" + 
                    "procuringEntityCityId=_EM_96037_XYZ_&" + 
                    "procuringEntityGroupId=798&" + 
                    "pageNumber=484&" + 
                    "pageSize=649&" + 
                    "maxTenderValue=0.3144994593279946&" + 
                    "electronicSubmission=false&" + 
                    "monthly=true&" + 
                    "password=njh8vFLwiNO5A")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/fundingByTenderDeliveryLocation
    */
    @Test(timeout = 60000)
    public void test_158_postOnApiFundingByTenderDeliveryLocationWithQueryParamsReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/fundingByTenderDeliveryLocation?" + 
                    "bidTypeId=NqcUti6&bidTypeId=5LVSdZ&" + 
                    "notBidTypeId=oa&notBidTypeId=CJ0HpSSJDm&notBidTypeId=kOgi8WfT&notBidTypeId=05tY0DPL&" + 
                    "procuringEntityId=x9n1190q&procuringEntityId=t9IHTEz&" + 
                    "supplierId=1&supplierId=uiA&supplierId=7fcgQRbQ21H&supplierId=m4b8t8&supplierId=np&" + 
                    "bidSelectionMethod=Gwfq8oEMj7wub&bidSelectionMethod=xotMrYohLUk&bidSelectionMethod=&bidSelectionMethod=bfbW2oxBVS5NY&" + 
                    "notBidSelectionMethod=KCKM_eNONj805TrE&notBidSelectionMethod=nEFH&notBidSelectionMethod=a&notBidSelectionMethod=9zqYkT4&" + 
                    "planningLoc=T0bWcB4M2yGHGU&planningLoc=wp0JeSI&planningLoc=8LTB8iBZRBWfdq52&" + 
                    "tenderLoc=CmgKUhrL2DcAz&tenderLoc=t9moJQ81M&tenderLoc=&" + 
                    "procurementMethod=F&procurementMethod=B6&procurementMethod=&procurementMethod=u&procurementMethod=&" + 
                    "procuringEntityCityId=HnzGLAhOqw&" + 
                    "procuringEntityDepartmentId=347&procuringEntityDepartmentId=265&" + 
                    "maxTenderValue=0.28205519126634926&" + 
                    "maxAwardValue=0.2664049633328911&" + 
                    "flagged=false&" + 
                    "skip=yIN1ause&" + 
                    "password=ikEONOC&" + 
                    "class=ChUvOBLBk&" + 
                    "yearFilterPagingRequest=VD&" + 
                    "username=9oh")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/fundingByTenderDeliveryLocation
    */
    @Test(timeout = 60000)
    public void test_159_postOnFundingByTenderDeliveryLocationReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/fundingByTenderDeliveryLocation?" + 
                    "bidTypeId=&" + 
                    "supplierId=_EM_38611_XYZ_&supplierId=37iSxPqh&" + 
                    "notBidSelectionMethod=_EM_38612_XYZ_&" + 
                    "procurementMethod=_EM_38616_XYZ_&procurementMethod=_EM_38617_XYZ_&procurementMethod=_EM_38618_XYZ_&" + 
                    "procuringEntityDepartmentId=124&procuringEntityDepartmentId=454&procuringEntityDepartmentId=677&" + 
                    "pageNumber=709&" + 
                    "minTenderValue=0.9246511154219118&" + 
                    "minAwardValue=0.7249655492744544&" + 
                    "flagged=false&" + 
                    "monthly=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/fundingByTenderDeliveryLocation
    */
    @Test(timeout = 60000)
    public void test_160_postOnApiFundingByTenderDeliveryLocationWithQueryParamsAndMonthly() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/fundingByTenderDeliveryLocation?" + 
                    "bidTypeId=&" + 
                    "notBidSelectionMethod=&" + 
                    "planningLoc=&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=_EM_68179_XYZ_&procurementMethod=_EM_68180_XYZ_&procurementMethod=_EM_68181_XYZ_&procurementMethod=kT48&procurementMethod=_EM_68182_XYZ_&" + 
                    "procuringEntityCityId=zZmFQ_Lf_tGbz&" + 
                    "maxAwardValue=0.17798674109285206&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "monthly=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentTendersAwardedWithTwoOrMoreTenderers
    */
    @Test(timeout = 60000)
    public void test_161_postOnPercentTendersAwardedWithTwoOrMoreTenderersReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_29956_XYZ_")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/percentTendersAwardedWithTwoOrMoreTenderers?" + 
                    "bidTypeId=U&bidTypeId=tvmay&bidTypeId=wfbrE&" + 
                    "supplierId=8nMrLssHPWnP&supplierId=CLFUu6Zz4O&" + 
                    "bidSelectionMethod=_EM_29948_XYZ_&" + 
                    "tenderLoc=6MefqMjkG_X0a&tenderLoc=q7Hiw&" + 
                    "procuringEntityCityId=HskSUhwPgOBVostr&procuringEntityCityId=_EM_29955_XYZ_&" + 
                    "procuringEntityDepartmentId=128&procuringEntityDepartmentId=183&" + 
                    "minTenderValue=0.8928261106183338&" + 
                    "maxTenderValue=0.8088157605092237&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/avgTimeFromPlanToTenderPhase
    */
    @Test(timeout = 60000)
    public void test_162_postOnAvgTimeFromPlanToTenderPhaseReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/avgTimeFromPlanToTenderPhase?" + 
                    "procuringEntityId=NcKno&" + 
                    "notProcuringEntityId=Wcc&" + 
                    "supplierId=glJfdhOy9Gv9l&supplierId=Evlsqd0QS2CH&supplierId=_EM_23678_XYZ_&" + 
                    "bidSelectionMethod=_EM_23679_XYZ_&bidSelectionMethod=_EM_23680_XYZ_&bidSelectionMethod=hSYIdEau&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=&" + 
                    "procuringEntityDepartmentId=787&procuringEntityDepartmentId=267&" + 
                    "procuringEntityGroupId=329&procuringEntityGroupId=384&" + 
                    "pageSize=800&" + 
                    "minTenderValue=0.7114709612371499&" + 
                    "maxAwardValue=0.39235138993536467&" + 
                    "electronicSubmission=false&" + 
                    "monthly=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/avgTimeFromPlanToTenderPhase
    */
    @Test(timeout = 60000)
    public void test_163_postOnApiAvgTimeFromPlanToTenderPhaseWithQueryParamsReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/avgTimeFromPlanToTenderPhase?" + 
                    "bidTypeId=FHTni8mnRe5CJ&bidTypeId=70MD5tWlsN&bidTypeId=S9Fc9zBdc3&" + 
                    "notBidTypeId=l7kRBKdG07vb&notBidTypeId=aROkC6IWPZF&" + 
                    "procuringEntityId=&" + 
                    "supplierId=_EM_56082_XYZ_&" + 
                    "bidSelectionMethod=eGSgyebj&" + 
                    "planningLoc=L2En6BwxJASdJKaH&planningLoc=_EM_56089_XYZ_&planningLoc=_EM_56090_XYZ_&planningLoc=_EM_56091_XYZ_&planningLoc=WyxmvL&" + 
                    "procuringEntityDepartmentId=898&procuringEntityDepartmentId=660&procuringEntityDepartmentId=746&" + 
                    "procuringEntityGroupId=350&procuringEntityGroupId=732&procuringEntityGroupId=738&procuringEntityGroupId=916&procuringEntityGroupId=785&" + 
                    "pageNumber=350&" + 
                    "pageSize=153&" + 
                    "maxTenderValue=0.37291740071556334&" + 
                    "minAwardValue=0.06447297223681492&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "monthly=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/avgTimeFromPlanToTenderPhase
    */
    @Test(timeout = 60000)
    public void test_164_postOnAvgTimeFromPlanToTenderPhaseReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/avgTimeFromPlanToTenderPhase?" + 
                    "bidTypeId=y&" + 
                    "notBidSelectionMethod=&" + 
                    "tenderLoc=&" + 
                    "procuringEntityGroupId=&" + 
                    "pageSize=968&" + 
                    "minTenderValue=0.1708541382038371&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "EMextraParam123=_EM_11448_XYZ_&" + 
                    "password=9mimOTLV&" + 
                    "yearFilterPagingRequest=fN7pNcIpfQsYWSk")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentTendersWithLinkedProcurementPlan
    */
    @Test(timeout = 60000)
    public void test_165_postOnPercentTendersWithLinkedProcurementPlanReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/percentTendersWithLinkedProcurementPlan?" + 
                    "bidTypeId=0KuYL4pnKzUi3bJ&" + 
                    "procuringEntityId=&procuringEntityId=m4bu9gVC&procuringEntityId=38&" + 
                    "supplierId=&" + 
                    "bidSelectionMethod=0elH3&bidSelectionMethod=srJJJtqU&" + 
                    "notBidSelectionMethod=n&" + 
                    "planningLoc=RTo3NompSuJ0k&planningLoc=DI0EzocAAhV&planningLoc=iA&" + 
                    "tenderLoc=c_vX&tenderLoc=kFqIC&tenderLoc=BwdnUHfdB_E&" + 
                    "procuringEntityCityId=USC4RKU17u&procuringEntityCityId=jS&" + 
                    "procuringEntityDepartmentId=137&procuringEntityDepartmentId=786&procuringEntityDepartmentId=265&procuringEntityDepartmentId=489&" + 
                    "procuringEntityGroupId=321&procuringEntityGroupId=670&procuringEntityGroupId=880&procuringEntityGroupId=537&" + 
                    "pageSize=491&" + 
                    "minTenderValue=0.5881501345980018&" + 
                    "monthly=true&" + 
                    "skip=xZfdiy654ap&" + 
                    "password=jvbu")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/plannedFundingByLocation
    */
    @Test(timeout = 60000)
    public void test_166_postOnPlannedFundingByLocationReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/plannedFundingByLocation?" + 
                    "supplierId=fWTSgF&" + 
                    "bidSelectionMethod=&" + 
                    "planningLoc=CnwL6OdYvysFIqP&planningLoc=0&planningLoc=W9e_6byq00iSRm&planningLoc=_EM_93641_XYZ_&" + 
                    "procurementMethod=xLbsR4ndeiZzLQCW&" + 
                    "procuringEntityCityId=qbUjoIcNIB47P4&procuringEntityCityId=d1v8ZHzfvUYxDI&procuringEntityCityId=GZpxtURbiC&" + 
                    "procuringEntityDepartmentId=529&procuringEntityDepartmentId=442&" + 
                    "procuringEntityGroupId=262506&" + 
                    "pageNumber=2329&" + 
                    "maxTenderValue=0.3873890385369597&" + 
                    "minAwardValue=0.8801348554838305&" + 
                    "electronicSubmission=true&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "class=2eMLwqtiNFCpHj&" + 
                    "yearFilterPagingRequest=BSxlm")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/plannedFundingByLocation
    */
    @Test(timeout = 60000)
    public void test_167_postOnPlannedFundingByLocationReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/plannedFundingByLocation?" + 
                    "notBidTypeId=&" + 
                    "procuringEntityId=&" + 
                    "supplierId=JX7R8kkqhE&supplierId=nupf5Q&" + 
                    "bidSelectionMethod=_EM_24863_XYZ_&bidSelectionMethod=QarYBhdD3JAud8&bidSelectionMethod=_EM_24864_XYZ_&bidSelectionMethod=_EM_24865_XYZ_&" + 
                    "notBidSelectionMethod=Pd4vpQK&notBidSelectionMethod=JGHssUmFgSRbeQ1&notBidSelectionMethod=_EM_24866_XYZ_&" + 
                    "contrMethod=Pw&contrMethod=0vXphw&contrMethod=NGfydGr&contrMethod=sHSSlu7dviWkD3&" + 
                    "procurementMethod=2JSTJYr6Q&procurementMethod=_EM_24868_XYZ_&procurementMethod=3q6&" + 
                    "procuringEntityCityId=ZFVdmGF&" + 
                    "procuringEntityGroupId=64&procuringEntityGroupId=580&procuringEntityGroupId=915&" + 
                    "pageNumber=475&" + 
                    "pageSize=500&" + 
                    "minTenderValue=0.6557317326134526&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "skip=P0stwf14p&" + 
                    "class=JuVmNnmG&" + 
                    "yearFilterPagingRequest=Ua4M")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/plannedFundingByLocation
    */
    @Test(timeout = 60000)
    public void test_168_postOnPlannedFundingByLocationReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/plannedFundingByLocation?" + 
                    "bidTypeId=A&" + 
                    "notBidTypeId=RIGGING&notBidTypeId=jGDT8rmABmv1vPzI&" + 
                    "bidSelectionMethod=_EM_87777_XYZ_&bidSelectionMethod=dZaPgUS&bidSelectionMethod=&bidSelectionMethod=_EM_87778_XYZ_&" + 
                    "contrMethod=&" + 
                    "tenderLoc=_EM_87782_XYZ_&tenderLoc=8_Hge&tenderLoc=pFM9MXR2&tenderLoc=Eey3H&tenderLoc=_EM_87783_XYZ_&" + 
                    "procuringEntityCityId=rwKzYrGfSw5k&procuringEntityCityId=_EM_87784_XYZ_&procuringEntityCityId=_EM_87785_XYZ_&" + 
                    "procuringEntityDepartmentId=50&" + 
                    "maxTenderValue=0.04726965438161834&" + 
                    "electronicSubmission=true&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "skip=Zh5HF400&" + 
                    "password=SKxWBvwhbNSo&" + 
                    "class=gsUpCwaL2CdB4&" + 
                    "yearFilterPagingRequest=ukyn")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/plannedFundingByLocation
    */
    @Test(timeout = 60000)
    public void test_169_postOnPlannedFundingByLocationReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/plannedFundingByLocation?" + 
                    "notBidTypeId=&" + 
                    "procuringEntityId=&" + 
                    "supplierId=JX7R8kkqhE&supplierId=nupf5Q&" + 
                    "bidSelectionMethod=_EM_24863_XYZ_&bidSelectionMethod=QarYBhdD3JAud8&bidSelectionMethod=_EM_24864_XYZ_&bidSelectionMethod=_EM_24865_XYZ_&" + 
                    "notBidSelectionMethod=Pd4vpQK&notBidSelectionMethod=JGHssUmFgSRbeQ1&notBidSelectionMethod=_EM_24866_XYZ_&" + 
                    "contrMethod=Pw&contrMethod=0vXphw&contrMethod=NGfydGr&contrMethod=sHSSlu7dviWkD3&" + 
                    "procurementMethod=2JSTJYr6Q&procurementMethod=_EM_24868_XYZ_&procurementMethod=3q6&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityGroupId=64&procuringEntityGroupId=580&procuringEntityGroupId=915&" + 
                    "pageNumber=475&" + 
                    "pageSize=500&" + 
                    "minTenderValue=0.6557317326134526&" + 
                    "electronicSubmission=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentTendersWithLinkedProcurementPlan
    */
    @Test(timeout = 60000)
    public void test_170_postOnPercentTendersWithLinkedProcurementPlanReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/percentTendersWithLinkedProcurementPlan?" + 
                    "supplierId=KGG4h&" + 
                    "bidSelectionMethod=_EM_24618_XYZ_&bidSelectionMethod=_EM_24619_XYZ_&" + 
                    "contrMethod=&" + 
                    "planningLoc=_EM_24621_XYZ_&planningLoc=_EM_24622_XYZ_&planningLoc=_EM_24623_XYZ_&planningLoc=_EM_24624_XYZ_&" + 
                    "procurementMethod=_EM_24627_XYZ_&procurementMethod=_EM_24628_XYZ_&procurementMethod=JywyhzRBp&procurementMethod=QRyhN4v8D&procurementMethod=8&" + 
                    "procuringEntityDepartmentId=768&procuringEntityDepartmentId=142&procuringEntityDepartmentId=108&procuringEntityDepartmentId=309&" + 
                    "pageNumber=187")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentTendersWithLinkedProcurementPlan
    */
    @Test(timeout = 60000)
    public void test_171_postOnPercentTendersWithLinkedProcurementPlanReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_44988_XYZ_")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/percentTendersWithLinkedProcurementPlan?" + 
                    "bidTypeId=RIGGING&bidTypeId=FRAUD&bidTypeId=8drflbdOalR&" + 
                    "notProcuringEntityId=3ZAF1LUU&" + 
                    "bidSelectionMethod=FkF&bidSelectionMethod=uJXd14a&bidSelectionMethod=dS&bidSelectionMethod=_EM_44979_XYZ_&" + 
                    "planningLoc=5&" + 
                    "tenderLoc=_EM_44984_XYZ_&" + 
                    "procuringEntityCityId=_EM_44986_XYZ_&procuringEntityCityId=9Vy&" + 
                    "procuringEntityGroupId=777&" + 
                    "month=&" + 
                    "minTenderValue=0.15057538500440193&" + 
                    "flagged=false&" + 
                    "monthly=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentTendersWithLinkedProcurementPlan
    */
    @Test(timeout = 60000)
    public void test_172_postOnPercentTendersWithLinkedProcurementPlanReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/percentTendersWithLinkedProcurementPlan?" + 
                    "notBidTypeId=&notBidTypeId=lDDaMpbSKIt2ETJ&notBidTypeId=PaQp&notBidTypeId=cujIYiTdet1O&" + 
                    "procuringEntityId=eDe9jqMpCbH&procuringEntityId=v4oSqysGoMrC&procuringEntityId=Yahwkrvxpq&procuringEntityId=eHHfL&procuringEntityId=yQafvrUFqfp7DC&" + 
                    "bidSelectionMethod=&" + 
                    "notBidSelectionMethod=&" + 
                    "tenderLoc=ocy3MaaC4JdMdcps&tenderLoc=Jo51Y0rbg1h&tenderLoc=&" + 
                    "procuringEntityCityId=ttpPffjbCAVA938&procuringEntityCityId=eMo4&" + 
                    "procuringEntityDepartmentId=&" + 
                    "month=&" + 
                    "pageNumber=947&" + 
                    "maxTenderValue=0.20018477773088172&" + 
                    "maxAwardValue=0.953022222714259&" + 
                    "electronicSubmission=false&" + 
                    "EMextraParam123=_EM_11711_XYZ_&" + 
                    "skip=xQPb6rD7z12II&" + 
                    "yearFilterPagingRequest=KMns2&" + 
                    "username=ry9dtODW")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/tenderPriceByProcurementMethod
    */
    @Test(timeout = 60000)
    public void test_173_postOnTenderPriceByProcurementMethodReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/tenderPriceByProcurementMethod?" + 
                    "bidTypeId=FRAUD&" + 
                    "bidSelectionMethod=quFaElxv&" + 
                    "notBidSelectionMethod=_EM_92114_XYZ_&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=DtUeJXe4nL26_qC&procurementMethod=uvGkOlk&procurementMethod=QmfLx50&procurementMethod=_EM_92117_XYZ_&" + 
                    "procuringEntityCityId=dIj&procuringEntityCityId=xQO&" + 
                    "procuringEntityDepartmentId=802&procuringEntityDepartmentId=834&procuringEntityDepartmentId=192&procuringEntityDepartmentId=361&procuringEntityDepartmentId=300&" + 
                    "pageNumber=158&" + 
                    "minTenderValue=0.5745646071338495&" + 
                    "maxTenderValue=0.16612337828856139&" + 
                    "minAwardValue=0.3543634389604302&" + 
                    "skip=l6l&" + 
                    "class=2NT&" + 
                    "yearFilterPagingRequest=_EM_92118_XYZ_&" + 
                    "username=_EM_92119_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/planningByLocation
    */
    @Test(timeout = 60000)
    public void test_174_postOnApiPlanningByLocationWithQueryParamsFlaggedReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/planningByLocation?" + 
                    "bidTypeId=OChLGHtb1FxpEkzb&bidTypeId=WmOobegfG4&bidTypeId=0mmwViqSFR&" + 
                    "supplierId=_EM_24907_XYZ_&supplierId=_EM_24908_XYZ_&supplierId=feJVPMpGqW1&" + 
                    "bidSelectionMethod=CTNTM24chUhj&bidSelectionMethod=_EM_24909_XYZ_&" + 
                    "notBidSelectionMethod=_EM_24910_XYZ_&notBidSelectionMethod=_EM_24911_XYZ_&notBidSelectionMethod=_EM_24912_XYZ_&" + 
                    "planningLoc=_EM_24916_XYZ_&" + 
                    "tenderLoc=_EM_24917_XYZ_&tenderLoc=VU5ooJG6YqY1aaiB&tenderLoc=sQL&tenderLoc=_EM_24918_XYZ_&" + 
                    "procuringEntityDepartmentId=885&procuringEntityDepartmentId=187&" + 
                    "month=&" + 
                    "pageNumber=404&" + 
                    "minTenderValue=0.538489220229053&" + 
                    "maxAwardValue=0.7111039632559741&" + 
                    "flagged=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/planningByLocation
    */
    @Test(timeout = 60000)
    public void test_175_postOnApiPlanningByLocationWithQueryParamsElectronicSubmission() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/planningByLocation?" + 
                    "bidTypeId=yPGmZplIz2m8&bidTypeId=&" + 
                    "procuringEntityId=DI7G&procuringEntityId=8Uov&procuringEntityId=5ShoeCX1z3d&" + 
                    "supplierId=ZxWdF&supplierId=v6U&" + 
                    "bidSelectionMethod=&" + 
                    "procuringEntityCityId=1hKRH&procuringEntityCityId=FaMFs5&" + 
                    "procuringEntityDepartmentId=&" + 
                    "pageSize=1000&" + 
                    "minTenderValue=0.366580142944121&" + 
                    "minAwardValue=0.0775314542540132&" + 
                    "electronicSubmission=true&" + 
                    "monthly=true&" + 
                    "skip=IgJIH&" + 
                    "password=3oaCqeXkk&" + 
                    "class=lwN6BwrEvxgbz1a&" + 
                    "yearFilterPagingRequest=Gk7KfLRAn&" + 
                    "username=DtVMfXCBI5l")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/qualityAverageAwardPeriod
    */
    @Test(timeout = 60000)
    public void test_176_postOnQualityAverageAwardPeriodReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/qualityAverageAwardPeriod?" + 
                    "bidTypeId=b&bidTypeId=jrkrL0fqxx&" + 
                    "notBidTypeId=KG&" + 
                    "procuringEntityId=&" + 
                    "notProcuringEntityId=1n1Z6&notProcuringEntityId=CibBb1Jt53DDwf&notProcuringEntityId=c6vYz5rJfVmuC9Qj&notProcuringEntityId=zWmRPgWh&notProcuringEntityId=aN4PjU&" + 
                    "tenderLoc=Lg&tenderLoc=CIt6F&tenderLoc=nq2lnaS2AhDcXI&tenderLoc=aSr&tenderLoc=v_Q0XWBPW4L&" + 
                    "procuringEntityGroupId=316&procuringEntityGroupId=338&procuringEntityGroupId=916&" + 
                    "maxAwardValue=0.035095670495660314&" + 
                    "flagged=true&" + 
                    "password=au5nmBY_F&" + 
                    "defaultFilterPagingRequest=ReV7iz0&" + 
                    "username=aij")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/qualityAverageAwardPeriod
    */
    @Test(timeout = 60000)
    public void test_177_postOnQualityAverageAwardPeriodReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/qualityAverageAwardPeriod?" + 
                    "bidTypeId=HMyThTBDStZty&bidTypeId=kF8I5Zy7y9DLCXZa&bidTypeId=9T3Yrj7&bidTypeId=MONUg&bidTypeId=1R8AYFoLCf&" + 
                    "supplierId=uliO8pmJVDddyC&supplierId=RhC36pbowINIq&supplierId=o46Kepq9Eeq2t1&supplierId=_EM_16516_XYZ_&" + 
                    "bidSelectionMethod=K4lKlBPte&bidSelectionMethod=_EM_16517_XYZ_&bidSelectionMethod=&" + 
                    "notBidSelectionMethod=_EM_16518_XYZ_&notBidSelectionMethod=1CS&notBidSelectionMethod=_EM_16519_XYZ_&notBidSelectionMethod=8a80Zv5Uf9AxjjV&notBidSelectionMethod=_EM_16520_XYZ_&" + 
                    "planningLoc=SSN1lFoMX&planningLoc=_EM_16523_XYZ_&" + 
                    "tenderLoc=dFu1auNuiwew20N&" + 
                    "procurementMethod=OUv0cE&procurementMethod=_EM_16524_XYZ_&procurementMethod=_EM_16525_XYZ_&procurementMethod=_EM_16526_XYZ_&" + 
                    "pageSize=458&" + 
                    "minTenderValue=0.17074415757384043&" + 
                    "maxTenderValue=0.7553524628865125&" + 
                    "electronicSubmission=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/qualityAverageAwardPeriod
    */
    @Test(timeout = 60000)
    public void test_178_postOnQualityAverageAwardPeriodReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/qualityAverageAwardPeriod?" + 
                    "procuringEntityId=&" + 
                    "supplierId=1Giczy&supplierId=_EM_24962_XYZ_&supplierId=FB1M5EC7Yd4&supplierId=_EM_24963_XYZ_&" + 
                    "notBidSelectionMethod=KyHcnqoYmKqQ8_pS&notBidSelectionMethod=_EM_24964_XYZ_&" + 
                    "planningLoc=PETwORhg&planningLoc=_EM_24967_XYZ_&planningLoc=iJYGqARmNFoQ3Wv&planningLoc=Yf04DB&" + 
                    "tenderLoc=_EM_24968_XYZ_&tenderLoc=oE_Ekt602rDhohI&tenderLoc=_EM_24969_XYZ_&tenderLoc=_EM_24970_XYZ_&" + 
                    "procurementMethod=&" + 
                    "procuringEntityDepartmentId=183&procuringEntityDepartmentId=17&procuringEntityDepartmentId=580&procuringEntityDepartmentId=871&procuringEntityDepartmentId=954&" + 
                    "procuringEntityGroupId=&" + 
                    "pageSize=336&" + 
                    "minTenderValue=0.06007573264268862&" + 
                    "minAwardValue=0.012787131120187811&" + 
                    "maxAwardValue=0.9914635319301465&" + 
                    "flagged=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/qualityFundingByTenderDeliveryLocation
    */
    @Test(timeout = 60000)
    public void test_179_postOnQualityFundingByTenderDeliveryLocationReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/qualityFundingByTenderDeliveryLocation?" + 
                    "bidTypeId=hDx&bidTypeId=u3Y4x7sAh&bidTypeId=UVdZ0tXuX4XDHXAK&bidTypeId=K5eyHZ&bidTypeId=zQaHUbqyvdM&" + 
                    "notBidTypeId=&" + 
                    "notProcuringEntityId=90oh36r6NQ6AiL&notProcuringEntityId=SzgYIdzKMmAHb5p&notProcuringEntityId=q&" + 
                    "notBidSelectionMethod=&" + 
                    "procuringEntityCityId=OkucPZcgFOp7R6&procuringEntityCityId=pxYBmDWgBTk8dc&procuringEntityCityId=0&" + 
                    "procuringEntityDepartmentId=559&procuringEntityDepartmentId=603&procuringEntityDepartmentId=-744586500&procuringEntityDepartmentId=677&procuringEntityDepartmentId=64&" + 
                    "procuringEntityGroupId=758&procuringEntityGroupId=782&" + 
                    "pageNumber=744&" + 
                    "pageSize=468&" + 
                    "minTenderValue=0.03963596225206134&" + 
                    "maxTenderValue=0.7773527391648964&" + 
                    "minAwardValue=0.4982453178842503&" + 
                    "maxAwardValue=0.8545443855404027&" + 
                    "electronicSubmission=true&" + 
                    "monthly=true&" + 
                    "skip=FlGG&" + 
                    "class=_E&" + 
                    "yearFilterPagingRequest=j")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/qualityFundingByTenderDeliveryLocation
    */
    @Test(timeout = 60000)
    public void test_180_postOnQualityFundingByTenderDeliveryLocationReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/qualityFundingByTenderDeliveryLocation?" + 
                    "bidTypeId=hDx&bidTypeId=u3Y4x7sAh&bidTypeId=UVdZ0tXuX4XDHXAK&bidTypeId=K5eyHZ&bidTypeId=zQaHUbqyvdM&" + 
                    "notBidTypeId=&" + 
                    "notProcuringEntityId=90oh36r6NQ6AiL&notProcuringEntityId=SzgYIdzKMmAHb5p&notProcuringEntityId=q&" + 
                    "notBidSelectionMethod=&" + 
                    "procuringEntityCityId=OkucPZcgFOp7R6&procuringEntityCityId=pxYBmDWgBTk8dc&procuringEntityCityId=0&" + 
                    "procuringEntityDepartmentId=559&procuringEntityDepartmentId=603&procuringEntityDepartmentId=-744586500&procuringEntityDepartmentId=677&procuringEntityDepartmentId=64&" + 
                    "procuringEntityGroupId=758&procuringEntityGroupId=782&" + 
                    "pageNumber=744&" + 
                    "pageSize=468&" + 
                    "maxTenderValue=0.7773527391648964&" + 
                    "minAwardValue=0.4982453178842503&" + 
                    "maxAwardValue=0.8545443855404027&" + 
                    "electronicSubmission=true&" + 
                    "monthly=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/qualityPlannedFundingByLocation
    */
    @Test(timeout = 60000)
    public void test_181_postOnQualityPlannedFundingByLocationReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/qualityPlannedFundingByLocation?" + 
                    "bidTypeId=3v&" + 
                    "procuringEntityId=Rvo7h1rdASObvi&procuringEntityId=tIrGLyKkO&procuringEntityId=YBYm&" + 
                    "supplierId=NonV__u_0n&supplierId=voWUNdLjsVs7ME&supplierId=aVY_5ND6r8GZsHo&supplierId=FZErTawljDEP4MP&" + 
                    "bidSelectionMethod=8CUBk&" + 
                    "notBidSelectionMethod=ulUUDY&notBidSelectionMethod=v&notBidSelectionMethod=&" + 
                    "planningLoc=_EM_95843_XYZ_&planningLoc=6TT2viYcKSge&planningLoc=6Tgpk49OvGax&planningLoc=HbsMJ&" + 
                    "tenderLoc=6v%21&tenderLoc=uQemb6EDXCny&" + 
                    "procurementMethod=_EM_95844_XYZ_&procurementMethod=_EM_95845_XYZ_&procurementMethod=wj&procurementMethod=rO9Jyv3C1hMcnHw&" + 
                    "procuringEntityCityId=rbYZUfe&" + 
                    "procuringEntityGroupId=33160&" + 
                    "pageSize=642&" + 
                    "minTenderValue=2.568182238054442&" + 
                    "maxTenderValue=0.0&" + 
                    "maxAwardValue=0.030422517246235903&" + 
                    "flagged=true&" + 
                    "skip=9qbh5f1_DFxhFqK&" + 
                    "class=2dKAhc")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/qualityPlannedFundingByLocation
    */
    @Test(timeout = 60000)
    public void test_182_postOnQualityPlannedFundingByLocationReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/qualityPlannedFundingByLocation?" + 
                    "bidTypeId=&" + 
                    "notBidTypeId=MFK4gIUd251rohZ&" + 
                    "notProcuringEntityId=&" + 
                    "supplierId=&" + 
                    "bidSelectionMethod=_EM_20543_XYZ_&bidSelectionMethod=tBOxebnR_nLnzv8&bidSelectionMethod=_EM_20544_XYZ_&" + 
                    "notBidSelectionMethod=&" + 
                    "contrMethod=SVLCJ&" + 
                    "planningLoc=&" + 
                    "tenderLoc=_EM_20545_XYZ_&tenderLoc=_EM_20546_XYZ_&" + 
                    "procurementMethod=sN&procurementMethod=imjSTi1Lf3N&procurementMethod=_EM_20547_XYZ_&procurementMethod=1riU7&" + 
                    "procuringEntityCityId=T&procuringEntityCityId=fEL6YDNnr8Jnk&procuringEntityCityId=_EM_20548_XYZ_&" + 
                    "procuringEntityGroupId=644&" + 
                    "pageNumber=127&" + 
                    "pageSize=408&" + 
                    "maxTenderValue=-0.21921755081179245&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "password=WU_1uZSjUTNd&" + 
                    "defaultFilterPagingRequest=Wk7&" + 
                    "username=JJ2mqPACkR2IxEr")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/qualityPlannedFundingByLocation
    */
    @Test(timeout = 60000)
    public void test_183_postOnQualityPlannedFundingByLocationReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/qualityPlannedFundingByLocation?" + 
                    "notBidTypeId=zdd5aehNFm&notBidTypeId=P&notBidTypeId=P5yZXitihTY&notBidTypeId=tggzo01h&" + 
                    "notProcuringEntityId=vNTGUCEIXWj4&notProcuringEntityId=ABfCEVzoWs666W&notProcuringEntityId=XrNp&notProcuringEntityId=xcOhaW8wThdXXbao&" + 
                    "supplierId=NonV__u_0n&supplierId=voWUNdLjsVs7ME&supplierId=aVY_5ND6r8GZsHo&supplierId=FZErTawljDEP4MP&" + 
                    "notBidSelectionMethod=ulUUDY&notBidSelectionMethod=v&notBidSelectionMethod=&notBidSelectionMethod=&" + 
                    "contrMethod=esShsL34bB2SaNY&contrMethod=N0sP&" + 
                    "planningLoc=&planningLoc=6TX2viYcKSge&planningLoc=6Tgpk49OvGax&planningLoc=HbsMJ&" + 
                    "tenderLoc=6v1&tenderLoc=uRemb6EDXCny1&" + 
                    "procuringEntityDepartmentId=&" + 
                    "procuringEntityGroupId=&" + 
                    "pageSize=641&" + 
                    "minTenderValue=0.8033549744003305&" + 
                    "minAwardValue=0.07681375968412696&" + 
                    "maxAwardValue=0.030422517246235903&" + 
                    "electronicSubmission=false&" + 
                    "skip=jRM8nyBgFhU_G&" + 
                    "password=UNVt_dU&" + 
                    "class=1&" + 
                    "username=evJkifKGJGdz5q")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/qualityPlannedFundingByLocation
    */
    @Test(timeout = 60000)
    public void test_184_postOnQualityPlannedFundingByLocationReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/qualityPlannedFundingByLocation?" + 
                    "bidSelectionMethod=iOQsNjUjEv55&bidSelectionMethod=_EM_31133_XYZ_&" + 
                    "contrMethod=&" + 
                    "tenderLoc=_EM_31134_XYZ_&tenderLoc=n5JuWtt9Y&tenderLoc=l2QpH54f2m&tenderLoc=jBb1EVSiurBf&tenderLoc=_EM_31135_XYZ_&" + 
                    "procurementMethod=_EM_31136_XYZ_&" + 
                    "procuringEntityDepartmentId=589&procuringEntityDepartmentId=486&procuringEntityDepartmentId=788&procuringEntityDepartmentId=128&" + 
                    "procuringEntityGroupId=512&procuringEntityGroupId=459&procuringEntityGroupId=736&procuringEntityGroupId=565&" + 
                    "pageNumber=428&" + 
                    "pageSize=487&" + 
                    "minTenderValue=0.5471421468485207&" + 
                    "minAwardValue=0.8958679026429289&" + 
                    "flagged=true&" + 
                    "skip=_EM_31137_XYZ_&" + 
                    "class=_EM_31139_XYZ_&" + 
                    "username=KiQkBYWN7M9nm6T")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/qualityPlannedFundingByLocation
    */
    @Test(timeout = 60000)
    public void test_185_postOnQualityPlannedFundingByLocationReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/qualityPlannedFundingByLocation?" + 
                    "bidTypeId=&" + 
                    "notBidTypeId=FaxByGbi&notBidTypeId=OqxJWc5J&" + 
                    "procuringEntityId=5&" + 
                    "supplierId=Xi3i&supplierId=tZl3x&supplierId=3Ga8YIAxMhJbQT&" + 
                    "bidSelectionMethod=2qkMS&bidSelectionMethod=kBmNOXHlKuKGsM3A&bidSelectionMethod=mxsbbg&" + 
                    "contrMethod=&contrMethod=9&" + 
                    "planningLoc=N8w4&planningLoc=Phq_ri0lHgvDB&planningLoc=Our&planningLoc=rA2ptvZx3&" + 
                    "procurementMethod=&" + 
                    "pageNumber=87&" + 
                    "minTenderValue=0.1115873614705648&" + 
                    "maxTenderValue=0.908660133314544&" + 
                    "minAwardValue=0.35217161605639435&" + 
                    "maxAwardValue=0.8460274590072481&" + 
                    "flagged=false&" + 
                    "EMextraParam123=_EM_26624_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/totalFlaggedIndicatorsByIndicatorTypeByYear
    */
    @Test(timeout = 60000)
    public void test_186_postOnTotalFlaggedIndicatorsByIndicatorTypeByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/totalFlaggedIndicatorsByIndicatorTypeByYear?" + 
                    "notBidTypeId=yShJ&notBidTypeId=vHkp&" + 
                    "supplierId=IWTHX1ZtKzaGq&supplierId=_EM_78397_XYZ_&supplierId=_EM_78398_XYZ_&supplierId=QO2t5UUJJN&" + 
                    "planningLoc=&" + 
                    "procurementMethod=b&procurementMethod=_rMAjLq9cMMQlY&procurementMethod=sslXaPsvz3&procurementMethod=_EM_78403_XYZ_&" + 
                    "procuringEntityDepartmentId=&" + 
                    "procuringEntityGroupId=338&procuringEntityGroupId=697&procuringEntityGroupId=955&" + 
                    "pageSize=326&" + 
                    "maxTenderValue=0.7169522324968948&" + 
                    "minAwardValue=0.8767212084807573&" + 
                    "electronicSubmission=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/tendersByLocation
    */
    @Test(timeout = 60000)
    public void test_187_postOnApiTendersByLocationWithQueryParamsMonthlyReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/tendersByLocation?" + 
                    "procuringEntityId=&" + 
                    "notProcuringEntityId=XwHGMmz8S&notProcuringEntityId=P9U75w9J&" + 
                    "bidSelectionMethod=&" + 
                    "tenderLoc=bAC&tenderLoc=NZbec&tenderLoc=ZHDzmN&tenderLoc=6dWUYt&tenderLoc=dnmtBx556T3NBk7&" + 
                    "procuringEntityCityId=yi75W&procuringEntityCityId=p&procuringEntityCityId=&" + 
                    "procuringEntityDepartmentId=166&procuringEntityDepartmentId=856&procuringEntityDepartmentId=-1104419182&procuringEntityDepartmentId=877&" + 
                    "procuringEntityGroupId=710&procuringEntityGroupId=1845530766&procuringEntityGroupId=802&" + 
                    "pageSize=411&" + 
                    "minTenderValue=0.3059436348378174&" + 
                    "maxTenderValue=0.11876686404171755&" + 
                    "minAwardValue=0.22083065445498407&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "monthly=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentTendersUsingEBid
    */
    @Test(timeout = 60000)
    public void test_188_postOnPercentTendersUsingEBidReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/percentTendersUsingEBid?" + 
                    "notBidTypeId=dBresZli&" + 
                    "notBidSelectionMethod=&" + 
                    "procurementMethod=_EM_24537_XYZ_&procurementMethod=_EM_24538_XYZ_&" + 
                    "month=&" + 
                    "minTenderValue=0.7596651076757115&" + 
                    "maxTenderValue=0.5833267329889952&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/topTenLargestTenders
    */
    @Test(timeout = 60000)
    public void test_189_postOnTopTenLargestTendersReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/topTenLargestTenders?" + 
                    "notBidTypeId=&" + 
                    "bidSelectionMethod=&" + 
                    "planningLoc=_EM_37645_XYZ_&planningLoc=_EM_37646_XYZ_&" + 
                    "tenderLoc=REhNl8xGgdoYgI&tenderLoc=YGB6IsQeA&tenderLoc=_EM_37647_XYZ_&tenderLoc=AONLoL&" + 
                    "procurementMethod=&" + 
                    "procuringEntityCityId=1a9rTJpBPk5VG&procuringEntityCityId=c9&" + 
                    "procuringEntityGroupId=598&procuringEntityGroupId=291&" + 
                    "pageNumber=820&" + 
                    "pageSize=145&" + 
                    "minTenderValue=0.05138329453735957&" + 
                    "minAwardValue=0.6576345466232717&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "skip=7_BT1&" + 
                    "password=N5SlWzdYKs4I7&" + 
                    "class=8jHntVOYPITwfzf&" + 
                    "yearFilterPagingRequest=r1Tq9DFd0fSVkGnz&" + 
                    "username=N4Et5uQ9tO")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/topTenLargestTenders
    */
    @Test(timeout = 60000)
    public void test_190_postOnTopTenLargestTendersReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_19148_XYZ_")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/topTenLargestTenders?" + 
                    "notBidTypeId=&" + 
                    "bidSelectionMethod=&" + 
                    "tenderLoc=REhNl8xGgdoYgI&tenderLoc=YGB6IsQeA&tenderLoc=_EM_37647_XYZ_&tenderLoc=AONLoL&" + 
                    "procurementMethod=&" + 
                    "pageNumber=820&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/topTenLargestTenders
    */
    @Test(timeout = 60000)
    public void test_191_postOnTopTenLargestTendersReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/topTenLargestTenders?" + 
                    "notBidTypeId=&" + 
                    "bidSelectionMethod=&" + 
                    "planningLoc=_EM_37645_XYZ_&planningLoc=_EM_37646_XYZ_&" + 
                    "tenderLoc=REhNl8xGgdoYgI&tenderLoc=YGB6IsQeA&tenderLoc=_EM_37647_XYZ_&tenderLoc=AONLoL&" + 
                    "procurementMethod=&" + 
                    "pageNumber=820&" + 
                    "pageSize=145&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "skip=7_BT1&" + 
                    "password=N5SlWzdYKs4I7&" + 
                    "class=8jHntVOYPITwfzf&" + 
                    "yearFilterPagingRequest=r1Tq9DFd0fSVkGnz&" + 
                    "username=N4Et5uQ9tO")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/topTenLargestTenders
    */
    @Test(timeout = 60000)
    public void test_192_postOnTopTenLargestTendersReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/topTenLargestTenders?" + 
                    "notBidTypeId=&" + 
                    "bidSelectionMethod=&" + 
                    "planningLoc=_EM_37645_XYZ_&planningLoc=_EM_37646_XYZ_&" + 
                    "tenderLoc=REhNl8xGgdoYgI&tenderLoc=YGB6IsQeA&tenderLoc=_EM_37647_XYZ_&tenderLoc=AONLoL&" + 
                    "procurementMethod=&" + 
                    "pageNumber=820&" + 
                    "pageSize=145&" + 
                    "minAwardValue=0.6576345466232717&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "skip=7_BT1&" + 
                    "password=N5SlWzdYKs4I7&" + 
                    "class=8jHntVOYPITwfzf&" + 
                    "yearFilterPagingRequest=r1Tq9DFd0fSVkGnz&" + 
                    "username=N4Et5uQ9tO")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/costEffectivenessTenderAmount
    */
    @Test(timeout = 60000)
    public void test_193_postOnApiCostEffectivenessTenderAmountWithQueryParamsReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/costEffectivenessTenderAmount?" + 
                    "bidTypeId=K7D3siT&bidTypeId=diKrrn&bidTypeId=Qdcpnjh&" + 
                    "notBidTypeId=&" + 
                    "bidSelectionMethod=&" + 
                    "planningLoc=Dl9qX3fGtsE&planningLoc=&planningLoc=_EM_15409_XYZ_&" + 
                    "procuringEntityCityId=AzAjuwWaUnd&" + 
                    "procuringEntityDepartmentId=379&procuringEntityDepartmentId=655&procuringEntityDepartmentId=-1388095267&procuringEntityDepartmentId=254&procuringEntityDepartmentId=42&" + 
                    "procuringEntityGroupId=738&procuringEntityGroupId=-559218384&procuringEntityGroupId=977&procuringEntityGroupId=194&procuringEntityGroupId=485&" + 
                    "pageNumber=644&" + 
                    "maxAwardValue=0.6691674593067884&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/costEffectivenessTenderAmount
    */
    @Test(timeout = 60000)
    public void test_194_postOnCostEffectivenessTenderAmountReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/costEffectivenessTenderAmount?" + 
                    "notProcuringEntityId=Sojbw&" + 
                    "supplierId=&" + 
                    "bidSelectionMethod=&" + 
                    "notBidSelectionMethod=1fiQ7ZXn&notBidSelectionMethod=_EM_50449_XYZ_&" + 
                    "contrMethod=&" + 
                    "planningLoc=_EM_50450_XYZ_&planningLoc=_EM_50451_XYZ_&planningLoc=_EM_50452_XYZ_&planningLoc=_EM_50453_XYZ_&planningLoc=jTgI2w74V&" + 
                    "tenderLoc=_EM_50454_XYZ_&tenderLoc=EffWFBZrY3gdrX&tenderLoc=_EM_50455_XYZ_&" + 
                    "procurementMethod=_EM_50456_XYZ_&procurementMethod=_EM_50457_XYZ_&procurementMethod=hGgXwjrqB&" + 
                    "procuringEntityCityId=kyblSde&" + 
                    "pageNumber=248&" + 
                    "minTenderValue=0.32904271156607556&" + 
                    "minAwardValue=0.817834462203385&" + 
                    "maxAwardValue=0.7827330148822562&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "groupByCategory=bidTypeId&" + 
                    "skip=5IXEOhygAN1zkczt&" + 
                    "password=cINe85OCPY1ewYy&" + 
                    "class=f2&" + 
                    "groupingFilterPagingRequest=oFLdpK4BT&" + 
                    "username=5hl026b4fDN52RF")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/totalCancelledTendersByYearByRationale
    */
    @Test(timeout = 60000)
    public void test_195_postOnTotalCancelledTendersByYearByRationaleReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/totalCancelledTendersByYearByRationale?" + 
                    "notBidTypeId=&" + 
                    "notBidSelectionMethod=WeaKS5YvFl&" + 
                    "contrMethod=&" + 
                    "tenderLoc=_EM_20709_XYZ_&tenderLoc=Yf&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityGroupId=819&" + 
                    "pageSize=626&" + 
                    "minTenderValue=0.12249293067805844&" + 
                    "maxTenderValue=0.5620441350615654&" + 
                    "minAwardValue=0.8801702879558143&" + 
                    "maxAwardValue=0.25679412488454323&" + 
                    "electronicSubmission=true&" + 
                    "flagged=true&" + 
                    "monthly=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/totalCancelledTendersByYearByRationale
    */
    @Test(timeout = 60000)
    public void test_196_postOnApiTotalCancelledTendersByYearByRationaleWithQueryParamsFlagged() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/totalCancelledTendersByYearByRationale?" + 
                    "supplierId=IGFnOIRmOEsy&supplierId=QqHlsUtHny1Eb16&supplierId=D&" + 
                    "notBidSelectionMethod=&" + 
                    "procuringEntityDepartmentId=700&procuringEntityDepartmentId=226&procuringEntityDepartmentId=29&procuringEntityDepartmentId=598&procuringEntityDepartmentId=529&" + 
                    "procuringEntityGroupId=161&procuringEntityGroupId=394&" + 
                    "minTenderValue=0.06309735846944275&" + 
                    "maxTenderValue=0.2990960724892908&" + 
                    "minAwardValue=0.31045205856075786&" + 
                    "maxAwardValue=0.26137720845887846&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/totalCancelledTendersByYearByRationale
    */
    @Test(timeout = 60000)
    public void test_197_postOnTotalCancelledTendersByYearByRationaleReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/totalCancelledTendersByYearByRationale?" + 
                    "notBidTypeId=GCJF0qVcG5JYW&" + 
                    "notBidSelectionMethod=Wa7QLUV5x88fajKw&notBidSelectionMethod=_EM_40763_XYZ_&" + 
                    "tenderLoc=9&" + 
                    "procurementMethod=&" + 
                    "procuringEntityCityId=zblQoYnRrbwt2Hb1&procuringEntityCityId=_EM_40766_XYZ_&" + 
                    "procuringEntityDepartmentId=353&" + 
                    "procuringEntityGroupId=&" + 
                    "pageNumber=76&" + 
                    "pageSize=353&" + 
                    "maxTenderValue=0.7513325841971858&" + 
                    "maxAwardValue=0.20126562973217366&" + 
                    "electronicSubmission=false&" + 
                    "monthly=true&" + 
                    "password=yV5b&" + 
                    "yearFilterPagingRequest=wXtx&" + 
                    "username=NpdBd0Iz5ZSXW")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/totalCancelledTendersByYearByRationale
    */
    @Test(timeout = 60000)
    public void test_198_postOnTotalCancelledTendersByYearByRationaleReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/totalCancelledTendersByYearByRationale?" + 
                    "notBidTypeId=GCJF2qVcG5JYW&" + 
                    "tenderLoc=9&" + 
                    "procurementMethod=&" + 
                    "procuringEntityCityId=zblQoYnRrbwt2Hb1&procuringEntityCityId=_EM_40766_XYZ_&" + 
                    "procuringEntityDepartmentId=353&" + 
                    "procuringEntityGroupId=&" + 
                    "pageSize=353&" + 
                    "maxTenderValue=0.7513325841971858&" + 
                    "electronicSubmission=false&" + 
                    "monthly=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/awardsByLocation
    */
    @Test(timeout = 60000)
    public void test_199_postOnAwardsByLocationReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/awardsByLocation?" + 
                    "planningLoc=dp&planningLoc=unj9bQHInfwiDz&planningLoc=26rmQ&planningLoc=rQ9VkvGoUt9bOraT&" + 
                    "pageNumber=795&" + 
                    "pageSize=135&" + 
                    "maxTenderValue=0.8409966105172747&" + 
                    "minAwardValue=0.7385227266926011&" + 
                    "maxAwardValue=0.33176290560491917&" + 
                    "flagged=false&" + 
                    "yearFilterPagingRequest=4xsXf")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/frequentSuppliersTimeInterval
    */
    @Test(timeout = 60000)
    public void test_200_postOnFrequentSuppliersTimeIntervalReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/frequentSuppliersTimeInterval?" + 
                    "intervalDays=130&" + 
                    "maxAwards=652")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/averageTenderPeriod
    */
    @Test(timeout = 60000)
    public void test_201_postOnAverageTenderPeriodReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/averageTenderPeriod?" + 
                    "notBidTypeId=mx&" + 
                    "notBidSelectionMethod=YtVvpu2plhk&notBidSelectionMethod=_EM_70091_XYZ_&notBidSelectionMethod=_EM_70092_XYZ_&notBidSelectionMethod=_EM_70093_XYZ_&" + 
                    "planningLoc=_EM_70095_XYZ_&planningLoc=_EM_70096_XYZ_&" + 
                    "procurementMethod=_EM_70097_XYZ_&" + 
                    "procuringEntityCityId=vqP&procuringEntityCityId=Cy1VYPgvrR3&procuringEntityCityId=iZ3ay5C4tAMQm503&procuringEntityCityId=_EM_70098_XYZ_&procuringEntityCityId=NX20Qmxmdip9qCyh&" + 
                    "procuringEntityGroupId=759&procuringEntityGroupId=0&" + 
                    "month=&" + 
                    "pageNumber=1000&" + 
                    "minTenderValue=0.9473078595914224&" + 
                    "maxTenderValue=0.7210551339686123&" + 
                    "flagged=false&" + 
                    "skip=u&" + 
                    "password=&" + 
                    "class=_EM_70099_XYZ_&" + 
                    "yearFilterPagingRequest=F6E5FQM7l&" + 
                    "username=JEXc8_h")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/averageTenderPeriod
    */
    @Test(timeout = 60000)
    public void test_202_postOnAverageTenderPeriodReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/averageTenderPeriod?" + 
                    "notBidTypeId=mx&" + 
                    "notBidSelectionMethod=YtVvpu2plhk&notBidSelectionMethod=_EM_70091_XYZ_&notBidSelectionMethod=_EM_70092_XYZ_&notBidSelectionMethod=_EM_70093_XYZ_&" + 
                    "planningLoc=_EM_70095_XYZ_&planningLoc=_EM_70096_XYZ_&" + 
                    "procurementMethod=_EM_70097_XYZ_&" + 
                    "procuringEntityCityId=vqP&procuringEntityCityId=Cy1VYPgvrR3&procuringEntityCityId=iZ3ay5C4tAMQm503&procuringEntityCityId=_EM_70098_XYZ_&procuringEntityCityId=NX20Qmxmdip9qCyh&" + 
                    "procuringEntityGroupId=759&procuringEntityGroupId=0&" + 
                    "minTenderValue=0.9473078595914224&" + 
                    "maxTenderValue=0.7210551339686123&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "skip=u&" + 
                    "password=&" + 
                    "class=_EM_70099_XYZ_&" + 
                    "yearFilterPagingRequest=F6E5FQM7l&" + 
                    "username=JEXc8_h")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/averageTenderPeriod
    */
    @Test(timeout = 60000)
    public void test_203_postOnAverageTenderPeriodReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/averageTenderPeriod?" + 
                    "notBidSelectionMethod=YtVvpu2plhk&notBidSelectionMethod=_EM_70091_XYZ_&notBidSelectionMethod=_EM_70092_XYZ_&notBidSelectionMethod=_EM_70093_XYZ_&" + 
                    "planningLoc=_EM_70095_XYZ_&planningLoc=_EM_70096_XYZ_&" + 
                    "procurementMethod=_EM_70097_XYZ_&" + 
                    "procuringEntityCityId=vqP&procuringEntityCityId=Cy1VYPgvrR3&procuringEntityCityId=iZ3ay5C4tAMQm503&procuringEntityCityId=_EM_70098_XYZ_&procuringEntityCityId=NX20Qmxmdip9qCyh&" + 
                    "procuringEntityGroupId=759&procuringEntityGroupId=0&" + 
                    "minTenderValue=0.9473078595914224&" + 
                    "maxTenderValue=0.7210551339686123&" + 
                    "electronicSubmission=false&" + 
                    "skip=u&" + 
                    "password=&" + 
                    "yearFilterPagingRequest=F6E5FQM7l")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/activeAwardsCount
    */
    @Test(timeout = 60000)
    public void test_204_postOnActiveAwardsCountReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/activeAwardsCount?" + 
                    "supplierId=_EM_46350_XYZ_&supplierId=w93TzaNPcvKD8hL2&" + 
                    "bidSelectionMethod=BE&bidSelectionMethod=4&bidSelectionMethod=_EM_46351_XYZ_&bidSelectionMethod=D&bidSelectionMethod=&" + 
                    "planningLoc=hpBQNaGT__Xw80l&planningLoc=NRxByqy2aawJJ4uV&" + 
                    "procuringEntityCityId=oV&" + 
                    "procuringEntityDepartmentId=95&procuringEntityDepartmentId=432&procuringEntityDepartmentId=976&procuringEntityDepartmentId=593&procuringEntityDepartmentId=148&" + 
                    "pageSize=220&" + 
                    "class=_EM_46358_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/averageAwardPeriod
    */
    @Test(timeout = 60000)
    public void test_205_postOnAverageAwardPeriodReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/averageAwardPeriod?" + 
                    "notBidTypeId=LEFBa&notBidTypeId=2OscrHBptK8dM8&" + 
                    "bidSelectionMethod=_&" + 
                    "notBidSelectionMethod=f4DMq_bi&notBidSelectionMethod=_EM_23532_XYZ_&notBidSelectionMethod=_EM_23533_XYZ_&notBidSelectionMethod=W&notBidSelectionMethod=_EM_23534_XYZ_&" + 
                    "planningLoc=_EM_23535_XYZ_&" + 
                    "procuringEntityCityId=KK&" + 
                    "pageSize=433&" + 
                    "minTenderValue=0.7226328514873972&" + 
                    "maxTenderValue=0.9347080187398823&" + 
                    "minAwardValue=0.5261029025232145&" + 
                    "monthly=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/averageAwardPeriod
    */
    @Test(timeout = 60000)
    public void test_206_postOnAverageAwardPeriodReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/averageAwardPeriod?" + 
                    "notBidTypeId=Yq&" + 
                    "supplierId=_EM_82766_XYZ_&" + 
                    "planningLoc=&" + 
                    "procurementMethod=_EM_82772_XYZ_&procurementMethod=_EM_82773_XYZ_&procurementMethod=_EM_82774_XYZ_&" + 
                    "procuringEntityDepartmentId=967&procuringEntityDepartmentId=698&procuringEntityDepartmentId=741&procuringEntityDepartmentId=943&" + 
                    "procuringEntityGroupId=65&procuringEntityGroupId=218&procuringEntityGroupId=313&" + 
                    "minTenderValue=0.6353458273288941&" + 
                    "maxTenderValue=0.1977859202407728&" + 
                    "minAwardValue=0.26800468875805405&" + 
                    "monthly=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/averageAwardPeriod
    */
    @Test(timeout = 60000)
    public void test_207_postOnAverageAwardPeriodReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/averageAwardPeriod?" + 
                    "bidSelectionMethod=&" + 
                    "notBidSelectionMethod=594dhdQcn&" + 
                    "planningLoc=_EM_55283_XYZ_&" + 
                    "procuringEntityDepartmentId=&" + 
                    "pageNumber=445&" + 
                    "pageSize=14&" + 
                    "minTenderValue=0.9634772162150399&" + 
                    "maxTenderValue=0.8774443011067227&" + 
                    "minAwardValue=0.4474655004980925&" + 
                    "maxAwardValue=0.7833421301835977&" + 
                    "monthly=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/averageAwardPeriod
    */
    @Test(timeout = 60000)
    public void test_208_postOnAverageAwardPeriodReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/averageAwardPeriod?" + 
                    "bidTypeId=N2vigz0j&bidTypeId=d&" + 
                    "procuringEntityId=13AoxkCJgwZ&procuringEntityId=OlwM&procuringEntityId=wjjK&" + 
                    "notBidSelectionMethod=pKM5eF48YfaavN0&notBidSelectionMethod=Ek4H2zgKtTK&notBidSelectionMethod=_EM_27510_XYZ_&notBidSelectionMethod=b4&notBidSelectionMethod=f5m&" + 
                    "contrMethod=&" + 
                    "tenderLoc=ce5BMrNAewQqh&tenderLoc=IkOdH6zMTr7RHyWe&tenderLoc=WtID9A9fWa_9&tenderLoc=ms&tenderLoc=uAxdV7B&" + 
                    "procurementMethod=_EM_27513_XYZ_&procurementMethod=&procurementMethod=rDQo2h4N2RmAc&procurementMethod=&procurementMethod=_EM_27514_XYZ_&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityDepartmentId=210&procuringEntityDepartmentId=284&procuringEntityDepartmentId=926&procuringEntityDepartmentId=863&procuringEntityDepartmentId=276&" + 
                    "minAwardValue=0.5480459729579162&" + 
                    "class=Lgu02E9UechIpo_n&" + 
                    "username=fjxmgPomY43TErtE")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/averageTenderPeriod
    */
    @Test(timeout = 60000)
    public void test_209_postOnAverageTenderPeriodReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/averageTenderPeriod?" + 
                    "notBidSelectionMethod=YtVvpu2plhk&notBidSelectionMethod=_EM_70091_XYZ_&notBidSelectionMethod=_EM_70092_XYZ_&notBidSelectionMethod=_EM_70093_XYZ_&" + 
                    "planningLoc=_EM_70095_XYZ_&planningLoc=_EM_70096_XYZ_&" + 
                    "procurementMethod=_EM_70097_XYZ_&" + 
                    "procuringEntityCityId=vqP&procuringEntityCityId=Cy1VYPgvrR3&procuringEntityCityId=iZ3ay5C4tAMQm503&procuringEntityCityId=_EM_70098_XYZ_&procuringEntityCityId=NX20Qmxmdip9qCyh&" + 
                    "procuringEntityGroupId=759&procuringEntityGroupId=0&" + 
                    "minTenderValue=0.9473078595914224&" + 
                    "maxTenderValue=0.7210551339686123&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "skip=u&" + 
                    "password=&" + 
                    "class=_EM_70099_XYZ_&" + 
                    "yearFilterPagingRequest=F6E5FQM7l&" + 
                    "username=JEXc8_h")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/awardValueInterval
    */
    @Test(timeout = 60000)
    public void test_210_postOnAwardValueIntervalReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/awardValueInterval?" + 
                    "notBidTypeId=XeE0ovLU&" + 
                    "notProcuringEntityId=&" + 
                    "bidSelectionMethod=dGAjAke81kbA&bidSelectionMethod=ctI4FRPyiekoA&" + 
                    "planningLoc=Ps&planningLoc=Inqk5IWJSHOqr&" + 
                    "procurementMethod=&procurementMethod=HSL&" + 
                    "procuringEntityGroupId=661&procuringEntityGroupId=578&" + 
                    "pageNumber=773&" + 
                    "minTenderValue=0.5829367409242858&" + 
                    "maxTenderValue=0.4907659712011705&" + 
                    "minAwardValue=0.9088213661450508&" + 
                    "maxAwardValue=0.4240381959901801&" + 
                    "electronicSubmission=true&" + 
                    "password=n&" + 
                    "yearFilterPagingRequest=0s&" + 
                    "username=h7_TjIAu")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/awardValueInterval
    */
    @Test(timeout = 60000)
    public void test_211_postOnAwardValueIntervalReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/awardValueInterval?" + 
                    "notBidTypeId=XeE0ovLU&" + 
                    "notProcuringEntityId=&" + 
                    "bidSelectionMethod=dGAjAke81kbA&bidSelectionMethod=ctI4FRPyiekoA&" + 
                    "planningLoc=Ps&planningLoc=Inqk5IWJSHOqr&" + 
                    "procurementMethod=&procurementMethod=HSL&" + 
                    "procuringEntityDepartmentId=562&procuringEntityDepartmentId=493&procuringEntityDepartmentId=461&procuringEntityDepartmentId=942&" + 
                    "procuringEntityGroupId=661&procuringEntityGroupId=578&" + 
                    "pageNumber=773&" + 
                    "minTenderValue=0.5829367409242858&" + 
                    "maxTenderValue=0.4907659712011705&" + 
                    "maxAwardValue=0.4240381959901801&" + 
                    "electronicSubmission=true&" + 
                    "monthly=true&" + 
                    "password=n&" + 
                    "yearFilterPagingRequest=0s&" + 
                    "username=h7_TjIAu")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/awardValueInterval
    */
    @Test(timeout = 60000)
    public void test_212_postOnApiAwardValueIntervalWithQueryParamsReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/awardValueInterval?" + 
                    "notProcuringEntityId=HoZP&notProcuringEntityId=jEHpvpaZuAw4T&" + 
                    "notBidSelectionMethod=oyyUmu9S&" + 
                    "planningLoc=mulim&planningLoc=_EM_85515_XYZ_&planningLoc=YqjP7&planningLoc=bMQLN6_UtAVSP&" + 
                    "tenderLoc=&" + 
                    "procuringEntityCityId=W&procuringEntityCityId=_EM_85517_XYZ_&procuringEntityCityId=ZSHA_T&" + 
                    "procuringEntityDepartmentId=727&procuringEntityDepartmentId=245619308&procuringEntityDepartmentId=802&" + 
                    "procuringEntityGroupId=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/awardValueInterval
    */
    @Test(timeout = 60000)
    public void test_213_postOnAwardValueIntervalReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/awardValueInterval?" + 
                    "notBidTypeId=XeE0ovLU&" + 
                    "notProcuringEntityId=&" + 
                    "bidSelectionMethod=dGAjAke81kbA&bidSelectionMethod=ctI4FRPyiekoA&" + 
                    "planningLoc=Ps&planningLoc=Inqk5IWJSHOqr&" + 
                    "procurementMethod=&procurementMethod=HSL&" + 
                    "procuringEntityGroupId=661&procuringEntityGroupId=578&" + 
                    "pageNumber=773&" + 
                    "minTenderValue=0.5829367409242858&" + 
                    "maxTenderValue=0.4907659712011705&" + 
                    "maxAwardValue=0.4240381959901801&" + 
                    "electronicSubmission=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/corruptionRiskOverviewTable
    */
    @Test(timeout = 60000)
    public void test_214_postOnApiCorruptionRiskOverviewTableWithQueryParamsReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/corruptionRiskOverviewTable?" + 
                    "procuringEntityId=HjCMVVxbYw&procuringEntityId=g2&procuringEntityId=yiTP5&procuringEntityId=GMC&" + 
                    "bidSelectionMethod=&" + 
                    "tenderLoc=&tenderLoc=X7WIfVeTptHTvPK&tenderLoc=y8l&" + 
                    "procuringEntityCityId=T8MSkm0gylNRtm&" + 
                    "procuringEntityDepartmentId=&" + 
                    "pageNumber=202&" + 
                    "pageSize=151&" + 
                    "minTenderValue=0.5609700037190134&" + 
                    "maxTenderValue=0.2472108815815851&" + 
                    "flagged=false&" + 
                    "yearFilterPagingRequest=TL")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/corruptionRiskOverviewTable
    */
    @Test(timeout = 60000)
    public void test_215_postOnApiCorruptionRiskOverviewTableWithQueryParamsFlaggedReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/corruptionRiskOverviewTable?" + 
                    "bidTypeId=Y5wc&bidTypeId=COLLUSION&" + 
                    "notBidTypeId=&" + 
                    "procuringEntityId=&" + 
                    "notProcuringEntityId=lbVZ&notProcuringEntityId=&" + 
                    "supplierId=_EM_34777_XYZ_&supplierId=E7zswSJb1D&" + 
                    "notBidSelectionMethod=_EM_34778_XYZ_&" + 
                    "planningLoc=VDJ6_hmZ&planningLoc=_EM_34780_XYZ_&planningLoc=_EM_34781_XYZ_&planningLoc=_EM_34782_XYZ_&" + 
                    "tenderLoc=_EM_34783_XYZ_&tenderLoc=_EM_34784_XYZ_&tenderLoc=R02xWOsoxW9T&" + 
                    "procurementMethod=&" + 
                    "procuringEntityCityId=gw1mEu&procuringEntityCityId=_EM_34785_XYZ_&procuringEntityCityId=&" + 
                    "procuringEntityGroupId=937&procuringEntityGroupId=652&procuringEntityGroupId=924&procuringEntityGroupId=35&procuringEntityGroupId=106&" + 
                    "pageNumber=793&" + 
                    "pageSize=922&" + 
                    "minTenderValue=0.11616163708331362&" + 
                    "minAwardValue=0.006070958384931213&" + 
                    "flagged=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/costEffectivenessAwardAmount
    */
    @Test(timeout = 60000)
    public void test_216_postOnCostEffectivenessAwardAmountReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/costEffectivenessAwardAmount?" + 
                    "notBidTypeId=&" + 
                    "supplierId=_EM_76165_XYZ_&supplierId=_EM_76166_XYZ_&supplierId=nxGPSBl&supplierId=Sd&supplierId=_EM_76167_XYZ_&" + 
                    "tenderLoc=_EM_76173_XYZ_&" + 
                    "procurementMethod=2jkAba98Ol&procurementMethod=_EM_76174_XYZ_&procurementMethod=ePFO6P1Pg&" + 
                    "procuringEntityCityId=LArglZV3urPih&procuringEntityCityId=_EM_76175_XYZ_&procuringEntityCityId=_EM_76176_XYZ_&procuringEntityCityId=bXaKT2AW&" + 
                    "pageNumber=195&" + 
                    "pageSize=203&" + 
                    "minTenderValue=0.5593862513483319&" + 
                    "maxAwardValue=0.3932197918651664&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/costEffectivenessTenderAmount
    */
    @Test(timeout = 60000)
    public void test_217_postOnCostEffectivenessTenderAmountReturns200() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/api/costEffectivenessTenderAmount?" + 
                    "bidTypeId=AQ8U&bidTypeId=uGbdp&bidTypeId=DWEPJ4U0x&" + 
                    "notBidTypeId=&" + 
                    "planningLoc=ms5UYDNDU&planningLoc=_EM_6617_XYZ_&planningLoc=GKGX1RD0MX&planningLoc=_EM_6618_XYZ_&" + 
                    "pageNumber=397&" + 
                    "pageSize=144&" + 
                    "minTenderValue=0.6140120636251142&" + 
                    "minAwardValue=0.13363117013311054&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/costEffectivenessTenderAwardAmount
    */
    @Test(timeout = 60000)
    public void test_218_postOnCostEffectivenessTenderAwardAmountReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/costEffectivenessTenderAwardAmount?" + 
                    "supplierId=TN72U6&supplierId=JggBKnJFyBTF13R&supplierId=hrh4dieFzjl&" + 
                    "notBidSelectionMethod=E&notBidSelectionMethod=8nnzzYN26h&notBidSelectionMethod=_EM_61363_XYZ_&notBidSelectionMethod=_EM_61364_XYZ_&" + 
                    "planningLoc=cIoXE&" + 
                    "tenderLoc=&" + 
                    "procuringEntityCityId=UD1A&procuringEntityCityId=o_714&procuringEntityCityId=_EM_61369_XYZ_&procuringEntityCityId=BPqlhwRMyekO&" + 
                    "pageSize=384&" + 
                    "minTenderValue=0.2033973766674131&" + 
                    "maxTenderValue=0.15696334094740128&" + 
                    "maxAwardValue=0.8225599771979661&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "password=_EM_61371_XYZ_&" + 
                    "groupingFilterPagingRequest=ZWx3Bn2hCJ1WP55t&" + 
                    "username=5FeeR9zDJ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentTendersCancelled
    */
    @Test(timeout = 60000)
    public void test_219_postOnPercentTendersCancelledReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/percentTendersCancelled?" + 
                    "supplierId=&" + 
                    "bidSelectionMethod=GYm28QMFR0&bidSelectionMethod=o&bidSelectionMethod=_EM_92802_XYZ_&" + 
                    "planningLoc=_EM_92804_XYZ_&" + 
                    "procuringEntityCityId=_EM_92806_XYZ_&procuringEntityCityId=_EM_92807_XYZ_&procuringEntityCityId=t1hpKRU8du3o&procuringEntityCityId=J220QQZR6v&" + 
                    "procuringEntityGroupId=507&procuringEntityGroupId=652&procuringEntityGroupId=644&procuringEntityGroupId=766&" + 
                    "pageNumber=497&" + 
                    "pageSize=617&" + 
                    "minAwardValue=0.981695413869462&" + 
                    "flagged=true&" + 
                    "monthly=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/countAwardsByYear
    */
    @Test(timeout = 60000)
    public void test_220_postOnCountAwardsByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/countAwardsByYear?" + 
                    "bidTypeId=Q5gNHV1AlauYmwb&bidTypeId=y&bidTypeId=HDI&bidTypeId=G&" + 
                    "notProcuringEntityId=xCEHjreW&notProcuringEntityId=OUjfHr1aw6O&" + 
                    "supplierId=oRRGRvIlYlqvMuVx5&supplierId=_EM_96332_XYZ_&" + 
                    "bidSelectionMethod=R0LIEm2&" + 
                    "notBidSelectionMethod=e6l&notBidSelectionMethod=p_9Zkwb_&notBidSelectionMethod=fMNvrl&notBidSelectionMethod=cAL&" + 
                    "planningLoc=&" + 
                    "procurementMethod=_EM_96337_XYZ_&procurementMethod=aXquQn5MpSCYfS&procurementMethod=LFPR&" + 
                    "procuringEntityGroupId=140&" + 
                    "month=&" + 
                    "pageNumber=22&" + 
                    "pageSize=632&" + 
                    "maxTenderValue=0.19956116400672708&" + 
                    "minAwardValue=0.9770003377491678&" + 
                    "flagged=false&" + 
                    "monthly=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/countAwardsByYear
    */
    @Test(timeout = 60000)
    public void test_221_postOnCountAwardsByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/countAwardsByYear?" + 
                    "bidTypeId=Q5gNHV1AlauYmwb&bidTypeId=y&bidTypeId=HDI&bidTypeId=G&" + 
                    "notBidTypeId=0u0TMX&notBidTypeId=mCHSi4YE&" + 
                    "notProcuringEntityId=xCEHjreW&notProcuringEntityId=OUjfHr1aw6O&" + 
                    "supplierId=oRRGRvIllqvMuVx5&supplierId=piA8_HyX&" + 
                    "bidSelectionMethod=R0LIEm2&" + 
                    "procuringEntityGroupId=12&" + 
                    "pageSize=632&" + 
                    "minTenderValue=0.9873643165299226&" + 
                    "maxTenderValue=0.19956116400672708&" + 
                    "maxAwardValue=0.4489750186429825&" + 
                    "monthly=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/countAwardsByYear
    */
    @Test(timeout = 60000)
    public void test_222_postOnCountAwardsByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/countAwardsByYear?" + 
                    "bidTypeId=Q5gNHV1AlauYmwb&bidTypeId=y&bidTypeId=HDI&bidTypeId=G&" + 
                    "notProcuringEntityId=xCEHjreW&notProcuringEntityId=OUjfHr1aw6O&" + 
                    "supplierId=oRRGRvIlYlqvMuVx5&supplierId=_EM_96332_XYZ_&" + 
                    "procurementMethod=HVyAM9BhGumG&procurementMethod=aXquQn5MpSCYfSa&procurementMethod=LFRR&" + 
                    "procuringEntityGroupId=140&" + 
                    "pageSize=632&" + 
                    "maxTenderValue=0.19956116400672708&" + 
                    "minAwardValue=0.9770003377491678&" + 
                    "maxAwardValue=0.4489750186429825&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "yearFilterPagingRequest=G53VbqP")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/countAwardsByYear
    */
    @Test(timeout = 60000)
    public void test_223_postOnApiCountAwardsByYearWithQueryParamsMonthlyReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/countAwardsByYear?" + 
                    "bidSelectionMethod=OpNTLHS2HgrG&bidSelectionMethod=_EM_79957_XYZ_&bidSelectionMethod=_EM_79958_XYZ_&bidSelectionMethod=_EM_79959_XYZ_&" + 
                    "planningLoc=&" + 
                    "procurementMethod=Tb83Vfd0Kd3&procurementMethod=_EM_79964_XYZ_&procurementMethod=_EM_79965_XYZ_&" + 
                    "procuringEntityGroupId=156&procuringEntityGroupId=285&procuringEntityGroupId=951&" + 
                    "pageNumber=467&" + 
                    "pageSize=974&" + 
                    "minTenderValue=0.8826490349132587&" + 
                    "maxTenderValue=0.3306514215017252&" + 
                    "monthly=true&" + 
                    "password=_EM_79967_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/qualityPlannedFundingByLocation
    */
    @Test(timeout = 60000)
    public void test_224_postOnQualityPlannedFundingByLocationReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/qualityPlannedFundingByLocation?" + 
                    "procuringEntityId=MLqcmx&procuringEntityId=vqNIY&procuringEntityId=06hL8STtn2QqAm2&" + 
                    "bidSelectionMethod=iOQsNjUjEv55&bidSelectionMethod=_EM_31133_XYZ_&" + 
                    "notBidSelectionMethod=omT6BDUxudP&" + 
                    "contrMethod=&" + 
                    "tenderLoc=_EM_31134_XYZ_&tenderLoc=n5JuWtt9Y&tenderLoc=l2QpH54f2m&tenderLoc=jBb1EVSiurBf&tenderLoc=_EM_31135_XYZ_&" + 
                    "procurementMethod=_EM_31136_XYZ_&" + 
                    "procuringEntityDepartmentId=589&procuringEntityDepartmentId=486&procuringEntityDepartmentId=788&procuringEntityDepartmentId=128&" + 
                    "procuringEntityGroupId=512&procuringEntityGroupId=459&procuringEntityGroupId=736&procuringEntityGroupId=565&" + 
                    "pageNumber=428&" + 
                    "minTenderValue=0.5471421468485207&" + 
                    "maxTenderValue=0.7841169458491174&" + 
                    "maxAwardValue=0.7688959526056611&" + 
                    "EMextraParam123=42&" + 
                    "defaultFilterPagingRequest=CHOZsoZWj&" + 
                    "skip=_EM_31137_XYZ_&" + 
                    "class=_EM_31139_XYZ_&" + 
                    "username=KiQkBYWN7M9nm6T")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/qualityPlannedFundingByLocation
    */
    @Test(timeout = 60000)
    public void test_225_postOnQualityPlannedFundingByLocationReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_20549_XYZ_")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/qualityPlannedFundingByLocation?" + 
                    "bidTypeId=&" + 
                    "notBidTypeId=&" + 
                    "notProcuringEntityId=&" + 
                    "bidSelectionMethod=_EM_20543_XYZ_&bidSelectionMethod=tBOxebnR_nLnzv8&bidSelectionMethod=_EM_20544_XYZ_&" + 
                    "notBidSelectionMethod=&" + 
                    "contrMethod=&" + 
                    "planningLoc=&" + 
                    "tenderLoc=_EM_20545_XYZ_&tenderLoc=_EM_20546_XYZ_&" + 
                    "procurementMethod=sN&procurementMethod=imjSTi1Lf3N&procurementMethod=_EM_20547_XYZ_&procurementMethod=1riU7&" + 
                    "procuringEntityCityId=T&procuringEntityCityId=fEL6YDNnr8Jnk&procuringEntityCityId=_EM_20548_XYZ_&" + 
                    "procuringEntityGroupId=644&" + 
                    "maxTenderValue=0.18043196296600816&" + 
                    "electronicSubmission=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentTendersUsingEgp
    */
    @Test(timeout = 60000)
    public void test_226_postOnPercentTendersUsingEgpReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/percentTendersUsingEgp?" + 
                    "notProcuringEntityId=F&" + 
                    "supplierId=d9Gv3N5PVn_nvsk&supplierId=_EM_24554_XYZ_&supplierId=U&supplierId=&supplierId=_EM_24555_XYZ_&" + 
                    "procurementMethod=gKTbSi4&procurementMethod=_EM_24558_XYZ_&" + 
                    "month=&" + 
                    "minTenderValue=0.718576148775847&" + 
                    "maxAwardValue=0.17855430611233059&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/frequentSuppliersTimeInterval
    */
    @Test(timeout = 60000)
    public void test_227_postOnFrequentSuppliersTimeIntervalReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/frequentSuppliersTimeInterval?" + 
                    "maxAwards=106&" + 
                    "password=VBvi30&" + 
                    "username=_EM_34179_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/frequentSuppliersTimeInterval
    */
    @Test(timeout = 60000)
    public void test_228_postOnFrequentSuppliersTimeIntervalReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/frequentSuppliersTimeInterval?" + 
                    "intervalDays=15&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/indicatorTypesMapping
    */
    @Test(timeout = 60000)
    public void test_229_postOnIndicatorTypesMappingReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/indicatorTypesMapping")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'i038'.'types'.size()", equalTo(1))
                .body("'i038'.'types'", hasItems("RIGGING"))
                .body("'i038'.'rationale'", containsString("Preconditions that are not met: Needs to have tender start date; Needs to have tender end date; Needs to have open tender procurement method; "))
                .body("'i003'.'types'.size()", equalTo(2))
                .body("'i003'.'types'", hasItems("RIGGING", "FRAUD"))
                .body("'i003'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one unsuccessful award; Needs to have at least one active award; Needs to have electronic submission tender submission method; Needs to have open tender procurement method; "))
                .body("'i007'.'types'.size()", equalTo(1))
                .body("'i007'.'types'", hasItems("RIGGING"))
                .body("'i007'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have electronic submission tender submission method; Needs to have open tender procurement method; "))
                .body("'i004'.'types'.size()", equalTo(1))
                .body("'i004'.'types'", hasItems("RIGGING"))
                .body("'i004'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one award with awarded amount; Needs to have tender with items classification; Needs to have at least one active award; Needs to have limited tender procurement method; "))
                .body("'i077'.'types'.size()", equalTo(1))
                .body("'i077'.'types'", hasItems("RIGGING"))
                .body("'i077'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have open tender procurement method OR Needs to have selective tender procurement method; "))
                .body("'i019'.'types'.size()", equalTo(1))
                .body("'i019'.'types'", hasItems("RIGGING"))
                .body("'i019'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have tender end date; Needs to have open tender procurement method; "))
                .body("'i180'.'types'.size()", equalTo(1))
                .body("'i180'.'types'", hasItems("RIGGING"))
                .body("'i180'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have tender procuring entity; Needs to have limited tender procurement method; "))
                .body("'i002'.'types'.size()", equalTo(2))
                .body("'i002'.'types'", hasItems("RIGGING", "FRAUD"))
                .body("'i002'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one unsuccessful award; Needs to have at least one active award; Needs to have electronic submission tender submission method; Needs to have open tender procurement method; "))
                .body("'i085'.'types'.size()", equalTo(2))
                .body("'i085'.'types'", hasItems("FRAUD", "COLLUSION"))
                .body("'i085'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have electronic submission tender submission method; "))
                .body("'i171'.'types'.size()", equalTo(2))
                .body("'i171'.'types'", hasItems("RIGGING", "FRAUD"))
                .body("'i171'.'rationale'", containsString("Preconditions that are not met: Needs to have tender value amount; Needs to have at least one active award; Needs to have electronic submission tender submission method; Needs to have open tender procurement method; "));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentOfEligibleProjectsFlaggedByYear
    */
    @Test(timeout = 60000)
    public void test_230_postOnPercentOfEligibleProjectsFlaggedByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_10071_XYZ_")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/percentOfEligibleProjectsFlaggedByYear?" + 
                    "bidTypeId=_EM_41610_XYZ_&bidTypeId=Gs3&bidTypeId=b9BQyBVxVHujjDqW&bidTypeId=pXe&bidTypeId=CsFY&" + 
                    "notProcuringEntityId=_EM_41613_XYZ_&notProcuringEntityId=j36KlRK&notProcuringEntityId=_EM_41614_XYZ_&" + 
                    "bidSelectionMethod=&" + 
                    "notBidSelectionMethod=2mzT4n3&notBidSelectionMethod=lAL_Pf6NZ3g&" + 
                    "planningLoc=3kZ&planningLoc=_EM_41617_XYZ_&" + 
                    "month=276&month=805&month=322&month=172&month=632&" + 
                    "minTenderValue=0.45345580503097915&" + 
                    "maxTenderValue=0.5741540407884105&" + 
                    "minAwardValue=0.08645981956259108&" + 
                    "maxAwardValue=0.7041298664958342&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "EMextraParam123=_EM_10070_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentOfEligibleProjectsFlaggedByYear
    */
    @Test(timeout = 60000)
    public void test_231_postOnPercentOfEligibleProjectsFlaggedByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/percentOfEligibleProjectsFlaggedByYear?" + 
                    "procuringEntityId=TGqbmdy&procuringEntityId=_EM_92562_XYZ_&procuringEntityId=_EM_92563_XYZ_&procuringEntityId=_EM_92564_XYZ_&procuringEntityId=_EM_92565_XYZ_&" + 
                    "notProcuringEntityId=M&notProcuringEntityId=_EM_92566_XYZ_&notProcuringEntityId=Q8AF4p1vVPx_3&notProcuringEntityId=DtiT9zMel_&" + 
                    "supplierId=_EM_92567_XYZ_&supplierId=54&supplierId=RmkaqJEPie&supplierId=_EM_92568_XYZ_&supplierId=_EM_92569_XYZ_&" + 
                    "contrMethod=&" + 
                    "tenderLoc=_EM_92572_XYZ_&" + 
                    "procurementMethod=zKYdJHrKrSWeF6uJ&procurementMethod=_EM_92573_XYZ_&procurementMethod=Mb&procurementMethod=WKuHFdLrFO&" + 
                    "procuringEntityCityId=CU&procuringEntityCityId=_EM_92574_XYZ_&procuringEntityCityId=&" + 
                    "procuringEntityDepartmentId=450&procuringEntityDepartmentId=353&procuringEntityDepartmentId=398&procuringEntityDepartmentId=849&procuringEntityDepartmentId=888&" + 
                    "procuringEntityGroupId=-57553828&procuringEntityGroupId=614&procuringEntityGroupId=156&" + 
                    "maxTenderValue=0.1662926167257932&" + 
                    "minAwardValue=0.16194591944754422&" + 
                    "flagged=true&" + 
                    "monthly=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentOfEligibleProjectsFlaggedByYear
    */
    @Test(timeout = 60000)
    public void test_232_postOnPercentOfEligibleProjectsFlaggedByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_41973_XYZ_")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/percentOfEligibleProjectsFlaggedByYear?" + 
                    "bidTypeId=bxvZaE2bCpHHcZ&bidTypeId=COLLUSION&bidTypeId=FRAUD&bidTypeId=_EM_41964_XYZ_&" + 
                    "notBidTypeId=COLLUSION&" + 
                    "procuringEntityId=9YITPwijAteAG&" + 
                    "supplierId=A4Uvhh7p1&supplierId=6u8rcWoZ9yRSTq&supplierId=_EM_41967_XYZ_&" + 
                    "procurementMethod=_EM_41969_XYZ_&procurementMethod=_EM_41970_XYZ_&procurementMethod=F36R46x&" + 
                    "month=478&" + 
                    "minTenderValue=0.5860790612913639&" + 
                    "maxTenderValue=0.08365599674935298&" + 
                    "minAwardValue=0.3803341762016994&" + 
                    "maxAwardValue=0.27819831456083277&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "EMextraParam123=_EM_41972_XYZ_&" + 
                    "skip=_EM_41974_XYZ_&" + 
                    "yearFilterPagingRequest=_EM_41976_XYZ_&" + 
                    "username=pnxSShd")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentOfEligibleProjectsFlaggedByYear
    */
    @Test(timeout = 60000)
    public void test_233_postOnPercentOfEligibleProjectsFlaggedByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/percentOfEligibleProjectsFlaggedByYear?" + 
                    "bidTypeId=YBozszvgt&bidTypeId=FRAUD&" + 
                    "procuringEntityId=Ax3k_b&procuringEntityId=hZ&" + 
                    "supplierId=_EM_95357_XYZ_&supplierId=_EM_95358_XYZ_&supplierId=TXyN3h0amsT&supplierId=_EM_95359_XYZ_&supplierId=QdHxxl3&" + 
                    "bidSelectionMethod=_EM_95360_XYZ_&bidSelectionMethod=_EM_95361_XYZ_&bidSelectionMethod=PTX2P&bidSelectionMethod=qXPpf9cJPTR&" + 
                    "contrMethod=&" + 
                    "tenderLoc=_EM_95362_XYZ_&tenderLoc=e3NKmsoOAZ&tenderLoc=&" + 
                    "procurementMethod=Cvze&procurementMethod=_EM_95363_XYZ_&procurementMethod=7S8sXi6n147Km&" + 
                    "procuringEntityCityId=EV_A5RNrWR&procuringEntityCityId=&" + 
                    "procuringEntityDepartmentId=932&procuringEntityDepartmentId=200&procuringEntityDepartmentId=651&procuringEntityDepartmentId=382&" + 
                    "procuringEntityGroupId=745&procuringEntityGroupId=28&procuringEntityGroupId=632&procuringEntityGroupId=926&" + 
                    "year=387&year=1283500511&" + 
                    "month=&" + 
                    "minTenderValue=0.5552763693340207&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "class=Zj4svWgGpIm&" + 
                    "yearFilterPagingRequest=8FY5tyZQ1Y")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentOfEligibleProjectsFlaggedByYear
    */
    @Test(timeout = 60000)
    public void test_234_postOnPercentOfEligibleProjectsFlaggedByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/percentOfEligibleProjectsFlaggedByYear?" + 
                    "bidTypeId=&" + 
                    "procuringEntityId=GsS&" + 
                    "supplierId=Yw__JUwNc&supplierId=_EM_59398_XYZ_&supplierId=_EM_59399_XYZ_&supplierId=P4J&supplierId=_EM_59400_XYZ_&" + 
                    "bidSelectionMethod=_EM_59401_XYZ_&bidSelectionMethod=G9HT9gYF4ZBQ52&bidSelectionMethod=A&" + 
                    "notBidSelectionMethod=zH8J80HwATTD1O0I&" + 
                    "procurementMethod=JCU&procurementMethod=_EM_59406_XYZ_&procurementMethod=BlwHneX6jw3fS_&" + 
                    "procuringEntityDepartmentId=181&procuringEntityDepartmentId=596&" + 
                    "procuringEntityGroupId=530&procuringEntityGroupId=804&" + 
                    "year=506&year=390&year=531&year=531&year=98&" + 
                    "pageNumber=327&" + 
                    "minTenderValue=0.7731298482290122&" + 
                    "maxTenderValue=0.9170383889122925&" + 
                    "minAwardValue=0.5144018940926797&" + 
                    "maxAwardValue=0.518537174791034&" + 
                    "electronicSubmission=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentOfEligibleProjectsFlaggedByYear
    */
    @Test(timeout = 60000)
    public void test_235_postOnPercentOfEligibleProjectsFlaggedByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/percentOfEligibleProjectsFlaggedByYear?" + 
                    "bidTypeId=RIGGING&bidTypeId=FRAUD&bidTypeId=COLLUSION&bidTypeId=_EM_15813_XYZ_&" + 
                    "notBidTypeId=COLLUSION&notBidTypeId=FRAUD&notBidTypeId=NyHCwIECWuOwc&notBidTypeId=_EM_15814_XYZ_&notBidTypeId=mHOe5YMX0&" + 
                    "notProcuringEntityId=v8BjPnu2ZTJmaS&notProcuringEntityId=_EM_15817_XYZ_&notProcuringEntityId=_EM_15818_XYZ_&" + 
                    "notBidSelectionMethod=_EM_15820_XYZ_&notBidSelectionMethod=lRBcMwwGi&notBidSelectionMethod=_EM_15821_XYZ_&notBidSelectionMethod=jAPf&" + 
                    "tenderLoc=_EM_15823_XYZ_&tenderLoc=IH5nYTuheW&tenderLoc=_EM_15824_XYZ_&tenderLoc=_EM_15825_XYZ_&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityGroupId=481&procuringEntityGroupId=801&procuringEntityGroupId=934&" + 
                    "pageSize=328&" + 
                    "maxTenderValue=0.7528766923286381&" + 
                    "minAwardValue=0.41052220175400334&" + 
                    "flagged=true&" + 
                    "monthly=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentOfEligibleProjectsFlaggedByYear
    */
    @Test(timeout = 60000)
    public void test_236_postOnPercentOfEligibleProjectsFlaggedByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/percentOfEligibleProjectsFlaggedByYear?" + 
                    "bidTypeId=YM6_FofswCDUbp0&bidTypeId=BePgjW62wd8&" + 
                    "notBidTypeId=_EM_74054_XYZ_&notBidTypeId=g36YOv&notBidTypeId=FRAUD&notBidTypeId=_EM_74055_XYZ_&" + 
                    "procuringEntityId=F&procuringEntityId=C&procuringEntityId=_EM_74056_XYZ_&procuringEntityId=_EM_74057_XYZ_&procuringEntityId=kI&" + 
                    "supplierId=_EM_74058_XYZ_&supplierId=lN&supplierId=UbXNq3bb8O21BV&supplierId=C1R_bV63rM3Y&" + 
                    "bidSelectionMethod=_EM_74059_XYZ_&bidSelectionMethod=_EM_74060_XYZ_&bidSelectionMethod=_EM_74061_XYZ_&" + 
                    "procurementMethod=_EM_74063_XYZ_&procurementMethod=_EM_74064_XYZ_&procurementMethod=_EM_74065_XYZ_&procurementMethod=YIDOv1&" + 
                    "procuringEntityDepartmentId=&" + 
                    "procuringEntityGroupId=&" + 
                    "month=904&month=694&month=704&month=419&" + 
                    "pageNumber=484&" + 
                    "minTenderValue=0.09538357819986032&" + 
                    "maxTenderValue=0.6964686350623063&" + 
                    "maxAwardValue=0.9814664288528342&" + 
                    "monthly=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentTendersWithLinkedProcurementPlan
    */
    @Test(timeout = 60000)
    public void test_237_postOnPercentTendersWithLinkedProcurementPlanReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/percentTendersWithLinkedProcurementPlan?" + 
                    "bidTypeId=0KuYL4pnKzUi3bJ&" + 
                    "procuringEntityId=&procuringEntityId=m4bu9gVC&procuringEntityId=38&" + 
                    "supplierId=&" + 
                    "bidSelectionMethod=0elH3&bidSelectionMethod=srJJJtqU&" + 
                    "notBidSelectionMethod=n&" + 
                    "planningLoc=RTo3NompSuJ0k&planningLoc=DI0EzocAAhV&planningLoc=iA&" + 
                    "tenderLoc=c_vX&tenderLoc=kFqIC&tenderLoc=BwdnUHfdB_E&" + 
                    "procuringEntityCityId=USC4RKU17u&procuringEntityCityId=jS&" + 
                    "procuringEntityDepartmentId=137&procuringEntityDepartmentId=786&procuringEntityDepartmentId=265&procuringEntityDepartmentId=489&" + 
                    "procuringEntityGroupId=321&procuringEntityGroupId=670&procuringEntityGroupId=880&procuringEntityGroupId=537&" + 
                    "pageSize=491&" + 
                    "monthly=true&" + 
                    "skip=xZfdiy654ap&" + 
                    "password=jvbu&" + 
                    "class=2YEICCiTO8n_57T&" + 
                    "yearFilterPagingRequest=vMODaO&" + 
                    "username=Q")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/totalProjectsByYear
    */
    @Test(timeout = 60000)
    public void test_238_postOnTotalProjectsByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_12147_XYZ_")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/totalProjectsByYear?" + 
                    "bidTypeId=_EM_52099_XYZ_&bidTypeId=FRAUD&bidTypeId=_EM_52100_XYZ_&bidTypeId=_EM_52101_XYZ_&" + 
                    "notBidTypeId=_EM_52102_XYZ_&notBidTypeId=FRAUD&notBidTypeId=RIGGING&notBidTypeId=p9q9Fry00ukCUHK&" + 
                    "notProcuringEntityId=_EM_52103_XYZ_&" + 
                    "supplierId=_EM_52104_XYZ_&" + 
                    "bidSelectionMethod=&" + 
                    "notBidSelectionMethod=_EM_52105_XYZ_&notBidSelectionMethod=igHl&notBidSelectionMethod=M4zRSp&notBidSelectionMethod=tHJxaoehjpP&notBidSelectionMethod=V8FnOlrZ&" + 
                    "planningLoc=lHMuIWOGmdtHUYnV&planningLoc=_EM_52106_XYZ_&planningLoc=_EM_52107_XYZ_&" + 
                    "procurementMethod=IdKgMr&procurementMethod=ati&procurementMethod=q9ABxXrsInI9osZB&" + 
                    "procuringEntityCityId=_EM_52109_XYZ_&procuringEntityCityId=_EM_52110_XYZ_&procuringEntityCityId=_EM_52111_XYZ_&" + 
                    "procuringEntityGroupId=784&procuringEntityGroupId=832&procuringEntityGroupId=245&procuringEntityGroupId=937&procuringEntityGroupId=152&" + 
                    "year=695&year=831&" + 
                    "month=485&month=805&month=702&month=590&" + 
                    "pageNumber=638&" + 
                    "minAwardValue=0.681196850583567&" + 
                    "maxAwardValue=0.1730635838461938&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "password=3OiY8fGv6Q")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/totalProjectsByYear
    */
    @Test(timeout = 60000)
    public void test_239_postOnTotalProjectsByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/totalProjectsByYear?" + 
                    "notBidTypeId=&notBidTypeId=aI3Ed7&" + 
                    "notProcuringEntityId=_EM_44256_XYZ_&" + 
                    "supplierId=_EM_44257_XYZ_&supplierId=_EM_44258_XYZ_&supplierId=l1vl8CRPCpkO&supplierId=_EM_44259_XYZ_&" + 
                    "bidSelectionMethod=Abob1wnzvWWwc&bidSelectionMethod=R6eATbAQ2FhZr&bidSelectionMethod=L4qQrdv&bidSelectionMethod=mHdLYjX8&" + 
                    "notBidSelectionMethod=_EM_44260_XYZ_&notBidSelectionMethod=_EM_44261_XYZ_&notBidSelectionMethod=_EM_44262_XYZ_&notBidSelectionMethod=_EM_44263_XYZ_&" + 
                    "tenderLoc=XOX8NT0gbTfXLeEY&tenderLoc=Ff_x54HAHcNUw&tenderLoc=nhofxTpXRz&tenderLoc=_EM_44264_XYZ_&" + 
                    "year=34&year=521&year=858&" + 
                    "month=137&" + 
                    "pageNumber=610&" + 
                    "pageSize=606&" + 
                    "minTenderValue=0.38446323436693475&" + 
                    "maxTenderValue=0.5880239719558528&" + 
                    "minAwardValue=0.05117929535787891&" + 
                    "maxAwardValue=0.3723215910399035&" + 
                    "electronicSubmission=false&" + 
                    "EMextraParam123=_EM_12146_XYZ_&" + 
                    "skip=_EM_44268_XYZ_&" + 
                    "password=_EM_44269_XYZ_&" + 
                    "yearFilterPagingRequest=t95d")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/totalProjectsByYear
    */
    @Test(timeout = 60000)
    public void test_240_postOnTotalProjectsByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_12147_XYZ_")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/totalProjectsByYear?" + 
                    "procuringEntityId=&" + 
                    "bidSelectionMethod=Abob1wnzvWWwc&bidSelectionMethod=_EM_44248_XYZ_&bidSelectionMethod=L4qQrdv&bidSelectionMethod=mHdLYjX8&" + 
                    "procurementMethod=_EM_44252_XYZ_&procurementMethod=_EM_44253_XYZ_&procurementMethod=_EM_44254_XYZ_&" + 
                    "procuringEntityDepartmentId=621&procuringEntityDepartmentId=219&procuringEntityDepartmentId=979&procuringEntityDepartmentId=766&procuringEntityDepartmentId=395&" + 
                    "month=137&" + 
                    "pageSize=606&" + 
                    "minTenderValue=0.38446323436693475&" + 
                    "maxAwardValue=0.3723215910399035&" + 
                    "electronicSubmission=false&" + 
                    "monthly=true&" + 
                    "EMextraParam123=_EM_12146_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/totalProjectsByYear
    */
    @Test(timeout = 60000)
    public void test_241_postOnTotalProjectsByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_12147_XYZ_")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/totalProjectsByYear?" + 
                    "bidTypeId=_EM_52090_XYZ_&bidTypeId=SkNwZOEMcAkchF&bidTypeId=&bidTypeId=nKyvLKZVQ&" + 
                    "notBidTypeId=NC7L9z&notBidTypeId=&notBidTypeId=8ShMGtvJCxGqV44&notBidTypeId=p9q9Fry00ukCUHK&" + 
                    "procuringEntityId=&" + 
                    "bidSelectionMethod=&" + 
                    "tenderLoc=qadnUZD&tenderLoc=&tenderLoc=_EM_52095_XYZ_&" + 
                    "procuringEntityDepartmentId=570&" + 
                    "procuringEntityGroupId=784&procuringEntityGroupId=832&procuringEntityGroupId=245&procuringEntityGroupId=937&procuringEntityGroupId=152&" + 
                    "year=695&year=831&" + 
                    "month=485&month=805&month=702&month=590&" + 
                    "maxTenderValue=0.895906609493854&" + 
                    "minAwardValue=0.681196850583567&" + 
                    "maxAwardValue=0.1730635838461938&" + 
                    "flagged=true&" + 
                    "monthly=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/totalProjectsByYear
    */
    @Test(timeout = 60000)
    public void test_242_postOnApiTotalProjectsByYearWithQueryParamsElectronicSubmission() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "2joTxPnI")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/totalProjectsByYear?" + 
                    "notBidTypeId=t3L4ZJI&notBidTypeId=FRAUD&notBidTypeId=B3&notBidTypeId=Yb0r&" + 
                    "procuringEntityId=YCTrdyBCwNBDUySp&procuringEntityId=_EM_57052_XYZ_&procuringEntityId=a5y&procuringEntityId=_EM_57053_XYZ_&" + 
                    "notProcuringEntityId=_EM_57054_XYZ_&notProcuringEntityId=_EM_57055_XYZ_&notProcuringEntityId=T&" + 
                    "procurementMethod=_EM_57066_XYZ_&procurementMethod=drF0nxMQ&procurementMethod=pmFi&procurementMethod=_EM_57067_XYZ_&procurementMethod=&" + 
                    "procuringEntityCityId=5I5ytr&procuringEntityCityId=5CbASYFUsYwtl&procuringEntityCityId=pBY2F9d9lqBPY7i&procuringEntityCityId=_EM_57068_XYZ_&procuringEntityCityId=_EM_57069_XYZ_&" + 
                    "month=400&" + 
                    "pageNumber=130&" + 
                    "minTenderValue=0.09255051057039598&" + 
                    "maxTenderValue=0.9581233832854545&" + 
                    "minAwardValue=0.3713225412071133&" + 
                    "electronicSubmission=true&" + 
                    "flagged=true&" + 
                    "EMextraParam123=_EM_26410_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/totalProjectsByYear
    */
    @Test(timeout = 60000)
    public void test_243_postOnTotalProjectsByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/totalProjectsByYear?" + 
                    "notBidTypeId=_EM_89708_XYZ_&" + 
                    "notProcuringEntityId=_EM_89710_XYZ_&notProcuringEntityId=ig2rcncxwljCjFd&notProcuringEntityId=tIOu3ou5mmBLcp&" + 
                    "supplierId=RdwB&" + 
                    "bidSelectionMethod=_EM_89711_XYZ_&bidSelectionMethod=_EM_89712_XYZ_&" + 
                    "notBidSelectionMethod=&" + 
                    "planningLoc=_EM_89714_XYZ_&planningLoc=&" + 
                    "tenderLoc=_EM_89715_XYZ_&tenderLoc=w&tenderLoc=_EM_89716_XYZ_&tenderLoc=ha8&tenderLoc=C5VMzRkm8C&" + 
                    "procuringEntityDepartmentId=293&" + 
                    "month=952&month=417&month=893&" + 
                    "pageSize=109&" + 
                    "maxTenderValue=0.7854681580821088&" + 
                    "minAwardValue=0.4321730094638383&" + 
                    "electronicSubmission=false&" + 
                    "monthly=true&" + 
                    "password=3pi4hFQ&" + 
                    "class=Mm0Ls33KaIt7t1yA&" + 
                    "yearFilterPagingRequest=SxJpgKyJ&" + 
                    "username=lHhw")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/totalProjectsByYear
    */
    @Test(timeout = 60000)
    public void test_244_postOnApiTotalProjectsByYearWithQueryParamsFlaggedReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/totalProjectsByYear?" + 
                    "notBidTypeId=_EM_17738_XYZ_&" + 
                    "notProcuringEntityId=CoIWut&" + 
                    "supplierId=&" + 
                    "contrMethod=&" + 
                    "procuringEntityCityId=_EM_17742_XYZ_&procuringEntityCityId=sCHhqy1SZWo&procuringEntityCityId=_EM_17743_XYZ_&" + 
                    "procuringEntityGroupId=797&procuringEntityGroupId=671&procuringEntityGroupId=319&procuringEntityGroupId=608&" + 
                    "year=578&year=517&" + 
                    "month=458&month=416&" + 
                    "pageSize=97&" + 
                    "minTenderValue=0.04698795486499141&" + 
                    "maxTenderValue=0.7296828095074104&" + 
                    "flagged=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentTotalProjectsEligibleByYear
    */
    @Test(timeout = 60000)
    public void test_245_postOnPercentTotalProjectsEligibleByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/percentTotalProjectsEligibleByYear?" + 
                    "bidTypeId=ONLK7d2x7x_PNhz4&bidTypeId=_EM_67854_XYZ_&bidTypeId=dw&bidTypeId=_EM_67855_XYZ_&" + 
                    "procuringEntityId=KrxHPk00_PDFaKy&procuringEntityId=oP7dd6&procuringEntityId=oROhYUo&" + 
                    "supplierId=_EM_67856_XYZ_&supplierId=_EM_67857_XYZ_&supplierId=_EM_67858_XYZ_&" + 
                    "bidSelectionMethod=a2uY&bidSelectionMethod=_EM_67859_XYZ_&" + 
                    "notBidSelectionMethod=_EM_67860_XYZ_&notBidSelectionMethod=_LkFacYdsq&notBidSelectionMethod=cWXh1pC1xc&notBidSelectionMethod=qTntv9gcUMq3mZ&" + 
                    "tenderLoc=&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityDepartmentId=107&procuringEntityDepartmentId=169&" + 
                    "procuringEntityGroupId=15&procuringEntityGroupId=522&procuringEntityGroupId=692&" + 
                    "year=859495330&year=860&" + 
                    "month=55&month=993&month=-720741650&month=648&month=343&" + 
                    "pageNumber=422&" + 
                    "pageSize=679&" + 
                    "maxTenderValue=0.9495519849527054&" + 
                    "minAwardValue=0.43308348163293153&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "class=_EM_67866_XYZ_&" + 
                    "yearFilterPagingRequest=_EM_67867_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentTotalProjectsEligibleByYear
    */
    @Test(timeout = 60000)
    public void test_246_postOnPercentTotalProjectsEligibleByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/percentTotalProjectsEligibleByYear?" + 
                    "notBidTypeId=vQWZPoBrV_5&" + 
                    "notBidSelectionMethod=q33lSrdl5oVo&notBidSelectionMethod=_EM_40885_XYZ_&notBidSelectionMethod=Z2&" + 
                    "planningLoc=j&planningLoc=_EM_40886_XYZ_&planningLoc=_5vYYFf_oyKHMT8&planningLoc=zTTqPvpEOR&planningLoc=&" + 
                    "procurementMethod=Pt6VUTNLCzpE&" + 
                    "procuringEntityDepartmentId=&" + 
                    "procuringEntityGroupId=200&" + 
                    "year=595&year=609&year=907&" + 
                    "month=436&month=73&month=21&month=877&" + 
                    "pageNumber=556&" + 
                    "minTenderValue=0.4684480905606132&" + 
                    "minAwardValue=0.7421779318168745&" + 
                    "maxAwardValue=0.2334454263982313&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentTotalProjectsEligibleByYear
    */
    @Test(timeout = 60000)
    public void test_247_postOnPercentTotalProjectsEligibleByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_51578_XYZ_")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/percentTotalProjectsEligibleByYear?" + 
                    "bidTypeId=0pY&bidTypeId=_EM_51566_XYZ_&bidTypeId=eHvaja&" + 
                    "notBidTypeId=&" + 
                    "procuringEntityId=6IO&procuringEntityId=_EM_51567_XYZ_&procuringEntityId=_wztsg&procuringEntityId=_EM_51568_XYZ_&" + 
                    "notProcuringEntityId=_EM_51569_XYZ_&notProcuringEntityId=_EM_51570_XYZ_&" + 
                    "bidSelectionMethod=&" + 
                    "planningLoc=_EM_51571_XYZ_&planningLoc=_EM_51572_XYZ_&planningLoc=_EM_51573_XYZ_&planningLoc=_EM_51574_XYZ_&planningLoc=sOOHbmAaCwWiU_&" + 
                    "procuringEntityDepartmentId=436&procuringEntityDepartmentId=357&procuringEntityDepartmentId=220&" + 
                    "procuringEntityGroupId=378&procuringEntityGroupId=560&procuringEntityGroupId=796&procuringEntityGroupId=930&procuringEntityGroupId=231&" + 
                    "pageNumber=5&" + 
                    "pageSize=268&" + 
                    "minTenderValue=0.9286872332487232&" + 
                    "maxTenderValue=0.44638967074091906&" + 
                    "minAwardValue=0.6721541485318129&" + 
                    "maxAwardValue=0.4055671367999568&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentTotalProjectsEligibleByYear
    */
    @Test(timeout = 60000)
    public void test_248_postOnApiPercentTotalProjectsEligibleByYearWithQueryParamsAndMonthly() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/percentTotalProjectsEligibleByYear?" + 
                    "bidTypeId=COLLUSION&" + 
                    "notBidTypeId=&notBidTypeId=FRAUD&notBidTypeId=RIGGING&notBidTypeId=_EM_63942_XYZ_&notBidTypeId=FRAUD&" + 
                    "supplierId=_EM_63946_XYZ_&supplierId=_EM_63947_XYZ_&supplierId=8MPyiHcIV6wAHDx&" + 
                    "bidSelectionMethod=fe3ViopDWn&bidSelectionMethod=_EM_63948_XYZ_&bidSelectionMethod=WD&bidSelectionMethod=&" + 
                    "contrMethod=&" + 
                    "procurementMethod=_EM_63953_XYZ_&procurementMethod=_EM_63954_XYZ_&procurementMethod=_EM_63955_XYZ_&procurementMethod=OyXcpVXz&procurementMethod=_EM_63956_XYZ_&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityDepartmentId=308&procuringEntityDepartmentId=355&" + 
                    "procuringEntityGroupId=788&procuringEntityGroupId=19&procuringEntityGroupId=534&procuringEntityGroupId=577&procuringEntityGroupId=991&" + 
                    "month=61&" + 
                    "pageNumber=246&" + 
                    "pageSize=401&" + 
                    "minTenderValue=0.4202012734854902&" + 
                    "maxTenderValue=0.8239980088681816&" + 
                    "minAwardValue=0.559344572830468&" + 
                    "electronicSubmission=true&" + 
                    "monthly=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentTotalProjectsEligibleByYear
    */
    @Test(timeout = 60000)
    public void test_249_postOnPercentTotalProjectsEligibleByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/percentTotalProjectsEligibleByYear?" + 
                    "notProcuringEntityId=&notProcuringEntityId=_EM_28477_XYZ_&notProcuringEntityId=_EM_28478_XYZ_&notProcuringEntityId=_EM_28479_XYZ_&notProcuringEntityId=gx9&" + 
                    "bidSelectionMethod=FbWp&bidSelectionMethod=_EM_28480_XYZ_&" + 
                    "contrMethod=&" + 
                    "planningLoc=&" + 
                    "procuringEntityGroupId=736&procuringEntityGroupId=235&procuringEntityGroupId=221&" + 
                    "pageNumber=357&" + 
                    "pageSize=162&" + 
                    "minTenderValue=0.9516081428277875&" + 
                    "maxAwardValue=0.40499256970656583&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "EMextraParam123=42&" + 
                    "password=380Crnslgk1lbZzN&" + 
                    "class=_EM_28487_XYZ_&" + 
                    "username=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentTotalProjectsEligibleByYear
    */
    @Test(timeout = 60000)
    public void test_250_postOnPercentTotalProjectsEligibleByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/percentTotalProjectsEligibleByYear?" + 
                    "bidTypeId=_EM_56908_XYZ_&bidTypeId=oon_ZvtM&bidTypeId=1vjLR25&bidTypeId=OAjmKttM63VKSD&bidTypeId=FRAUD&" + 
                    "procuringEntityId=_EM_56909_XYZ_&" + 
                    "notBidSelectionMethod=_EM_56915_XYZ_&" + 
                    "planningLoc=epOJjvwTTHxNKsc&" + 
                    "procurementMethod=&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityDepartmentId=185&procuringEntityDepartmentId=732&" + 
                    "month=59&" + 
                    "pageNumber=-1046352503&" + 
                    "minTenderValue=0.5386299210768785&" + 
                    "minAwardValue=0.7370031262504184&" + 
                    "maxAwardValue=0.36313025886860106&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentTotalProjectsFlaggedByYear
    */
    @Test(timeout = 60000)
    public void test_251_postOnPercentTotalProjectsFlaggedByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/percentTotalProjectsFlaggedByYear?" + 
                    "procuringEntityId=_EM_62682_XYZ_&" + 
                    "notProcuringEntityId=8d3&" + 
                    "contrMethod=&" + 
                    "planningLoc=_EM_62688_XYZ_&planningLoc=_EM_62689_XYZ_&planningLoc=_EM_62690_XYZ_&planningLoc=_EM_62691_XYZ_&planningLoc=_EM_62692_XYZ_&" + 
                    "tenderLoc=&tenderLoc=_EM_62693_XYZ_&tenderLoc=&" + 
                    "procurementMethod=_EM_62694_XYZ_&procurementMethod=_EM_62695_XYZ_&procurementMethod=c0vaD7FnPvxcGK&" + 
                    "procuringEntityDepartmentId=855&procuringEntityDepartmentId=1443780431&" + 
                    "procuringEntityGroupId=285&" + 
                    "year=354&year=84&" + 
                    "month=238&" + 
                    "pageNumber=758&" + 
                    "pageSize=724&" + 
                    "minTenderValue=0.6778929200554932&" + 
                    "maxTenderValue=0.33370983382768504&" + 
                    "minAwardValue=0.36187452125789255&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "yearFilterPagingRequest=_EM_62698_XYZ_&" + 
                    "username=9e50GQSb6k0eQ4cy")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentTotalProjectsFlaggedByYear
    */
    @Test(timeout = 60000)
    public void test_252_postOnPercentTotalProjectsFlaggedByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/percentTotalProjectsFlaggedByYear?" + 
                    "bidTypeId=&" + 
                    "notProcuringEntityId=WwneTR4Xc&notProcuringEntityId=inz6lnz&" + 
                    "tenderLoc=YQ9E9f5EyL5IC&tenderLoc=eo1zKD7lyQHw9ud&" + 
                    "procurementMethod=TgnZBWRO&" + 
                    "procuringEntityCityId=4sK6gilg&procuringEntityCityId=j7xzHJVrrJq&procuringEntityCityId=RVSshn0xcdpn5gyT&procuringEntityCityId=uWYUNqiLeAMFObZ&" + 
                    "procuringEntityDepartmentId=394&procuringEntityDepartmentId=872&procuringEntityDepartmentId=644&procuringEntityDepartmentId=982&procuringEntityDepartmentId=717&" + 
                    "procuringEntityGroupId=425&procuringEntityGroupId=244&procuringEntityGroupId=120&" + 
                    "year=220&" + 
                    "month=115&month=768&month=-1331162254&month=687&" + 
                    "pageNumber=231&" + 
                    "pageSize=313&" + 
                    "minTenderValue=0.36632817990834954&" + 
                    "minAwardValue=0.030747160590908873&" + 
                    "maxAwardValue=0.18189417889967896&" + 
                    "electronicSubmission=true&" + 
                    "EMextraParam123=_EM_18910_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentTotalProjectsFlaggedByYear
    */
    @Test(timeout = 60000)
    public void test_253_postOnPercentTotalProjectsFlaggedByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/percentTotalProjectsFlaggedByYear?" + 
                    "bidTypeId=9UpkFkqEE_7C&bidTypeId=RIGGING&bidTypeId=_EM_62667_XYZ_&bidTypeId=_EM_62668_XYZ_&" + 
                    "notBidTypeId=_EM_62669_XYZ_&notBidTypeId=_EM_62670_XYZ_&" + 
                    "procuringEntityId=_EM_62671_XYZ_&" + 
                    "supplierId=&" + 
                    "bidSelectionMethod=H_T&bidSelectionMethod=8T&bidSelectionMethod=6EM373NL_p&bidSelectionMethod=dgac5&" + 
                    "procurementMethod=LM6N2Ihkfw&procurementMethod=bl&procurementMethod=_EM_62676_XYZ_&" + 
                    "year=354&year=84&" + 
                    "month=238&" + 
                    "pageNumber=758&" + 
                    "pageSize=724&" + 
                    "minAwardValue=0.36187452125789255&" + 
                    "maxAwardValue=0.7991943519934642&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "monthly=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentTotalProjectsFlaggedByYear
    */
    @Test(timeout = 60000)
    public void test_254_postOnPercentTotalProjectsFlaggedByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/percentTotalProjectsFlaggedByYear?" + 
                    "notBidTypeId=&" + 
                    "procuringEntityId=sTk2vP9xSJ_pLzl9&procuringEntityId=_EM_83134_XYZ_&procuringEntityId=_EM_83135_XYZ_&procuringEntityId=qhKASrgVdpAj&procuringEntityId=1WKKC&" + 
                    "notProcuringEntityId=8lrPlodCoybaK&notProcuringEntityId=t_QRAmDgQn3wEU1g&notProcuringEntityId=nQOif57f4&notProcuringEntityId=_EM_83136_XYZ_&" + 
                    "bidSelectionMethod=Y&bidSelectionMethod=_EM_83137_XYZ_&" + 
                    "notBidSelectionMethod=tbzaXHuoBCNx&notBidSelectionMethod=WGmgNFi&notBidSelectionMethod=_EM_83138_XYZ_&notBidSelectionMethod=WWMKmhAiLvDg&notBidSelectionMethod=df0geFqS7BCK8JP&" + 
                    "contrMethod=&" + 
                    "planningLoc=_EM_83139_XYZ_&planningLoc=v0hssA3DFw1Pp25&planningLoc=G0eE1ddNg3YVrAH&" + 
                    "tenderLoc=_EM_83140_XYZ_&tenderLoc=_EM_83141_XYZ_&" + 
                    "procurementMethod=fkfSlkSO30kG&" + 
                    "procuringEntityDepartmentId=763&procuringEntityDepartmentId=353&" + 
                    "procuringEntityGroupId=249&procuringEntityGroupId=-1066996719&procuringEntityGroupId=24&procuringEntityGroupId=45&" + 
                    "year=657&" + 
                    "pageSize=108&" + 
                    "maxAwardValue=0.6518752911960418&" + 
                    "flagged=true&" + 
                    "monthly=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentTotalProjectsFlaggedByYear
    */
    @Test(timeout = 60000)
    public void test_255_postOnPercentTotalProjectsFlaggedByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/percentTotalProjectsFlaggedByYear?" + 
                    "bidTypeId=&" + 
                    "procuringEntityId=_EM_50046_XYZ_&procuringEntityId=xtgie&procuringEntityId=ZrsL8HWNpY&" + 
                    "planningLoc=_EM_50050_XYZ_&planningLoc=uG_bRaa2jZ&planningLoc=_EM_50051_XYZ_&planningLoc=KOPSzA8nnIQIRZoA&" + 
                    "procuringEntityCityId=&procuringEntityCityId=&procuringEntityCityId=_EM_50055_XYZ_&procuringEntityCityId=_EM_50056_XYZ_&" + 
                    "procuringEntityGroupId=&" + 
                    "month=221&month=620&month=162&month=977&month=837&" + 
                    "pageNumber=321&" + 
                    "pageSize=548&" + 
                    "minTenderValue=0.7971142017674631&" + 
                    "maxTenderValue=0.2634796019489324&" + 
                    "minAwardValue=0.7855374496412586&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "skip=_EM_50057_XYZ_&" + 
                    "yearFilterPagingRequest=edpkR")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentTotalProjectsFlaggedByYear
    */
    @Test(timeout = 60000)
    public void test_256_postOnPercentTotalProjectsFlaggedByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/percentTotalProjectsFlaggedByYear?" + 
                    "notProcuringEntityId=&" + 
                    "bidSelectionMethod=_EM_24777_XYZ_&bidSelectionMethod=_EM_24778_XYZ_&bidSelectionMethod=Y0AGuhl&bidSelectionMethod=_EM_24779_XYZ_&" + 
                    "planningLoc=N&planningLoc=_EM_24783_XYZ_&" + 
                    "procuringEntityDepartmentId=430&procuringEntityDepartmentId=748&procuringEntityDepartmentId=386&procuringEntityDepartmentId=850&" + 
                    "year=-1273495044&year=712&" + 
                    "month=357&month=714&month=736&month=574&" + 
                    "pageSize=6&" + 
                    "minTenderValue=0.9820604451853523&" + 
                    "maxTenderValue=0.3183542791472267&" + 
                    "minAwardValue=0.7940741109508471&" + 
                    "maxAwardValue=0.803183586182964&" + 
                    "electronicSubmission=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentTotalProjectsFlaggedByYear
    */
    @Test(timeout = 60000)
    public void test_257_postOnPercentTotalProjectsFlaggedByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/percentTotalProjectsFlaggedByYear?" + 
                    "bidTypeId=_EM_65277_XYZ_&bidTypeId=ykOp2GFq2o&" + 
                    "procuringEntityId=95wvSfaEQZzSKibj&procuringEntityId=_EM_65279_XYZ_&procuringEntityId=me&" + 
                    "notProcuringEntityId=_EM_65280_XYZ_&" + 
                    "bidSelectionMethod=0&bidSelectionMethod=Ow2&" + 
                    "notBidSelectionMethod=_EM_65283_XYZ_&notBidSelectionMethod=_EM_65284_XYZ_&notBidSelectionMethod=Fw0NsZyLjSovx&notBidSelectionMethod=_EM_65285_XYZ_&notBidSelectionMethod=_EM_65286_XYZ_&" + 
                    "pageNumber=861&" + 
                    "maxTenderValue=0.404320863077552&" + 
                    "maxAwardValue=0.11177363700902443&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "password=_EM_65294_XYZ_&" + 
                    "yearFilterPagingRequest=ituTYw3GzX86xiv")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/plannedFundingByLocation
    */
    @Test(timeout = 60000)
    public void test_258_postOnPlannedFundingByLocationReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/plannedFundingByLocation?" + 
                    "notBidTypeId=&" + 
                    "procuringEntityId=&" + 
                    "supplierId=JX7R8kkqhE&supplierId=nupf5Q&" + 
                    "bidSelectionMethod=_EM_24863_XYZ_&bidSelectionMethod=QarYBhdD3JAud8&bidSelectionMethod=_EM_24864_XYZ_&bidSelectionMethod=_EM_24865_XYZ_&" + 
                    "notBidSelectionMethod=Pd4vpQK&notBidSelectionMethod=JGHssUmFgSRbeQ1&notBidSelectionMethod=_EM_24866_XYZ_&" + 
                    "contrMethod=Pw&contrMethod=0vXphw&contrMethod=NGfydGr&contrMethod=sHSSlu7dviWkD3&" + 
                    "procurementMethod=2JSTJYr6Q&procurementMethod=_EM_24868_XYZ_&procurementMethod=3q6&" + 
                    "procuringEntityCityId=ZFVdmGF&" + 
                    "procuringEntityGroupId=64&procuringEntityGroupId=580&procuringEntityGroupId=915&" + 
                    "pageNumber=475&" + 
                    "pageSize=500&" + 
                    "minTenderValue=0.6557317326134526&" + 
                    "electronicSubmission=false&" + 
                    "skip=P0stwf14p&" + 
                    "class=JuVmNnmG&" + 
                    "yearFilterPagingRequest=Ua4M")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/qualityAverageAwardPeriod
    */
    @Test(timeout = 60000)
    public void test_259_postOnQualityAverageAwardPeriodReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/qualityAverageAwardPeriod?" + 
                    "bidTypeId=b&bidTypeId=jrkrL0fqxx&" + 
                    "notBidTypeId=KG&" + 
                    "procuringEntityId=&" + 
                    "notProcuringEntityId=1n1Z6&notProcuringEntityId=CibBb1Jt53DDwf&notProcuringEntityId=c6vYz5rJfVmuC9Qj&notProcuringEntityId=zWmRPgWh&notProcuringEntityId=aN4PjU&" + 
                    "procuringEntityGroupId=316&procuringEntityGroupId=338&procuringEntityGroupId=916&" + 
                    "maxAwardValue=0.035095670495660314&" + 
                    "flagged=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/qualityAverageTenderPeriod
    */
    @Test(timeout = 60000)
    public void test_260_postOnQualityAverageTenderPeriodReturns200() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/api/qualityAverageTenderPeriod?" + 
                    "notProcuringEntityId=&" + 
                    "supplierId=_EM_7803_XYZ_&supplierId=MEAbOokg&supplierId=_EM_7804_XYZ_&supplierId=2RujV7ljI4GW9&supplierId=gFkFLVBgtb&" + 
                    "bidSelectionMethod=hc&" + 
                    "notBidSelectionMethod=&" + 
                    "procuringEntityDepartmentId=&" + 
                    "procuringEntityGroupId=542&" + 
                    "pageSize=443&" + 
                    "minTenderValue=0.9466079433200069&" + 
                    "maxTenderValue=0.043047184775824365&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/tenderPriceByProcurementMethod
    */
    @Test(timeout = 60000)
    public void test_261_postOnTenderPriceByProcurementMethodReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/tenderPriceByProcurementMethod?" + 
                    "bidTypeId=FRAUD&" + 
                    "bidSelectionMethod=quFaElxv&" + 
                    "notBidSelectionMethod=_EM_92114_XYZ_&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=DtUeJXe4nL26_qC&procurementMethod=uvGkOlk&procurementMethod=QmfLx50&procurementMethod=_EM_92117_XYZ_&" + 
                    "procuringEntityCityId=dIj&procuringEntityCityId=xQO&" + 
                    "procuringEntityDepartmentId=802&procuringEntityDepartmentId=834&procuringEntityDepartmentId=192&procuringEntityDepartmentId=361&procuringEntityDepartmentId=300&" + 
                    "pageNumber=158&" + 
                    "minTenderValue=0.5745646071338495&" + 
                    "maxTenderValue=0.16612337828856139&" + 
                    "minAwardValue=0.3543634389604302&" + 
                    "skip=l6l&" + 
                    "password=jEx4_GR2Bpc&" + 
                    "class=2NT&" + 
                    "yearFilterPagingRequest=_EM_92118_XYZ_&" + 
                    "username=_EM_92119_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/tendersAwardsYears
    */
    @Test(timeout = 60000)
    public void test_262_postOnTendersAwardsYearsReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/tendersAwardsYears")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/tendersAwardsYears
    */
    @Test(timeout = 60000)
    public void test_263_postOnTendersAwardsYearsReturns200() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/tendersAwardsYears")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/tendersByItemClassification
    */
    @Test(timeout = 60000)
    public void test_264_postOnTendersByItemClassificationReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/tendersByItemClassification?" + 
                    "bidTypeId=&" + 
                    "supplierId=_EM_25392_XYZ_&" + 
                    "bidSelectionMethod=&" + 
                    "notBidSelectionMethod=_EM_25393_XYZ_&" + 
                    "planningLoc=NB&planningLoc=_EM_25394_XYZ_&planningLoc=JZiip7ASBNzr&" + 
                    "pageSize=978&" + 
                    "maxTenderValue=0.5363166006742425&" + 
                    "maxAwardValue=0.3601235281623981&" + 
                    "flagged=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentOfEligibleProjectsFlaggedByYear
    */
    @Test(timeout = 60000)
    public void test_265_postOnPercentOfEligibleProjectsFlaggedByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/percentOfEligibleProjectsFlaggedByYear?" + 
                    "bidTypeId=WBpbNcFi&bidTypeId=2al&bidTypeId=Ofg&" + 
                    "procuringEntityId=_EM_15782_XYZ_&procuringEntityId=_EM_15783_XYZ_&procuringEntityId=iGi5Y&procuringEntityId=yu&procuringEntityId=SxgUsXxzHKmd&" + 
                    "notProcuringEntityId=_EM_15784_XYZ_&notProcuringEntityId=_EM_15785_XYZ_&notProcuringEntityId=NPHL&" + 
                    "supplierId=&" + 
                    "bidSelectionMethod=R&bidSelectionMethod=qy6MRf4JjPIj9blC&bidSelectionMethod=TBbllMzg7ai&bidSelectionMethod=_EM_15786_XYZ_&bidSelectionMethod=DwWC31Vv&" + 
                    "notBidSelectionMethod=tG2Dg4Z&notBidSelectionMethod=_EM_15787_XYZ_&notBidSelectionMethod=_EM_15788_XYZ_&notBidSelectionMethod=_EM_15789_XYZ_&notBidSelectionMethod=Hz4L3dvhZ&" + 
                    "planningLoc=_EM_15790_XYZ_&planningLoc=_EM_15791_XYZ_&" + 
                    "procuringEntityDepartmentId=367&procuringEntityDepartmentId=1318703070&procuringEntityDepartmentId=634&" + 
                    "pageSize=301&" + 
                    "minTenderValue=0.6426360112004633&" + 
                    "minAwardValue=0.5685641330084523&" + 
                    "electronicSubmission=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/tendersByLocation
    */
    @Test(timeout = 60000)
    public void test_266_postOnTendersByLocationReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/tendersByLocation?" + 
                    "bidSelectionMethod=l&bidSelectionMethod=_EM_90476_XYZ_&bidSelectionMethod=TDjCuLR92PO&bidSelectionMethod=_EM_90477_XYZ_&" + 
                    "notBidSelectionMethod=WBORTBDO&notBidSelectionMethod=Qx6MzEhJ&notBidSelectionMethod=_EM_90478_XYZ_&notBidSelectionMethod=3QyKlnfrUr4U2&" + 
                    "planningLoc=O&planningLoc=DgJINBLH7zx&planningLoc=_EM_90481_XYZ_&planningLoc=4INLQ&planningLoc=u29P9F&" + 
                    "procurementMethod=xYd1&procurementMethod=_EM_90484_XYZ_&procurementMethod=_EM_90485_XYZ_&" + 
                    "procuringEntityCityId=_EM_90486_XYZ_&procuringEntityCityId=_EM_90487_XYZ_&procuringEntityCityId=_EM_90488_XYZ_&procuringEntityCityId=_EM_90489_XYZ_&procuringEntityCityId=4wse&" + 
                    "procuringEntityDepartmentId=895&procuringEntityDepartmentId=802&" + 
                    "pageSize=328&" + 
                    "maxAwardValue=0.18038468741161884&" + 
                    "flagged=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/tendersByLocation
    */
    @Test(timeout = 60000)
    public void test_267_postOnTendersByLocationReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/tendersByLocation?" + 
                    "bidTypeId=&" + 
                    "supplierId=mRbnrgYS2nCHgjGs&supplierId=ryfQx&" + 
                    "bidSelectionMethod=zTO8&bidSelectionMethod=IkA1_jgI&bidSelectionMethod=H&" + 
                    "notBidSelectionMethod=_EM_36757_XYZ_&notBidSelectionMethod=_EM_36758_XYZ_&notBidSelectionMethod=KuRyHbs9PyJL62m&notBidSelectionMethod=gNEHK0d4OV1&notBidSelectionMethod=hRuCUzC7JTCP6&" + 
                    "planningLoc=i7c4Daxbx5T&planningLoc=_EM_36761_XYZ_&planningLoc=_EM_36762_XYZ_&planningLoc=OeqMcaJUT4sRb&planningLoc=_EM_36763_XYZ_&" + 
                    "tenderLoc=_EM_36764_XYZ_&tenderLoc=&" + 
                    "procurementMethod=&" + 
                    "maxTenderValue=0.9508868143391173&" + 
                    "flagged=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/topTenLargestAwards
    */
    @Test(timeout = 60000)
    public void test_268_postOnTopTenLargestAwardsReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/topTenLargestAwards?" + 
                    "bidTypeId=PmS&" + 
                    "contrMethod=&" + 
                    "planningLoc=&" + 
                    "pageSize=373&" + 
                    "maxTenderValue=0.7791096990698843")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/topTenLargestAwards
    */
    @Test(timeout = 60000)
    public void test_269_postOnTopTenLargestAwardsReturns200() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/topTenLargestAwards?" + 
                    "bidTypeId=&" + 
                    "notProcuringEntityId=79Hdd&" + 
                    "notBidSelectionMethod=_EM_3014_XYZ_&notBidSelectionMethod=_EM_3015_XYZ_&" + 
                    "planningLoc=eGpZlSxjD0&planningLoc=_EM_3017_XYZ_&" + 
                    "tenderLoc=GXm3wQmx&" + 
                    "procurementMethod=_EM_3018_XYZ_&procurementMethod=_EM_3019_XYZ_&" + 
                    "procuringEntityCityId=_EM_3020_XYZ_&procuringEntityCityId=_EM_3021_XYZ_&procuringEntityCityId=&procuringEntityCityId=_EM_3022_XYZ_&" + 
                    "procuringEntityDepartmentId=-1851491987&procuringEntityDepartmentId=833&procuringEntityDepartmentId=57&procuringEntityDepartmentId=151&procuringEntityDepartmentId=156&" + 
                    "procuringEntityGroupId=&" + 
                    "maxAwardValue=0.059708106222986834&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/topTenLargestTenders
    */
    @Test(timeout = 60000)
    public void test_270_postOnTopTenLargestTendersReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/topTenLargestTenders?" + 
                    "notBidTypeId=&" + 
                    "bidSelectionMethod=&" + 
                    "planningLoc=_EM_37645_XYZ_&planningLoc=_EM_37646_XYZ_&" + 
                    "tenderLoc=REhNl8xGgdoYgI&tenderLoc=YGB6IsQeA&tenderLoc=_EM_37647_XYZ_&tenderLoc=AONLoL&" + 
                    "procurementMethod=&" + 
                    "procuringEntityGroupId=598&procuringEntityGroupId=291&" + 
                    "pageNumber=820&" + 
                    "pageSize=145&" + 
                    "minTenderValue=0.05138329453735957&" + 
                    "minAwardValue=0.6576345466232717&" + 
                    "electronicSubmission=true&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "skip=7_BT1&" + 
                    "password=N5SlWzdYKs4I7&" + 
                    "class=8jHntVOYPITwfzf&" + 
                    "yearFilterPagingRequest=r1Tq9DFd0fSVkGnz&" + 
                    "username=N4Et5uQ9tO")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/topTenLargestTenders
    */
    @Test(timeout = 60000)
    public void test_271_postOnTopTenLargestTendersReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/topTenLargestTenders?" + 
                    "notBidTypeId=&" + 
                    "bidSelectionMethod=&" + 
                    "planningLoc=_EM_37645_XYZ_&planningLoc=_EM_37646_XYZ_&" + 
                    "tenderLoc=REhNl8xGgdoYgI&tenderLoc=YGB6IsQeA&tenderLoc=_EM_37647_XYZ_&tenderLoc=AONLoL&" + 
                    "procurementMethod=&" + 
                    "pageNumber=820&" + 
                    "pageSize=145&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "skip=7_BT1&" + 
                    "password=N5SlWzdYKs4I7&" + 
                    "class=8jHntVOYPITwfzf&" + 
                    "yearFilterPagingRequest=r1Tq9DFd0fSVkGnz&" + 
                    "username=N4Et5uQ9tO")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/totalCancelledTendersByYear
    */
    @Test(timeout = 60000)
    public void test_272_postOnApiTotalCancelledTendersByYearWithQueryParamsFlaggedReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_12018_XYZ_")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/totalCancelledTendersByYear?" + 
                    "bidTypeId=abj2pnW86WLvr&bidTypeId=OOaDHIONNoXU&" + 
                    "procurementMethod=&" + 
                    "procuringEntityDepartmentId=472&procuringEntityDepartmentId=752&procuringEntityDepartmentId=682&" + 
                    "pageNumber=516&" + 
                    "pageSize=908&" + 
                    "minTenderValue=0.9682256254581891&" + 
                    "maxAwardValue=0.016342150628930296&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/totalCancelledTendersByYearByRationale
    */
    @Test(timeout = 60000)
    public void test_273_postOnTotalCancelledTendersByYearByRationaleReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/totalCancelledTendersByYearByRationale?" + 
                    "notBidTypeId=GCJF2qVcG5JYW&" + 
                    "tenderLoc=9&" + 
                    "procurementMethod=&" + 
                    "procuringEntityCityId=zblQoYnRrbwt2Hb1&procuringEntityCityId=_EM_40766_XYZ_&" + 
                    "procuringEntityDepartmentId=353&" + 
                    "procuringEntityGroupId=&" + 
                    "pageNumber=76&" + 
                    "pageSize=353&" + 
                    "maxTenderValue=0.7513325841971858&" + 
                    "maxAwardValue=0.20126562973217366&" + 
                    "electronicSubmission=false&" + 
                    "monthly=true&" + 
                    "password=yV5b&" + 
                    "yearFilterPagingRequest=wXtx&" + 
                    "username=NpdBd0Iz5ZSXW")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/totalCancelledTendersByYearByRationale
    */
    @Test(timeout = 60000)
    public void test_274_postOnTotalCancelledTendersByYearByRationaleReturns200() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/api/totalCancelledTendersByYearByRationale?" + 
                    "bidTypeId=&" + 
                    "notBidTypeId=&" + 
                    "notProcuringEntityId=&" + 
                    "supplierId=&" + 
                    "bidSelectionMethod=_EM_8571_XYZ_&" + 
                    "planningLoc=_EM_8573_XYZ_&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=&procurementMethod=_EM_8574_XYZ_&procurementMethod=_EM_8575_XYZ_&" + 
                    "procuringEntityCityId=whhi&procuringEntityCityId=3A&procuringEntityCityId=X8VN9zQUQ&" + 
                    "pageNumber=801&" + 
                    "pageSize=841&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/totalEligibleIndicatorsByIndicatorTypeByYear
    */
    @Test(timeout = 60000)
    public void test_275_postOnTotalEligibleIndicatorsByIndicatorTypeByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/totalEligibleIndicatorsByIndicatorTypeByYear?" + 
                    "supplierId=fER_FO907&supplierId=_EM_42825_XYZ_&supplierId=5aPO52VVsA_kU&" + 
                    "bidSelectionMethod=zFk7LzvkoB8O&bidSelectionMethod=_EM_42826_XYZ_&bidSelectionMethod=_EM_42827_XYZ_&bidSelectionMethod=_EM_42828_XYZ_&" + 
                    "notBidSelectionMethod=_EM_42829_XYZ_&" + 
                    "contrMethod=&" + 
                    "procuringEntityDepartmentId=22&procuringEntityDepartmentId=145&procuringEntityDepartmentId=781&" + 
                    "procuringEntityGroupId=471&procuringEntityGroupId=432&procuringEntityGroupId=46&procuringEntityGroupId=291&" + 
                    "minTenderValue=0.047311207812567924&" + 
                    "minAwardValue=0.21802680161002763&" + 
                    "flagged=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/totalEligibleIndicatorsByIndicatorTypeByYear
    */
    @Test(timeout = 60000)
    public void test_276_postOnTotalEligibleIndicatorsByIndicatorTypeByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/totalEligibleIndicatorsByIndicatorTypeByYear?" + 
                    "bidTypeId=hLA&bidTypeId=Fm7fGbWpr9KM&bidTypeId=FVtjmECEoM&" + 
                    "supplierId=BiEHzy4zR&supplierId=KeGcr&supplierId=VbS&" + 
                    "notBidSelectionMethod=OpGcfRzUNmwH&" + 
                    "planningLoc=9tXdaAOJSFqvN&planningLoc=ooQfx&planningLoc=0shhnc&planningLoc=Nb2mhLFSOeE&planningLoc=RCfW8o295w&" + 
                    "procurementMethod=&" + 
                    "procuringEntityCityId=0hJKC0&procuringEntityCityId=QHnkJ0&" + 
                    "procuringEntityDepartmentId=389&procuringEntityDepartmentId=91&procuringEntityDepartmentId=264&" + 
                    "electronicSubmission=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/totalEligibleProjectsByIndicatorTypeByYear
    */
    @Test(timeout = 60000)
    public void test_277_postOnTotalEligibleProjectsByIndicatorTypeByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/totalEligibleProjectsByIndicatorTypeByYear?" + 
                    "procuringEntityId=&" + 
                    "bidSelectionMethod=fPKLx3jw348XTiPD&bidSelectionMethod=Ud9WD&bidSelectionMethod=_EM_54797_XYZ_&bidSelectionMethod=_EM_54798_XYZ_&" + 
                    "tenderLoc=J9KXn3dCYZt&tenderLoc=_EM_54799_XYZ_&tenderLoc=58XGp&" + 
                    "procuringEntityCityId=sPCgxlSk_7Nt_k&procuringEntityCityId=lbnpu50E8uBCDu&procuringEntityCityId=sKHE5JSe&" + 
                    "procuringEntityDepartmentId=918&" + 
                    "procuringEntityGroupId=447&procuringEntityGroupId=813&procuringEntityGroupId=-1490774335&procuringEntityGroupId=163&procuringEntityGroupId=106&" + 
                    "month=&" + 
                    "minTenderValue=0.30132085261392005&" + 
                    "maxTenderValue=0.44755070196860514&" + 
                    "minAwardValue=0.14835561119146345&" + 
                    "flagged=false&" + 
                    "EMextraParam123=_EM_12073_XYZ_&" + 
                    "password=QkEb&" + 
                    "class=_EM_54802_XYZ_&" + 
                    "username=1urM")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/totalEligibleProjectsByIndicatorTypeByYear
    */
    @Test(timeout = 60000)
    public void test_278_postOnTotalEligibleProjectsByIndicatorTypeByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/totalEligibleProjectsByIndicatorTypeByYear?" + 
                    "bidTypeId=&" + 
                    "notBidTypeId=z&notBidTypeId=dHw0BDy&" + 
                    "procuringEntityId=&" + 
                    "notBidSelectionMethod=&" + 
                    "contrMethod=&" + 
                    "procurementMethod=Rpk&procurementMethod=0rVaw6WLr&procurementMethod=_EM_54789_XYZ_&" + 
                    "pageNumber=487&" + 
                    "pageSize=363&" + 
                    "minTenderValue=0.30132085261392005&" + 
                    "minAwardValue=0.14835561119146345&" + 
                    "electronicSubmission=true&" + 
                    "monthly=false&" + 
                    "skip=9gDAv6B&" + 
                    "password=q8BMMhB3FmF1uQd&" + 
                    "class=J&" + 
                    "yearFilterPagingRequest=9XMuajTaVm9m5&" + 
                    "username=dZbSPOQ4rI")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/totalEligibleProjectsByIndicatorTypeByYear
    */
    @Test(timeout = 60000)
    public void test_279_postOnTotalEligibleProjectsByIndicatorTypeByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/totalEligibleProjectsByIndicatorTypeByYear?" + 
                    "bidTypeId=&" + 
                    "notBidTypeId=z&notBidTypeId=dHw0BDy&" + 
                    "procuringEntityId=&" + 
                    "notBidSelectionMethod=&" + 
                    "contrMethod=&" + 
                    "procurementMethod=Rpk&procurementMethod=0rVaw6WLr&procurementMethod=_EM_54789_XYZ_&" + 
                    "minTenderValue=0.30132085261392005&" + 
                    "minAwardValue=0.14835561119146345&" + 
                    "electronicSubmission=true&" + 
                    "monthly=false&" + 
                    "EMextraParam123=_EM_12073_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/totalFlags
    */
    @Test(timeout = 60000)
    public void test_280_postOnTotalFlagsReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/totalFlags?" + 
                    "bidTypeId=_EM_38351_XYZ_&bidTypeId=Jf4jH&bidTypeId=RIGWING&" + 
                    "notBidTypeId=_EM_38058_XYZ_&notBidTypeId=dfgBUc_jTjEN&notBidTypeId=_EM_38059_XYZ_&notBidTypeId=CAwjALzbEqgG4_mS&notBidTypeId=BOLLUSION&" + 
                    "procuringEntityId=FmvIlVRrbioMDZDF&" + 
                    "notProcuringEntityId=_EM_38060_XYZ_&notProcuringEntityId=dl&notProcuringEntityId=_EM_38061_XYZ_&notProcuringEntityId=_EM_38062_XYZ_&notProcuringEntityId=_EM_38063_XYZ_&" + 
                    "bidSelectionMethod=_EM_38346_XYZ_&bidSelectionMethod=9TevRTLIK0&bidSelectionMethod=NTPBO&bidSelectionMethod=_EM_38347_XYZ_&" + 
                    "tenderLoc=_EM_38070_XYZ_&tenderLoc=_EM_38071_XYZ_&" + 
                    "procurementMethod=_EM_38352_XYZ_&" + 
                    "procuringEntityCityId=sFmi3NwFZo1935v&procuringEntityCityId=_EM_38072_XYZ_&procuringEntityCityId=iW3D1PT&" + 
                    "procuringEntityDepartmentId=-268434723&procuringEntityDepartmentId=270&procuringEntityDepartmentId=-1281&" + 
                    "procuringEntityGroupId=8388986&procuringEntityGroupId=733&" + 
                    "year=-4193364&year=582&" + 
                    "month=128&month=-523888&month=399&" + 
                    "pageNumber=0&" + 
                    "pageSize=8389020&" + 
                    "minTenderValue=0.43015473483335764&" + 
                    "maxTenderValue=0.4394875264182742&" + 
                    "minAwardValue=0.7517469507314176&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "EMextraParam123=_EM_38073_XYZ_&" + 
                    "skip=_EM_38353_XYZ_&" + 
                    "password=Y3B83OkoGUp&" + 
                    "class=_EM_38354_XYZ_&" + 
                    "yearFilterPagingRequest=LWY&" + 
                    "username=bNBFWP")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/totalFlags
    */
    @Test(timeout = 60000)
    public void test_281_postOnTotalFlagsReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_29340_XYZ_")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/totalFlags?" + 
                    "bidTypeId=_EM_29319_XYZ_&" + 
                    "procuringEntityId=GOw99Eb32YEtN&procuringEntityId=J&procuringEntityId=_EM_29321_XYZ_&procuringEntityId=_EM_29322_XYZ_&procuringEntityId=_EM_29323_XYZ_&" + 
                    "notBidSelectionMethod=4ivRSfYvedNwMBH&notBidSelectionMethod=_EM_29329_XYZ_&notBidSelectionMethod=_EM_29330_XYZ_&notBidSelectionMethod=_EM_29331_XYZ_&" + 
                    "contrMethod=&" + 
                    "procurementMethod=_EM_29334_XYZ_&procurementMethod=_EM_29335_XYZ_&procurementMethod=_EM_29336_XYZ_&" + 
                    "procuringEntityCityId=_EM_29337_XYZ_&procuringEntityCityId=_EM_29338_XYZ_&" + 
                    "procuringEntityDepartmentId=907&procuringEntityDepartmentId=293&procuringEntityDepartmentId=12&" + 
                    "year=581&year=275&year=418&year=-855872755&year=400&" + 
                    "month=-662932832&month=667&month=949&month=100&" + 
                    "minTenderValue=0.8202632830705636&" + 
                    "maxTenderValue=0.9791269591895326&" + 
                    "minAwardValue=0.7909376348227075&" + 
                    "EMextraParam123=_EM_29339_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/totalFlags
    */
    @Test(timeout = 60000)
    public void test_282_postOnApiTotalFlagsWithQueryParamsFlaggedReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/totalFlags?" + 
                    "notBidTypeId=FRAUD&notBidTypeId=_EM_53652_XYZ_&notBidTypeId=&notBidTypeId=_EM_53653_XYZ_&" + 
                    "procuringEntityId=D4&procuringEntityId=_EM_53654_XYZ_&procuringEntityId=20QTlsgX_joxMo&procuringEntityId=HCtl3yTuY5MGS&procuringEntityId=_EM_53655_XYZ_&" + 
                    "notProcuringEntityId=JrS&notProcuringEntityId=_EM_53656_XYZ_&" + 
                    "supplierId=_EM_53657_XYZ_&supplierId=_EM_53658_XYZ_&supplierId=SMSQ8FXdwOq7g&supplierId=SX6vfuzWeZEVYE&supplierId=_EM_53659_XYZ_&" + 
                    "notBidSelectionMethod=rYlivpxvKgwN&notBidSelectionMethod=_EM_53660_XYZ_&notBidSelectionMethod=2lfgfsqKIJ0wr&" + 
                    "tenderLoc=6TgGKimtH&tenderLoc=6p8fi1xmJB0AmBJ&tenderLoc=_EM_53661_XYZ_&" + 
                    "procuringEntityCityId=0Qc4qPMZ_r&procuringEntityCityId=_EM_53665_XYZ_&procuringEntityCityId=U2idbnDLK6&procuringEntityCityId=_EM_53666_XYZ_&procuringEntityCityId=BF&" + 
                    "procuringEntityGroupId=791&" + 
                    "month=499&month=932&month=630&month=41&" + 
                    "pageNumber=711&" + 
                    "pageSize=240&" + 
                    "minTenderValue=0.06840257950915052&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "EMextraParam123=_EM_10568_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/totalFlags
    */
    @Test(timeout = 60000)
    public void test_283_postOnTotalFlagsReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/totalFlags?" + 
                    "bidTypeId=_EM_96923_XYZ_&bidTypeId=FRAUD&bidTypeId=RIGGING&" + 
                    "notBidTypeId=dLgM4KOB4I2t1&" + 
                    "procuringEntityId=LXGQ6hqMlhIzmxn&procuringEntityId=M&procuringEntityId=P&procuringEntityId=_EM_96924_XYZ_&" + 
                    "notProcuringEntityId=_EM_96925_XYZ_&notProcuringEntityId=_EM_96926_XYZ_&notProcuringEntityId=777DIbF09CrOAcH&" + 
                    "notBidSelectionMethod=&" + 
                    "tenderLoc=yD3IPPr7LsxWr&tenderLoc=9aZtJNq&tenderLoc=AxnXb5ZRPbd6z&tenderLoc=_EM_96928_XYZ_&" + 
                    "procuringEntityCityId=N7OghVMt&" + 
                    "procuringEntityDepartmentId=462&" + 
                    "procuringEntityGroupId=-1064327609&procuringEntityGroupId=78&procuringEntityGroupId=154&" + 
                    "year=987&year=955&year=354&year=791&year=487&" + 
                    "month=&" + 
                    "pageSize=808&" + 
                    "maxTenderValue=0.5737753391900532&" + 
                    "minAwardValue=0.18673606562950262&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/totalFlags
    */
    @Test(timeout = 60000)
    public void test_284_postOnTotalFlagsReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/totalFlags?" + 
                    "bidTypeId=&" + 
                    "notProcuringEntityId=tfTFSFR3&notProcuringEntityId=_EM_47096_XYZ_&notProcuringEntityId=_EM_47097_XYZ_&notProcuringEntityId=NA&notProcuringEntityId=_EM_47098_XYZ_&" + 
                    "supplierId=_EM_47099_XYZ_&supplierId=9iW1XrmBF&supplierId=BP9oW&" + 
                    "bidSelectionMethod=fjUUl7p_k6&" + 
                    "notBidSelectionMethod=I&notBidSelectionMethod=Yn7&" + 
                    "tenderLoc=_EM_47103_XYZ_&tenderLoc=l_RmB5i2V20N&tenderLoc=_EM_47104_XYZ_&tenderLoc=_vl0IW5L3q&tenderLoc=_EM_47105_XYZ_&" + 
                    "procurementMethod=m6i2o_wlJM9rQNDx&procurementMethod=skSKIt&procurementMethod=9gJpmIx&procurementMethod=_EM_47106_XYZ_&procurementMethod=RiFrIQO9&" + 
                    "procuringEntityDepartmentId=408&procuringEntityDepartmentId=927&procuringEntityDepartmentId=1406438714&" + 
                    "month=809&month=251&month=588&month=151&" + 
                    "pageNumber=657&" + 
                    "pageSize=388&" + 
                    "maxTenderValue=0.6407081435713475&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/totalProjectsByYear
    */
    @Test(timeout = 60000)
    public void test_285_postOnTotalProjectsByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/totalProjectsByYear?" + 
                    "bidTypeId=_EM_17744_XYZ_&bidTypeId=_EM_17745_XYZ_&bidTypeId=_EM_17746_XYZ_&" + 
                    "notBidTypeId=_EM_17747_XYZ_&" + 
                    "procuringEntityId=VOtfOzNsX&procuringEntityId=q0J1DCt_NWs&" + 
                    "notProcuringEntityId=_EM_17748_XYZ_&" + 
                    "bidSelectionMethod=_EM_17749_XYZ_&" + 
                    "notBidSelectionMethod=TJjies3J&notBidSelectionMethod=_EM_17750_XYZ_&notBidSelectionMethod=FHZ42&" + 
                    "planningLoc=&" + 
                    "procurementMethod=_EM_17751_XYZ_&" + 
                    "procuringEntityDepartmentId=243&procuringEntityDepartmentId=237&" + 
                    "pageNumber=180&" + 
                    "minTenderValue=0.04698795486499141&" + 
                    "maxTenderValue=0.7296828095074104&" + 
                    "minAwardValue=0.07173560857470096&" + 
                    "electronicSubmission=false&" + 
                    "monthly=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/frequentSuppliersTimeInterval
    */
    @Test(timeout = 60000)
    public void test_286_postOnApiFrequentSuppliersTimeIntervalWithQueryParamReturns200() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/frequentSuppliersTimeInterval?maxAwards=163")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/totalFlags
    */
    @Test(timeout = 60000)
    public void test_287_postOnTotalFlagsReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/totalFlags?" + 
                    "procuringEntityId=QPS&procuringEntityId=_EM_17694_XYZ_&procuringEntityId=_EM_17695_XYZ_&procuringEntityId=_EM_17696_XYZ_&" + 
                    "notProcuringEntityId=&notProcuringEntityId=_EM_17697_XYZ_&notProcuringEntityId=jQRIb0AdnRQIKG&notProcuringEntityId=_EM_17698_XYZ_&" + 
                    "supplierId=_EM_17699_XYZ_&" + 
                    "notBidSelectionMethod=_EM_17702_XYZ_&notBidSelectionMethod=&notBidSelectionMethod=flU9A4Q&notBidSelectionMethod=_EM_17703_XYZ_&notBidSelectionMethod=_EM_17704_XYZ_&" + 
                    "planningLoc=kY4OSOMdZ&planningLoc=_EM_17705_XYZ_&planningLoc=3FgUiG90&planningLoc=e3KDb3gG&planningLoc=_EM_17706_XYZ_&" + 
                    "tenderLoc=_EM_17707_XYZ_&" + 
                    "procurementMethod=kpx4fmzz0JG&procurementMethod=_EM_17708_XYZ_&" + 
                    "procuringEntityDepartmentId=429&procuringEntityDepartmentId=1451789404&procuringEntityDepartmentId=817&" + 
                    "month=925&month=959&" + 
                    "pageSize=445&" + 
                    "maxTenderValue=0.21007223606285808&" + 
                    "minAwardValue=0.43855894649955074&" + 
                    "maxAwardValue=0.24970898317538726&" + 
                    "monthly=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/totalEligibleIndicatorsByIndicatorTypeByYear
    */
    @Test(timeout = 60000)
    public void test_288_postOnTotalEligibleIndicatorsByIndicatorTypeByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/totalEligibleIndicatorsByIndicatorTypeByYear?" + 
                    "bidTypeId=hLA&bidTypeId=Fm7fGbWpr9KM&bidTypeId=FVtjmECEoM&" + 
                    "supplierId=BiEHzy4zR&supplierId=KeGcr&supplierId=VbS&" + 
                    "notBidSelectionMethod=OpGcfRzUNmwH&" + 
                    "planningLoc=9tXdaAOJSFqvN&planningLoc=ooQfx&planningLoc=0shhnc&planningLoc=Nb2mhLFSOeE&planningLoc=RCfW8o295w&" + 
                    "procuringEntityCityId=0hJKC0&procuringEntityCityId=QHnkJ0&" + 
                    "procuringEntityDepartmentId=389&procuringEntityDepartmentId=91&procuringEntityDepartmentId=264&" + 
                    "electronicSubmission=true&" + 
                    "skip=Zz0AmDdJaFs0&" + 
                    "class=iuqm&" + 
                    "yearFilterPagingRequest=sO8d6uR5Xl")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/totalFlags
    */
    @Test(timeout = 60000)
    public void test_289_postOnApiTotalFlagsWithQueryParamsMonthlyNegativePageNumberReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/totalFlags?" + 
                    "notBidTypeId=8&" + 
                    "notProcuringEntityId=_EM_17726_XYZ_&notProcuringEntityId=_EM_17727_XYZ_&notProcuringEntityId=_EM_17728_XYZ_&notProcuringEntityId=vltZxk94l0ATfcOP&" + 
                    "supplierId=&" + 
                    "planningLoc=Ooi&" + 
                    "tenderLoc=&" + 
                    "procuringEntityGroupId=661&" + 
                    "year=626&year=958&" + 
                    "pageNumber=-1827330733&" + 
                    "minTenderValue=0.9811601076410569&" + 
                    "maxTenderValue=0.2388753500301558&" + 
                    "maxAwardValue=0.0628942312875751&" + 
                    "monthly=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentTotalProjectsEligibleByYear
    */
    @Test(timeout = 60000)
    public void test_290_postOnPercentTotalProjectsEligibleByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/percentTotalProjectsEligibleByYear?" + 
                    "bidTypeId=Rx&bidTypeId=COLLUSION&bidTypeId=_EM_16216_XYZ_&" + 
                    "notBidTypeId=_EM_16217_XYZ_&notBidTypeId=_EM_16218_XYZ_&notBidTypeId=_EM_16219_XYZ_&" + 
                    "notProcuringEntityId=&" + 
                    "supplierId=&" + 
                    "notBidSelectionMethod=22Z2eRcrk5fqXY&notBidSelectionMethod=_EM_16220_XYZ_&notBidSelectionMethod=vd2Iqh&notBidSelectionMethod=_EM_16221_XYZ_&" + 
                    "tenderLoc=71e&" + 
                    "procuringEntityCityId=&" + 
                    "year=118&" + 
                    "month=417&month=225&month=697&" + 
                    "maxTenderValue=0.12453434887393267&" + 
                    "maxAwardValue=0.017170875113528217&" + 
                    "monthly=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/totalProjectsByYear
    */
    @Test(timeout = 60000)
    public void test_291_postOnTotalProjectsByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/totalProjectsByYear?" + 
                    "notProcuringEntityId=_EM_17757_XYZ_&notProcuringEntityId=_EM_17758_XYZ_&" + 
                    "notBidSelectionMethod=_EM_17760_XYZ_&notBidSelectionMethod=_EM_17761_XYZ_&notBidSelectionMethod=t7Pm&notBidSelectionMethod=Z&" + 
                    "planningLoc=FEy73ePdu62bFkWg&planningLoc=eRAxIrC2&planningLoc=r9VaoR&planningLoc=sPGsa&" + 
                    "tenderLoc=_EM_17763_XYZ_&tenderLoc=_EM_17764_XYZ_&tenderLoc=_EM_17765_XYZ_&tenderLoc=UQ8D&" + 
                    "procuringEntityCityId=yjOpKYnB2_mj2spD&procuringEntityCityId=_EM_17769_XYZ_&" + 
                    "year=226&year=431&year=964&year=612&year=711&" + 
                    "pageSize=634&" + 
                    "minAwardValue=0.8103115375730113&" + 
                    "maxAwardValue=0.5142582178376862&" + 
                    "flagged=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/indicatorTypesMapping
    */
    @Test(timeout = 60000)
    public void test_292_postOnIndicatorTypesMappingReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/indicatorTypesMapping")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'i038'.'types'.size()", equalTo(1))
                .body("'i038'.'types'", hasItems("RIGGING"))
                .body("'i038'.'rationale'", containsString("Preconditions that are not met: Needs to have tender start date; Needs to have tender end date; Needs to have open tender procurement method; "))
                .body("'i003'.'types'.size()", equalTo(2))
                .body("'i003'.'types'", hasItems("RIGGING", "FRAUD"))
                .body("'i003'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one unsuccessful award; Needs to have at least one active award; Needs to have electronic submission tender submission method; Needs to have open tender procurement method; "))
                .body("'i007'.'types'.size()", equalTo(1))
                .body("'i007'.'types'", hasItems("RIGGING"))
                .body("'i007'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have electronic submission tender submission method; Needs to have open tender procurement method; "))
                .body("'i004'.'types'.size()", equalTo(1))
                .body("'i004'.'types'", hasItems("RIGGING"))
                .body("'i004'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one award with awarded amount; Needs to have tender with items classification; Needs to have at least one active award; Needs to have limited tender procurement method; "))
                .body("'i077'.'types'.size()", equalTo(1))
                .body("'i077'.'types'", hasItems("RIGGING"))
                .body("'i077'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have open tender procurement method OR Needs to have selective tender procurement method; "))
                .body("'i019'.'types'.size()", equalTo(1))
                .body("'i019'.'types'", hasItems("RIGGING"))
                .body("'i019'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have tender end date; Needs to have open tender procurement method; "))
                .body("'i180'.'types'.size()", equalTo(1))
                .body("'i180'.'types'", hasItems("RIGGING"))
                .body("'i180'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have tender procuring entity; Needs to have limited tender procurement method; "))
                .body("'i002'.'types'.size()", equalTo(2))
                .body("'i002'.'types'", hasItems("RIGGING", "FRAUD"))
                .body("'i002'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one unsuccessful award; Needs to have at least one active award; Needs to have electronic submission tender submission method; Needs to have open tender procurement method; "))
                .body("'i085'.'types'.size()", equalTo(2))
                .body("'i085'.'types'", hasItems("FRAUD", "COLLUSION"))
                .body("'i085'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have electronic submission tender submission method; "))
                .body("'i171'.'types'.size()", equalTo(2))
                .body("'i171'.'types'", hasItems("RIGGING", "FRAUD"))
                .body("'i171'.'rationale'", containsString("Preconditions that are not met: Needs to have tender value amount; Needs to have at least one active award; Needs to have electronic submission tender submission method; Needs to have open tender procurement method; "));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/tendersAwardsYears
    */
    @Test(timeout = 60000)
    public void test_293_postOnTendersAwardsYearsReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_20610_XYZ_")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/tendersAwardsYears?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/avgTimeFromPlanToTenderPhase
    */
    @Test(timeout = 60000)
    public void test_294_postOnApiAvgTimeFromPlanToTenderPhaseWithQueryParamsAndMonthly() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/avgTimeFromPlanToTenderPhase?" + 
                    "bidTypeId=&" + 
                    "notProcuringEntityId=NhYb72jo3NM6v&" + 
                    "supplierId=3_VQxjT13TRH&supplierId=lsAL&supplierId=Q0Tw3MmWUs7Uk&supplierId=_EM_42064_XYZ_&" + 
                    "bidSelectionMethod=l&bidSelectionMethod=IUQ7Y1qIMh&bidSelectionMethod=g6SzzPKmHc6U&" + 
                    "planningLoc=_EM_42066_XYZ_&planningLoc=_EM_42067_XYZ_&planningLoc=Dn9X7ifC&" + 
                    "tenderLoc=_EM_42068_XYZ_&tenderLoc=hIFEg5Q7iQ&tenderLoc=_EM_42069_XYZ_&" + 
                    "procurementMethod=139Vn&procurementMethod=&procurementMethod=_EM_42070_XYZ_&" + 
                    "procuringEntityGroupId=316&procuringEntityGroupId=829&procuringEntityGroupId=719&procuringEntityGroupId=501&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "EMextraParam123=_EM_11448_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentTotalProjectsEligibleByYear
    */
    @Test(timeout = 60000)
    public void test_295_postOnPercentTotalProjectsEligibleByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/percentTotalProjectsEligibleByYear?" + 
                    "notBidTypeId=TN39xMyV0x&notBidTypeId=FRAUD&notBidTypeId=_EM_63313_XYZ_&notBidTypeId=_EM_63314_XYZ_&notBidTypeId=TbHX2A&" + 
                    "procuringEntityId=lcSscECex&" + 
                    "notProcuringEntityId=_EM_63315_XYZ_&notProcuringEntityId=_EM_63316_XYZ_&" + 
                    "planningLoc=&" + 
                    "procuringEntityCityId=CyUINmj&procuringEntityCityId=_EM_63321_XYZ_&procuringEntityCityId=uJGiep&procuringEntityCityId=eq&procuringEntityCityId=_EM_63322_XYZ_&" + 
                    "year=520&year=341&year=812&" + 
                    "electronicSubmission=false&" + 
                    "monthly=false&" + 
                    "skip=_a6sKgC&" + 
                    "yearFilterPagingRequest=CoEEXs")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/tendersAwardsYears
    */
    @Test(timeout = 60000)
    public void test_296_postOnApiTendersAwardsYearsWithQueryParamsReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/tendersAwardsYears?" + 
                    "EMextraParam123=_EM_11925_XYZ_&" + 
                    "password=yjN")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/tendersAwardsYears
    */
    @Test(timeout = 60000)
    public void test_297_postOnTendersAwardsYearsReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_11926_XYZ_")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/tendersAwardsYears?username=WPNAlISA")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentOfEligibleProjectsFlaggedByYear
    */
    @Test(timeout = 60000)
    public void test_298_postOnPercentOfEligibleProjectsFlaggedByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/percentOfEligibleProjectsFlaggedByYear?" + 
                    "bidTypeId=RIGGING&bidTypeId=_EM_70777_XYZ_&bidTypeId=_EM_70778_XYZ_&bidTypeId=YwYCo7UMOzdK&" + 
                    "procuringEntityId=4zLndyQIW3Wi3T&procuringEntityId=C7gga4cxG&procuringEntityId=YWlI8NZrfBL&procuringEntityId=_EM_70779_XYZ_&" + 
                    "bidSelectionMethod=_EM_70784_XYZ_&" + 
                    "tenderLoc=_EM_70790_XYZ_&tenderLoc=_EM_70791_XYZ_&tenderLoc=_EM_70792_XYZ_&tenderLoc=_EM_70793_XYZ_&" + 
                    "year=277&year=125&year=664&" + 
                    "pageNumber=316&" + 
                    "minTenderValue=0.43384451863359175&" + 
                    "maxTenderValue=0.3603903300412148&" + 
                    "electronicSubmission=false&" + 
                    "monthly=true&" + 
                    "password=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentTotalProjectsFlaggedByYear
    */
    @Test(timeout = 60000)
    public void test_299_postOnApiPercentTotalProjectsFlaggedByYearWithQueryParamsMonthly() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/percentTotalProjectsFlaggedByYear?" + 
                    "notBidTypeId=_EM_65258_XYZ_&notBidTypeId=_EM_65259_XYZ_&notBidTypeId=_EM_65260_XYZ_&" + 
                    "procuringEntityId=_EM_65261_XYZ_&procuringEntityId=jvWh1ilO&procuringEntityId=_EM_65262_XYZ_&" + 
                    "notProcuringEntityId=n&" + 
                    "supplierId=yyd&supplierId=_EM_65263_XYZ_&supplierId=NcRIJejnBStaMqn&supplierId=jvE&" + 
                    "notBidSelectionMethod=_EM_65265_XYZ_&notBidSelectionMethod=_EM_65266_XYZ_&notBidSelectionMethod=_EM_65267_XYZ_&notBidSelectionMethod=_EM_65268_XYZ_&notBidSelectionMethod=_EM_65269_XYZ_&" + 
                    "procuringEntityCityId=w&procuringEntityCityId=Zy1wYxo6hNi&procuringEntityCityId=6B5t&" + 
                    "procuringEntityDepartmentId=490&procuringEntityDepartmentId=219&procuringEntityDepartmentId=515&procuringEntityDepartmentId=51&" + 
                    "month=41196241&month=354&month=978&month=244&" + 
                    "minAwardValue=0.6189970944216079&" + 
                    "maxAwardValue=0.11177363700902443&" + 
                    "monthly=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentTotalProjectsEligibleByYear
    */
    @Test(timeout = 60000)
    public void test_300_postOnPercentTotalProjectsEligibleByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/percentTotalProjectsEligibleByYear?" + 
                    "bidTypeId=eJg4T&bidTypeId=InCR&bidTypeId=u6YcA4HboJYYUV&bidTypeId=RIGGING&" + 
                    "supplierId=HQMCbzaz&supplierId=a&supplierId=_EM_41910_XYZ_&" + 
                    "bidSelectionMethod=&" + 
                    "procuringEntityCityId=_EM_41921_XYZ_&procuringEntityCityId=I&procuringEntityCityId=gplrn7a_TrHpq923&procuringEntityCityId=eTGutld&" + 
                    "procuringEntityDepartmentId=623&procuringEntityDepartmentId=364&procuringEntityDepartmentId=434&procuringEntityDepartmentId=787&" + 
                    "procuringEntityGroupId=-682863584&procuringEntityGroupId=337&procuringEntityGroupId=430&procuringEntityGroupId=987&procuringEntityGroupId=672&" + 
                    "year=673&year=987&year=829&year=770&" + 
                    "month=396&month=357&month=140&month=590&" + 
                    "pageNumber=903&" + 
                    "maxTenderValue=0.44201678046188175&" + 
                    "minAwardValue=0.5792463869211418")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/totalCancelledTendersByYear
    */
    @Test(timeout = 60000)
    public void test_301_postOnApiTotalCancelledTendersByYearWithQueryParamsReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/totalCancelledTendersByYear?" + 
                    "supplierId=_EM_42621_XYZ_&" + 
                    "notBidSelectionMethod=_EM_42622_XYZ_&notBidSelectionMethod=_EM_42623_XYZ_&notBidSelectionMethod=9RkUju1voCb4O&notBidSelectionMethod=A6M&notBidSelectionMethod=_EM_42624_XYZ_&" + 
                    "procurementMethod=_EM_42627_XYZ_&procurementMethod=_EM_42628_XYZ_&procurementMethod=_EM_42629_XYZ_&procurementMethod=yJcPFDA&" + 
                    "procuringEntityCityId=_EM_42630_XYZ_&procuringEntityCityId=_EM_42631_XYZ_&procuringEntityCityId=_EM_42632_XYZ_&" + 
                    "procuringEntityDepartmentId=781&" + 
                    "procuringEntityGroupId=&" + 
                    "pageNumber=211&" + 
                    "pageSize=48&" + 
                    "minTenderValue=0.5805136355080344&" + 
                    "maxAwardValue=0.20930063930325515")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/totalProjectsByYear
    */
    @Test(timeout = 60000)
    public void test_302_postOnApiTotalProjectsByYearWithQueryParamsNegativePageSizeReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "RbfgM8i")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/totalProjectsByYear?" + 
                    "notBidTypeId=v3vpZwr0&notBidTypeId=ejaJynVz5&notBidTypeId=cHCNqFzSskrH4SSH&" + 
                    "supplierId=Tv0fDu0r&" + 
                    "planningLoc=_EM_43060_XYZ_&planningLoc=F&planningLoc=_EM_43061_XYZ_&planningLoc=C3bfAcVYXsjC&planningLoc=_EM_43062_XYZ_&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=_EM_43063_XYZ_&procurementMethod=B3Cm&procurementMethod=x8hklI&procurementMethod=_EM_43064_XYZ_&" + 
                    "procuringEntityDepartmentId=&" + 
                    "procuringEntityGroupId=512&procuringEntityGroupId=832&procuringEntityGroupId=280&procuringEntityGroupId=320&" + 
                    "month=869&month=654&month=607&month=558&" + 
                    "pageSize=-1375698883&" + 
                    "minAwardValue=0.5491022833823813&" + 
                    "maxAwardValue=0.21125882128202422&" + 
                    "EMextraParam123=_EM_12146_XYZ_&" + 
                    "skip=zTiUG&" + 
                    "password=VzwRyC2s8qY&" + 
                    "class=_EM_43066_XYZ_&" + 
                    "username=_EM_43068_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/indicatorTypesMapping
    */
    @Test(timeout = 60000)
    public void test_303_postOnApiIndicatorTypesMappingWithQueryParamsReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/indicatorTypesMapping?" + 
                    "password=_EM_85117_XYZ_&" + 
                    "username=_EM_85118_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'i038'.'types'.size()", equalTo(1))
                .body("'i038'.'types'", hasItems("RIGGING"))
                .body("'i038'.'rationale'", containsString("Preconditions that are not met: Needs to have tender start date; Needs to have tender end date; Needs to have open tender procurement method; "))
                .body("'i003'.'types'.size()", equalTo(2))
                .body("'i003'.'types'", hasItems("RIGGING", "FRAUD"))
                .body("'i003'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one unsuccessful award; Needs to have at least one active award; Needs to have electronic submission tender submission method; Needs to have open tender procurement method; "))
                .body("'i007'.'types'.size()", equalTo(1))
                .body("'i007'.'types'", hasItems("RIGGING"))
                .body("'i007'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have electronic submission tender submission method; Needs to have open tender procurement method; "))
                .body("'i004'.'types'.size()", equalTo(1))
                .body("'i004'.'types'", hasItems("RIGGING"))
                .body("'i004'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one award with awarded amount; Needs to have tender with items classification; Needs to have at least one active award; Needs to have limited tender procurement method; "))
                .body("'i077'.'types'.size()", equalTo(1))
                .body("'i077'.'types'", hasItems("RIGGING"))
                .body("'i077'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have open tender procurement method OR Needs to have selective tender procurement method; "))
                .body("'i019'.'types'.size()", equalTo(1))
                .body("'i019'.'types'", hasItems("RIGGING"))
                .body("'i019'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have tender end date; Needs to have open tender procurement method; "))
                .body("'i180'.'types'.size()", equalTo(1))
                .body("'i180'.'types'", hasItems("RIGGING"))
                .body("'i180'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have tender procuring entity; Needs to have limited tender procurement method; "))
                .body("'i002'.'types'.size()", equalTo(2))
                .body("'i002'.'types'", hasItems("RIGGING", "FRAUD"))
                .body("'i002'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one unsuccessful award; Needs to have at least one active award; Needs to have electronic submission tender submission method; Needs to have open tender procurement method; "))
                .body("'i085'.'types'.size()", equalTo(2))
                .body("'i085'.'types'", hasItems("FRAUD", "COLLUSION"))
                .body("'i085'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have electronic submission tender submission method; "))
                .body("'i171'.'types'.size()", equalTo(2))
                .body("'i171'.'types'", hasItems("RIGGING", "FRAUD"))
                .body("'i171'.'rationale'", containsString("Preconditions that are not met: Needs to have tender value amount; Needs to have at least one active award; Needs to have electronic submission tender submission method; Needs to have open tender procurement method; "));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/indicatorTypesMapping
    */
    @Test(timeout = 60000)
    public void test_304_postOnApiIndicatorTypesMappingWithQueryParamReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/indicatorTypesMapping?username=_EM_61179_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'i038'.'types'.size()", equalTo(1))
                .body("'i038'.'types'", hasItems("RIGGING"))
                .body("'i038'.'rationale'", containsString("Preconditions that are not met: Needs to have tender start date; Needs to have tender end date; Needs to have open tender procurement method; "))
                .body("'i003'.'types'.size()", equalTo(2))
                .body("'i003'.'types'", hasItems("RIGGING", "FRAUD"))
                .body("'i003'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one unsuccessful award; Needs to have at least one active award; Needs to have electronic submission tender submission method; Needs to have open tender procurement method; "))
                .body("'i007'.'types'.size()", equalTo(1))
                .body("'i007'.'types'", hasItems("RIGGING"))
                .body("'i007'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have electronic submission tender submission method; Needs to have open tender procurement method; "))
                .body("'i004'.'types'.size()", equalTo(1))
                .body("'i004'.'types'", hasItems("RIGGING"))
                .body("'i004'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one award with awarded amount; Needs to have tender with items classification; Needs to have at least one active award; Needs to have limited tender procurement method; "))
                .body("'i077'.'types'.size()", equalTo(1))
                .body("'i077'.'types'", hasItems("RIGGING"))
                .body("'i077'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have open tender procurement method OR Needs to have selective tender procurement method; "))
                .body("'i019'.'types'.size()", equalTo(1))
                .body("'i019'.'types'", hasItems("RIGGING"))
                .body("'i019'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have tender end date; Needs to have open tender procurement method; "))
                .body("'i180'.'types'.size()", equalTo(1))
                .body("'i180'.'types'", hasItems("RIGGING"))
                .body("'i180'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have tender procuring entity; Needs to have limited tender procurement method; "))
                .body("'i002'.'types'.size()", equalTo(2))
                .body("'i002'.'types'", hasItems("RIGGING", "FRAUD"))
                .body("'i002'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one unsuccessful award; Needs to have at least one active award; Needs to have electronic submission tender submission method; Needs to have open tender procurement method; "))
                .body("'i085'.'types'.size()", equalTo(2))
                .body("'i085'.'types'", hasItems("FRAUD", "COLLUSION"))
                .body("'i085'.'rationale'", containsString("Preconditions that are not met: Needs to have at least one active award; Needs to have electronic submission tender submission method; "))
                .body("'i171'.'types'.size()", equalTo(2))
                .body("'i171'.'types'", hasItems("RIGGING", "FRAUD"))
                .body("'i171'.'rationale'", containsString("Preconditions that are not met: Needs to have tender value amount; Needs to have at least one active award; Needs to have electronic submission tender submission method; Needs to have open tender procurement method; "));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/qualityAverageAwardPeriod
    */
    @Test(timeout = 60000)
    public void test_305_postOnQualityAverageAwardPeriodReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/qualityAverageAwardPeriod?" + 
                    "bidTypeId=&" + 
                    "procuringEntityId=hpWz&procuringEntityId=y&procuringEntityId=9YXxxo&" + 
                    "supplierId=q&supplierId=E7S_&supplierId=rlvy6fvU2X&supplierId=1gl468gZF8CEX&supplierId=7x0PYYh_ipyO&" + 
                    "planningLoc=&" + 
                    "tenderLoc=seU9JJ2lDmBfgMC&" + 
                    "procuringEntityCityId=&procuringEntityCityId=&" + 
                    "procuringEntityGroupId=896&procuringEntityGroupId=421&procuringEntityGroupId=818&" + 
                    "minTenderValue=0.9432670008579349&" + 
                    "flagged=false&" + 
                    "defaultFilterPagingRequest=76xGINs0uhs")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentTendersWithLinkedProcurementPlan
    */
    @Test(timeout = 60000)
    public void test_306_postOnPercentTendersWithLinkedProcurementPlanReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/percentTendersWithLinkedProcurementPlan?" + 
                    "bidTypeId=BVdeVZn5&" + 
                    "notProcuringEntityId=tp&" + 
                    "tenderLoc=ocy3MaaC4JdMdcps&tenderLoc=Jo51Y0rbg1h&tenderLoc=&" + 
                    "procuringEntityCityId=ttpPffjbCAVA938&procuringEntityCityId=eMo4&" + 
                    "pageNumber=947&" + 
                    "pageSize=734&" + 
                    "minAwardValue=0.9238775761566705&" + 
                    "electronicSubmission=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/totalProjectsByYear
    */
    @Test(timeout = 60000)
    public void test_307_postOnTotalProjectsByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/totalProjectsByYear?" + 
                    "bidTypeId=2OB1RexFvuUKKr&bidTypeId=kuVu40rPfUnRoVOh&bidTypeId=jSbsL&" + 
                    "notProcuringEntityId=_EM_91569_XYZ_&notProcuringEntityId=Evi1&notProcuringEntityId=J8WAhq4FMMOs_&notProcuringEntityId=WvsFTZ8m2cMBkABN&" + 
                    "notBidSelectionMethod=&" + 
                    "tenderLoc=1oV&tenderLoc=CuShIWy9B0KO9J&tenderLoc=_EM_91572_XYZ_&tenderLoc=XPVI3SC&tenderLoc=5t520W9zCDmP&" + 
                    "procurementMethod=_EM_91573_XYZ_&procurementMethod=_EM_91574_XYZ_&procurementMethod=A8uF&procurementMethod=_EM_91575_XYZ_&procurementMethod=_EM_91576_XYZ_&" + 
                    "procuringEntityCityId=Tq_LgEtY8B03mp&" + 
                    "year=915&year=-868172007&year=465&" + 
                    "month=50&" + 
                    "minAwardValue=0.25467923376800883&" + 
                    "electronicSubmission=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/avgTimeFromPlanToTenderPhase
    */
    @Test(timeout = 60000)
    public void test_308_postOnAvgTimeFromPlanToTenderPhaseReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/avgTimeFromPlanToTenderPhase?" + 
                    "notBidTypeId=&" + 
                    "procuringEntityId=&" + 
                    "supplierId=_EM_96812_XYZ_&supplierId=XAEw&supplierId=osgOYQZS&supplierId=mP&" + 
                    "bidSelectionMethod=_EM_96813_XYZ_&" + 
                    "notBidSelectionMethod=_EM_96814_XYZ_&notBidSelectionMethod=Ftrdo7f_3&" + 
                    "contrMethod=&" + 
                    "procuringEntityCityId=_EM_96820_XYZ_&procuringEntityCityId=c5zXsJa7ui2V&procuringEntityCityId=_EM_96821_XYZ_&procuringEntityCityId=_EM_96822_XYZ_&" + 
                    "procuringEntityGroupId=922&procuringEntityGroupId=374&procuringEntityGroupId=1586230931&" + 
                    "maxAwardValue=0.3698474084296832&" + 
                    "electronicSubmission=false&" + 
                    "monthly=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/percentTotalProjectsFlaggedByYear
    */
    @Test(timeout = 60000)
    public void test_309_postOnPercentTotalProjectsFlaggedByYearReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/percentTotalProjectsFlaggedByYear?" + 
                    "bidTypeId=&bidTypeId=ATBqnUWv_l5VKx&bidTypeId=qtsr2Un&" + 
                    "supplierId=&supplierId=7e3VQxUtB&" + 
                    "bidSelectionMethod=E3xm96ibB6a1Ld&bidSelectionMethod=&bidSelectionMethod=UDGIu&bidSelectionMethod=dG&bidSelectionMethod=HFaMBLK&" + 
                    "notBidSelectionMethod=&notBidSelectionMethod=nllUUfCyCqb&" + 
                    "tenderLoc=Vzz3zc0hmb&" + 
                    "procurementMethod=Kfg&procurementMethod=JaTE7kM&procurementMethod=wlWNEXd&" + 
                    "procuringEntityDepartmentId=&" + 
                    "procuringEntityGroupId=748&procuringEntityGroupId=515&procuringEntityGroupId=9&procuringEntityGroupId=153&" + 
                    "month=517&month=545&" + 
                    "pageNumber=138&" + 
                    "pageSize=-341854010&" + 
                    "minAwardValue=0.10701745902969717&" + 
                    "maxAwardValue=0.26732473816439717")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i003/crosstab
    */
    @Test(timeout = 60000)
    public void test_310_getOnI003CrosstabWithQueryParamsElectronicSubmissionReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i003/crosstab?" + 
                    "notBidTypeId=n3&" + 
                    "procuringEntityId=&" + 
                    "notBidSelectionMethod=&notBidSelectionMethod=AMnHLmgKbk0f7&notBidSelectionMethod=Vm7yOcyMz&" + 
                    "procuringEntityGroupId=529&procuringEntityGroupId=467&procuringEntityGroupId=344&procuringEntityGroupId=66&" + 
                    "pageNumber=545&" + 
                    "minTenderValue=0.8768264076757336&" + 
                    "maxTenderValue=0.6517858285706488&" + 
                    "minAwardValue=0.8163714528698774&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "password=E&" + 
                    "yearFilterPagingRequest=zCEv5VE8wf&" + 
                    "username=CZL3ZFzTSaFO&" + 
                    "skip=G&" + 
                    "class=r3nAeTHWn77Y")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i003/stats
    */
    @Test(timeout = 60000)
    public void test_311_getOnStatsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i003/stats?" + 
                    "notBidTypeId=vwlyNgPTH&notBidTypeId=ReCURrdIka3&notBidTypeId=xertkW3&notBidTypeId=U1U&" + 
                    "supplierId=Oy1rMW9iRNIPUe&supplierId=GRh&supplierId=jCj6jm8x8&" + 
                    "planningLoc=&" + 
                    "tenderLoc=C_1At8BLRPImfGL&" + 
                    "procurementMethod=_EM_47638_XYZ_&" + 
                    "pageNumber=20558062&" + 
                    "minAwardValue=0.5438251779488377&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "password=_EM_47640_XYZ_&" + 
                    "yearFilterPagingRequest=Nve3RCuld5I&" + 
                    "username=_EM_47641_XYZ_&" + 
                    "skip=_EM_47642_XYZ_&" + 
                    "class=_EM_47643_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i003/stats
    */
    @Test(timeout = 60000)
    public void test_312_getOnStatsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i003/stats?" + 
                    "supplierId=Oy1rMW9iRNIPUe&supplierId=GRh&supplierId=jCj6jm8x8&" + 
                    "planningLoc=&" + 
                    "tenderLoc=C_1At8BLRPImfGL&" + 
                    "procurementMethod=_EM_47638_XYZ_&" + 
                    "pageNumber=20558062&" + 
                    "minAwardValue=0.5438251779488377&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "password=_EM_47640_XYZ_&" + 
                    "yearFilterPagingRequest=Nve3RCuld5I&" + 
                    "username=_EM_47641_XYZ_&" + 
                    "skip=_EM_47642_XYZ_&" + 
                    "class=_EM_47643_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i003/stats
    */
    @Test(timeout = 60000)
    public void test_313_getOnI003StatsWithQueryParamsFlaggedReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i003/stats?" + 
                    "planningLoc=&" + 
                    "pageNumber=20557774&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "password=_EM_47640_XYZ_&" + 
                    "yearFilterPagingRequest=Nve3RCuld5I&" + 
                    "username=_EM_47641_XYZ_&" + 
                    "skip=_EM_47642_XYZ_&" + 
                    "class=_EM_47643_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i003/stats
    */
    @Test(timeout = 60000)
    public void test_314_getOnStatsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i003/stats?" + 
                    "supplierId=Oy1rMW9iRNIPUe&supplierId=GRh&supplierId=jCj6jm8x8&" + 
                    "planningLoc=&" + 
                    "tenderLoc=C_1At8BLRPImfGL&" + 
                    "procurementMethod=_EM_47638_XYZ_&" + 
                    "pageNumber=20558062&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "password=_EM_47640_XYZ_&" + 
                    "yearFilterPagingRequest=Nve3RCuld5I&" + 
                    "username=_EM_47641_XYZ_&" + 
                    "skip=_EM_47642_XYZ_&" + 
                    "class=_EM_47643_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i003/stats
    */
    @Test(timeout = 60000)
    public void test_315_getOnStatsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i003/stats?" + 
                    "notBidTypeId=vwlyNgPTH&notBidTypeId=ReCURrdIka3&notBidTypeId=xertkW3&notBidTypeId=U1U&" + 
                    "supplierId=Oy1rMW9iRNIPUe&supplierId=GRh&supplierId=jCj6jm8x8&" + 
                    "planningLoc=&" + 
                    "tenderLoc=C_1At8BLRPImfGL&" + 
                    "procurementMethod=_EM_47638_XYZ_&" + 
                    "minAwardValue=0.5438251779488377&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "password=_EM_47640_XYZ_&" + 
                    "yearFilterPagingRequest=Nve3RCuld5I&" + 
                    "username=_EM_47641_XYZ_&" + 
                    "skip=_EM_47642_XYZ_&" + 
                    "class=_EM_47643_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i004/releases
    */
    @Test(timeout = 60000)
    public void test_316_getOnReleasesReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i004/releases?" + 
                    "bidTypeId=ter&" + 
                    "notBidTypeId=E&" + 
                    "notProcuringEntityId=u&" + 
                    "bidSelectionMethod=9c&bidSelectionMethod=c9m6ArITynOH&bidSelectionMethod=E2rH7UCbIX9DcTE&bidSelectionMethod=_EM_9163_XYZ_&bidSelectionMethod=MPeqzPL_4llzv_&" + 
                    "notBidSelectionMethod=kdOWHyQ9cmD4G&" + 
                    "planningLoc=_EM_9166_XYZ_&planningLoc=A73coN0BN11SdL&" + 
                    "tenderLoc=&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityGroupId=-124861263&" + 
                    "pageNumber=0&" + 
                    "minTenderValue=0.1934886825875124&" + 
                    "minAwardValue=0.929561624914912&" + 
                    "flagged=true&" + 
                    "skip=ni4eZOa7LmXy&" + 
                    "password=E&" + 
                    "class=q_MohPKZw&" + 
                    "yearFilterPagingRequest=vTepK6mVrNvEHk_V&" + 
                    "username=HXHUw7YiS76")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i004/releases
    */
    @Test(timeout = 60000)
    public void test_317_getOnReleasesReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i004/releases?" + 
                    "bidTypeId=ter&" + 
                    "notBidTypeId=E&" + 
                    "bidSelectionMethod=9c&bidSelectionMethod=c9m6ArITynOH&bidSelectionMethod=E2rH7UCbIX9DcTE&bidSelectionMethod=_EM_9163_XYZ_&bidSelectionMethod=MPeqzPL_4llzv_&" + 
                    "planningLoc=_EM_9166_XYZ_&planningLoc=A73coN0BN11SdL&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityGroupId=-124861263&" + 
                    "pageNumber=745&" + 
                    "minTenderValue=0.1934886825875124&" + 
                    "minAwardValue=0.929561624914912&" + 
                    "flagged=true&" + 
                    "skip=ni4eZOa7LmXy&" + 
                    "password=E&" + 
                    "class=q_MohPKZw&" + 
                    "yearFilterPagingRequest=vTepK6mVrNvEHk_V&" + 
                    "username=HXHUw7YiS76")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i004/releases
    */
    @Test(timeout = 60000)
    public void test_318_getOnReleasesReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i004/releases?" + 
                    "bidTypeId=ter&" + 
                    "notBidTypeId=E&" + 
                    "notProcuringEntityId=u&" + 
                    "bidSelectionMethod=9c&bidSelectionMethod=c9m6ArITynOH&bidSelectionMethod=E2rH7UCbIX9DcTE&bidSelectionMethod=_EM_9163_XYZ_&bidSelectionMethod=MPeqzPL_4llzv_&" + 
                    "planningLoc=_EM_9166_XYZ_&planningLoc=A73coN0BN11SdL&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityGroupId=-124861263&" + 
                    "pageNumber=745&" + 
                    "minTenderValue=0.1934886825875124&" + 
                    "minAwardValue=0.929561624914912&" + 
                    "flagged=true&" + 
                    "skip=ni4eZOa7LmXy&" + 
                    "password=E&" + 
                    "class=q_MohPKZw&" + 
                    "yearFilterPagingRequest=vTepK6mVrNvEHk_V&" + 
                    "username=HXHUw7YiS76")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i004/releases
    */
    @Test(timeout = 60000)
    public void test_319_getOnReleasesReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i004/releases?" + 
                    "bidTypeId=ter&" + 
                    "notBidTypeId=D&" + 
                    "bidSelectionMethod=9c&bidSelectionMethod=c9m6ArITynOH&bidSelectionMethod=E2rH7UCbIX9DcTE&bidSelectionMethod=_EM_9163_XYZ_&bidSelectionMethod=MPeqzPL_4llzv_&" + 
                    "planningLoc=_EM_9166_XYZ_&planningLoc=A73coN0BN11SdL&" + 
                    "procuringEntityCityId=&" + 
                    "minTenderValue=0.1934886825875124&" + 
                    "flagged=true&" + 
                    "EMextraParam123=_EM_9168_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i004/releases
    */
    @Test(timeout = 60000)
    public void test_320_getOnI004ReleasesWithQueryParamsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i004/releases?" + 
                    "bidTypeId=ter&" + 
                    "notBidTypeId=D&" + 
                    "bidSelectionMethod=9c&bidSelectionMethod=c9m6ArITynOH&bidSelectionMethod=E2rH7UCbIX9DcTE&bidSelectionMethod=_EM_9163_XYZ_&bidSelectionMethod=MPeqzPL_4llzv_&" + 
                    "planningLoc=_EM_9166_XYZ_&planningLoc=A73coN0BN11SdL&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityGroupId=-124861263&" + 
                    "minTenderValue=0.1934886825875124&" + 
                    "flagged=false&" + 
                    "skip=ni4eZOa7LmXy&" + 
                    "password=E&" + 
                    "class=q_MohPKZw&" + 
                    "yearFilterPagingRequest=vTepK6mVrNvEHk_&" + 
                    "username=HXHUw7YiS76")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i004/releases
    */
    @Test(timeout = 60000)
    public void test_321_getOnReleasesReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i004/releases?" + 
                    "bidTypeId=ter&" + 
                    "notBidTypeId=E&" + 
                    "notProcuringEntityId=u&" + 
                    "bidSelectionMethod=9c&bidSelectionMethod=c9m6ArITynOH&bidSelectionMethod=E2rH7UCbIX9DcTE&bidSelectionMethod=_EM_9163_XYZ_&bidSelectionMethod=MPeqzPL_4llzv_&" + 
                    "notBidSelectionMethod=kdOWHyQ9cmD4G&" + 
                    "planningLoc=_EM_9166_XYZ_&planningLoc=A73coN0BN11SdL&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityGroupId=-124861263&" + 
                    "pageNumber=746&" + 
                    "minTenderValue=0.1934886825875124&" + 
                    "minAwardValue=0.929561624914912&" + 
                    "flagged=true&" + 
                    "skip=ni4eZOa7LmXy&" + 
                    "password=E&" + 
                    "class=q_MohPKZw&" + 
                    "yearFilterPagingRequest=vTepK6mVrNvEHk_V&" + 
                    "username=HXHUw7YiS76")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i004/stats
    */
    @Test(timeout = 60000)
    public void test_322_getOnStatsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i004/stats?" + 
                    "bidSelectionMethod=_EM_66300_XYZ_&bidSelectionMethod=&bidSelectionMethod=_EM_66301_XYZ_&bidSelectionMethod=_EM_66302_XYZ_&bidSelectionMethod=oH8i2k5&" + 
                    "contrMethod=&" + 
                    "planningLoc=WkbW7xxNqK2&planningLoc=_EM_66303_XYZ_&planningLoc=_EM_66304_XYZ_&" + 
                    "tenderLoc=kvuzNY&tenderLoc=ltKi3gDd0GXq4t8h&tenderLoc=_EM_66305_XYZ_&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityDepartmentId=952&procuringEntityDepartmentId=336&procuringEntityDepartmentId=662&procuringEntityDepartmentId=67&procuringEntityDepartmentId=276&" + 
                    "month=&" + 
                    "pageNumber=512&" + 
                    "pageSize=820&" + 
                    "maxTenderValue=0.20302134870688526&" + 
                    "maxAwardValue=0.1037518864173651&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "skip=HTlpz6eqb&" + 
                    "password=_EM_66309_XYZ_&" + 
                    "class=_EM_66310_XYZ_&" + 
                    "yearFilterPagingRequest=Q&" + 
                    "username=WMkpR0M5nHg")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i004/stats
    */
    @Test(timeout = 60000)
    public void test_323_getOnStatsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i004/stats?" + 
                    "bidSelectionMethod=_EM_66300_XYZ_&bidSelectionMethod=&bidSelectionMethod=_EM_66301_XYZ_&bidSelectionMethod=_EM_66302_XYZ_&bidSelectionMethod=oH8i2k5&" + 
                    "contrMethod=&" + 
                    "planningLoc=WkbW7xxNqK2&planningLoc=_EM_66303_XYZ_&planningLoc=_EM_66304_XYZ_&" + 
                    "tenderLoc=kvuzNY&tenderLoc=ltKi3gDd0GXq4t8h&tenderLoc=_EM_66305_XYZ_&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityDepartmentId=952&procuringEntityDepartmentId=336&procuringEntityDepartmentId=662&procuringEntityDepartmentId=67&procuringEntityDepartmentId=276&" + 
                    "month=&" + 
                    "pageNumber=512&" + 
                    "maxAwardValue=0.1037518864173651&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "skip=HTlpz6eqb&" + 
                    "password=_EM_66309_XYZ_&" + 
                    "class=_EM_66310_XYZ_&" + 
                    "username=WMkpR0M5nHg")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i007/crosstab
    */
    @Test(timeout = 60000)
    public void test_324_getOnCrosstabReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i007/crosstab?" + 
                    "bidTypeId=&" + 
                    "supplierId=WGJdSe&supplierId=QlrdoA_&supplierId=rZVKOd31W_Uo&" + 
                    "bidSelectionMethod=dCIvu&bidSelectionMethod=DXUtI84&bidSelectionMethod=_EM_45722_XYZ_&bidSelectionMethod=KnFIUPezDd&" + 
                    "notBidSelectionMethod=gT5iWFhhW2Te&notBidSelectionMethod=_EM_45723_XYZ_&notBidSelectionMethod=Gl9W1lfQdVdDU&notBidSelectionMethod=_EM_45724_XYZ_&notBidSelectionMethod=wnEIF0qwMQQk&" + 
                    "contrMethod=&" + 
                    "planningLoc=&" + 
                    "tenderLoc=XU&" + 
                    "procurementMethod=ykzZrPvuHR&procurementMethod=&procurementMethod=U1ihTzy0WvnepiN&procurementMethod=_EM_45725_XYZ_&procurementMethod=_EM_45726_XYZ_&" + 
                    "procuringEntityCityId=ctulgcIG4b3vXJ0n&procuringEntityCityId=TK_NVx&procuringEntityCityId=_EM_45727_XYZ_&procuringEntityCityId=kXI79FBqNZ51BUT&" + 
                    "procuringEntityDepartmentId=310&procuringEntityDepartmentId=393&procuringEntityDepartmentId=886&procuringEntityDepartmentId=713&procuringEntityDepartmentId=366&" + 
                    "procuringEntityGroupId=953&" + 
                    "pageNumber=35&" + 
                    "pageSize=74&" + 
                    "minTenderValue=0.7065691680920111&" + 
                    "maxTenderValue=0.6660710998313824&" + 
                    "minAwardValue=0.4295946565773987&" + 
                    "maxAwardValue=0.34232049008306076&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "skip=AbCbg&" + 
                    "password=_EM_45729_XYZ_&" + 
                    "class=n1p&" + 
                    "yearFilterPagingRequest=6I4bX&" + 
                    "username=tWAd")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i007/crosstab
    */
    @Test(timeout = 60000)
    public void test_325_getOnCrosstabReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i007/crosstab?" + 
                    "bidTypeId=&" + 
                    "planningLoc=&" + 
                    "tenderLoc=X&" + 
                    "procurementMethod=ykzZrPvuHR&procurementMethod=&procurementMethod=U1ihTzy0WvnepiN&procurementMethod=_EM_45725_XYZ_&procurementMethod=_EM_45726_XYZ_&" + 
                    "procuringEntityCityId=ctulgcIG4b3vXJ0n&procuringEntityCityId=TK_NVx&procuringEntityCityId=_EM_45727_XYZ_&procuringEntityCityId=kXI79FBqNZ51BUT&" + 
                    "procuringEntityDepartmentId=310&procuringEntityDepartmentId=393&procuringEntityDepartmentId=886&procuringEntityDepartmentId=713&procuringEntityDepartmentId=366&" + 
                    "procuringEntityGroupId=&" + 
                    "pageSize=74&" + 
                    "minTenderValue=0.7065691680920111&" + 
                    "maxTenderValue=0.6660710998313824&" + 
                    "maxAwardValue=0.34232049008306076&" + 
                    "electronicSubmission=true&" + 
                    "skip=AbCbg&" + 
                    "password=_EM_45729_XYZ_&" + 
                    "class=_EM_45730_XYZ_&" + 
                    "yearFilterPagingRequest=6I4bX&" + 
                    "username=tVAd")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i007/crosstab
    */
    @Test(timeout = 60000)
    public void test_326_getOnCrosstabReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i007/crosstab?" + 
                    "bidTypeId=&" + 
                    "supplierId=WGJdSe&supplierId=QlrdoA_&supplierId=rZVKOd31W_Uo&" + 
                    "planningLoc=&" + 
                    "tenderLoc=X&" + 
                    "procurementMethod=ykzZrPvuHR&procurementMethod=&procurementMethod=U1ihTzy0WvnepiN&procurementMethod=_EM_45725_XYZ_&procurementMethod=_EM_45726_XYZ_&" + 
                    "procuringEntityCityId=ctulgcIG4b3vXJ0n&procuringEntityCityId=TK_NVx&procuringEntityCityId=_EM_45727_XYZ_&procuringEntityCityId=kXI79FBqNZ51BUT&" + 
                    "procuringEntityDepartmentId=310&procuringEntityDepartmentId=393&procuringEntityDepartmentId=886&procuringEntityDepartmentId=713&procuringEntityDepartmentId=366&" + 
                    "procuringEntityGroupId=&" + 
                    "pageSize=74&" + 
                    "minTenderValue=0.7065691680920111&" + 
                    "maxTenderValue=0.6660710998313824&" + 
                    "maxAwardValue=0.34232049008306076&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "skip=AbCbg&" + 
                    "password=_EM_45729_XYZ_&" + 
                    "class=n1p&" + 
                    "yearFilterPagingRequest=6I4bX&" + 
                    "username=tWAd")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i007/crosstab
    */
    @Test(timeout = 60000)
    public void test_327_getOnCrosstabReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i007/crosstab?" + 
                    "bidTypeId=&" + 
                    "planningLoc=&" + 
                    "tenderLoc=X&" + 
                    "procuringEntityCityId=ctulgcIG4b3vXJ0n&procuringEntityCityId=TK_NVx&procuringEntityCityId=_EM_45727_XYZ_&procuringEntityCityId=kXI79FBqNZ51BUT&" + 
                    "procuringEntityDepartmentId=318&procuringEntityDepartmentId=393&procuringEntityDepartmentId=886&procuringEntityDepartmentId=713&procuringEntityDepartmentId=366&" + 
                    "procuringEntityGroupId=&" + 
                    "pageSize=42&" + 
                    "maxTenderValue=0.6660710998313824&" + 
                    "maxAwardValue=0.34232049008306076&" + 
                    "electronicSubmission=true&" + 
                    "skip=AbCbg&" + 
                    "password=_EM_45729_XYZ_&" + 
                    "class=_EM_45730_XYZ_&" + 
                    "yearFilterPagingRequest=6I4bX&" + 
                    "username=tVAd")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i007/crosstab
    */
    @Test(timeout = 60000)
    public void test_328_getOnCrosstabReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_17947_XYZ_")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i007/crosstab?" + 
                    "bidTypeId=&" + 
                    "tenderLoc=X&" + 
                    "procuringEntityCityId=ctulgcIG4b3vXJ0n&procuringEntityCityId=TK_NVx&procuringEntityCityId=_EM_45727_XYZ_&procuringEntityCityId=kXI79FBqNZ51BUT&" + 
                    "procuringEntityDepartmentId=318&procuringEntityDepartmentId=393&procuringEntityDepartmentId=886&procuringEntityDepartmentId=713&procuringEntityDepartmentId=366&" + 
                    "procuringEntityGroupId=&" + 
                    "pageSize=42&" + 
                    "maxTenderValue=0.6660710998313824&" + 
                    "maxAwardValue=0.34232049008306076&" + 
                    "electronicSubmission=true&" + 
                    "EMextraParam123=_EM_45728_XYZ_&" + 
                    "yearFilterPagingRequest=6I4bX")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i007/crosstab
    */
    @Test(timeout = 60000)
    public void test_329_getOnCrosstabReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i007/crosstab?" + 
                    "bidTypeId=&" + 
                    "supplierId=WGJdSe&supplierId=QlrdoA_&supplierId=rZVKOd31W_Uo&" + 
                    "bidSelectionMethod=dCIvu&bidSelectionMethod=DXUtI84&bidSelectionMethod=_EM_45722_XYZ_&bidSelectionMethod=KnFIUPezDd&" + 
                    "contrMethod=&" + 
                    "planningLoc=&" + 
                    "tenderLoc=XU&" + 
                    "procurementMethod=ykzZrPvuHR&procurementMethod=&procurementMethod=U1ihTzy0WvnepiN&procurementMethod=_EM_45725_XYZ_&procurementMethod=_EM_45726_XYZ_&" + 
                    "procuringEntityCityId=ctulgcIG4b3vXJ0n&procuringEntityCityId=TK_NVx&procuringEntityCityId=_EM_45727_XYZ_&procuringEntityCityId=kXI79FBqNZ51BUT&" + 
                    "procuringEntityDepartmentId=310&procuringEntityDepartmentId=393&procuringEntityDepartmentId=886&procuringEntityDepartmentId=713&procuringEntityDepartmentId=366&" + 
                    "procuringEntityGroupId=&" + 
                    "pageNumber=35&" + 
                    "pageSize=74&" + 
                    "minTenderValue=0.7065691680920111&" + 
                    "maxTenderValue=0.6660710998313824&" + 
                    "maxAwardValue=0.34232049008306076&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "skip=AbCbg&" + 
                    "password=_EM_45729_XYZ_&" + 
                    "class=n1p&" + 
                    "yearFilterPagingRequest=6I4bX&" + 
                    "username=tWAd")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i007/crosstab
    */
    @Test(timeout = 60000)
    public void test_330_getOnCrosstabReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i007/crosstab?" + 
                    "bidTypeId=&" + 
                    "supplierId=WGJdSe&supplierId=QlrdoA_&supplierId=rZVKOd31W_Uo&" + 
                    "bidSelectionMethod=dCIvu&bidSelectionMethod=DXUtI84&bidSelectionMethod=_EM_45722_XYZ_&bidSelectionMethod=KnFIUPezDd&" + 
                    "contrMethod=&" + 
                    "planningLoc=&" + 
                    "tenderLoc=XU&" + 
                    "procurementMethod=ykzZrPvuHR&procurementMethod=&procurementMethod=U1ihTzy0WvnepiN&procurementMethod=_EM_45725_XYZ_&procurementMethod=_EM_45726_XYZ_&" + 
                    "procuringEntityCityId=ctulgcIG4b3vXJ0n&procuringEntityCityId=TK_NVx&procuringEntityCityId=_EM_45727_XYZ_&procuringEntityCityId=kXI79FBqNZ51BUT&" + 
                    "procuringEntityDepartmentId=310&procuringEntityDepartmentId=393&procuringEntityDepartmentId=886&procuringEntityDepartmentId=713&procuringEntityDepartmentId=366&" + 
                    "procuringEntityGroupId=953&" + 
                    "pageNumber=35&" + 
                    "pageSize=74&" + 
                    "minTenderValue=0.7065691680920111&" + 
                    "maxTenderValue=0.6660710998313824&" + 
                    "minAwardValue=0.4295946565773987&" + 
                    "maxAwardValue=0.34232049008306076&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "skip=AbCbg&" + 
                    "password=_EM_45729_XYZ_&" + 
                    "class=n1p&" + 
                    "yearFilterPagingRequest=6I4bX&" + 
                    "username=tWAd")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i007/crosstab
    */
    @Test(timeout = 60000)
    public void test_331_getOnCrosstabReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i007/crosstab?" + 
                    "bidTypeId=&" + 
                    "supplierId=WGJdSe&supplierId=QlrdoA_&supplierId=rZVKOd31W_Uo&" + 
                    "bidSelectionMethod=dCIvu&bidSelectionMethod=DXUtI84&bidSelectionMethod=_EM_45722_XYZ_&bidSelectionMethod=KnFIUPezDd&" + 
                    "contrMethod=&" + 
                    "planningLoc=&" + 
                    "tenderLoc=XU&" + 
                    "procurementMethod=ykzZrPvuHR&procurementMethod=&procurementMethod=U1ihTzy0WvnepiN&procurementMethod=_EM_45725_XYZ_&procurementMethod=_EM_45726_XYZ_&" + 
                    "procuringEntityCityId=ctulgcIG4b3vXJ0n&procuringEntityCityId=TK_NVx&procuringEntityCityId=_EM_45727_XYZ_&procuringEntityCityId=kXI79FBqNZ51BUT&" + 
                    "procuringEntityDepartmentId=310&procuringEntityDepartmentId=393&procuringEntityDepartmentId=886&procuringEntityDepartmentId=713&procuringEntityDepartmentId=366&" + 
                    "procuringEntityGroupId=&" + 
                    "pageNumber=35&" + 
                    "pageSize=74&" + 
                    "minTenderValue=0.7065691680920111&" + 
                    "maxTenderValue=0.6660710998313824&" + 
                    "minAwardValue=0.4295946565773987&" + 
                    "maxAwardValue=0.34232049008306076&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "skip=AbCbg&" + 
                    "password=_EM_45729_XYZ_&" + 
                    "class=n1p&" + 
                    "yearFilterPagingRequest=6I4bX&" + 
                    "username=tWAd")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i007/stats
    */
    @Test(timeout = 60000)
    public void test_332_getOnI007StatsWithQueryParamsFlaggedReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i007/stats?" + 
                    "procuringEntityId=SYLlQq9uFSNE44yk&" + 
                    "notProcuringEntityId=y&" + 
                    "supplierId=&supplierId=1ia_r3j3D7D&supplierId=_EM_9210_XYZ_&" + 
                    "bidSelectionMethod=p0Pe&" + 
                    "notBidSelectionMethod=iT&notBidSelectionMethod=_EM_9211_XYZ_&" + 
                    "tenderLoc=_EM_9216_XYZ_&tenderLoc=_EM_9217_XYZ_&" + 
                    "procurementMethod=B7t&" + 
                    "procuringEntityDepartmentId=910&procuringEntityDepartmentId=447&" + 
                    "procuringEntityGroupId=462&procuringEntityGroupId=866&" + 
                    "pageNumber=899&" + 
                    "pageSize=68&" + 
                    "minTenderValue=0.7140415492320492&" + 
                    "minAwardValue=0.5417359159910875&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "password=dJ2c45FP&" + 
                    "yearFilterPagingRequest=Fi%5B4bPgvn3x&" + 
                    "username=n6K4iIH_5j")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i007/stats
    */
    @Test(timeout = 60000)
    public void test_333_getOnI007StatsWithQueryParamsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_9221_XYZ_")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i007/stats?" + 
                    "supplierId=&supplierId=1ia_r3j3D7D&supplierId=_EM_9210_XYZ_&" + 
                    "notBidSelectionMethod=iT&notBidSelectionMethod=_EM_9211_XYZ_&" + 
                    "tenderLoc=_EM_9216_XYZ_&tenderLoc=_EM_9217_XYZ_&" + 
                    "procurementMethod=_EM_9218_XYZ_&" + 
                    "pageNumber=907&" + 
                    "minAwardValue=0.5417359159910875&" + 
                    "flagged=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i007/stats
    */
    @Test(timeout = 60000)
    public void test_334_getOnI007StatsWithQueryParamsFlaggedAndMonthlyReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i007/stats?" + 
                    "procuringEntityId=SYLlQq9uFSNE44yk&" + 
                    "supplierId=&supplierId=1ia_r3j3D7D&supplierId=_EM_9210_XYZ_&" + 
                    "bidSelectionMethod=p0Pe&" + 
                    "notBidSelectionMethod=iT&notBidSelectionMethod=_EM_9211_XYZ_&" + 
                    "tenderLoc=_EM_9216_XYZ_&tenderLoc=_EM_9217_XYZ_&" + 
                    "procurementMethod=_EM_9218_XYZ_&" + 
                    "procuringEntityDepartmentId=910&procuringEntityDepartmentId=447&" + 
                    "pageNumber=899&" + 
                    "minTenderValue=0.7140415492320492&" + 
                    "minAwardValue=0.5417359159910875&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "password=dJ2c45FP&" + 
                    "yearFilterPagingRequest=Fi%5B4bPgvn3x&" + 
                    "username=n6K4iIH_5j")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i007/stats
    */
    @Test(timeout = 60000)
    public void test_335_getOnI007StatsWithQueryParamsElectronicSubmissionAndFlagged() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i007/stats?" + 
                    "procuringEntityId=SYLlQq9uFSNE44yk&" + 
                    "notProcuringEntityId=y&" + 
                    "supplierId=&supplierId=1ia_r3j3D7D&supplierId=_EM_9210_XYZ_&" + 
                    "bidSelectionMethod=p0Pe&" + 
                    "notBidSelectionMethod=iT&notBidSelectionMethod=_EM_9211_XYZ_&notBidSelectionMethod=cPbgRk6893Pri&" + 
                    "tenderLoc=_EM_9216_XYZ_&tenderLoc=_EM_9217_XYZ_&" + 
                    "procurementMethod=B7t&" + 
                    "procuringEntityDepartmentId=910&procuringEntityDepartmentId=447&" + 
                    "procuringEntityGroupId=462&procuringEntityGroupId=866&" + 
                    "pageNumber=899&" + 
                    "pageSize=68&" + 
                    "minTenderValue=0.7140415492320492&" + 
                    "minAwardValue=0.5417359159910875&" + 
                    "electronicSubmission=true&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "password=dJ2c45FP&" + 
                    "yearFilterPagingRequest=Fi%5B4bPgvn3x&" + 
                    "username=n6K4iIH_5j")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i019/crosstab
    */
    @Test(timeout = 60000)
    public void test_336_getOnI019CrosstabWithQueryParamsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i019/crosstab?" + 
                    "notBidTypeId=P5gFiqn&notBidTypeId=YpLNenDtIae&notBidTypeId=igJj7Zoov&notBidTypeId=kj4k9tIscZ9XJpg&" + 
                    "procuringEntityId=hOKI&procuringEntityId=&procuringEntityId=kJlh0zRppe6cH5JL&procuringEntityId=jEuNhaD2uk&" + 
                    "notProcuringEntityId=&" + 
                    "supplierId=fRocpSBzSte&supplierId=XluuZ02FGqpjdS&supplierId=KlOSw5&" + 
                    "notBidSelectionMethod=qgfH&notBidSelectionMethod=hL_tOJfX7nHoRDC&notBidSelectionMethod=Rw9k&notBidSelectionMethod=SL&notBidSelectionMethod=Von&" + 
                    "procurementMethod=4TEQ_GwEjc&procurementMethod=Nmb8Pji&procurementMethod=qSMni&procurementMethod=1pfguIGlzsD&procurementMethod=VrG8g_XRgXLk&" + 
                    "procuringEntityDepartmentId=77&procuringEntityDepartmentId=103&procuringEntityDepartmentId=547&procuringEntityDepartmentId=707&procuringEntityDepartmentId=687&" + 
                    "pageNumber=208&" + 
                    "pageSize=834&" + 
                    "minTenderValue=0.08288266819998158&" + 
                    "minAwardValue=0.6985572220283743&" + 
                    "maxAwardValue=0.4983343375341135&" + 
                    "monthly=false&" + 
                    "EMextraParam123=_EM_9236_XYZ_&" + 
                    "skip=SClGOj8A9Ga&" + 
                    "password=XPngi2FCmRokhkSN&" + 
                    "class=5cd&" + 
                    "yearFilterPagingRequest=obolsFyVv")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i019/crosstab
    */
    @Test(timeout = 60000)
    public void test_337_getOnCrosstabReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i019/crosstab?" + 
                    "supplierId=_EM_66221_XYZ_&" + 
                    "tenderLoc=_EM_66229_XYZ_&tenderLoc=_EM_66230_XYZ_&" + 
                    "procuringEntityCityId=_EM_66231_XYZ_&procuringEntityCityId=2iqaB&" + 
                    "pageNumber=917&" + 
                    "pageSize=965&" + 
                    "minTenderValue=0.07810134433331217&" + 
                    "maxTenderValue=0.1632155728361676&" + 
                    "minAwardValue=0.19914342056248402&" + 
                    "flagged=true&" + 
                    "skip=5DePRX53h&" + 
                    "password=_EM_66232_XYZ_&" + 
                    "class=5&" + 
                    "yearFilterPagingRequest=XXcu")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i038/crosstab
    */
    @Test(timeout = 60000)
    public void test_338_getOnI038CrosstabWithQueryParamsElectronicSubmissionReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_18036_XYZ_")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i038/crosstab?" + 
                    "notProcuringEntityId=W9JHmRaufl&notProcuringEntityId=uwqoI0NFRwJx&" + 
                    "planningLoc=Wgtet2RfhlCGYK&planningLoc=7NmOruC0NL5TO&planningLoc=KC&planningLoc=_EM_36718_XYZ_&planningLoc=_EM_36719_XYZ_&" + 
                    "procuringEntityCityId=&" + 
                    "minAwardValue=0.9893676404981586&" + 
                    "electronicSubmission=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i038/stats
    */
    @Test(timeout = 60000)
    public void test_339_getOnStatsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i038/stats?" + 
                    "notBidTypeId=hxcsW7RFK&notBidTypeId=RIGGING&notBidTypeId=zyg&" + 
                    "procuringEntityId=&" + 
                    "supplierId=&" + 
                    "bidSelectionMethod=Dfnalb&" + 
                    "notBidSelectionMethod=IfkByG62LdxY2y&" + 
                    "planningLoc=07&" + 
                    "tenderLoc=ljHB&" + 
                    "procurementMethod=_EM_72448_XYZ_&procurementMethod=sWRc&procurementMethod=_EM_72449_XYZ_&" + 
                    "procuringEntityCityId=YczwE_C&procuringEntityCityId=aKHJFQV0_&" + 
                    "procuringEntityGroupId=621&procuringEntityGroupId=899&procuringEntityGroupId=167&procuringEntityGroupId=790&" + 
                    "pageNumber=501&" + 
                    "pageSize=779&" + 
                    "minTenderValue=0.9590098513663846&" + 
                    "maxTenderValue=0.6581579456598562&" + 
                    "maxAwardValue=0.10663160452729914&" + 
                    "electronicSubmission=false&" + 
                    "password=9gJkx&" + 
                    "username=_EM_72451_XYZ_&" + 
                    "skip=_EM_72452_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i038/stats
    */
    @Test(timeout = 60000)
    public void test_340_getOnStatsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i038/stats?" + 
                    "notBidTypeId=hxcsW7RFK&notBidTypeId=RIGGING&notBidTypeId=zyg&" + 
                    "supplierId=&" + 
                    "planningLoc=_EM_72447_XYZ_&" + 
                    "tenderLoc=ljHB&" + 
                    "procurementMethod=_EM_72448_XYZ_&procurementMethod=sWRc&procurementMethod=_EM_72449_XYZ_&" + 
                    "procuringEntityCityId=YczwE_C&procuringEntityCityId=aKHJFQV0_&" + 
                    "procuringEntityGroupId=621&procuringEntityGroupId=899&procuringEntityGroupId=167&procuringEntityGroupId=790&" + 
                    "pageNumber=501&" + 
                    "minTenderValue=0.9590098513663846&" + 
                    "maxTenderValue=0.6581579456598562&" + 
                    "maxAwardValue=0.10663160452729914&" + 
                    "electronicSubmission=false&" + 
                    "username=_EM_72451_XYZ_&" + 
                    "skip=_EM_72452_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i038/stats
    */
    @Test(timeout = 60000)
    public void test_341_getOnStatsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i038/stats?" + 
                    "notBidTypeId=hxcsW7RFK&notBidTypeId=RIGGING&notBidTypeId=zyg&" + 
                    "procuringEntityId=&" + 
                    "supplierId=&" + 
                    "bidSelectionMethod=Dfnalb&" + 
                    "planningLoc=07&" + 
                    "tenderLoc=ljHB&" + 
                    "procurementMethod=_EM_72448_XYZ_&procurementMethod=sWRc&procurementMethod=_EM_72449_XYZ_&" + 
                    "procuringEntityCityId=YczwE_C&procuringEntityCityId=aKHJFQV0_&" + 
                    "procuringEntityGroupId=621&procuringEntityGroupId=899&procuringEntityGroupId=167&procuringEntityGroupId=790&" + 
                    "pageNumber=501&" + 
                    "pageSize=779&" + 
                    "minTenderValue=0.9590098513663846&" + 
                    "maxTenderValue=0.6581579456598562&" + 
                    "maxAwardValue=0.10663160452729914&" + 
                    "electronicSubmission=false&" + 
                    "password=9gJkx&" + 
                    "username=_EM_72451_XYZ_&" + 
                    "skip=_EM_72452_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i038/stats
    */
    @Test(timeout = 60000)
    public void test_342_getOnStatsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i038/stats?" + 
                    "notBidTypeId=hxcsW7RFK&notBidTypeId=RIGGING&notBidTypeId=zyg&" + 
                    "supplierId=&" + 
                    "planningLoc=07&" + 
                    "tenderLoc=ljHB&" + 
                    "procurementMethod=_EM_72448_XYZ_&procurementMethod=sWRc&procurementMethod=_EM_72449_XYZ_&" + 
                    "procuringEntityCityId=YczwE_C&procuringEntityCityId=aKHJFQV0_&" + 
                    "procuringEntityGroupId=621&procuringEntityGroupId=899&procuringEntityGroupId=167&procuringEntityGroupId=790&" + 
                    "pageNumber=501&" + 
                    "minTenderValue=0.9590098513663846&" + 
                    "maxTenderValue=0.6581579456598562&" + 
                    "maxAwardValue=0.10663160452729914&" + 
                    "electronicSubmission=false&" + 
                    "password=9gJkx&" + 
                    "yearFilterPagingRequest=_EM_72450_XYZ_&" + 
                    "username=_EM_72451_XYZ_&" + 
                    "skip=_EM_72452_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i038/stats
    */
    @Test(timeout = 60000)
    public void test_343_getOnStatsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i038/stats?" + 
                    "notBidTypeId=hxcsW7RFK&notBidTypeId=RIGGING&notBidTypeId=zyg&" + 
                    "procuringEntityId=&" + 
                    "supplierId=&" + 
                    "bidSelectionMethod=Dfnalb&" + 
                    "notBidSelectionMethod=IfkByG62LdxY2y&" + 
                    "planningLoc=07&" + 
                    "tenderLoc=ljHB&" + 
                    "procurementMethod=_EM_72448_XYZ_&procurementMethod=sWRc&procurementMethod=_EM_72449_XYZ_&" + 
                    "procuringEntityCityId=YczwE_C&procuringEntityCityId=aKHJFQV0_&" + 
                    "procuringEntityGroupId=621&procuringEntityGroupId=899&procuringEntityGroupId=167&procuringEntityGroupId=790&" + 
                    "pageSize=779&" + 
                    "minTenderValue=0.9590098513663846&" + 
                    "maxTenderValue=0.6581579456598562&" + 
                    "maxAwardValue=0.10663160452729914&" + 
                    "electronicSubmission=false&" + 
                    "password=9gJkx&" + 
                    "username=_EM_72451_XYZ_&" + 
                    "skip=_EM_72452_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i038/stats
    */
    @Test(timeout = 60000)
    public void test_344_getOnStatsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i038/stats?" + 
                    "notBidTypeId=hxcsW7RFK&notBidTypeId=RIGGING&notBidTypeId=zyg&" + 
                    "procuringEntityId=&" + 
                    "supplierId=&" + 
                    "bidSelectionMethod=Dfnalb&" + 
                    "notBidSelectionMethod=IfkByG62LdxY2y&" + 
                    "planningLoc=07&" + 
                    "tenderLoc=ljHB&" + 
                    "procurementMethod=_EM_72448_XYZ_&procurementMethod=sWRc&procurementMethod=_EM_72449_XYZ_&" + 
                    "procuringEntityCityId=YczwE_C&procuringEntityCityId=aKHJFQV0_&" + 
                    "procuringEntityGroupId=621&procuringEntityGroupId=899&procuringEntityGroupId=167&procuringEntityGroupId=790&" + 
                    "pageSize=779&" + 
                    "maxTenderValue=0.6581579456598562&" + 
                    "maxAwardValue=0.10663160452729914&" + 
                    "electronicSubmission=false&" + 
                    "password=9gJkx&" + 
                    "username=_EM_72451_XYZ_&" + 
                    "skip=_EM_72452_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i038/stats
    */
    @Test(timeout = 60000)
    public void test_345_getOnStatsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i038/stats?" + 
                    "notBidTypeId=hxcsW7RFK&notBidTypeId=RIGGING&notBidTypeId=zyg&" + 
                    "supplierId=&" + 
                    "planningLoc=_EM_72447_XYZ_&" + 
                    "tenderLoc=ljHB&" + 
                    "procurementMethod=_EM_72448_XYZ_&procurementMethod=sWRc&procurementMethod=_EM_72449_XYZ_&" + 
                    "procuringEntityCityId=YczwE_C&procuringEntityCityId=aKHJFQV0_&" + 
                    "procuringEntityGroupId=621&procuringEntityGroupId=899&procuringEntityGroupId=167&procuringEntityGroupId=790&" + 
                    "pageNumber=501&" + 
                    "minTenderValue=0.9590098513663846&" + 
                    "maxTenderValue=0.6581579456598562&" + 
                    "maxAwardValue=0.10663160452729914&" + 
                    "electronicSubmission=false&" + 
                    "password=9gJkx&" + 
                    "yearFilterPagingRequest=_EM_72450_XYZ_&" + 
                    "username=_EM_72451_XYZ_&" + 
                    "skip=_EM_72452_XYZ_&" + 
                    "class=Drmg0hQwQXQ5wod")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i077/crosstab
    */
    @Test(timeout = 60000)
    public void test_346_getOnI077CrosstabWithQueryParamsMonthlyReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "drZ")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i077/crosstab?" + 
                    "bidTypeId=&" + 
                    "supplierId=_EM_46527_XYZ_&supplierId=_EM_46528_XYZ_&supplierId=_EM_46529_XYZ_&" + 
                    "planningLoc=&planningLoc=D45vURfjy7&planningLoc=_EM_46532_XYZ_&" + 
                    "tenderLoc=Zks3kY&tenderLoc=_EM_46533_XYZ_&tenderLoc=TXaqd9bJwQFUTAp&tenderLoc=_EM_46534_XYZ_&tenderLoc=_EM_46535_XYZ_&" + 
                    "procuringEntityDepartmentId=308&procuringEntityDepartmentId=263&procuringEntityDepartmentId=279&procuringEntityDepartmentId=425&procuringEntityDepartmentId=976&" + 
                    "pageNumber=262&" + 
                    "pageSize=926&" + 
                    "minAwardValue=0.3332912094135042&" + 
                    "electronicSubmission=false&" + 
                    "monthly=true&" + 
                    "skip=_EM_46539_XYZ_&" + 
                    "yearFilterPagingRequest=IEQ_Nwj_G")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i077/crosstab
    */
    @Test(timeout = 60000)
    public void test_347_getOnI077CrosstabWithQueryParamsElectronicSubmissionAndMonthly() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i077/crosstab?" + 
                    "bidTypeId=&bidTypeId=gMSD8KO4lgFSzVXB&bidTypeId=FRAUD&" + 
                    "bidSelectionMethod=B9rLX6aDnvGO_hQ7&bidSelectionMethod=J_pCXEPo8M7n1KY&bidSelectionMethod=NJiIC&" + 
                    "notBidSelectionMethod=&" + 
                    "procurementMethod=_EM_72401_XYZ_&" + 
                    "pageNumber=775&" + 
                    "minTenderValue=0.6464502918778849&" + 
                    "electronicSubmission=true&" + 
                    "monthly=true&" + 
                    "skip=gFmtZZnxOgu&" + 
                    "class=O8F2mIu&" + 
                    "username=_EM_72404_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i077/crosstab
    */
    @Test(timeout = 60000)
    public void test_348_getOnCrosstabReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i077/crosstab?" + 
                    "procuringEntityId=em8cduawipOcdiw&" + 
                    "supplierId=_EM_90672_XYZ_&supplierId=GWXr9V63Pu4v&" + 
                    "bidSelectionMethod=_EM_90673_XYZ_&bidSelectionMethod=Fg3AXIZpovE_&bidSelectionMethod=GP48s&bidSelectionMethod=3O4ZO6&" + 
                    "notBidSelectionMethod=XGT&notBidSelectionMethod=ucj3E1X1TvDqAT&notBidSelectionMethod=mm_O13&" + 
                    "planningLoc=_EM_90674_XYZ_&" + 
                    "tenderLoc=_EM_90675_XYZ_&tenderLoc=l8Tj3FOKfedMBAI&" + 
                    "procuringEntityDepartmentId=893&" + 
                    "year=&" + 
                    "pageNumber=151&" + 
                    "minTenderValue=0.4333264682228799&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "skip=_EM_90678_XYZ_&" + 
                    "password=hPBDLDmTOkF_wy&" + 
                    "class=_EM_90679_XYZ_&" + 
                    "yearFilterPagingRequest=_EM_90680_XYZ_&" + 
                    "username=_EM_90681_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i077/crosstab
    */
    @Test(timeout = 60000)
    public void test_349_getOnCrosstabReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i077/crosstab?" + 
                    "procuringEntityId=em8cduawipOcdiw&" + 
                    "supplierId=_EM_90672_XYZ_&supplierId=GWXr9V63Pu4v&" + 
                    "bidSelectionMethod=_EM_90673_XYZ_&bidSelectionMethod=Fg3AXIZpovE_&bidSelectionMethod=GP48s&bidSelectionMethod=3O4ZO6&" + 
                    "planningLoc=_EM_90674_XYZ_&" + 
                    "tenderLoc=_EM_90675_XYZ_&tenderLoc=l8Tj3FOKfedMBAI&" + 
                    "procuringEntityDepartmentId=893&" + 
                    "pageNumber=151&" + 
                    "minTenderValue=0.4333264682228799&" + 
                    "flagged=true&" + 
                    "password=hPBDLDmTOkF_wy&" + 
                    "class=_EM_90679_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i077/releases
    */
    @Test(timeout = 60000)
    public void test_350_getOnReleasesReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i077/releases?" + 
                    "bidTypeId=&" + 
                    "notBidTypeId=vkv9W&notBidTypeId=b0&" + 
                    "notProcuringEntityId=hdaW3eV&notProcuringEntityId=T9&notProcuringEntityId=jRg57YzWpOZ&" + 
                    "supplierId=yIq&" + 
                    "notBidSelectionMethod=&" + 
                    "tenderLoc=mvQRRuS_Dwgeu&tenderLoc=_EM_27930_XYZ_&tenderLoc=_EM_27931_XYZ_&" + 
                    "procurementMethod=NqS&procurementMethod=I&" + 
                    "procuringEntityDepartmentId=748&procuringEntityDepartmentId=-570326046&procuringEntityDepartmentId=93&procuringEntityDepartmentId=373&" + 
                    "month=&" + 
                    "pageNumber=358&" + 
                    "maxTenderValue=0.8531671138965359&" + 
                    "minAwardValue=1.0090206815843397&" + 
                    "electronicSubmission=true&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "skip=_EM_27933_XYZ_&" + 
                    "password=qJv7JOy&" + 
                    "class=Gr70UVlwzZg&" + 
                    "yearFilterPagingRequest=_EM_27934_XYZ_&" + 
                    "username=dmxSm23kN1Usm8N")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i077/releases
    */
    @Test(timeout = 60000)
    public void test_351_getOnReleasesReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i077/releases?" + 
                    "bidTypeId=&" + 
                    "notProcuringEntityId=hdaW3eV&notProcuringEntityId=T9&notProcuringEntityId=jRg57YzWpOZ&" + 
                    "supplierId=yIq&" + 
                    "notBidSelectionMethod=&" + 
                    "tenderLoc=mvQRRuS_Dwgeu&tenderLoc=_EM_27930_XYZ_&tenderLoc=_EM_27931_XYZ_&" + 
                    "procurementMethod=NqS&procurementMethod=I&" + 
                    "procuringEntityDepartmentId=748&procuringEntityDepartmentId=-570326046&procuringEntityDepartmentId=93&procuringEntityDepartmentId=373&" + 
                    "month=&" + 
                    "pageNumber=358&" + 
                    "maxTenderValue=0.8531671138965359&" + 
                    "minAwardValue=1.0090206815843397&" + 
                    "electronicSubmission=true&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "skip=_EM_27933_XYZ_&" + 
                    "password=qJv7JOy&" + 
                    "class=Gr70UVlwzZg&" + 
                    "yearFilterPagingRequest=_EM_27934_XYZ_&" + 
                    "username=dmxSm23kN1Usm8N")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i077/releases
    */
    @Test(timeout = 60000)
    public void test_352_getOnI077ReleasesWithQueryParamsMonthlyReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i077/releases?" + 
                    "bidTypeId=&" + 
                    "notProcuringEntityId=hdaW3eV&notProcuringEntityId=T9&notProcuringEntityId=jRg57YzWpOZ&" + 
                    "supplierId=yIq&" + 
                    "notBidSelectionMethod=&" + 
                    "procurementMethod=NqS&procurementMethod=&" + 
                    "procuringEntityDepartmentId=732&procuringEntityDepartmentId=-570326046&procuringEntityDepartmentId=93&procuringEntityDepartmentId=373&" + 
                    "month=&" + 
                    "pageNumber=358&" + 
                    "minAwardValue=0.29069138057852006&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "skip=_EM_27933_XYZ_&" + 
                    "password=qJv7JOy&" + 
                    "class=Gr70UVlwzZg&" + 
                    "yearFilterPagingRequest=_EM_27934_XYZ_&" + 
                    "username=dmxSm23kN1Usm8N")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i077/stats
    */
    @Test(timeout = 60000)
    public void test_353_getOnStatsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i077/stats?" + 
                    "supplierId=_EM_18108_XYZ_&supplierId=_EM_18109_XYZ_&" + 
                    "notBidSelectionMethod=GKai8hRLDh2IVHEN&notBidSelectionMethod=_EM_18110_XYZ_&notBidSelectionMethod=_EM_18111_XYZ_&" + 
                    "contrMethod=&" + 
                    "planningLoc=A&" + 
                    "procurementMethod=&" + 
                    "procuringEntityCityId=_EM_18113_XYZ_&procuringEntityCityId=0dPAf2&procuringEntityCityId=_EM_18114_XYZ_&procuringEntityCityId=P40SpJ_XxKmWbNDx&procuringEntityCityId=NQMIvpR&" + 
                    "procuringEntityDepartmentId=594&procuringEntityDepartmentId=182&procuringEntityDepartmentId=404&procuringEntityDepartmentId=587&" + 
                    "procuringEntityGroupId=206&procuringEntityGroupId=809&procuringEntityGroupId=693&procuringEntityGroupId=615790930&" + 
                    "pageNumber=708&" + 
                    "pageSize=464&" + 
                    "minTenderValue=0.6510704176255097&" + 
                    "maxAwardValue=0.6633760528667398&" + 
                    "flagged=true&" + 
                    "skip=fHln&" + 
                    "password=yQEriuT7jJ&" + 
                    "class=eNPxBbDoe_U3KsD6&" + 
                    "yearFilterPagingRequest=vtW&" + 
                    "username=AI5")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i077/stats
    */
    @Test(timeout = 60000)
    public void test_354_getOnStatsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i077/stats?" + 
                    "supplierId=_EM_18108_XYZ_&supplierId=_EM_18109_XYZ_&" + 
                    "notBidSelectionMethod=GKai8hRLDh2IVHEN&notBidSelectionMethod=_EM_18110_XYZ_&notBidSelectionMethod=_EM_18111_XYZ_&" + 
                    "planningLoc=A&" + 
                    "procurementMethod=&" + 
                    "procuringEntityGroupId=206&procuringEntityGroupId=809&procuringEntityGroupId=693&procuringEntityGroupId=615790930&" + 
                    "pageNumber=724&" + 
                    "pageSize=464&" + 
                    "minTenderValue=0.6510704176255097&" + 
                    "maxAwardValue=0.6658407538493459&" + 
                    "EMextraParam123=_EM_18115_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i077/stats
    */
    @Test(timeout = 60000)
    public void test_355_getOnStatsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i077/stats?" + 
                    "supplierId=_EM_18108_XYZ_&supplierId=_EM_18109_XYZ_&" + 
                    "notBidSelectionMethod=GKai8hRLDh2IVHEN&notBidSelectionMethod=_EM_18110_XYZ_&notBidSelectionMethod=_EM_18111_XYZ_&" + 
                    "contrMethod=&" + 
                    "planningLoc=A&" + 
                    "procurementMethod=&" + 
                    "procuringEntityDepartmentId=594&procuringEntityDepartmentId=182&procuringEntityDepartmentId=404&procuringEntityDepartmentId=587&" + 
                    "procuringEntityGroupId=206&procuringEntityGroupId=809&procuringEntityGroupId=693&procuringEntityGroupId=615790930&" + 
                    "pageNumber=708&" + 
                    "pageSize=464&" + 
                    "minTenderValue=0.6510704176255097&" + 
                    "maxAwardValue=0.6633760528667398&" + 
                    "flagged=true&" + 
                    "skip=fHln&" + 
                    "password=yQEriuT7jJ&" + 
                    "class=eNPxBbDoe_U3KsD6&" + 
                    "yearFilterPagingRequest=vtW&" + 
                    "username=AI5")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i077/stats
    */
    @Test(timeout = 60000)
    public void test_356_getOnStatsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i077/stats?" + 
                    "supplierId=_EM_18108_XYZ_&supplierId=_EM_18109_XYZ_&" + 
                    "notBidSelectionMethod=GKai8hRLDh2IVHEN&notBidSelectionMethod=_EM_18110_XYZ_&notBidSelectionMethod=_EM_18111_XYZ_&" + 
                    "contrMethod=&" + 
                    "planningLoc=A&" + 
                    "procurementMethod=&" + 
                    "procuringEntityDepartmentId=594&procuringEntityDepartmentId=182&procuringEntityDepartmentId=404&procuringEntityDepartmentId=587&" + 
                    "procuringEntityGroupId=206&procuringEntityGroupId=809&procuringEntityGroupId=693&procuringEntityGroupId=615790930&" + 
                    "pageNumber=708&" + 
                    "pageSize=464&" + 
                    "minTenderValue=0.6510704176255097&" + 
                    "maxAwardValue=0.6633760528667398&" + 
                    "skip=fHln&" + 
                    "password=yQEriuT7jJ&" + 
                    "class=eNPxBbDoe_U3KsD6&" + 
                    "yearFilterPagingRequest=vtW&" + 
                    "username=AI5")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i085/crosstab
    */
    @Test(timeout = 60000)
    public void test_357_getOnCrosstabReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i085/crosstab?" + 
                    "supplierId=_EM_22006_XYZ_&supplierId=_EM_22007_XYZ_&supplierId=_EM_22008_XYZ_&supplierId=3Je2OK8&supplierId=8EfpqwbUN4CQEc&" + 
                    "planningLoc=&" + 
                    "procurementMethod=_EM_21997_XYZ_&procurementMethod=JwUOPz&procurementMethod=AxvKdtP5xVYSOg90&procurementMethod=b4JpvAA_2sM3Wz3&" + 
                    "procuringEntityCityId=Ho&procuringEntityCityId=I8CF&" + 
                    "procuringEntityDepartmentId=155&procuringEntityDepartmentId=592&procuringEntityDepartmentId=755&procuringEntityDepartmentId=791&procuringEntityDepartmentId=863&" + 
                    "procuringEntityGroupId=380&procuringEntityGroupId=231&procuringEntityGroupId=979&" + 
                    "pageNumber=550&" + 
                    "minTenderValue=0.033192636214061544&" + 
                    "maxTenderValue=0.7258435875294103&" + 
                    "minAwardValue=0.2682012714968798&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "yearFilterPagingRequest=KVJ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i085/crosstab
    */
    @Test(timeout = 60000)
    public void test_358_getOnI085CrosstabWithQueryParamsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i085/crosstab?" + 
                    "notBidSelectionMethod=bUCXiftB0p7BQ&" + 
                    "planningLoc=&" + 
                    "procurementMethod=73nOtPVa&procurementMethod=_EM_22013_XYZ_&procurementMethod=AxvKdtP5xVYSOg90&procurementMethod=b4JpvAA_2sM3Wz3&" + 
                    "procuringEntityDepartmentId=163&procuringEntityDepartmentId=593&procuringEntityDepartmentId=755&procuringEntityDepartmentId=791&procuringEntityDepartmentId=863&" + 
                    "procuringEntityGroupId=380&procuringEntityGroupId=231&procuringEntityGroupId=979&" + 
                    "pageNumber=548&" + 
                    "minTenderValue=0.033192636214061544&" + 
                    "maxTenderValue=0.7258435875294103&" + 
                    "minAwardValue=0.2682012714968798&" + 
                    "flagged=false&" + 
                    "monthly=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i085/crosstab
    */
    @Test(timeout = 60000)
    public void test_359_getOnCrosstabReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i085/crosstab?" + 
                    "supplierId=_EM_22006_XYZ_&supplierId=_EM_22007_XYZ_&supplierId=_EM_22008_XYZ_&supplierId=3Je2OK8&supplierId=8EfpqwbUN4CQEc&" + 
                    "planningLoc=&" + 
                    "procurementMethod=_EM_21997_XYZ_&procurementMethod=JwUOPz&procurementMethod=AxvKdtP5xVYSOg90&procurementMethod=b4JpvAA_2sM3Wz3&" + 
                    "procuringEntityCityId=Ho&procuringEntityCityId=I8CF&" + 
                    "pageNumber=550&" + 
                    "minTenderValue=0.033192636214061544&" + 
                    "maxTenderValue=0.7258435875294103&" + 
                    "minAwardValue=0.2682012714968798&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "yearFilterPagingRequest=KVJ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i085/crosstab
    */
    @Test(timeout = 60000)
    public void test_360_getOnCrosstabReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i085/crosstab?" + 
                    "supplierId=_EM_22006_XYZ_&supplierId=_EM_22007_XYZ_&supplierId=_EM_22008_XYZ_&supplierId=3Je2OK8&supplierId=8EfpqwbUN4CQEc&" + 
                    "planningLoc=&" + 
                    "procurementMethod=_EM_21997_XYZ_&procurementMethod=JwUOPz&procurementMethod=AxvKdtP5xVYSOg90&procurementMethod=b4JpvAA_2sM3Wz3&" + 
                    "procuringEntityCityId=Ho&procuringEntityCityId=I8CF&" + 
                    "procuringEntityDepartmentId=155&procuringEntityDepartmentId=592&procuringEntityDepartmentId=755&procuringEntityDepartmentId=791&procuringEntityDepartmentId=863&" + 
                    "pageNumber=550&" + 
                    "minTenderValue=0.033192636214061544&" + 
                    "maxTenderValue=0.7258435875294103&" + 
                    "minAwardValue=0.2682012714968798&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "yearFilterPagingRequest=KVJ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i085/stats
    */
    @Test(timeout = 60000)
    public void test_361_getOnI085StatsWithQueryParamsElectronicSubmissionAndFlagged() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i085/stats?" + 
                    "bidSelectionMethod=Nn&" + 
                    "notBidSelectionMethod=_EM_55901_XYZ_&notBidSelectionMethod=3w1Na_y63ZwGkL&" + 
                    "planningLoc=_EM_55903_XYZ_&planningLoc=_EM_55904_XYZ_&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=&" + 
                    "procuringEntityCityId=_EM_55905_XYZ_&procuringEntityCityId=&procuringEntityCityId=NcQc56eR8&procuringEntityCityId=6&procuringEntityCityId=vppPIYeAuZ&" + 
                    "procuringEntityDepartmentId=409&" + 
                    "procuringEntityGroupId=789&procuringEntityGroupId=886&procuringEntityGroupId=775&procuringEntityGroupId=489&" + 
                    "pageNumber=947&" + 
                    "minTenderValue=0.38597316494070266&" + 
                    "maxTenderValue=0.5427348716740439&" + 
                    "minAwardValue=0.6200809856752104&" + 
                    "electronicSubmission=true&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "password=_EM_55906_XYZ_&" + 
                    "yearFilterPagingRequest=h7l&" + 
                    "username=_EM_55907_XYZ_&" + 
                    "skip=bJJAxBqb9M&" + 
                    "class=6")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i085/stats
    */
    @Test(timeout = 60000)
    public void test_362_getOnI085StatsWithQueryParamsElectronicSubmissionEmptySkip() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i085/stats?" + 
                    "bidTypeId=&" + 
                    "notBidTypeId=qHLj0I&notBidTypeId=5z&notBidTypeId=e&notBidTypeId=YD3NrSdVn&" + 
                    "procuringEntityId=KVeU6VTv&procuringEntityId=v6Q&procuringEntityId=O&procuringEntityId=mxPONRXmMH0ozO&" + 
                    "notBidSelectionMethod=MnTFWnQx_CUCMLKl&notBidSelectionMethod=&" + 
                    "tenderLoc=4bDPvsZx&tenderLoc=ist&tenderLoc=X4GsL1F&tenderLoc=u&" + 
                    "procuringEntityDepartmentId=995&" + 
                    "pageSize=635&" + 
                    "minTenderValue=0.2773562477293571&" + 
                    "maxTenderValue=0.28678764873120766&" + 
                    "electronicSubmission=true&" + 
                    "password=XG9sBAEq&" + 
                    "yearFilterPagingRequest=49Zn6&" + 
                    "username=7XRsc21u&" + 
                    "skip=&" + 
                    "class=g8JPv3nFsb")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i085/stats
    */
    @Test(timeout = 60000)
    public void test_363_getOnStatsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/flags/i085/stats?" + 
                    "supplierId=BoGG&supplierId=T&" + 
                    "notBidSelectionMethod=YrvsnicKJUe&notBidSelectionMethod=i1AxjEGeoXFn14&notBidSelectionMethod=_EM_73397_XYZ_&notBidSelectionMethod=&notBidSelectionMethod=_EM_73398_XYZ_&" + 
                    "contrMethod=&" + 
                    "planningLoc=X&planningLoc=lJOtmq0248hJZc&planningLoc=xrbqEYYvF50LU&" + 
                    "tenderLoc=JJd&tenderLoc=axOPlJtVxi&tenderLoc=_EM_73399_XYZ_&tenderLoc=_EM_73400_XYZ_&tenderLoc=_EM_73401_XYZ_&" + 
                    "procuringEntityGroupId=380&procuringEntityGroupId=466&procuringEntityGroupId=714&" + 
                    "pageNumber=871&" + 
                    "minTenderValue=0.5120219544160028&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "password=_EM_73410_XYZ_&" + 
                    "skip=_EM_73413_XYZ_&" + 
                    "class=fyi81voNm6")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i085/stats
    */
    @Test(timeout = 60000)
    public void test_364_getOnI085StatsWithQueryParamsMonthlyReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i085/stats?" + 
                    "supplierId=iGMN8IFunpyi&supplierId=nBIvNRvkfE&supplierId=OVnTG6&supplierId=cWM9qFA6UJZ8&" + 
                    "bidSelectionMethod=_pYoKnzjzyFt7gwm&bidSelectionMethod=ueX1mKdtjK&" + 
                    "procuringEntityCityId=ZqI1gpKL3600e&procuringEntityCityId=v5Q&" + 
                    "procuringEntityGroupId=263&procuringEntityGroupId=110&procuringEntityGroupId=514&procuringEntityGroupId=757&procuringEntityGroupId=367&" + 
                    "pageSize=84&" + 
                    "maxAwardValue=0.895192170216273&" + 
                    "monthly=true&" + 
                    "EMextraParam123=_EM_9387_XYZ_&" + 
                    "password=CbRq4&" + 
                    "username=gwwzO3tBs")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i085/stats
    */
    @Test(timeout = 60000)
    public void test_365_getOnStatsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "R")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i085/stats?" + 
                    "bidSelectionMethod=&" + 
                    "notBidSelectionMethod=_EM_55901_XYZ_&notBidSelectionMethod=3w1Na_y63ZwGkL&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=&" + 
                    "procuringEntityCityId=_EM_55905_XYZ_&procuringEntityCityId=&procuringEntityCityId=NcQc56eR8&procuringEntityCityId=6&procuringEntityCityId=vppPIYeAuZ&" + 
                    "procuringEntityGroupId=789&procuringEntityGroupId=886&procuringEntityGroupId=775&procuringEntityGroupId=489&" + 
                    "minTenderValue=0.38597316494070266&" + 
                    "maxTenderValue=0.5427348716740439&" + 
                    "minAwardValue=0.6200809856752104&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "EMextraParam123=_EM_9387_XYZ_&" + 
                    "password=_EM_55906_XYZ_&" + 
                    "skip=bJJAxBqb9M")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i085/stats
    */
    @Test(timeout = 60000)
    public void test_366_getOnStatsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i085/stats?" + 
                    "bidSelectionMethod=&" + 
                    "notBidSelectionMethod=_EM_55901_XYZ_&notBidSelectionMethod=3w1Na_y63ZwGkL&" + 
                    "planningLoc=_EM_55903_XYZ_&planningLoc=_EM_55904_XYZ_&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=&" + 
                    "procuringEntityCityId=_EM_55905_XYZ_&procuringEntityCityId=&procuringEntityCityId=NcQc56eR8&procuringEntityCityId=6&procuringEntityCityId=vppPIYeAuZ&" + 
                    "procuringEntityGroupId=789&procuringEntityGroupId=886&procuringEntityGroupId=775&procuringEntityGroupId=489&" + 
                    "minTenderValue=0.38597316494070266&" + 
                    "maxTenderValue=0.5427348716740439&" + 
                    "minAwardValue=0.6200809856752104&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "password=_EM_55906_XYZ_&" + 
                    "yearFilterPagingRequest=h7l&" + 
                    "username=_EM_55907_XYZ_&" + 
                    "skip=bJJAxBqb9M&" + 
                    "class=2v")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i085/stats
    */
    @Test(timeout = 60000)
    public void test_367_getOnStatsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i085/stats?" + 
                    "bidSelectionMethod=On&" + 
                    "notBidSelectionMethod=_EM_55901_XYZ_&notBidSelectionMethod=3w1Na_y63ZwGkL&" + 
                    "planningLoc=_EM_55903_XYZ_&planningLoc=_EM_55904_XYZ_&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=&" + 
                    "procuringEntityCityId=_EM_55905_XYZ_&procuringEntityCityId=&procuringEntityCityId=NcQc56eR8&procuringEntityCityId=6&procuringEntityCityId=vppPIYeAuZ&" + 
                    "procuringEntityDepartmentId=409&" + 
                    "procuringEntityGroupId=789&procuringEntityGroupId=886&procuringEntityGroupId=775&procuringEntityGroupId=489&" + 
                    "minTenderValue=0.38597316494070266&" + 
                    "maxTenderValue=0.5427348716740439&" + 
                    "minAwardValue=0.6200809856752104&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "password=_EM_55906_XYZ_&" + 
                    "yearFilterPagingRequest=h7l&" + 
                    "username=_EM_55907_XYZ_&" + 
                    "skip=bJJAxBqb9M&" + 
                    "class=2v")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i180/crosstab
    */
    @Test(timeout = 60000)
    public void test_368_getOnCrosstabReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i180/crosstab?" + 
                    "procuringEntityId=AjdaXfwiqY&procuringEntityId=&" + 
                    "supplierId=0H25DGwmvdbkf&supplierId=jfjsSnjS3XLLZU&supplierId=ZZFpBHOOmTi91&" + 
                    "bidSelectionMethod=FIKCsEDe&" + 
                    "notBidSelectionMethod=x&notBidSelectionMethod=_EM_96672_XYZ_&notBidSelectionMethod=_EM_96673_XYZ_&notBidSelectionMethod=_EM_96674_XYZ_&notBidSelectionMethod=_EM_96675_XYZ_&" + 
                    "tenderLoc=_EM_96677_XYZ_&tenderLoc=_EM_96678_XYZ_&tenderLoc=uBd4xUmoU&tenderLoc=yZ1n3NGE5c5s&tenderLoc=LxM685FRQw_A&" + 
                    "procurementMethod=_EM_96679_XYZ_&procurementMethod=&" + 
                    "procuringEntityCityId=_EM_96680_XYZ_&procuringEntityCityId=UxJ&" + 
                    "procuringEntityGroupId=580&procuringEntityGroupId=1725816845&procuringEntityGroupId=535&procuringEntityGroupId=550&procuringEntityGroupId=933&" + 
                    "pageNumber=570&" + 
                    "minTenderValue=0.6168414613664674&" + 
                    "maxTenderValue=0.9996135169371858&" + 
                    "maxAwardValue=0.5241342948554756&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "skip=HTTbDV8&" + 
                    "password=uiGybsfRQF2M&" + 
                    "class=0Lkp20inz3&" + 
                    "yearFilterPagingRequest=uTIym&" + 
                    "username=rjXfeWC5KZESQ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i180/crosstab
    */
    @Test(timeout = 60000)
    public void test_369_getOnI180CrosstabWithQueryParamsFlaggedReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i180/crosstab?" + 
                    "bidTypeId=h9OS11&bidTypeId=O9w4MBOpsp&bidTypeId=FRAUD&" + 
                    "procuringEntityId=AjdaXfwiqY&procuringEntityId=&" + 
                    "supplierId=0H25DGwmvdbkf&supplierId=jfjsSnjS3XLLZU&supplierId=ZZFpBHOOmTi91&" + 
                    "bidSelectionMethod=FIKCsEDe&" + 
                    "notBidSelectionMethod=x&notBidSelectionMethod=_EM_96672_XYZ_&notBidSelectionMethod=_EM_96673_XYZ_&notBidSelectionMethod=_EM_96674_XYZ_&notBidSelectionMethod=_EM_96675_XYZ_&" + 
                    "contrMethod=&" + 
                    "planningLoc=tVi_WSOGU4Ifdl&planningLoc=_EM_96676_XYZ_&planningLoc=Fn1qG8o3Xc&planningLoc=&planningLoc=44_NVhI6whsp&" + 
                    "tenderLoc=_EM_96677_XYZ_&tenderLoc=_EM_96678_XYZ_&tenderLoc=uBd4xUmoU&tenderLoc=yZ1n3NGE5c5s&tenderLoc=LxM685FRQw_A&" + 
                    "procurementMethod=_EM_96679_XYZ_&procurementMethod=&" + 
                    "procuringEntityCityId=_EM_96680_XYZ_&procuringEntityCityId=UxJ&" + 
                    "procuringEntityDepartmentId=76&procuringEntityDepartmentId=919&procuringEntityDepartmentId=462&procuringEntityDepartmentId=838&" + 
                    "procuringEntityGroupId=580&procuringEntityGroupId=1725816845&procuringEntityGroupId=535&procuringEntityGroupId=550&procuringEntityGroupId=933&" + 
                    "pageNumber=570&" + 
                    "minTenderValue=0.6168414613664674&" + 
                    "maxTenderValue=0.9996135169371858&" + 
                    "maxAwardValue=0.5241342948554756&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "skip=HTTbDV8&" + 
                    "password=uiGybsfRQF2M&" + 
                    "class=0Lkp20inz3&" + 
                    "yearFilterPagingRequest=uTIym&" + 
                    "username=rjXfeWC5KZESQ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i180/crosstab
    */
    @Test(timeout = 60000)
    public void test_370_getOnCrosstabReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i180/crosstab?" + 
                    "procuringEntityId=AjdaXfwiqY&procuringEntityId=&" + 
                    "supplierId=0H25DGwmvdbkf&supplierId=jfjsSnjS3XLLZU&supplierId=ZZFpBHOOmTi91&" + 
                    "bidSelectionMethod=FIKCsEDe&" + 
                    "notBidSelectionMethod=x&notBidSelectionMethod=_EM_96672_XYZ_&notBidSelectionMethod=_EM_96673_XYZ_&notBidSelectionMethod=_EM_96674_XYZ_&notBidSelectionMethod=_EM_96675_XYZ_&" + 
                    "procuringEntityGroupId=580&procuringEntityGroupId=1725816845&procuringEntityGroupId=535&procuringEntityGroupId=550&procuringEntityGroupId=933&" + 
                    "pageNumber=570&" + 
                    "minTenderValue=0.6168414613664674&" + 
                    "maxTenderValue=0.9996135169371858&" + 
                    "maxAwardValue=0.5241342948554756&" + 
                    "electronicSubmission=false&" + 
                    "monthly=true&" + 
                    "skip=HTTbDV8&" + 
                    "password=uiGybsfRQF2M&" + 
                    "class=0Lkp20inz3&" + 
                    "yearFilterPagingRequest=uTIym&" + 
                    "username=rjXfeWC5KZESQ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i180/crosstab
    */
    @Test(timeout = 60000)
    public void test_371_getOnCrosstabReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i180/crosstab?" + 
                    "bidTypeId=h9OS11&bidTypeId=COLLUSION&bidTypeId=O9w4MBOpsp&bidTypeId=FRAUD&" + 
                    "procuringEntityId=AjdaXfwiqY&procuringEntityId=&" + 
                    "supplierId=0H25DGwmvdbkf&supplierId=jfjsSnjS3XLLZU&supplierId=ZZFpBHOOmTi91&" + 
                    "bidSelectionMethod=FIKCsEDe&" + 
                    "notBidSelectionMethod=x&notBidSelectionMethod=_EM_96672_XYZ_&notBidSelectionMethod=_EM_96673_XYZ_&notBidSelectionMethod=_EM_96674_XYZ_&notBidSelectionMethod=_EM_96675_XYZ_&" + 
                    "planningLoc=tVi_WSOGU4Ifdj&planningLoc=_EM_96676_XYZ_&planningLoc=Fn1qG8o3Xc&planningLoc=&planningLoc=44_NVhI6whsp&" + 
                    "tenderLoc=_EM_96677_XYZ_&tenderLoc=_EM_96678_XYZ_&tenderLoc=uBd4xUmoU&tenderLoc=yZ1n3NGE5c5s&tenderLoc=LxM685FRQw_A&" + 
                    "procurementMethod=_EM_96679_XYZ_&procurementMethod=&" + 
                    "procuringEntityCityId=_EM_96680_XYZ_&procuringEntityCityId=UxJ&" + 
                    "procuringEntityDepartmentId=76&procuringEntityDepartmentId=919&procuringEntityDepartmentId=462&procuringEntityDepartmentId=966&" + 
                    "procuringEntityGroupId=580&procuringEntityGroupId=1725816845&procuringEntityGroupId=535&procuringEntityGroupId=550&procuringEntityGroupId=933&" + 
                    "pageNumber=570&" + 
                    "minTenderValue=0.6168414613664674&" + 
                    "maxTenderValue=0.9996135169371858&" + 
                    "maxAwardValue=0.5241342948554756&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "skip=HTTbDV8&" + 
                    "password=uiGybsfRQF2M&" + 
                    "class=0Lkp20inz3&" + 
                    "yearFilterPagingRequest=uTIym&" + 
                    "username=rjXfeWC5KZESQ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i180/crosstab
    */
    @Test(timeout = 60000)
    public void test_372_getOnCrosstabReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i180/crosstab?" + 
                    "procuringEntityId=AjdaXfwiqY&procuringEntityId=&" + 
                    "supplierId=0H25DGwmvdbkf&supplierId=jfjsSnjS3XLLZU&supplierId=ZZFpBHOOmTi91&" + 
                    "bidSelectionMethod=FIKCsEDe&" + 
                    "pageNumber=570&" + 
                    "minTenderValue=0.6168414613664674&" + 
                    "maxTenderValue=0.9996135169371858&" + 
                    "maxAwardValue=0.5241342948554756&" + 
                    "monthly=true&" + 
                    "password=_EM_96681_XYZ_&" + 
                    "class=0Lkp20inz3&" + 
                    "yearFilterPagingRequest=uTIym")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i180/crosstab
    */
    @Test(timeout = 60000)
    public void test_373_getOnI180CrosstabWithQueryParamsElectronicSubmissionAndFlagged() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i180/crosstab?" + 
                    "bidTypeId=h9OS11&bidTypeId=O9w4MBOpsp&bidTypeId=FRAUD&" + 
                    "procuringEntityId=AjdaXfwiqY&procuringEntityId=&" + 
                    "supplierId=0H25DGwmvdbkf&supplierId=jfjsSnjS3XLLZU&supplierId=ZZFpBHOOmTi91&" + 
                    "bidSelectionMethod=FIKCsEDe&" + 
                    "notBidSelectionMethod=x&notBidSelectionMethod=_EM_96672_XYZ_&notBidSelectionMethod=_EM_96673_XYZ_&notBidSelectionMethod=_EM_96674_XYZ_&notBidSelectionMethod=_EM_96675_XYZ_&" + 
                    "contrMethod=&" + 
                    "planningLoc=tVi_WSOGU4Ifdl&planningLoc=_EM_96676_XYZ_&planningLoc=Fn1qG8o3Xc&planningLoc=&planningLoc=44_NVhI6whsp&" + 
                    "tenderLoc=_EM_96677_XYZ_&tenderLoc=_EM_96678_XYZ_&tenderLoc=uBd4xUmoU&tenderLoc=yZ1n3NGE5c5s&tenderLoc=LxM685FRQw_A&" + 
                    "procurementMethod=_EM_96679_XYZ_&procurementMethod=&" + 
                    "procuringEntityCityId=_EM_96680_XYZ_&procuringEntityCityId=UxJ&" + 
                    "procuringEntityDepartmentId=76&procuringEntityDepartmentId=919&procuringEntityDepartmentId=462&procuringEntityDepartmentId=838&" + 
                    "procuringEntityGroupId=580&procuringEntityGroupId=1725816845&procuringEntityGroupId=535&procuringEntityGroupId=550&procuringEntityGroupId=933&" + 
                    "pageNumber=570&" + 
                    "minTenderValue=0.6168414613664674&" + 
                    "maxTenderValue=0.9996135169371858&" + 
                    "maxAwardValue=0.5241342948554756&" + 
                    "electronicSubmission=true&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "skip=HTTbDV8&" + 
                    "password=uiGybsfRQF2M&" + 
                    "class=0Lkp20inz3&" + 
                    "yearFilterPagingRequest=uTIym&" + 
                    "username=rjXfeWC5KZESQ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i180/releases
    */
    @Test(timeout = 60000)
    public void test_374_getOnI180ReleasesWithQueryParamsEmptyUsernameReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i180/releases?" + 
                    "bidTypeId=1SlLI&bidTypeId=RPhKSNmqMf&bidTypeId=9nW9kVIVDnM&" + 
                    "notProcuringEntityId=x5gJoB56Ph&notProcuringEntityId=wRLDdRp0Qd8uPyk&" + 
                    "supplierId=_EM_43498_XYZ_&supplierId=_EM_43499_XYZ_&supplierId=l&" + 
                    "notBidSelectionMethod=_EM_43501_XYZ_&" + 
                    "planningLoc=_EM_43503_XYZ_&planningLoc=s&planningLoc=x&" + 
                    "procurementMethod=v0UDbvn&" + 
                    "procuringEntityCityId=_EM_43505_XYZ_&procuringEntityCityId=jG3ayKEGN8w5BE&procuringEntityCityId=_EM_43506_XYZ_&" + 
                    "procuringEntityDepartmentId=204&procuringEntityDepartmentId=340&procuringEntityDepartmentId=504&" + 
                    "procuringEntityGroupId=744&procuringEntityGroupId=83&procuringEntityGroupId=80&" + 
                    "month=&" + 
                    "pageSize=978&" + 
                    "minTenderValue=0.46527973370484454&" + 
                    "minAwardValue=0.6984726518136801&" + 
                    "electronicSubmission=false&" + 
                    "yearFilterPagingRequest=ssf4jKx&" + 
                    "username=&" + 
                    "skip=_EM_43507_XYZ_&" + 
                    "class=_EM_43508_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i180/releases
    */
    @Test(timeout = 60000)
    public void test_375_getOnI180ReleasesWithQueryParamsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i180/releases?" + 
                    "notBidSelectionMethod=zHgI8&notBidSelectionMethod=vf7nmGnot&" + 
                    "planningLoc=bxA_t1mhj5B&planningLoc=_EM_51217_XYZ_&planningLoc=_EM_51218_XYZ_&planningLoc=_EM_51219_XYZ_&" + 
                    "tenderLoc=_EM_51220_XYZ_&tenderLoc=kJ1FAv&tenderLoc=lpElb&tenderLoc=aZZkEg3UgZKHxq&tenderLoc=_EM_51221_XYZ_&" + 
                    "procurementMethod=IO4oBf2rSKV6OnP&procurementMethod=cKjPvOxcOvk&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityGroupId=430&procuringEntityGroupId=887&procuringEntityGroupId=20&" + 
                    "pageNumber=543&" + 
                    "pageSize=652&" + 
                    "maxTenderValue=0.45933297805949813&" + 
                    "minAwardValue=0.3600468191866527&" + 
                    "maxAwardValue=0.664094402772514&" + 
                    "monthly=false&" + 
                    "EMextraParam123=_EM_32782_XYZ_&" + 
                    "password=riadMJNME_UFihp&" + 
                    "yearFilterPagingRequest=6ISVP6&" + 
                    "username=_EM_51222_XYZ_&" + 
                    "class=7lSnVEuePWJm")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i180/releases
    */
    @Test(timeout = 60000)
    public void test_376_getOnI180ReleasesWithQueryParamsElectronicSubmissionReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i180/releases?" + 
                    "supplierId=&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=&" + 
                    "procuringEntityCityId=KENEF&" + 
                    "procuringEntityGroupId=735&procuringEntityGroupId=716&procuringEntityGroupId=847&procuringEntityGroupId=149&procuringEntityGroupId=244&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "yearFilterPagingRequest=bnYBHDCAlJglZeC&" + 
                    "username=E7PISyuyqDjm&" + 
                    "class=I9XJiROM3dpim")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i180/stats
    */
    @Test(timeout = 60000)
    public void test_377_getOnStatsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i180/stats?" + 
                    "supplierId=WLX&supplierId=VF3cUxOq9kcu&supplierId=_EM_96442_XYZ_&supplierId=dx9cZ2D&supplierId=dD457E_t&" + 
                    "bidSelectionMethod=vm0SDgJ61PzNB&bidSelectionMethod=_EM_96443_XYZ_&" + 
                    "notBidSelectionMethod=j&notBidSelectionMethod=ThrPy&notBidSelectionMethod=NfJYXbOSN7aOh&" + 
                    "planningLoc=GY&planningLoc=_EM_96444_XYZ_&" + 
                    "tenderLoc=&" + 
                    "procuringEntityDepartmentId=979&procuringEntityDepartmentId=36&" + 
                    "procuringEntityGroupId=&" + 
                    "pageSize=98&" + 
                    "maxTenderValue=0.0763579376223309&" + 
                    "minAwardValue=0.4015387620349855&" + 
                    "skip=rkG&" + 
                    "password=0ugni7MBs&" + 
                    "class=ULvCMs_lYNJRI1wo&" + 
                    "yearFilterPagingRequest=dC0ZYMB_662W&" + 
                    "username=JyET_LRSzW")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i180/stats
    */
    @Test(timeout = 60000)
    public void test_378_getOnStatsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i180/stats?" + 
                    "supplierId=WLX&supplierId=VF3cUxOq9kcu&supplierId=_EM_96442_XYZ_&supplierId=dx9cZ2D&supplierId=dD457E_t&" + 
                    "bidSelectionMethod=vm0SDgJ61PzNB&bidSelectionMethod=_EM_96443_XYZ_&" + 
                    "notBidSelectionMethod=j&notBidSelectionMethod=ThrPy&notBidSelectionMethod=NfJYXbOSN7aOh&" + 
                    "planningLoc=GY&planningLoc=_EM_96444_XYZ_&" + 
                    "tenderLoc=&" + 
                    "procuringEntityDepartmentId=979&procuringEntityDepartmentId=36&" + 
                    "procuringEntityGroupId=&" + 
                    "pageSize=98&" + 
                    "maxTenderValue=0.0763579376223309&" + 
                    "minAwardValue=0.4015387620349855&" + 
                    "skip=rkGL&" + 
                    "password=0ugni7MBs")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/bidSelectionMethod/all
    */
    @Test(timeout = 60000)
    public void test_379_getOnBidSelectionMethodAllWithQueryParamReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/bidSelectionMethod/all?EMextraParam123=_EM_9484_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/bidSelectionMethod/all
    */
    @Test(timeout = 60000)
    public void test_380_getOnAllReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ocds/bidSelectionMethod/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/bidType/all
    */
    @Test(timeout = 60000)
    public void test_381_getOnAllReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_9487_XYZ_")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/bidType/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/bidType/all
    */
    @Test(timeout = 60000)
    public void test_382_getOnAllReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ocds/bidType/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/city/all
    */
    @Test(timeout = 60000)
    public void test_383_getOnAllReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/city/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/city/all
    */
    @Test(timeout = 60000)
    public void test_384_getOnCityAllWithQueryParamReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/ocds/city/all?EMextraParam123=_EM_508_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/city/search
    */
    @Test(timeout = 60000)
    public void test_385_getOnSearchReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/city/search?" + 
                    "pageNumber=348&" + 
                    "pageSize=1&" + 
                    "skip=_EM_83971_XYZ_&" + 
                    "username=whITG0")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/city/search
    */
    @Test(timeout = 60000)
    public void test_386_getOnSearchReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/city/search?" + 
                    "pageNumber=593&" + 
                    "password=_AUNsjiOrE&" + 
                    "textSearchRequest=rp&" + 
                    "username=bk9OmnUrdkV4V9F")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/city/search
    */
    @Test(timeout = 60000)
    public void test_387_getOnSearchReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/city/search?" + 
                    "pageSize=246&" + 
                    "class=XS")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/contrMethod/all
    */
    @Test(timeout = 60000)
    public void test_388_getOnAllReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/contrMethod/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/contrMethod/all
    */
    @Test(timeout = 60000)
    public void test_389_getOnContrMethodAllWithQueryParamReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/ocds/contrMethod/all?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/location/all
    */
    @Test(timeout = 60000)
    public void test_390_getOnAllReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/location/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/location/all
    */
    @Test(timeout = 60000)
    public void test_391_getOnAllReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ocds/location/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/location/search
    */
    @Test(timeout = 60000)
    public void test_392_getOnSearchReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "rce9pkmlNoO")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/location/search?" + 
                    "pageNumber=879&" + 
                    "pageSize=160&" + 
                    "password=3zU&" + 
                    "textSearchRequest=Gq6zApK9k&" + 
                    "username=_EM_29878_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/location/search
    */
    @Test(timeout = 60000)
    public void test_393_getOnSearchReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/location/search?" + 
                    "pageNumber=514&" + 
                    "password=_EM_91311_XYZ_&" + 
                    "textSearchRequest=InDo3&" + 
                    "username=L")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/location/search
    */
    @Test(timeout = 60000)
    public void test_394_getOnSearchReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/location/search?" + 
                    "pageNumber=525&" + 
                    "pageSize=349&" + 
                    "EMextraParam123=_EM_39598_XYZ_&" + 
                    "skip=_EM_39600_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/location/search
    */
    @Test(timeout = 60000)
    public void test_395_getOnLocationSearchWithQueryParamReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_511_XYZ_")
                .get(baseUrlOfSut + "/api/ocds/location/search?pageNumber=344")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/location/search
    */
    @Test(timeout = 60000)
    public void test_396_getOnSearchReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/location/search?" + 
                    "pageNumber=344&" + 
                    "pageSize=996&" + 
                    "password=u1BsOKiDpkdDtLr&" + 
                    "class=4D6yPJEJxcnzU5a6&" + 
                    "textSearchRequest=_EM_64565_XYZ_&" + 
                    "username=_EM_64566_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/orgDepartment/all
    */
    @Test(timeout = 60000)
    public void test_397_getOnAllReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/orgDepartment/all?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/orgDepartment/all
    */
    @Test(timeout = 60000)
    public void test_398_getOnOrgDepartmentAllReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ocds/orgDepartment/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/orgDepartment/search
    */
    @Test(timeout = 60000)
    public void test_399_getOnSearchReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/orgDepartment/search?" + 
                    "pageNumber=622&" + 
                    "pageSize=66&" + 
                    "skip=_EM_62664_XYZ_&" + 
                    "class=XmjSaJjHXv7rJ&" + 
                    "textSearchRequest=_EM_52315_XYZ_&" + 
                    "password=_EM_52316_XYZ_&" + 
                    "username=1HbY4KP9qgKRQJoG")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/orgDepartment/search
    */
    @Test(timeout = 60000)
    public void test_400_getOnSearchReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/orgDepartment/search?" + 
                    "pageSize=926&" + 
                    "EMextraParam123=kEruqykwacIkZPPo&" + 
                    "textSearchRequest=HhPo&" + 
                    "password=Z2aW5GN6gTe6O2q&" + 
                    "username=6v7OHwv5vbYIYf")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/orgDepartment/search
    */
    @Test(timeout = 60000)
    public void test_401_getOnSearchReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/orgDepartment/search?pageNumber=825")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/orgDepartment/search
    */
    @Test(timeout = 60000)
    public void test_402_getOnSearchReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_43326_XYZ_")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/orgDepartment/search?" + 
                    "pageNumber=533&" + 
                    "pageSize=67&" + 
                    "skip=JbInEq&" + 
                    "textSearchRequest=_EM_43328_XYZ_&" + 
                    "username=PA6m")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/orgDepartment/search
    */
    @Test(timeout = 60000)
    public void test_403_getOnSearchReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/ocds/orgDepartment/search?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/orgGroup/all
    */
    @Test(timeout = 60000)
    public void test_404_getOnAllReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/orgGroup/all?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/orgGroup/all
    */
    @Test(timeout = 60000)
    public void test_405_getOnAllReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ocds/orgGroup/all?" + 
                    "password=_EM_31178_XYZ_&" + 
                    "username=rHUcHvSt")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/orgGroup/search
    */
    @Test(timeout = 60000)
    public void test_406_getOnSearchReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/orgGroup/search?" + 
                    "pageNumber=657&" + 
                    "pageSize=138&" + 
                    "EMextraParam123=42&" + 
                    "skip=OAge0spu0i7I&" + 
                    "password=Wr2Ly9G")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/orgGroup/search
    */
    @Test(timeout = 60000)
    public void test_407_getOnSearchReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ocds/orgGroup/search?" + 
                    "pageNumber=303&" + 
                    "pageSize=690")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/orgGroup/search
    */
    @Test(timeout = 60000)
    public void test_408_getOnSearchReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/orgGroup/search?" + 
                    "pageNumber=194&" + 
                    "class=gsUpCwaL2CdB4&" + 
                    "username=be_a")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/orgGroup/search
    */
    @Test(timeout = 60000)
    public void test_409_getOnSearchReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/orgGroup/search?" + 
                    "pageNumber=81&" + 
                    "pageSize=731&" + 
                    "skip=tyM1rtgfAMxWzjg&" + 
                    "class=le&" + 
                    "textSearchRequest=_EM_56336_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/orgGroup/search
    */
    @Test(timeout = 60000)
    public void test_410_getOnSearchReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/orgGroup/search?" + 
                    "pageSize=269&" + 
                    "skip=EWWLPN&" + 
                    "password=kAF5&" + 
                    "username=ykazJPHNLlxlH")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/organization/all
    */
    @Test(timeout = 60000)
    public void test_411_getOnAllReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_30222_XYZ_")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/organization/all?" + 
                    "EMextraParam123=42&" + 
                    "password=0Rdk&" + 
                    "pageNumber=406&" + 
                    "pageSize=947&" + 
                    "skip=z8ao&" + 
                    "text=_EM_32335_XYZ_&" + 
                    "class=5BplfHxWY3fh&" + 
                    "textSearchRequest=_EM_32336_XYZ_&" + 
                    "username=yI0hYdnd")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/organization/all
    */
    @Test(timeout = 60000)
    public void test_412_getOnAllReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/organization/all?" + 
                    "password=bPAh&" + 
                    "skip=_EM_68469_XYZ_&" + 
                    "text=UCYWpZE")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/organization/all
    */
    @Test(timeout = 60000)
    public void test_413_getOnAllReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/ocds/organization/all?" + 
                    "skip=_EM_32222_XYZ_&" + 
                    "text=xLKw&" + 
                    "class=_EM_33199_XYZ_&" + 
                    "textSearchRequest=_EM_33198_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/organization/all
    */
    @Test(timeout = 60000)
    public void test_414_getOnOrganizationAllWithQueryParamReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/organization/all?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/organization/ids
    */
    @Test(timeout = 60000)
    public void test_415_getOnIdsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_26439_XYZ_")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/organization/ids?" + 
                    "id=_EM_44458_XYZ_&" + 
                    "username=6cQ7rRr")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/organization/ids
    */
    @Test(timeout = 60000)
    public void test_416_getOnIdsReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ocds/organization/ids?" + 
                    "id=&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/organization/ids
    */
    @Test(timeout = 60000)
    public void test_417_getOnIdsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/organization/ids?" + 
                    "id=_EM_66627_XYZ_&id=_EM_66628_XYZ_&id=_EM_66629_XYZ_&" + 
                    "organizationIdWrapper=6DXmbg8ID2UT3xp&" + 
                    "username=Lfmr_hOtGDryz")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/organization/ids
    */
    @Test(timeout = 60000)
    public void test_418_getOnIdsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/organization/ids?" + 
                    "id=BNZKxbuQXq&id=ZeMyIuH&id=haYdsF4bGGB2&id=kOr2kv_sfLxuZTod&id=_EM_46713_XYZ_&" + 
                    "EMextraParam123=xApgGMi_7EvJ&" + 
                    "class=oYtxae1nOGW")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/package/all
    */
    @Test(timeout = 60000)
    public void test_419_getOnPackageAllWithQueryParamsEmptySkipReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/package/all?" + 
                    "notProcuringEntityId=&" + 
                    "supplierId=_EM_51643_XYZ_&supplierId=780HyzdRsSF&supplierId=cXZ3y&supplierId=p&supplierId=eI1BL7u&" + 
                    "bidSelectionMethod=_yQlmYoive_p&bidSelectionMethod=VoxI8aD4N2x8pJM&bidSelectionMethod=RcNhjSf7&" + 
                    "notBidSelectionMethod=FLKI7P&notBidSelectionMethod=_EM_51644_XYZ_&notBidSelectionMethod=k4GvlIKDNwA_5o3&" + 
                    "contrMethod=&" + 
                    "procurementMethod=_EM_51645_XYZ_&" + 
                    "procuringEntityGroupId=983&procuringEntityGroupId=210&procuringEntityGroupId=684&procuringEntityGroupId=517&" + 
                    "month=&" + 
                    "pageNumber=834&" + 
                    "pageSize=186&" + 
                    "maxTenderValue=0.4939471681706178&" + 
                    "minAwardValue=0.09222669111012449&" + 
                    "maxAwardValue=0.5949556670483146&" + 
                    "flagged=false&" + 
                    "EMextraParam123=42&" + 
                    "skip=&" + 
                    "class=_EM_51647_XYZ_&" + 
                    "username=_EM_51649_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/package/all
    */
    @Test(timeout = 60000)
    public void test_420_getOnPackageAllWithQueryParamsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/package/all?" + 
                    "supplierId=_EM_75373_XYZ_&supplierId=B7r1T9&" + 
                    "planningLoc=2MBc&planningLoc=_EM_75381_XYZ_&planningLoc=JUXdZhmujAK5r4&planningLoc=Kizn&planningLoc=dBNwmgSBVMCKotVW&" + 
                    "procurementMethod=4sH2LT1HPmJh&procurementMethod=_EM_75384_XYZ_&procurementMethod=WxCT0kZ&" + 
                    "procuringEntityDepartmentId=833838359&" + 
                    "pageNumber=588&" + 
                    "minTenderValue=0.24190888162557378&" + 
                    "minAwardValue=0.9617553924391584&" + 
                    "maxAwardValue=0.7628855918004311&" + 
                    "electronicSubmission=false&" + 
                    "monthly=false&" + 
                    "username=7eofCHVyM3Hg")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/procurementMethod/all
    */
    @Test(timeout = 60000)
    public void test_421_getOnAllReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/procurementMethod/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/procurementMethod/all
    */
    @Test(timeout = 60000)
    public void test_422_getOnAllReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ocds/procurementMethod/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/bidSelectionMethod/all
    */
    @Test(timeout = 60000)
    public void test_423_getOnBidSelectionMethodAllWithQueryParamsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_9485_XYZ_")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/bidSelectionMethod/all?" + 
                    "EMextraParam123=_EM_9484_XYZ_&" + 
                    "password=NJ6Zq3J06&" + 
                    "username=itfYT")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/bidSelectionMethod/all
    */
    @Test(timeout = 60000)
    public void test_424_getOnAllReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/bidSelectionMethod/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/location/all
    */
    @Test(timeout = 60000)
    public void test_425_getOnLocationAllWithQueryParamsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/location/all?" + 
                    "EMextraParam123=qW3rPXhCpkEAuz&" + 
                    "password=_EM_42786_XYZ_&" + 
                    "username=WztO873NYmYWx")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/location/all
    */
    @Test(timeout = 60000)
    public void test_426_getOnAllReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_26320_XYZ_")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/location/all?username=_EM_26321_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/location/all
    */
    @Test(timeout = 60000)
    public void test_427_getOnAllReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_18262_XYZ_")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/location/all?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/orgGroup/all
    */
    @Test(timeout = 60000)
    public void test_428_getOnAllReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/orgGroup/all?EMextraParam123=_EM_18269_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/contrMethod/all
    */
    @Test(timeout = 60000)
    public void test_429_getOnContrMethodAllWithQueryParamsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_28465_XYZ_")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/contrMethod/all?" + 
                    "password=_EM_28466_XYZ_&" + 
                    "username=K3Qm15NzDD5O")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/location/search
    */
    @Test(timeout = 60000)
    public void test_430_getOnSearchReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/location/search?" + 
                    "pageSize=660&" + 
                    "password=_EM_62871_XYZ_&" + 
                    "textSearchRequest=_EM_62872_XYZ_&" + 
                    "username=_EM_62873_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/location/search
    */
    @Test(timeout = 60000)
    public void test_431_getOnSearchReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/location/search?" + 
                    "pageNumber=400&" + 
                    "pageSize=832&" + 
                    "skip=2neCkaulay&" + 
                    "class=_EM_76039_XYZ_&" + 
                    "username=lt_y_pR7dzW")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i019/crosstab
    */
    @Test(timeout = 60000)
    public void test_432_getOnCrosstabReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i019/crosstab?" + 
                    "supplierId=_EM_66221_XYZ_&" + 
                    "tenderLoc=_EM_66229_XYZ_&tenderLoc=_EM_66230_XYZ_&" + 
                    "procuringEntityCityId=_EM_66231_XYZ_&procuringEntityCityId=2iqaB&" + 
                    "pageNumber=917&" + 
                    "pageSize=965&" + 
                    "minTenderValue=0.07810134433331217&" + 
                    "maxTenderValue=0.1632155728361676&" + 
                    "minAwardValue=0.19914342056248402&" + 
                    "flagged=true&" + 
                    "skip=5DePRX53h&" + 
                    "password=_EM_66232_XYZ_&" + 
                    "class=5&" + 
                    "yearFilterPagingRequest=XXcu&" + 
                    "username=3uKns2jL9rh")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/flags/i180/crosstab
    */
    @Test(timeout = 60000)
    public void test_433_getOnCrosstabReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/flags/i180/crosstab?" + 
                    "procuringEntityId=AjdaXfwiqY&procuringEntityId=&" + 
                    "supplierId=0H25DGwmvdbkf&supplierId=jfjsSnjS3XLLZU&supplierId=ZZFpBHOOmTi91&" + 
                    "bidSelectionMethod=FIKCsEDe&" + 
                    "notBidSelectionMethod=x&notBidSelectionMethod=_EM_96672_XYZ_&notBidSelectionMethod=_EM_96673_XYZ_&notBidSelectionMethod=_EM_96674_XYZ_&notBidSelectionMethod=_EM_96675_XYZ_&" + 
                    "procuringEntityGroupId=580&procuringEntityGroupId=1725816845&procuringEntityGroupId=535&procuringEntityGroupId=550&procuringEntityGroupId=933&" + 
                    "pageNumber=570&" + 
                    "minTenderValue=0.6168414613664674&" + 
                    "maxTenderValue=0.9996135169371858&" + 
                    "maxAwardValue=0.5241342948554756&" + 
                    "monthly=true&" + 
                    "skip=HTTbDV8&" + 
                    "password=uiGybsfRQF2M&" + 
                    "class=0Lkp20inz3&" + 
                    "yearFilterPagingRequest=uTIym&" + 
                    "username=rjXfeWC5KZESQ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/city/search
    */
    @Test(timeout = 60000)
    public void test_434_getOnSearchReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ocds/city/search?" + 
                    "pageNumber=282&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/bidType/all
    */
    @Test(timeout = 60000)
    public void test_435_getOnBidTypeAllWithQueryParamsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/bidType/all?" + 
                    "EMextraParam123=_EM_9486_XYZ_&" + 
                    "password=_EM_40169_XYZ_&" + 
                    "username=j3r1HmH_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/city/search
    */
    @Test(timeout = 60000)
    public void test_436_getOnCitySearchWithQueryParamReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/city/search?class=nfOrXqhNtSwjC")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/procurementMethod/all
    */
    @Test(timeout = 60000)
    public void test_437_getOnProcurementMethodAllWithQueryParamsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/procurementMethod/all?" + 
                    "EMextraParam123=_EM_9513_XYZ_&" + 
                    "password=_EM_32334_XYZ_&" + 
                    "username=e")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/procurementMethod/all
    */
    @Test(timeout = 60000)
    public void test_438_getOnAllReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/procurementMethod/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/contrMethod/all
    */
    @Test(timeout = 60000)
    public void test_439_getOnAllReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/contrMethod/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/bidType/all
    */
    @Test(timeout = 60000)
    public void test_440_getOnAllReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/bidType/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/city/all
    */
    @Test(timeout = 60000)
    public void test_441_getOnAllReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/city/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/orgDepartment/all
    */
    @Test(timeout = 60000)
    public void test_442_getOnAllReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/orgDepartment/all?EMextraParam123=_EM_18266_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/organization/ids
    */
    @Test(timeout = 60000)
    public void test_443_getOnIdsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "byeXeZdaBnKVOBHj")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/organization/ids?" + 
                    "id=_x_4GGHoUy04xIZU&id=nshuc1D26ctETO0y&id=t4If6BW46&" + 
                    "password=Pk2jXpiC")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/city/all
    */
    @Test(timeout = 60000)
    public void test_444_getOnCityAllWithQueryParamEmptyUsernameReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/city/all?username=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/orgGroup/all
    */
    @Test(timeout = 60000)
    public void test_445_getOnAllReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "wS")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/orgGroup/all?" + 
                    "EMextraParam123=_EM_28894_XYZ_&" + 
                    "username=_EM_28896_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/city/all
    */
    @Test(timeout = 60000)
    public void test_446_getOnCityAllWithQueryParamsEmptyPasswordReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/city/all?" + 
                    "EMextraParam123=42&" + 
                    "password=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/orgDepartment/all
    */
    @Test(timeout = 60000)
    public void test_447_getOnOrgDepartmentAllWithQueryParamsReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/orgDepartment/all?" + 
                    "password=_EM_30191_XYZ_&" + 
                    "username=d5b20bgP")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/orgGroup/all
    */
    @Test(timeout = 60000)
    public void test_448_getOnOrgGroupAllWithQueryParamsEmptyPasswordReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/orgGroup/all?" + 
                    "password=&" + 
                    "username=R3f2WVwy")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/city/search
    */
    @Test(timeout = 60000)
    public void test_449_postOnSearchReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/city/search?" + 
                    "pageSize=59&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/city/search
    */
    @Test(timeout = 60000)
    public void test_450_postOnCitySearchWithQueryParamReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/city/search?pageNumber=490")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/city/search
    */
    @Test(timeout = 60000)
    public void test_451_postOnSearchReturns200() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/api/ocds/city/search?" + 
                    "pageNumber=705&" + 
                    "pageSize=193&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/location/search
    */
    @Test(timeout = 60000)
    public void test_452_postOnSearchReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/location/search?" + 
                    "pageNumber=257&" + 
                    "pageSize=849&" + 
                    "password=B_LU&" + 
                    "class=_EM_76714_XYZ_&" + 
                    "username=gpIuMGi")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/location/search
    */
    @Test(timeout = 60000)
    public void test_453_postOnSearchReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/location/search?" + 
                    "pageNumber=124&" + 
                    "EMextraParam123=_EM_18264_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/orgGroup/search
    */
    @Test(timeout = 60000)
    public void test_454_postOnSearchReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/orgGroup/search?" + 
                    "pageNumber=886&" + 
                    "pageSize=846&" + 
                    "skip=_EM_92070_XYZ_&" + 
                    "class=Krlr6dInS7&" + 
                    "textSearchRequest=FCLvInbxj5t&" + 
                    "username=504")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/orgGroup/search
    */
    @Test(timeout = 60000)
    public void test_455_postOnSearchReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/orgGroup/search?" + 
                    "pageNumber=583&" + 
                    "pageSize=169&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/location/all
    */
    @Test(timeout = 60000)
    public void test_456_postOnAllReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/location/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/location/all
    */
    @Test(timeout = 60000)
    public void test_457_postOnLocationAllWithQueryParamReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/location/all?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/location/search
    */
    @Test(timeout = 60000)
    public void test_458_postOnLocationSearchWithQueryParamsEmptySkipAndEmptyClassReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/location/search?" + 
                    "pageSize=464&" + 
                    "skip=&" + 
                    "class=&" + 
                    "textSearchRequest=N3hX1FPfMwaC")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/package/all
    */
    @Test(timeout = 60000)
    public void test_459_postOnAllReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/package/all?" + 
                    "bidTypeId=6QDgQtVLmc&bidTypeId=6m9csWMQ&" + 
                    "notBidTypeId=nubo5&" + 
                    "procuringEntityId=DetStjMdcT&procuringEntityId=VrMJ8ZPxUS5R2Xvf&" + 
                    "supplierId=puPJiQVFgr&supplierId=1Rzvn_UB1&supplierId=l&supplierId=NV64foLgu&" + 
                    "bidSelectionMethod=&" + 
                    "procurementMethod=&" + 
                    "procuringEntityCityId=lSjZPZttQQ&procuringEntityCityId=9PM3bo&procuringEntityCityId=v&procuringEntityCityId=_EM_96081_XYZ_&" + 
                    "procuringEntityDepartmentId=-65485&procuringEntityDepartmentId=327&procuringEntityDepartmentId=-1773&procuringEntityDepartmentId=204&procuringEntityDepartmentId=-1528&" + 
                    "procuringEntityGroupId=911&procuringEntityGroupId=861&procuringEntityGroupId=470&procuringEntityGroupId=869&" + 
                    "maxTenderValue=-65924.61795313185&" + 
                    "maxAwardValue=0.5608646357048289&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "yearFilterPagingRequest=Uizb")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/package/all
    */
    @Test(timeout = 60000)
    public void test_460_postOnAllReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/package/all?" + 
                    "notProcuringEntityId=&" + 
                    "supplierId=43khJ&supplierId=_EM_13960_XYZ_&supplierId=5vfY&supplierId=_EM_13961_XYZ_&" + 
                    "contrMethod=&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=DLY8FD&procurementMethod=&" + 
                    "pageNumber=754&" + 
                    "pageSize=637&" + 
                    "minTenderValue=0.7459599291850666&" + 
                    "minAwardValue=0.07549592446937958&" + 
                    "electronicSubmission=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/package/all
    */
    @Test(timeout = 60000)
    public void test_461_postOnPackageAllWithQueryParamsReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/package/all?" + 
                    "notProcuringEntityId=&" + 
                    "planningLoc=BUjuXvqMThHhhI&planningLoc=_EM_89638_XYZ_&planningLoc=kDQuReehgNkJDp&" + 
                    "procurementMethod=&" + 
                    "procuringEntityDepartmentId=809&procuringEntityDepartmentId=37&procuringEntityDepartmentId=127&procuringEntityDepartmentId=169&procuringEntityDepartmentId=268&" + 
                    "procuringEntityGroupId=837&procuringEntityGroupId=58&procuringEntityGroupId=714&procuringEntityGroupId=769&procuringEntityGroupId=70&" + 
                    "pageNumber=930&" + 
                    "pageSize=814&" + 
                    "minTenderValue=0.8966436843290454&" + 
                    "maxTenderValue=0.3543573266031732&" + 
                    "maxAwardValue=0.22136101904918348&" + 
                    "electronicSubmission=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/orgDepartment/search
    */
    @Test(timeout = 60000)
    public void test_462_postOnSearchReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_37868_XYZ_")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/orgDepartment/search?" + 
                    "pageSize=694&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i077/stats
    */
    @Test(timeout = 60000)
    public void test_463_postOnI077StatsWithQueryParamsMonthlyReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i077/stats?" + 
                    "notProcuringEntityId=bv7vj&" + 
                    "supplierId=_EM_39676_XYZ_&supplierId=71XNWQuFu5&supplierId=z8eW&supplierId=_EM_39677_XYZ_&" + 
                    "notBidSelectionMethod=Nra6rpcYWgX&notBidSelectionMethod=RE2Q9oH&notBidSelectionMethod=_EM_39678_XYZ_&notBidSelectionMethod=&notBidSelectionMethod=UQcyho&" + 
                    "planningLoc=&" + 
                    "tenderLoc=2mjnUYWcbj&tenderLoc=KjgXiwyrc&tenderLoc=R32q_yU7W&tenderLoc=OlZ2ta&tenderLoc=qVmt3&" + 
                    "procuringEntityGroupId=736&procuringEntityGroupId=401&procuringEntityGroupId=813&procuringEntityGroupId=278&procuringEntityGroupId=316&" + 
                    "pageNumber=105&" + 
                    "pageSize=677&" + 
                    "minTenderValue=0.596597291262882&" + 
                    "minAwardValue=0.9442377705451532&" + 
                    "electronicSubmission=false&" + 
                    "monthly=true&" + 
                    "EMextraParam123=42&" + 
                    "skip=_EM_39681_XYZ_&" + 
                    "password=ocIM5bwcW&" + 
                    "username=_EM_39684_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/orgDepartment/search
    */
    @Test(timeout = 60000)
    public void test_464_postOnSearchReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/orgDepartment/search?pageNumber=912")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i077/crosstab
    */
    @Test(timeout = 60000)
    public void test_465_postOnI077CrosstabWithQueryParamsElectronicSubmissionReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i077/crosstab?" + 
                    "bidTypeId=COLLUSION&" + 
                    "procuringEntityId=jK8ExNCFuYez&procuringEntityId=QbELjv&" + 
                    "bidSelectionMethod=_EM_13233_XYZ_&bidSelectionMethod=_EM_13234_XYZ_&" + 
                    "planningLoc=_EM_13239_XYZ_&planningLoc=oSo7u5aZjs&planningLoc=_EM_13240_XYZ_&planningLoc=NLRmQM&" + 
                    "tenderLoc=_EM_13241_XYZ_&tenderLoc=_EM_13242_XYZ_&tenderLoc=JOMszIJAsCa&tenderLoc=_EM_13243_XYZ_&tenderLoc=_EM_13244_XYZ_&" + 
                    "procuringEntityCityId=_EM_13247_XYZ_&procuringEntityCityId=5aNH9VTNDNZZEmsh&procuringEntityCityId=_EM_13248_XYZ_&" + 
                    "procuringEntityDepartmentId=948&procuringEntityDepartmentId=199&procuringEntityDepartmentId=292&procuringEntityDepartmentId=416&" + 
                    "procuringEntityGroupId=327&procuringEntityGroupId=417&procuringEntityGroupId=177&procuringEntityGroupId=983&" + 
                    "minTenderValue=0.9966949453013133&" + 
                    "maxTenderValue=0.3081756597462951&" + 
                    "minAwardValue=0.7620409029381815&" + 
                    "maxAwardValue=0.2109934342347053&" + 
                    "electronicSubmission=true&" + 
                    "monthly=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/orgDepartment/all
    */
    @Test(timeout = 60000)
    public void test_466_postOnOrgDepartmentAllReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/orgDepartment/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/orgDepartment/all
    */
    @Test(timeout = 60000)
    public void test_467_postOnOrgDepartmentAllWithQueryParamsReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/orgDepartment/all?" + 
                    "EMextraParam123=_EM_29052_XYZ_&" + 
                    "password=UcbqejxOvBBi&" + 
                    "username=_EM_29053_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/orgDepartment/all
    */
    @Test(timeout = 60000)
    public void test_468_postOnAllReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_19794_XYZ_")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/orgDepartment/all?EMextraParam123=_EM_19793_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i171/releases
    */
    @Test(timeout = 60000)
    public void test_469_postOnI171ReleasesWithQueryParamsElectronicSubmissionAndFlagged() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i171/releases?" + 
                    "bidTypeId=eVsW1LukHh&" + 
                    "supplierId=h156ELX&supplierId=&supplierId=rQVkoTaH2mom&supplierId=SMCTgw2kE&" + 
                    "contrMethod=&" + 
                    "planningLoc=GrhmlRvTDzGdYn&planningLoc=FmK32xgOTGVBN&planningLoc=pbjjU5we6TYC17Sy&planningLoc=YnTOAcnktH&planningLoc=tqNp4jde&" + 
                    "tenderLoc=fXvZuUSdTn9Edx&tenderLoc=214pa5v8jT7&tenderLoc=LQzvDlD5fnt&tenderLoc=rIkA5Rz67zl7I&" + 
                    "procurementMethod=vgJ&" + 
                    "procuringEntityGroupId=620&procuringEntityGroupId=-1138751414&procuringEntityGroupId=572&" + 
                    "pageNumber=560&" + 
                    "minTenderValue=0.16287539425620123&" + 
                    "maxTenderValue=0.30540945239035455&" + 
                    "minAwardValue=0.7997609000180683&" + 
                    "maxAwardValue=3.876818643008262E-4&" + 
                    "electronicSubmission=true&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "yearFilterPagingRequest=TUjJ_m")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i085/stats
    */
    @Test(timeout = 60000)
    public void test_470_postOnStatsReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i085/stats?" + 
                    "bidTypeId=&" + 
                    "supplierId=wTqrHY&supplierId=S0gP&supplierId=uAbfmADK1&supplierId=ijkhlu7OR4wj&supplierId=9hFmcQVAFCiiF&" + 
                    "bidSelectionMethod=&" + 
                    "notBidSelectionMethod=_EM_26763_XYZ_&notBidSelectionMethod=oi&notBidSelectionMethod=_EM_26764_XYZ_&" + 
                    "contrMethod=&" + 
                    "planningLoc=90SHI8pN2n&planningLoc=_EM_26765_XYZ_&" + 
                    "tenderLoc=AJda914gCe&tenderLoc=0ug5RLOSAofDaa2&tenderLoc=6Tm&tenderLoc=_EM_26766_XYZ_&" + 
                    "procurementMethod=_EM_26767_XYZ_&procurementMethod=OfjrziYRca&procurementMethod=_EM_26768_XYZ_&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityDepartmentId=-1997383638&procuringEntityDepartmentId=572&" + 
                    "procuringEntityGroupId=446&procuringEntityGroupId=973&" + 
                    "pageNumber=774&" + 
                    "maxTenderValue=0.04619526005434771&" + 
                    "maxAwardValue=0.18002031073439495&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "password=_EM_26769_XYZ_&" + 
                    "class=_EM_26770_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i180/stats
    */
    @Test(timeout = 60000)
    public void test_471_postOnI180StatsWithQueryParamsElectronicSubmissionAndFlaggedReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i180/stats?" + 
                    "bidTypeId=&" + 
                    "notBidTypeId=&" + 
                    "procuringEntityId=joGmS&" + 
                    "supplierId=dF3oUI&" + 
                    "bidSelectionMethod=_EM_78046_XYZ_&bidSelectionMethod=_PXb&bidSelectionMethod=aW&" + 
                    "notBidSelectionMethod=_EM_78047_XYZ_&notBidSelectionMethod=_EM_78048_XYZ_&" + 
                    "planningLoc=_EM_78052_XYZ_&" + 
                    "procurementMethod=&procurementMethod=_EM_78054_XYZ_&procurementMethod=&" + 
                    "procuringEntityDepartmentId=&" + 
                    "pageSize=375&" + 
                    "minTenderValue=0.0021468169903520185&" + 
                    "maxAwardValue=0.9070130706157935&" + 
                    "electronicSubmission=true&" + 
                    "flagged=true&" + 
                    "monthly=false&" + 
                    "username=03quS_YpKPOMLRM")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i180/stats
    */
    @Test(timeout = 60000)
    public void test_472_postOnI180StatsWithQueryParamsEmptyYearFilterPagingRequestReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i180/stats?" + 
                    "notBidTypeId=&" + 
                    "bidSelectionMethod=mB0qVOV9SNpb&" + 
                    "notBidSelectionMethod=_EM_62448_XYZ_&notBidSelectionMethod=_EM_62449_XYZ_&notBidSelectionMethod=k&notBidSelectionMethod=_EM_62450_XYZ_&notBidSelectionMethod=5pcn7a0nRBbCvF&" + 
                    "planningLoc=_J&planningLoc=_EM_62452_XYZ_&" + 
                    "tenderLoc=_EM_62453_XYZ_&" + 
                    "month=&" + 
                    "pageSize=627&" + 
                    "minTenderValue=0.8709723987996112&" + 
                    "maxTenderValue=0.4507374766855907&" + 
                    "minAwardValue=0.5229363424452143&" + 
                    "flagged=false&" + 
                    "yearFilterPagingRequest=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/orgDepartment/search
    */
    @Test(timeout = 60000)
    public void test_473_postOnSearchReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/orgDepartment/search?" + 
                    "pageSize=543&" + 
                    "password=kzYoNu&" + 
                    "class=1pw8OLRfM7Hme&" + 
                    "textSearchRequest=lbhm5qe&" + 
                    "username=_EM_36528_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i019/stats
    */
    @Test(timeout = 60000)
    public void test_474_postOnStatsReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i019/stats?" + 
                    "bidTypeId=jOoJigiGTKI7G&" + 
                    "procuringEntityId=&" + 
                    "notProcuringEntityId=ZJwhTC&notProcuringEntityId=lgVIzw&notProcuringEntityId=62p5d&notProcuringEntityId=TNfC&notProcuringEntityId=m7ZI3K&" + 
                    "planningLoc=_EM_79439_XYZ_&planningLoc=oU6bMeErhy&planningLoc=jFAk4wyUAB9gnfg2&planningLoc=5Jr_m312BkMMnc&planningLoc=susgNF_Ht&" + 
                    "tenderLoc=_EM_79440_XYZ_&" + 
                    "procuringEntityCityId=_EM_79441_XYZ_&procuringEntityCityId=4K&" + 
                    "procuringEntityDepartmentId=-858823363&procuringEntityDepartmentId=772&procuringEntityDepartmentId=498&" + 
                    "procuringEntityGroupId=529&procuringEntityGroupId=467&procuringEntityGroupId=344&procuringEntityGroupId=66&" + 
                    "month=&" + 
                    "pageNumber=545&" + 
                    "minTenderValue=0.8768264076757336&" + 
                    "maxTenderValue=0.6517858285706488&" + 
                    "maxAwardValue=0.3228260941913996&" + 
                    "skip=G&" + 
                    "password=E&" + 
                    "class=r3nAeTHWn77Y&" + 
                    "yearFilterPagingRequest=zCEv5VE8wf&" + 
                    "username=CZL3ZFzTSaFO")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i019/stats
    */
    @Test(timeout = 60000)
    public void test_475_postOnStatsReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i019/stats?" + 
                    "supplierId=W49&supplierId=wtM_3&supplierId=_EM_21631_XYZ_&" + 
                    "notBidSelectionMethod=_EM_21634_XYZ_&notBidSelectionMethod=_EM_21635_XYZ_&notBidSelectionMethod=_EM_21636_XYZ_&notBidSelectionMethod=_EM_21637_XYZ_&notBidSelectionMethod=GwMeqCBldD&" + 
                    "procuringEntityCityId=_EM_21645_XYZ_&procuringEntityCityId=DMgHyFPN3Jra&procuringEntityCityId=RpSxbjpHKxFNQlr&" + 
                    "procuringEntityDepartmentId=1137348962&procuringEntityDepartmentId=445&procuringEntityDepartmentId=271&procuringEntityDepartmentId=827&" + 
                    "procuringEntityGroupId=676&procuringEntityGroupId=858036521&procuringEntityGroupId=929&procuringEntityGroupId=197&" + 
                    "month=&" + 
                    "pageNumber=124&" + 
                    "pageSize=432&" + 
                    "minTenderValue=0.39043837258734215&" + 
                    "maxTenderValue=0.5983091573398163&" + 
                    "minAwardValue=0.922325915346489&" + 
                    "maxAwardValue=0.09056745174697822&" + 
                    "electronicSubmission=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i019/stats
    */
    @Test(timeout = 60000)
    public void test_476_postOnStatsReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i019/stats?" + 
                    "supplierId=s8srAPducq&supplierId=vB19&" + 
                    "notBidSelectionMethod=&" + 
                    "procurementMethod=DpBZeNrjonPt&procurementMethod=OgArUILI26gjJTL&procurementMethod=GMF7m1UcK&procurementMethod=v76u&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityGroupId=&" + 
                    "month=&" + 
                    "pageSize=344&" + 
                    "minTenderValue=0.462909464095806&" + 
                    "maxTenderValue=0.9257516141660683&" + 
                    "minAwardValue=0.10986877552903496&" + 
                    "maxAwardValue=0.18538313555715635&" + 
                    "electronicSubmission=true&" + 
                    "password=3w_&" + 
                    "yearFilterPagingRequest=LOe8EIV2fN&" + 
                    "username=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i019/stats
    */
    @Test(timeout = 60000)
    public void test_477_postOnStatsReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i019/stats?" + 
                    "notBidSelectionMethod=IAC&notBidSelectionMethod=_EM_80788_XYZ_&" + 
                    "planningLoc=_EM_80791_XYZ_&planningLoc=_EM_80792_XYZ_&planningLoc=_EM_80793_XYZ_&planningLoc=_EM_80794_XYZ_&" + 
                    "tenderLoc=crWquVrrZcpD_i&tenderLoc=1Sc5&tenderLoc=_EM_80795_XYZ_&" + 
                    "month=&" + 
                    "pageNumber=341&" + 
                    "pageSize=759&" + 
                    "maxTenderValue=0.09694231806689435&" + 
                    "minAwardValue=0.5231494071336091")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i085/crosstab
    */
    @Test(timeout = 60000)
    public void test_478_postOnCrosstabReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i085/crosstab?" + 
                    "tenderLoc=_EM_34440_XYZ_&" + 
                    "procurementMethod=BQzl5bYYJlV&" + 
                    "procuringEntityGroupId=735&procuringEntityGroupId=590&" + 
                    "maxTenderValue=0.11040705085468572&" + 
                    "minAwardValue=0.2991860356210505&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "skip=_EM_34442_XYZ_&" + 
                    "password=_EM_34443_XYZ_&" + 
                    "class=HCh1e&" + 
                    "yearFilterPagingRequest=xLlwkf2ZJezW&" + 
                    "username=OWaeE08u")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i085/crosstab
    */
    @Test(timeout = 60000)
    public void test_479_postOnCrosstabReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i085/crosstab?" + 
                    "bidTypeId=0DTUafZqCpDoGpq&" + 
                    "notBidTypeId=5vaHocR&" + 
                    "tenderLoc=_EM_34440_XYZ_&" + 
                    "procurementMethod=BQzl5bYYJlV&" + 
                    "procuringEntityGroupId=735&procuringEntityGroupId=590&" + 
                    "minTenderValue=0.8&" + 
                    "minAwardValue=0.2991860356210505&" + 
                    "electronicSubmission=true&" + 
                    "monthly=false&" + 
                    "skip=IoVcrXEl8&" + 
                    "password=_EM_34443_XYZ_&" + 
                    "yearFilterPagingRequest=xLlwkf2ZJezW")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i085/crosstab
    */
    @Test(timeout = 60000)
    public void test_480_postOnCrosstabReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i085/crosstab?" + 
                    "bidTypeId=&" + 
                    "notBidTypeId=&" + 
                    "notProcuringEntityId=8teUxdUH&" + 
                    "supplierId=&" + 
                    "planningLoc=_EM_34431_XYZ_&planningLoc=i9&planningLoc=_EM_34432_XYZ_&planningLoc=_EM_34433_XYZ_&planningLoc=&" + 
                    "procuringEntityDepartmentId=734&" + 
                    "pageNumber=312&" + 
                    "minTenderValue=0.8218014827382086&" + 
                    "electronicSubmission=true&" + 
                    "monthly=false&" + 
                    "EMextraParam123=_EM_10938_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i085/crosstab
    */
    @Test(timeout = 60000)
    public void test_481_postOnI085CrosstabWithQueryParamsReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i085/crosstab?" + 
                    "bidTypeId=&" + 
                    "notBidTypeId=ROo2id5QwkUR3&" + 
                    "procuringEntityId=&" + 
                    "supplierId=&" + 
                    "notBidSelectionMethod=_EM_34429_XYZ_&" + 
                    "minTenderValue=0.822&" + 
                    "maxTenderValue=0.11040705085468572&" + 
                    "minAwardValue=0.2991860356210505&" + 
                    "electronicSubmission=false&" + 
                    "monthly=false&" + 
                    "skip=Mg2e&" + 
                    "class=7R_N&" + 
                    "yearFilterPagingRequest=QKOdsrEN0wJ8d7G")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i003/crosstab
    */
    @Test(timeout = 60000)
    public void test_482_postOnI003CrosstabWithQueryParamsElectronicSubmissionAndMonthly() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i003/crosstab?" + 
                    "procuringEntityId=&" + 
                    "supplierId=x_enrNFJJHC0VfOu&" + 
                    "notBidSelectionMethod=&notBidSelectionMethod=AMnHLmgKbk0f7&notBidSelectionMethod=_EM_79408_XYZ_&" + 
                    "planningLoc=_EM_79412_XYZ_&planningLoc=_EM_79413_XYZ_&planningLoc=jFAk4wyUAB9gnfg2&planningLoc=5Jr_m312BkMMnc&planningLoc=susgNF_Ht&" + 
                    "tenderLoc=_EM_79414_XYZ_&" + 
                    "procurementMethod=jJpD4RKQEcQ&procurementMethod=p&" + 
                    "month=&" + 
                    "pageNumber=545&" + 
                    "maxTenderValue=0.6517858285706488&" + 
                    "minAwardValue=0.8163714528698774&" + 
                    "maxAwardValue=0.3228260941913996&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "yearFilterPagingRequest=Y")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i003/crosstab
    */
    @Test(timeout = 60000)
    public void test_483_postOnCrosstabReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i003/crosstab?" + 
                    "bidTypeId=EAm8ngjUSGHeT&bidTypeId=&" + 
                    "notBidTypeId=LqXtC&notBidTypeId=fvXgJ&notBidTypeId=&notBidTypeId=0zy&" + 
                    "procuringEntityId=9NwxhbkaZo&procuringEntityId=vDCkb&procuringEntityId=Eyg32z&procuringEntityId=c3O&procuringEntityId=&" + 
                    "bidSelectionMethod=Jg9jKEfcekgJs29C&" + 
                    "notBidSelectionMethod=4s&notBidSelectionMethod=75PMgcg&notBidSelectionMethod=sMpphG&notBidSelectionMethod=jCE&notBidSelectionMethod=HhLf&" + 
                    "procuringEntityDepartmentId=&" + 
                    "pageSize=810&" + 
                    "minTenderValue=0.3713215702850863&" + 
                    "maxAwardValue=0.27033898348949403&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "skip=FUNBW&" + 
                    "password=NVbxeW&" + 
                    "class=NTkpXKNRQqN8DG&" + 
                    "yearFilterPagingRequest=nuYR_Y&" + 
                    "username=IjPD10")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i003/crosstab
    */
    @Test(timeout = 60000)
    public void test_484_postOnCrosstabReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i003/crosstab?" + 
                    "bidTypeId=EAm8ngjUSGHeT&bidTypeId=&" + 
                    "notBidTypeId=LqXtC&notBidTypeId=fvXgJ&notBidTypeId=&notBidTypeId=0zy&" + 
                    "procuringEntityId=9NwxhbkaZo&procuringEntityId=vDCkb&procuringEntityId=Eyg32z&procuringEntityId=c3O&procuringEntityId=&" + 
                    "bidSelectionMethod=Jg9jKEfcekgJs29C&" + 
                    "notBidSelectionMethod=4s&notBidSelectionMethod=75PMgcg&notBidSelectionMethod=sMpphG&notBidSelectionMethod=jCE&notBidSelectionMethod=HhLf&" + 
                    "procuringEntityDepartmentId=&" + 
                    "pageSize=810&" + 
                    "minTenderValue=0.3713215702850863&" + 
                    "maxAwardValue=0.27033898348949403&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "EMextraParam123=42&" + 
                    "skip=FUNBW")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i180/releases
    */
    @Test(timeout = 60000)
    public void test_485_postOnI180ReleasesWithQueryParamsReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i180/releases?" + 
                    "bidTypeId=nCCSFew&" + 
                    "planningLoc=_EM_71260_XYZ_&planningLoc=_EM_71261_XYZ_&" + 
                    "procurementMethod=rxxzPUfN2qJH&procurementMethod=n_YgYmY2XSl&" + 
                    "procuringEntityDepartmentId=974&procuringEntityDepartmentId=830&procuringEntityDepartmentId=82&procuringEntityDepartmentId=395&procuringEntityDepartmentId=678&" + 
                    "pageNumber=594&" + 
                    "electronicSubmission=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i038/crosstab
    */
    @Test(timeout = 60000)
    public void test_486_postOnI038CrosstabWithQueryParamsFlaggedReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i038/crosstab?" + 
                    "notProcuringEntityId=O5b&" + 
                    "bidSelectionMethod=&bidSelectionMethod=A&bidSelectionMethod=_EM_97432_XYZ_&" + 
                    "notBidSelectionMethod=Wpt1yEb&notBidSelectionMethod=_EM_97433_XYZ_&notBidSelectionMethod=oNhqGM3IdnGAL7eR&notBidSelectionMethod=_CW80ytxWx&notBidSelectionMethod=_EM_97434_XYZ_&" + 
                    "tenderLoc=_EM_97441_XYZ_&tenderLoc=y&tenderLoc=_EM_97442_XYZ_&tenderLoc=obW6&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityGroupId=681&" + 
                    "pageNumber=12&" + 
                    "pageSize=108&" + 
                    "minTenderValue=0.7616270158306362&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i003/stats
    */
    @Test(timeout = 60000)
    public void test_487_postOnStatsReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i003/stats?" + 
                    "supplierId=_EM_12474_XYZ_&" + 
                    "contrMethod=&" + 
                    "planningLoc=_EM_12478_XYZ_&planningLoc=4MvngM&planningLoc=YmFgxFfe3R&" + 
                    "tenderLoc=3aiRkw3A_VJK4v&tenderLoc=2dxVV&tenderLoc=_EM_12479_XYZ_&" + 
                    "procurementMethod=_EM_12480_XYZ_&" + 
                    "procuringEntityCityId=&procuringEntityCityId=&procuringEntityCityId=_EM_12481_XYZ_&" + 
                    "procuringEntityGroupId=41&procuringEntityGroupId=598&procuringEntityGroupId=478&procuringEntityGroupId=528&" + 
                    "pageNumber=980&" + 
                    "minTenderValue=0.3454427086576696&" + 
                    "maxTenderValue=0.7775775790650395&" + 
                    "electronicSubmission=false&" + 
                    "monthly=true&" + 
                    "password=b&" + 
                    "username=txECulmU3Pw")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i003/stats
    */
    @Test(timeout = 60000)
    public void test_488_postOnStatsReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i003/stats?" + 
                    "contrMethod=&" + 
                    "tenderLoc=3aiRkw3A_VJK4v&tenderLoc=2dxVV&tenderLoc=_EM_12479_XYZ_&" + 
                    "procurementMethod=_EM_12480_XYZ_&" + 
                    "procuringEntityCityId=&procuringEntityCityId=&procuringEntityCityId=_EM_12481_XYZ_&" + 
                    "procuringEntityGroupId=41&procuringEntityGroupId=598&procuringEntityGroupId=478&procuringEntityGroupId=528&" + 
                    "pageNumber=980&" + 
                    "minTenderValue=0.3454427086576696&" + 
                    "maxTenderValue=0.7775775790650395&" + 
                    "electronicSubmission=false&" + 
                    "monthly=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i003/stats
    */
    @Test(timeout = 60000)
    public void test_489_postOnStatsReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i003/stats?" + 
                    "supplierId=_EM_12474_XYZ_&" + 
                    "contrMethod=&" + 
                    "tenderLoc=3aiRkw3A_VJK4v&tenderLoc=2dxVV&tenderLoc=_EM_12479_XYZ_&" + 
                    "procurementMethod=_EM_12480_XYZ_&" + 
                    "procuringEntityCityId=&procuringEntityCityId=&procuringEntityCityId=_EM_12481_XYZ_&" + 
                    "procuringEntityGroupId=41&procuringEntityGroupId=598&procuringEntityGroupId=478&procuringEntityGroupId=528&" + 
                    "pageNumber=980&" + 
                    "minTenderValue=0.3454427086576696&" + 
                    "maxTenderValue=0.7775775790650395&" + 
                    "electronicSubmission=false&" + 
                    "monthly=true&" + 
                    "password=b&" + 
                    "username=txECulmU3Pw")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i004/crosstab
    */
    @Test(timeout = 60000)
    public void test_490_postOnCrosstabReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i004/crosstab?" + 
                    "notBidTypeId=VC1enMgBGr&notBidTypeId=WPaPiAd&notBidTypeId=fs&notBidTypeId=r&" + 
                    "procuringEntityGroupId=313&procuringEntityGroupId=316&procuringEntityGroupId=142841&" + 
                    "pageSize=83&" + 
                    "maxTenderValue=0.09720268761828676&" + 
                    "minAwardValue=0.2516488704743013&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "skip=&" + 
                    "class=n3o4ey&" + 
                    "yearFilterPagingRequest=JWcH4LgIB&" + 
                    "password=1o634y8NskpuJRuu&" + 
                    "username=3Ytt5EZgHs3")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i004/crosstab
    */
    @Test(timeout = 60000)
    public void test_491_postOnCrosstabReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i004/crosstab?" + 
                    "notBidTypeId=VC1enMgBGr&notBidTypeId=WPaPiAd&notBidTypeId=fs&notBidTypeId=r&" + 
                    "procuringEntityGroupId=313&procuringEntityGroupId=316&procuringEntityGroupId=142841&" + 
                    "pageSize=83&" + 
                    "minAwardValue=0.2516488704743013&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "skip=&" + 
                    "class=n3o4ey&" + 
                    "yearFilterPagingRequest=JWcH4LgIB")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i004/crosstab
    */
    @Test(timeout = 60000)
    public void test_492_postOnI004CrosstabWithQueryParamsFlaggedAndMonthlyReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i004/crosstab?" + 
                    "notBidTypeId=VC1enMgBGr&notBidTypeId=WPaPiAd&notBidTypeId=fs&notBidTypeId=r&" + 
                    "procuringEntityId=RL4bnSzgfCW&" + 
                    "bidSelectionMethod=DH2fvEmi880chCc&bidSelectionMethod=c&bidSelectionMethod=&" + 
                    "procuringEntityGroupId=313&procuringEntityGroupId=316&procuringEntityGroupId=142841&" + 
                    "pageSize=83&" + 
                    "minAwardValue=0.2516488704743013&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i004/crosstab
    */
    @Test(timeout = 60000)
    public void test_493_postOnCrosstabReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i004/crosstab?" + 
                    "notBidTypeId=VC1enMgBGr&notBidTypeId=WPaPiAd&notBidTypeId=fs&notBidTypeId=r&" + 
                    "procuringEntityId=RL4bnSzgfCW&" + 
                    "bidSelectionMethod=DH2fvEmi880chCc&bidSelectionMethod=c&bidSelectionMethod=&" + 
                    "procuringEntityGroupId=313&procuringEntityGroupId=316&procuringEntityGroupId=142841&" + 
                    "pageSize=83&" + 
                    "minAwardValue=0.2516488704743013&" + 
                    "flagged=true&" + 
                    "monthly=true&" + 
                    "skip=&" + 
                    "class=n3o4ey&" + 
                    "yearFilterPagingRequest=JWcH4LgIB")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i004/releases
    */
    @Test(timeout = 60000)
    public void test_494_postOnI004ReleasesWithQueryParamsNegativeMinTenderValueReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i004/releases?" + 
                    "notProcuringEntityId=4IlI7oO&" + 
                    "supplierId=_EM_12559_XYZ_&" + 
                    "notBidSelectionMethod=_EM_12561_XYZ_&notBidSelectionMethod=_EM_12562_XYZ_&notBidSelectionMethod=y3yy3V_KVHnGj&" + 
                    "contrMethod=&" + 
                    "planningLoc=_EM_12563_XYZ_&planningLoc=vikNCIkE&planningLoc=_EM_12564_XYZ_&planningLoc=EVA04t8sO&planningLoc=_EM_12565_XYZ_&" + 
                    "procurementMethod=_EM_12567_XYZ_&procurementMethod=RxGqO6kXjQ&procurementMethod=_EM_12568_XYZ_&procurementMethod=w4&procurementMethod=jLwWC&" + 
                    "procuringEntityCityId=_EM_12569_XYZ_&procuringEntityCityId=UqNfiwvNtgQ&procuringEntityCityId=_EM_12570_XYZ_&procuringEntityCityId=_EM_12571_XYZ_&procuringEntityCityId=_EM_12572_XYZ_&" + 
                    "pageSize=486&" + 
                    "minTenderValue=-12.9588&" + 
                    "minAwardValue=0.9298791874897879&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "skip=2x9_PLbxBOLBOi&" + 
                    "password=Osr6jhVnn9N165&" + 
                    "class=L&" + 
                    "yearFilterPagingRequest=cHWYuAl&" + 
                    "username=A_Lxa_MaCAtMFe4")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i004/releases
    */
    @Test(timeout = 60000)
    public void test_495_postOnI004ReleasesWithQueryParamsReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i004/releases?" + 
                    "notProcuringEntityId=4IlI7oO&" + 
                    "notBidSelectionMethod=_EM_12561_XYZ_&notBidSelectionMethod=_EM_12562_XYZ_&notBidSelectionMethod=y3yy3V_KVHnGj&" + 
                    "contrMethod=&" + 
                    "planningLoc=_EM_12563_XYZ_&planningLoc=vikNCIkE&planningLoc=_EM_12564_XYZ_&planningLoc=EVA04t8sO&planningLoc=_EM_12565_XYZ_&" + 
                    "procurementMethod=_EM_12567_XYZ_&procurementMethod=RxGqO6kXjQ&procurementMethod=_EM_12568_XYZ_&procurementMethod=w4&procurementMethod=jLwWC&" + 
                    "procuringEntityCityId=_EM_12569_XYZ_&procuringEntityCityId=UqNfiwvNtgQ&procuringEntityCityId=_EM_12570_XYZ_&procuringEntityCityId=_EM_12571_XYZ_&procuringEntityCityId=_EM_12572_XYZ_&" + 
                    "pageSize=486&" + 
                    "minTenderValue=0.9277036285780865&" + 
                    "minAwardValue=0.9298791874897879&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i004/releases
    */
    @Test(timeout = 60000)
    public void test_496_postOnI004ReleasesWithQueryParamsFlaggedAndMonthlyReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i004/releases?" + 
                    "notBidTypeId=COLLUSION&notBidTypeId=COLLUSION&" + 
                    "notProcuringEntityId=nKyCN2vqLT1BbcT&notProcuringEntityId=&notProcuringEntityId=2vBqLuEODrkuU8IW&" + 
                    "planningLoc=E1w_pn&" + 
                    "procurementMethod=_EM_78674_XYZ_&" + 
                    "procuringEntityGroupId=61&procuringEntityGroupId=529&procuringEntityGroupId=458&" + 
                    "pageNumber=25&" + 
                    "minTenderValue=0.24739365186742335&" + 
                    "minAwardValue=0.10413680906086842&" + 
                    "maxAwardValue=0.5775810949728252&" + 
                    "flagged=true&" + 
                    "monthly=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i004/stats
    */
    @Test(timeout = 60000)
    public void test_497_postOnI004StatsWithQueryParamsElectronicSubmissionAndFlaggedReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i004/stats?" + 
                    "bidTypeId=Ml1VV2prFZ&bidTypeId=COLLUSION&bidTypeId=ojj&" + 
                    "notProcuringEntityId=&" + 
                    "supplierId=&" + 
                    "bidSelectionMethod=&" + 
                    "notBidSelectionMethod=9PUQJcs0Ecnk&notBidSelectionMethod=_EM_85354_XYZ_&notBidSelectionMethod=_EM_85355_XYZ_&notBidSelectionMethod=zoX&notBidSelectionMethod=dd3HKTU_0JIyf&" + 
                    "contrMethod=&" + 
                    "planningLoc=_EM_85356_XYZ_&" + 
                    "tenderLoc=HbD_eHgKJ9Y&tenderLoc=_EM_85357_XYZ_&" + 
                    "procurementMethod=j3hUBG4AVDX4&procurementMethod=nphqct&procurementMethod=4dBIW1CH&" + 
                    "procuringEntityCityId=&" + 
                    "pageNumber=491&" + 
                    "minTenderValue=0.452818152754046&" + 
                    "electronicSubmission=true&" + 
                    "flagged=true&" + 
                    "monthly=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i007/crosstab
    */
    @Test(timeout = 60000)
    public void test_498_postOnCrosstabReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i007/crosstab?" + 
                    "notBidSelectionMethod=_EM_78450_XYZ_&notBidSelectionMethod=MFUi0VhYc&notBidSelectionMethod=_EM_78451_XYZ_&notBidSelectionMethod=_EM_78452_XYZ_&notBidSelectionMethod=H636LFUTMyeGKX&" + 
                    "planningLoc=80mUYo7&planningLoc=_EM_78453_XYZ_&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=8K0W&procurementMethod=KcGICkOzMWKeOK3s&procurementMethod=koL6cdpC0&procurementMethod=_EM_78454_XYZ_&" + 
                    "procuringEntityCityId=E4D5e2&procuringEntityCityId=_EM_78455_XYZ_&" + 
                    "procuringEntityDepartmentId=75&procuringEntityDepartmentId=676&procuringEntityDepartmentId=764&" + 
                    "pageNumber=693&" + 
                    "pageSize=802&" + 
                    "minTenderValue=0.4711289343777647&" + 
                    "maxTenderValue=0.880751552659053&" + 
                    "minAwardValue=0.10775077831833313&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "monthly=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i007/crosstab
    */
    @Test(timeout = 60000)
    public void test_499_postOnCrosstabReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i007/crosstab?" + 
                    "bidTypeId=U43q0PzZYeIqP00k&bidTypeId=COLLUSION&bidTypeId=RIGGING&bidTypeId=I6Icmtxo0Cf7jfJ&bidTypeId=FRAUD&" + 
                    "supplierId=ynUA37YXJuZZrI&" + 
                    "planningLoc=_EM_86799_XYZ_&planningLoc=aX0W8BmbGdayydcZ&planningLoc=dV&planningLoc=dAc52_Tm&" + 
                    "tenderLoc=5veI3PZt5e&tenderLoc=ff_AgxOIpEZ1gpOO&tenderLoc=8ZQ&" + 
                    "procuringEntityGroupId=-779550978&procuringEntityGroupId=195&procuringEntityGroupId=668&" + 
                    "pageSize=645&" + 
                    "minTenderValue=0.14736493593412958&" + 
                    "maxTenderValue=0.4016571778292749&" + 
                    "maxAwardValue=0.9439538067270018&" + 
                    "flagged=true&" + 
                    "monthly=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i007/releases
    */
    @Test(timeout = 60000)
    public void test_500_postOnReleasesReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i007/releases?" + 
                    "notBidTypeId=33L0D3b8z4U&notBidTypeId=vEVNlYJqE2ex&" + 
                    "procuringEntityId=P1PA9oQDxMi&procuringEntityId=79&procuringEntityId=o&procuringEntityId=t&" + 
                    "notProcuringEntityId=FvlSyS3C&notProcuringEntityId=FKL&notProcuringEntityId=r&notProcuringEntityId=at4QIPNLEYKk2U&notProcuringEntityId=AvXbQs&" + 
                    "supplierId=HvjgUs&supplierId=AVSfny850&supplierId=bdtM2J4LzW&supplierId=XYBZOLgY6ntQHKm&supplierId=EX4DyY&" + 
                    "planningLoc=CuYLt2PIO5CFkCLm&planningLoc=A&planningLoc=DA&planningLoc=f9jE&" + 
                    "tenderLoc=zQpOpfFnhnIL&tenderLoc=P2I5rqhtIDqM4s_f&tenderLoc=yQ0&tenderLoc=YD&" + 
                    "procuringEntityGroupId=365&" + 
                    "pageSize=739&" + 
                    "minTenderValue=0.3599743553754592&" + 
                    "minAwardValue=0.8723782565983178&" + 
                    "monthly=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i007/releases
    */
    @Test(timeout = 60000)
    public void test_501_postOnReleasesReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i007/releases?" + 
                    "bidSelectionMethod=_EM_45972_XYZ_&bidSelectionMethod=_EM_45973_XYZ_&bidSelectionMethod=_EM_45974_XYZ_&" + 
                    "contrMethod=&" + 
                    "procuringEntityCityId=_EM_45978_XYZ_&procuringEntityCityId=_EM_45979_XYZ_&procuringEntityCityId=_EM_45980_XYZ_&" + 
                    "procuringEntityDepartmentId=319&procuringEntityDepartmentId=908&procuringEntityDepartmentId=16&procuringEntityDepartmentId=187&" + 
                    "procuringEntityGroupId=410&procuringEntityGroupId=156&" + 
                    "pageNumber=245&" + 
                    "minAwardValue=0.19318163619297135&" + 
                    "electronicSubmission=false&" + 
                    "monthly=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i007/stats
    */
    @Test(timeout = 60000)
    public void test_502_postOnI007StatsWithQueryParamsMonthlyReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i007/stats?" + 
                    "notBidTypeId=&" + 
                    "supplierId=_EM_36969_XYZ_&" + 
                    "bidSelectionMethod=_EM_36970_XYZ_&bidSelectionMethod=_EM_36971_XYZ_&" + 
                    "planningLoc=_EM_36978_XYZ_&planningLoc=73&planningLoc=_EM_36979_XYZ_&planningLoc=eeh05_Ku5kj&planningLoc=xmUaH&" + 
                    "pageNumber=661664767&" + 
                    "minTenderValue=0.008876264815337542&" + 
                    "maxAwardValue=0.7364944455827791&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i007/stats
    */
    @Test(timeout = 60000)
    public void test_503_postOnI007StatsWithQueryParamsElectronicSubmissionReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i007/stats?" + 
                    "procuringEntityId=&" + 
                    "supplierId=jYAwWSGEjzCb&supplierId=KPM383bAy9BUEz&supplierId=_EM_67259_XYZ_&supplierId=u3CO99&" + 
                    "bidSelectionMethod=fkoQslv8fuAL_bTO&bidSelectionMethod=_EM_67260_XYZ_&" + 
                    "notBidSelectionMethod=0r6T_DCxjfIg&notBidSelectionMethod=_EM_67261_XYZ_&notBidSelectionMethod=QqG&notBidSelectionMethod=uFw6qPh&notBidSelectionMethod=_EM_67262_XYZ_&" + 
                    "planningLoc=&" + 
                    "procurementMethod=_EM_67265_XYZ_&procurementMethod=EFxXnEXO64Nq13&procurementMethod=mVWuPP1Vi43lK&procurementMethod=Q1&" + 
                    "procuringEntityDepartmentId=359&procuringEntityDepartmentId=577&procuringEntityDepartmentId=-1862844129&procuringEntityDepartmentId=935&" + 
                    "procuringEntityGroupId=630&procuringEntityGroupId=102&procuringEntityGroupId=97&" + 
                    "minAwardValue=0.27754755731779146&" + 
                    "electronicSubmission=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i019/crosstab
    */
    @Test(timeout = 60000)
    public void test_504_postOnCrosstabReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i019/crosstab?" + 
                    "notBidTypeId=P5gFiqn&notBidTypeId=YpLNenDtIae&notBidTypeId=igJj7Zoov&notBidTypeId=kj4k9tIscZ9XJpg&" + 
                    "bidSelectionMethod=vGQ5Nc7F9Tek&bidSelectionMethod=rtv8dHSGfSF3&" + 
                    "planningLoc=9HRF&planningLoc=0Kasaqb5t0u&planningLoc=SbiAqc_riOLJU&" + 
                    "tenderLoc=&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityGroupId=921&procuringEntityGroupId=260&procuringEntityGroupId=358&procuringEntityGroupId=221&procuringEntityGroupId=313&" + 
                    "pageNumber=208&" + 
                    "maxTenderValue=0.2871785072764076&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "yearFilterPagingRequest=kO83j")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i019/crosstab
    */
    @Test(timeout = 60000)
    public void test_505_postOnCrosstabReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i019/crosstab?" + 
                    "notBidTypeId=P5gFiqn&notBidTypeId=YpLNenDtIae&notBidTypeId=igJj7Zoov&notBidTypeId=kj4k9tIscZ9XJpg&" + 
                    "procuringEntityId=hOKI&procuringEntityId=&procuringEntityId=kJlh0zRppe6cH5JL&procuringEntityId=jEuNhaD2uk&" + 
                    "bidSelectionMethod=vGQ5Nc7F9Tek&bidSelectionMethod=rtv8dHSGfSF3&" + 
                    "planningLoc=9HRF&planningLoc=0Kasaqb5t0u&planningLoc=SbiAqc_riOLJU&" + 
                    "procuringEntityCityId=&" + 
                    "pageNumber=208&" + 
                    "maxTenderValue=0.2871785072764076&" + 
                    "electronicSubmission=false&" + 
                    "flagged=false&" + 
                    "monthly=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i019/crosstab
    */
    @Test(timeout = 60000)
    public void test_506_postOnCrosstabReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i019/crosstab?" + 
                    "notBidTypeId=&" + 
                    "notBidSelectionMethod=_EM_12898_XYZ_&notBidSelectionMethod=_EM_12899_XYZ_&notBidSelectionMethod=_EM_12900_XYZ_&notBidSelectionMethod=_EM_12901_XYZ_&notBidSelectionMethod=_EM_12902_XYZ_&" + 
                    "tenderLoc=_EM_12905_XYZ_&tenderLoc=QmFV2&tenderLoc=_EM_12906_XYZ_&tenderLoc=GV6CG&tenderLoc=PZ1&" + 
                    "procuringEntityCityId=_EM_12907_XYZ_&procuringEntityCityId=XcfRc0&procuringEntityCityId=4GNQO46&procuringEntityCityId=OkdWysL&" + 
                    "procuringEntityGroupId=263061993&procuringEntityGroupId=378&procuringEntityGroupId=1408656362&procuringEntityGroupId=365&" + 
                    "minTenderValue=0.003998597539584092&" + 
                    "maxAwardValue=0.4935937619558025&" + 
                    "electronicSubmission=true&" + 
                    "skip=kHSK&" + 
                    "password=E9pR&" + 
                    "class=SIeeZb6HW2tTIt&" + 
                    "yearFilterPagingRequest=oHvYoz&" + 
                    "username=X")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i019/crosstab
    */
    @Test(timeout = 60000)
    public void test_507_postOnCrosstabReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i019/crosstab?" + 
                    "notBidTypeId=&" + 
                    "tenderLoc=_EM_12905_XYZ_&tenderLoc=QmFV2&tenderLoc=_EM_12906_XYZ_&tenderLoc=GV6CG&tenderLoc=PZ1&" + 
                    "procuringEntityGroupId=263061993&procuringEntityGroupId=378&procuringEntityGroupId=1408656362&procuringEntityGroupId=365&" + 
                    "minTenderValue=0.003998597539584092&" + 
                    "maxAwardValue=0.4935937619558025&" + 
                    "electronicSubmission=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i019/releases
    */
    @Test(timeout = 60000)
    public void test_508_postOnI019ReleasesWithQueryParamsElectronicSubmissionReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i019/releases?" + 
                    "procuringEntityId=pzKK72rPEL&procuringEntityId=sY5G&" + 
                    "supplierId=_EM_37019_XYZ_&supplierId=_EM_37020_XYZ_&supplierId=_EM_37021_XYZ_&supplierId=_EM_37022_XYZ_&supplierId=j2HJa8W2&" + 
                    "tenderLoc=fKvAJCNaN57ZV&tenderLoc=_EM_37029_XYZ_&tenderLoc=i&tenderLoc=k1MmbP&tenderLoc=_EM_37030_XYZ_&" + 
                    "pageNumber=775&" + 
                    "pageSize=743&" + 
                    "maxTenderValue=0.3614430616533092&" + 
                    "minAwardValue=0.7544111957957397&" + 
                    "maxAwardValue=0.9872881027563433&" + 
                    "electronicSubmission=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i019/releases
    */
    @Test(timeout = 60000)
    public void test_509_postOnI019ReleasesWithQueryParamsMonthlyReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i019/releases?" + 
                    "procuringEntityId=&" + 
                    "supplierId=_EM_21558_XYZ_&" + 
                    "planningLoc=B&planningLoc=_EM_21565_XYZ_&planningLoc=_EM_21566_XYZ_&planningLoc=_EM_21567_XYZ_&" + 
                    "procurementMethod=vF_c6Q&procurementMethod=3nBdyiEx191I8PK&procurementMethod=_EM_21569_XYZ_&procurementMethod=pAwi0&procurementMethod=_EM_21570_XYZ_&" + 
                    "pageNumber=190&" + 
                    "pageSize=615&" + 
                    "maxTenderValue=0.7305265958993367&" + 
                    "flagged=false&" + 
                    "monthly=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i019/stats
    */
    @Test(timeout = 60000)
    public void test_510_postOnI019StatsWithQueryParamsFlaggedReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i019/stats?" + 
                    "bidTypeId=&" + 
                    "supplierId=_EM_36852_XYZ_&supplierId=AK2VgF1&" + 
                    "planningLoc=_EM_36858_XYZ_&planningLoc=_EM_36859_XYZ_&planningLoc=ly2XwbVQ6jAcln&" + 
                    "tenderLoc=_EM_36860_XYZ_&tenderLoc=nao8Cww27f&tenderLoc=Mv&" + 
                    "procuringEntityGroupId=451&procuringEntityGroupId=210&procuringEntityGroupId=24&procuringEntityGroupId=915&procuringEntityGroupId=873&" + 
                    "maxAwardValue=0.7797565086066293&" + 
                    "flagged=true&" + 
                    "EMextraParam123=_EM_34230_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i019/stats
    */
    @Test(timeout = 60000)
    public void test_511_postOnStatsReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i019/stats?" + 
                    "procuringEntityId=Iw&procuringEntityId=wM&procuringEntityId=XDif&procuringEntityId=s5ENPHbAh77EVubu&procuringEntityId=Kj5LQWI4bKITniRI&" + 
                    "notBidSelectionMethod=EWEhfSAyc_W5ib&notBidSelectionMethod=XL2&notBidSelectionMethod=cLksYXIztKvw&notBidSelectionMethod=GUnlpQd&notBidSelectionMethod=qI0Z6w14ZH&" + 
                    "contrMethod=&" + 
                    "planningLoc=eZkha45&" + 
                    "procuringEntityGroupId=856&procuringEntityGroupId=19&procuringEntityGroupId=773&" + 
                    "pageSize=824&" + 
                    "minTenderValue=0.5242958698486049&" + 
                    "minAwardValue=0.7403936587661012&" + 
                    "electronicSubmission=true&" + 
                    "class=1GOjp&" + 
                    "username=xDyOlU06b81")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i038/releases
    */
    @Test(timeout = 60000)
    public void test_512_postOnI038ReleasesWithQueryParamsElectronicSubmissionReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i038/releases?" + 
                    "bidTypeId=&" + 
                    "notBidTypeId=&" + 
                    "procuringEntityId=5dA3SSaO9y9HZ5x&procuringEntityId=JGxaPhXesP&" + 
                    "notProcuringEntityId=&" + 
                    "notBidSelectionMethod=0mm&notBidSelectionMethod=KWF0_O8Ieyn&notBidSelectionMethod=mTcGQei&notBidSelectionMethod=_EM_47881_XYZ_&notBidSelectionMethod=W&" + 
                    "procurementMethod=_EM_85578_XYZ_&procurementMethod=HqorDuJHqndp&procurementMethod=1NH&procurementMethod=Ka3H&procurementMethod=_EM_47887_XYZ_&" + 
                    "procuringEntityGroupId=589&procuringEntityGroupId=162&" + 
                    "minTenderValue=0.20217879958587404&" + 
                    "maxTenderValue=0.5748125841136561&" + 
                    "minAwardValue=0.9887485424566578&" + 
                    "maxAwardValue=0.41483297025722343&" + 
                    "electronicSubmission=true&" + 
                    "skip=xZ9cHH3e6JCADiU&" + 
                    "password=Y8eql5tYllWg6&" + 
                    "class=YFk0z3W%3C4qiYIFe6&" + 
                    "yearFilterPagingRequest=lHh")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i038/releases
    */
    @Test(timeout = 60000)
    public void test_513_postOnI038ReleasesWithQueryParamsMonthlyReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i038/releases?" + 
                    "supplierId=_EM_13092_XYZ_&supplierId=_EM_13093_XYZ_&supplierId=3Vetx1R&" + 
                    "bidSelectionMethod=_EM_13094_XYZ_&bidSelectionMethod=&bidSelectionMethod=_EM_13095_XYZ_&bidSelectionMethod=_EM_13096_XYZ_&" + 
                    "notBidSelectionMethod=_StZ&notBidSelectionMethod=ed4E2VZLj_X&notBidSelectionMethod=_EM_13124_XYZ_&notBidSelectionMethod=o8ZPrr&notBidSelectionMethod=JIP_&" + 
                    "planningLoc=_EM_13101_XYZ_&planningLoc=_EM_13102_XYZ_&planningLoc=_EM_13103_XYZ_&" + 
                    "procuringEntityCityId=_EM_13109_XYZ_&procuringEntityCityId=_EM_13110_XYZ_&procuringEntityCityId=oFGRec6hSBPRD&procuringEntityCityId=HrdRmAUPKj&" + 
                    "procuringEntityDepartmentId=975&procuringEntityDepartmentId=271&procuringEntityDepartmentId=954&procuringEntityDepartmentId=536&procuringEntityDepartmentId=162&" + 
                    "pageNumber=815&" + 
                    "pageSize=685&" + 
                    "minTenderValue=0.4936772238021536&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "password=kviX35QMirBhcSKc&" + 
                    "yearFilterPagingRequest=d&" + 
                    "username=d")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i038/releases
    */
    @Test(timeout = 60000)
    public void test_514_postOnI038ReleasesWithQueryParamsReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i038/releases?" + 
                    "bidTypeId=&" + 
                    "supplierId=U41&supplierId=_EM_47879_XYZ_&supplierId=_EM_47880_XYZ_&" + 
                    "tenderLoc=VhKFeUYtW4YB&" + 
                    "procuringEntityDepartmentId=55&procuringEntityDepartmentId=43&procuringEntityDepartmentId=847&" + 
                    "minTenderValue=0.20217879958587404&" + 
                    "minAwardValue=0.9887485424566578&" + 
                    "electronicSubmission=false&" + 
                    "monthly=false&" + 
                    "skip=xZ9cHH3e6JCADiU&" + 
                    "class=YFk0z3W44qiYIFe")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i038/stats
    */
    @Test(timeout = 60000)
    public void test_515_postOnI038StatsWithQueryParamsMonthlyReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i038/stats?" + 
                    "procuringEntityId=znNIxlZY8&" + 
                    "supplierId=_EM_39748_XYZ_&supplierId=_EM_39749_XYZ_&supplierId=_EM_39750_XYZ_&supplierId=_EM_39751_XYZ_&" + 
                    "bidSelectionMethod=_EM_39752_XYZ_&" + 
                    "tenderLoc=&" + 
                    "procuringEntityDepartmentId=344&procuringEntityDepartmentId=622&procuringEntityDepartmentId=17&procuringEntityDepartmentId=881&" + 
                    "procuringEntityGroupId=801&procuringEntityGroupId=292&procuringEntityGroupId=877&" + 
                    "pageSize=24&" + 
                    "electronicSubmission=false&" + 
                    "monthly=true&" + 
                    "EMextraParam123=PRis")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i038/stats
    */
    @Test(timeout = 60000)
    public void test_516_postOnI038StatsWithQueryParamsElectronicSubmissionAndFlaggedReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i038/stats?" + 
                    "notBidTypeId=COLLUSION&notBidTypeId=RIGGING&notBidTypeId=kT&notBidTypeId=FRAUD&" + 
                    "supplierId=_EM_40723_XYZ_&supplierId=I&" + 
                    "bidSelectionMethod=_EM_40724_XYZ_&bidSelectionMethod=_EM_40725_XYZ_&bidSelectionMethod=_EM_40726_XYZ_&" + 
                    "procurementMethod=_EM_40734_XYZ_&procurementMethod=_EM_40735_XYZ_&procurementMethod=iQrK&" + 
                    "month=&" + 
                    "maxTenderValue=0.9912696141561123&" + 
                    "electronicSubmission=true&" + 
                    "flagged=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i085/crosstab
    */
    @Test(timeout = 60000)
    public void test_517_postOnCrosstabReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i085/crosstab?" + 
                    "tenderLoc=_EM_34440_XYZ_&" + 
                    "procurementMethod=BQzl5bYYJlV&" + 
                    "procuringEntityGroupId=735&procuringEntityGroupId=590&" + 
                    "maxTenderValue=0.11040705085468572&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "yearFilterPagingRequest=xLlwkf2ZJezW")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i171/crosstab
    */
    @Test(timeout = 60000)
    public void test_518_postOnI171CrosstabWithQueryParamsElectronicSubmissionReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i171/crosstab?" + 
                    "supplierId=avtxw1WAc&" + 
                    "tenderLoc=&" + 
                    "procurementMethod=_EM_53009_XYZ_&procurementMethod=h1&procurementMethod=_EM_53010_XYZ_&" + 
                    "procuringEntityCityId=_EM_53011_XYZ_&procuringEntityCityId=yVen_8UpH98AgVI&procuringEntityCityId=ueS3lKh_GY&procuringEntityCityId=6Ner_A0F4aA&procuringEntityCityId=_EM_53012_XYZ_&" + 
                    "procuringEntityDepartmentId=&" + 
                    "procuringEntityGroupId=729&procuringEntityGroupId=273&procuringEntityGroupId=353&procuringEntityGroupId=396&procuringEntityGroupId=773&" + 
                    "pageNumber=698&" + 
                    "minTenderValue=0.2103511147917131&" + 
                    "maxAwardValue=0.5454552777648556&" + 
                    "electronicSubmission=true&" + 
                    "skip=eGYBBaIBRK6ksZL&" + 
                    "password=008XBQ8&" + 
                    "class=Ll&" + 
                    "yearFilterPagingRequest=JjaCX58jLXLf&" + 
                    "username=JEEUNdNF")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i171/crosstab
    */
    @Test(timeout = 60000)
    public void test_519_postOnI171CrosstabWithQueryParamsReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i171/crosstab?" + 
                    "tenderLoc=&" + 
                    "procuringEntityGroupId=729&procuringEntityGroupId=273&procuringEntityGroupId=353&procuringEntityGroupId=396&procuringEntityGroupId=773&" + 
                    "minTenderValue=0.2103511147917131&" + 
                    "maxAwardValue=0.5454552777648556&" + 
                    "electronicSubmission=false&" + 
                    "EMextraParam123=_EM_9407_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i171/releases
    */
    @Test(timeout = 60000)
    public void test_520_postOnI171ReleasesWithQueryParamsElectronicSubmissionAndMonthly() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i171/releases?" + 
                    "supplierId=h156ELX&supplierId=&supplierId=rQVkoTaH2mom&supplierId=SMCTgw2kE&" + 
                    "bidSelectionMethod=00Vd3&bidSelectionMethod=dtwgnB8&bidSelectionMethod=&bidSelectionMethod=kZAFw6dhMSPGxJp&bidSelectionMethod=VLkTfUFZ9sCvr&" + 
                    "notBidSelectionMethod=&" + 
                    "contrMethod=&" + 
                    "procuringEntityCityId=6IjmWuDZKzx&" + 
                    "pageNumber=560&" + 
                    "minTenderValue=0.16287539425620123&" + 
                    "minAwardValue=0.7997609000180683&" + 
                    "maxAwardValue=3.876818643008262E-4&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "yearFilterPagingRequest=TUjJ_m")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i171/stats
    */
    @Test(timeout = 60000)
    public void test_521_postOnStatsReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i171/stats?" + 
                    "bidTypeId=jrNc&" + 
                    "notBidTypeId=c8d&" + 
                    "supplierId=9nY0VD6S947y3Qle&supplierId=g&supplierId=w6xeDxjAA&supplierId=Ep&supplierId=_EM_11003_XYZ_&" + 
                    "planningLoc=e&planningLoc=ONEqH1oHVmQke&planningLoc=7AByWnSB1ALFt27&" + 
                    "tenderLoc=xGYAOHl9e&tenderLoc=Pcodm&tenderLoc=_EM_11007_XYZ_&tenderLoc=PNhW6OtFZ0N&tenderLoc=&" + 
                    "procuringEntityCityId=&" + 
                    "pageNumber=15&" + 
                    "minTenderValue=0.13706798708473855&" + 
                    "maxTenderValue=0.46991136107916875&" + 
                    "minAwardValue=0.4967997285282103&" + 
                    "maxAwardValue=0.085881325447&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "skip=B5Sx3x0Q3i8uw&" + 
                    "password=sf_ZIfMwkOS6d&" + 
                    "class=rBa9uKpGM&" + 
                    "yearFilterPagingRequest=yCvHz24hq&" + 
                    "username=V_sWxc9d8X")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i171/stats
    */
    @Test(timeout = 60000)
    public void test_522_postOnI171StatsWithQueryParamsFlaggedReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i171/stats?" + 
                    "notBidTypeId=FRAUD&notBidTypeId=RIGGING&" + 
                    "notProcuringEntityId=o58ktMK&notProcuringEntityId=JN2S5RWLh&" + 
                    "bidSelectionMethod=&" + 
                    "notBidSelectionMethod=_EM_37167_XYZ_&" + 
                    "procurementMethod=&" + 
                    "procuringEntityCityId=b&" + 
                    "pageSize=585&" + 
                    "maxTenderValue=0.49767800777003324&" + 
                    "minAwardValue=0.8729086106029387&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true&" + 
                    "EMextraParam123=42&" + 
                    "username=JcI2CJs")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i171/stats
    */
    @Test(timeout = 60000)
    public void test_523_postOnStatsReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i171/stats?" + 
                    "bidTypeId=jrNc&" + 
                    "notBidTypeId=&" + 
                    "supplierId=9nY0VD6S947y3Qle&supplierId=g&supplierId=w6xeDxjAA&supplierId=Ep&supplierId=_EM_11003_XYZ_&" + 
                    "tenderLoc=xGYAOHl9&tenderLoc=Pcodm&tenderLoc=_EM_11007_XYZ_&tenderLoc=PNhW6OtFZ0N&tenderLoc=&" + 
                    "procuringEntityCityId=&" + 
                    "pageNumber=15&" + 
                    "minTenderValue=0.13706798708473855&" + 
                    "maxTenderValue=0.46991136107916875&" + 
                    "minAwardValue=0.4967997285282103&" + 
                    "maxAwardValue=0.08588132544703841&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "monthly=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i171/stats
    */
    @Test(timeout = 60000)
    public void test_524_postOnI171StatsWithQueryParamsElectronicSubmissionReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i171/stats?" + 
                    "notBidSelectionMethod=&" + 
                    "pageNumber=189&" + 
                    "pageSize=509&" + 
                    "minTenderValue=0.8374203830105733&" + 
                    "electronicSubmission=true&" + 
                    "monthly=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/bidSelectionMethod/all
    */
    @Test(timeout = 60000)
    public void test_525_postOnAllReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_11060_XYZ_")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/bidSelectionMethod/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/bidSelectionMethod/all
    */
    @Test(timeout = 60000)
    public void test_526_postOnAllReturns200() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/ocds/bidSelectionMethod/all?EMextraParam123=_EM_2104_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/bidType/all
    */
    @Test(timeout = 60000)
    public void test_527_postOnAllReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/bidType/all?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/bidType/all
    */
    @Test(timeout = 60000)
    public void test_528_postOnBidTypeAllReturns200() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/api/ocds/bidType/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/city/all
    */
    @Test(timeout = 60000)
    public void test_529_postOnCityAllReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/city/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/city/all
    */
    @Test(timeout = 60000)
    public void test_530_postOnAllReturns200() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_2106_XYZ_")
                .post(baseUrlOfSut + "/api/ocds/city/all?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/contrMethod/all
    */
    @Test(timeout = 60000)
    public void test_531_postOnAllReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_11062_XYZ_")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/contrMethod/all?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/contrMethod/all
    */
    @Test(timeout = 60000)
    public void test_532_postOnContrMethodAllReturns200() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/api/ocds/contrMethod/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/location/all
    */
    @Test(timeout = 60000)
    public void test_533_postOnAllReturns200() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/ocds/location/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/orgDepartment/all
    */
    @Test(timeout = 60000)
    public void test_534_postOnAllReturns200() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_2113_XYZ_")
                .post(baseUrlOfSut + "/api/ocds/orgDepartment/all?EMextraParam123=_EM_2112_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/orgGroup/all
    */
    @Test(timeout = 60000)
    public void test_535_postOnAllReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/orgGroup/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/orgGroup/all
    */
    @Test(timeout = 60000)
    public void test_536_postOnAllReturns200() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/api/ocds/orgGroup/all?EMextraParam123=_EM_2117_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/orgGroup/search
    */
    @Test(timeout = 60000)
    public void test_537_postOnSearchReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/orgGroup/search?" + 
                    "pageNumber=330&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/orgGroup/search
    */
    @Test(timeout = 60000)
    public void test_538_postOnSearchReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/orgGroup/search?" + 
                    "pageNumber=886&" + 
                    "pageSize=846&" + 
                    "password=_EM_92069_XYZ_&" + 
                    "skip=_EM_92070_XYZ_&" + 
                    "class=Krlr6dInS7&" + 
                    "textSearchRequest=FCLvInbxj5t&" + 
                    "username=504")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/organization/all
    */
    @Test(timeout = 60000)
    public void test_539_postOnAllReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/organization/all?" + 
                    "skip=up6wn0rpYC_Lbv9&" + 
                    "text=VYdnr40FMQ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/organization/all
    */
    @Test(timeout = 60000)
    public void test_540_postOnOrganizationAllReturns200() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/ocds/organization/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/organization/all
    */
    @Test(timeout = 60000)
    public void test_541_postOnAllReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/organization/all?" + 
                    "pageNumber=64&" + 
                    "pageSize=923&" + 
                    "skip=ZulDCU8gxN&" + 
                    "class=Ryp7dJg4UX&" + 
                    "textSearchRequest=VW3wdBuh")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/organization/all
    */
    @Test(timeout = 60000)
    public void test_542_postOnOrganizationAllWithQueryParamsEmptyUsernameReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/organization/all?" + 
                    "password=vh1T1m1L&" + 
                    "text=1bM10K&" + 
                    "textSearchRequest=_EM_84334_XYZ_&" + 
                    "username=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/organization/all
    */
    @Test(timeout = 60000)
    public void test_543_postOnOrganizationAllWithQueryParamReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/organization/all?EMextraParam123=_EM_11070_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/organization/ids
    */
    @Test(timeout = 60000)
    public void test_544_postOnOrganizationIdsWithQueryParamsEmptyOrganizationIdWrapper() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/organization/ids?" + 
                    "id=_EM_43938_XYZ_&id=SN9_e&id=uP7pAuGS_QMAeBs&id=_EM_43939_XYZ_&id=7orMdG5qEKGPlts&" + 
                    "organizationIdWrapper=&" + 
                    "class=A")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/organization/ids
    */
    @Test(timeout = 60000)
    public void test_545_postOnIdsReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/organization/ids?id=_EM_62721_XYZ_&id=_EM_62722_XYZ_&id=mYns")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/organization/ids
    */
    @Test(timeout = 60000)
    public void test_546_postOnOrganizationIdsWithQueryParamsReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/organization/ids?" + 
                    "id=&" + 
                    "organizationIdWrapper=qoX")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/organization/ids
    */
    @Test(timeout = 60000)
    public void test_547_postOnIdsReturns200() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/ocds/organization/ids?id=BGLkvrvJZ0eU3Py&id=UI2rD5WU&id=&id=_EM_2124_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/procurementMethod/all
    */
    @Test(timeout = 60000)
    public void test_548_postOnAllReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/procurementMethod/all?EMextraParam123=_EM_11091_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/procurementMethod/all
    */
    @Test(timeout = 60000)
    public void test_549_postOnProcurementMethodAllReturns200() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/ocds/procurementMethod/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/release/all
    */
    @Test(timeout = 60000)
    public void test_550_postOnReleaseAllWithQueryParamsFlaggedReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_38434_XYZ_")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/release/all?" + 
                    "bidTypeId=&" + 
                    "notBidTypeId=jTYS9SA&" + 
                    "procuringEntityId=6yTar8pv5Ky&" + 
                    "tenderLoc=SxMWTsMChQ&tenderLoc=_EM_38429_XYZ_&" + 
                    "procurementMethod=&procurementMethod=7Ul6gYvBtcp5AMIF&procurementMethod=M7&" + 
                    "procuringEntityCityId=_EM_38430_XYZ_&procuringEntityCityId=_EM_38431_XYZ_&procuringEntityCityId=_EM_38432_XYZ_&" + 
                    "procuringEntityGroupId=187&" + 
                    "pageSize=562&" + 
                    "minTenderValue=0.43843913042726723&" + 
                    "maxTenderValue=0.6158563208679743&" + 
                    "minAwardValue=0.671184891355289&" + 
                    "electronicSubmission=false&" + 
                    "flagged=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/release/all
    */
    @Test(timeout = 60000)
    public void test_551_postOnReleaseAllWithQueryParamsReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/release/all?" + 
                    "bidTypeId=SGKRUs&bidTypeId=C6&bidTypeId=F&bidTypeId=X0vnfAGdqi6&" + 
                    "notBidTypeId=1A7NTSa&" + 
                    "notProcuringEntityId=qQ&notProcuringEntityId=k4iFSjZcWWo9qWrV&notProcuringEntityId=VDJPFcDIr&notProcuringEntityId=NYJ8L&notProcuringEntityId=I7SU6sXb5oAZYC&" + 
                    "bidSelectionMethod=3OYV&bidSelectionMethod=78OkEKkv9uELEKE7&bidSelectionMethod=zKtkB&" + 
                    "notBidSelectionMethod=nKfAye91c&" + 
                    "planningLoc=_OsO2yat5HcJGL0&planningLoc=LYbYWrppoEtcIZcD&" + 
                    "procurementMethod=c2Wzso1DFGD54&" + 
                    "procuringEntityCityId=xZ0QNMF51yyD3KO&procuringEntityCityId=PKGHH17uHdTrk_&procuringEntityCityId=3ZAM_r&" + 
                    "procuringEntityDepartmentId=601&procuringEntityDepartmentId=95&procuringEntityDepartmentId=928&procuringEntityDepartmentId=542&" + 
                    "pageNumber=611&" + 
                    "pageSize=739&" + 
                    "maxTenderValue=0.2983187829174163&" + 
                    "maxAwardValue=0.013500430677868991&" + 
                    "flagged=false&" + 
                    "EMextraParam123=_EM_11117_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i019/stats
    */
    @Test(timeout = 60000)
    public void test_552_postOnStatsReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i019/stats?" + 
                    "procuringEntityId=&" + 
                    "notBidSelectionMethod=&notBidSelectionMethod=AMnHLmgKbk0f7&notBidSelectionMethod=Vm7yOcyMz&" + 
                    "planningLoc=6ihcO2FcfTey&planningLoc=oU6bMeErhy&planningLoc=_EM_79428_XYZ_&planningLoc=5Jr_m312BkMMnc&planningLoc=susgNF_Ht&" + 
                    "procuringEntityDepartmentId=-858823363&procuringEntityDepartmentId=772&procuringEntityDepartmentId=498&" + 
                    "procuringEntityGroupId=529&procuringEntityGroupId=467&procuringEntityGroupId=344&procuringEntityGroupId=66&" + 
                    "pageNumber=545&" + 
                    "pageSize=239&" + 
                    "minTenderValue=0.8768264076757336&" + 
                    "maxTenderValue=0.6517858285706488&" + 
                    "minAwardValue=0.8163714528698774&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "yearFilterPagingRequest=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/orgGroup/all
    */
    @Test(timeout = 60000)
    public void test_553_postOnAllReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/orgGroup/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/location/all
    */
    @Test(timeout = 60000)
    public void test_554_postOnLocationAllWithQueryParamsReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/location/all?" + 
                    "password=HTN&" + 
                    "username=iQUlRfx5B")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/contrMethod/all
    */
    @Test(timeout = 60000)
    public void test_555_postOnAllReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/contrMethod/all?EMextraParam123=_EM_19789_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/bidSelectionMethod/all
    */
    @Test(timeout = 60000)
    public void test_556_postOnAllReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/bidSelectionMethod/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i085/stats
    */
    @Test(timeout = 60000)
    public void test_557_postOnStatsReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i085/stats?" + 
                    "bidTypeId=&" + 
                    "supplierId=wTqrHY&supplierId=S0gP&supplierId=uAbfmADK1&supplierId=ijkhlu7OR4wj&supplierId=9hFmcQVAFCiiF&" + 
                    "bidSelectionMethod=&" + 
                    "notBidSelectionMethod=_EM_26763_XYZ_&notBidSelectionMethod=oi&notBidSelectionMethod=_EM_26764_XYZ_&" + 
                    "contrMethod=&" + 
                    "planningLoc=90SHI8pN2n&planningLoc=_EM_26765_XYZ_&" + 
                    "tenderLoc=AJda914gCe&tenderLoc=0ug5RLOSAofDaa2&tenderLoc=6Tm&tenderLoc=_EM_26766_XYZ_&" + 
                    "procurementMethod=_EM_26767_XYZ_&procurementMethod=OfjrziYRca&procurementMethod=_EM_26768_XYZ_&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityDepartmentId=-1997383638&procuringEntityDepartmentId=572&" + 
                    "procuringEntityGroupId=446&procuringEntityGroupId=973&" + 
                    "pageNumber=774&" + 
                    "maxTenderValue=0.04619526005434771&" + 
                    "maxAwardValue=0.18002031073439495&" + 
                    "electronicSubmission=true&" + 
                    "flagged=false&" + 
                    "monthly=false&" + 
                    "skip=1bYDI5&" + 
                    "password=_EM_26769_XYZ_&" + 
                    "class=_EM_26770_XYZ_&" + 
                    "yearFilterPagingRequest=_EM_26771_XYZ_&" + 
                    "username=etF57lduv3FA")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/location/search
    */
    @Test(timeout = 60000)
    public void test_558_postOnSearchReturns200() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/api/ocds/location/search?" + 
                    "pageNumber=717&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/orgDepartment/search
    */
    @Test(timeout = 60000)
    public void test_559_postOnSearchReturns200() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/ocds/orgDepartment/search?pageNumber=97")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/orgGroup/search
    */
    @Test(timeout = 60000)
    public void test_560_postOnSearchReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/orgGroup/search")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/orgGroup/search
    */
    @Test(timeout = 60000)
    public void test_561_postOnSearchReturns200() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/ocds/orgGroup/search")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/bidType/all
    */
    @Test(timeout = 60000)
    public void test_562_postOnAllReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/bidType/all?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/city/all
    */
    @Test(timeout = 60000)
    public void test_563_postOnAllReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/city/all?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/city/search
    */
    @Test(timeout = 60000)
    public void test_564_postOnSearchReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/city/search?" + 
                    "pageSize=610&" + 
                    "EMextraParam123=42&" + 
                    "password=M2K2iFMm0&" + 
                    "skip=YJuzDJmkdYtuIZ&" + 
                    "class=_EM_56539_XYZ_&" + 
                    "textSearchRequest=_EM_56540_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/orgDepartment/search
    */
    @Test(timeout = 60000)
    public void test_565_postOnSearchReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/orgDepartment/search?pageSize=885")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/procurementMethod/all
    */
    @Test(timeout = 60000)
    public void test_566_postOnAllReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/procurementMethod/all?EMextraParam123=_EM_19818_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/bidSelectionMethod/all
    */
    @Test(timeout = 60000)
    public void test_567_postOnAllReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/bidSelectionMethod/all?password=_EM_60902_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/bidSelectionMethod/all
    */
    @Test(timeout = 60000)
    public void test_568_postOnBidSelectionMethodAllWithQueryParamsReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/bidSelectionMethod/all?" + 
                    "password=_EM_29228_XYZ_&" + 
                    "username=CWiEADGIu")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/contrMethod/all
    */
    @Test(timeout = 60000)
    public void test_569_postOnContrMethodAllWithQueryParamsReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/contrMethod/all?" + 
                    "password=_EM_29983_XYZ_&" + 
                    "username=b7mXK3Ymv9FNnWg")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/contrMethod/all
    */
    @Test(timeout = 60000)
    public void test_570_postOnAllReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/contrMethod/all?username=mqGxPCkwAHAHEJB")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/orgDepartment/search
    */
    @Test(timeout = 60000)
    public void test_571_postOnSearchReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_11068_XYZ_")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/orgDepartment/search?" + 
                    "password=cZXK8SCd&" + 
                    "skip=_EM_39940_XYZ_&" + 
                    "textSearchRequest=mv")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/orgGroup/all
    */
    @Test(timeout = 60000)
    public void test_572_postOnOrgGroupAllWithQueryParamsReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/orgGroup/all?" + 
                    "password=_EM_30490_XYZ_&" + 
                    "username=_EM_30491_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/orgGroup/all
    */
    @Test(timeout = 60000)
    public void test_573_postOnAllReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/orgGroup/all?username=T6h5")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/city/all
    */
    @Test(timeout = 60000)
    public void test_574_postOnCityAllWithQueryParamsReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/city/all?" + 
                    "password=_EM_30709_XYZ_&" + 
                    "username=_EM_30710_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/procurementMethod/all
    */
    @Test(timeout = 60000)
    public void test_575_postOnProcurementMethodAllWithQueryParamsReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/procurementMethod/all?" + 
                    "EMextraParam123=42&" + 
                    "password=_EM_38436_XYZ_&" + 
                    "username=_EM_38437_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/bidType/all
    */
    @Test(timeout = 60000)
    public void test_576_postOnBidTypeAllWithQueryParamsReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/bidType/all?" + 
                    "password=_EM_40226_XYZ_&" + 
                    "username=6D3yHI3QNWJR39x")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/bidType/all
    */
    @Test(timeout = 60000)
    public void test_577_postOnAllReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/bidType/all?username=K1")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/city/search
    */
    @Test(timeout = 60000)
    public void test_578_postOnSearchReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/city/search?" + 
                    "pageSize=651&" + 
                    "class=bQ1RTjB70hVwvSnH&" + 
                    "textSearchRequest=vbvimgaU8W&" + 
                    "username=MIS4xV6wnW7L12Pi")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i171/releases
    */
    @Test(timeout = 60000)
    public void test_579_postOnI171ReleasesWithQueryParamsMonthlyReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/flags/i171/releases?" + 
                    "procuringEntityId=GVG0ENBPHj&procuringEntityId=EM&" + 
                    "bidSelectionMethod=00Vd3&bidSelectionMethod=dtwgnB8&bidSelectionMethod=&bidSelectionMethod=kZAFw6dhMSPGxJp&bidSelectionMethod=VLkTfUFZ9sCvr&" + 
                    "contrMethod=&" + 
                    "planningLoc=GrhmlRvTDzGdYn&planningLoc=FmK32xgOTGVBN&planningLoc=pbjjU5we6TYC17Sy&planningLoc=YnTOAcnktH&planningLoc=tqNp4jde&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityGroupId=620&procuringEntityGroupId=-1138751414&procuringEntityGroupId=572&" + 
                    "pageNumber=560&" + 
                    "minAwardValue=0.7997609000180683&" + 
                    "maxAwardValue=3.876818643008262E-4&" + 
                    "monthly=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/flags/i019/stats
    */
    @Test(timeout = 60000)
    public void test_580_postOnStatsReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/flags/i019/stats?" + 
                    "supplierId=s8srAPducq&supplierId=vB19&" + 
                    "notBidSelectionMethod=&" + 
                    "procurementMethod=DpBZeNrjonPt&procurementMethod=OgArUILI26gjJTL&procurementMethod=GMF7m1UcK&procurementMethod=v76u&" + 
                    "procuringEntityCityId=&" + 
                    "procuringEntityGroupId=&" + 
                    "month=&" + 
                    "pageSize=344&" + 
                    "minTenderValue=-0.2198694617173783&" + 
                    "maxTenderValue=0.9257516141660683&" + 
                    "minAwardValue=0.10986877552903496&" + 
                    "maxAwardValue=0.18538313555715635&" + 
                    "electronicSubmission=true&" + 
                    "password=3w_&" + 
                    "yearFilterPagingRequest=LOe8EIV2fN&" + 
                    "username=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/organization/procuringEntity/all
    */
    @Test(timeout = 60000)
    public void test_581_getOnAllReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/organization/procuringEntity/all?" + 
                    "pageSize=979&" + 
                    "textSearchRequest=tQf1B9F9biD_NX")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/organization/buyer/all
    */
    @Test(timeout = 60000)
    public void test_582_getOnAllReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/organization/buyer/all?" + 
                    "pageNumber=38&" + 
                    "pageSize=659&" + 
                    "text=rP3uRQDzPUq")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/organization/buyer/all
    */
    @Test(timeout = 60000)
    public void test_583_getOnBuyerAllReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_0_XYZ_")
                .get(baseUrlOfSut + "/api/ocds/organization/buyer/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/organization/buyer/all
    */
    @Test(timeout = 60000)
    public void test_584_getOnAllReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/organization/buyer/all?" + 
                    "password=_EM_66490_XYZ_&" + 
                    "skip=v3hBiPKHT6FUsN8&" + 
                    "username=jksR_NMUl_tvi")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/organization/buyer/all
    */
    @Test(timeout = 60000)
    public void test_585_getOnAllReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/organization/buyer/all?" + 
                    "EMextraParam123=42&" + 
                    "skip=o&" + 
                    "text=_EM_56614_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/organization/buyer/all
    */
    @Test(timeout = 60000)
    public void test_586_getOnAllReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/organization/buyer/all?" + 
                    "skip=4ZRDpkHEBg7b8&" + 
                    "class=9L0HyyK0biTZ8vE&" + 
                    "textSearchRequest=TF8GX_qYuGHr1jzE&" + 
                    "username=_EM_85943_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/organization/buyer/all
    */
    @Test(timeout = 60000)
    public void test_587_getOnBuyerAllWithQueryParamReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/organization/buyer/all?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/organization/procuringEntity/all
    */
    @Test(timeout = 60000)
    public void test_588_getOnAllReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/organization/procuringEntity/all?" + 
                    "pageNumber=142&" + 
                    "pageSize=251&" + 
                    "skip=up6wn0rpYC_Lbv9&" + 
                    "text=VYdnr40FMQ&" + 
                    "class=GH")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/organization/procuringEntity/all
    */
    @Test(timeout = 60000)
    public void test_589_getOnProcuringEntityAllReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_3_XYZ_")
                .get(baseUrlOfSut + "/api/ocds/organization/procuringEntity/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/organization/procuringEntity/all
    */
    @Test(timeout = 60000)
    public void test_590_getOnAllReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/organization/procuringEntity/all?" + 
                    "password=ow&" + 
                    "skip=s&" + 
                    "text=_EM_64974_XYZ_&" + 
                    "textSearchRequest=PZtsxXGrGo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/organization/procuringEntity/all
    */
    @Test(timeout = 60000)
    public void test_591_getOnAllReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/organization/procuringEntity/all?" + 
                    "class=_EM_69444_XYZ_&" + 
                    "username=_EM_69445_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/organization/supplier/all
    */
    @Test(timeout = 60000)
    public void test_592_getOnAllReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/organization/supplier/all?" + 
                    "password=g&" + 
                    "text=RMsR&" + 
                    "textSearchRequest=S_oiflt&" + 
                    "username=vS")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/organization/supplier/all
    */
    @Test(timeout = 60000)
    public void test_593_getOnSupplierAllWithQueryParamsEmptyUsernameReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/organization/supplier/all?" + 
                    "password=_EM_87339_XYZ_&" + 
                    "username=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/organization/supplier/all
    */
    @Test(timeout = 60000)
    public void test_594_getOnAllReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ocds/organization/supplier/all?" + 
                    "EMextraParam123=_EM_5_XYZ_&" + 
                    "textSearchRequest=uY4vCit_LFKJA")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/organization/supplier/all
    */
    @Test(timeout = 60000)
    public void test_595_getOnAllReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .get(baseUrlOfSut + "/api/ocds/organization/supplier/all?" + 
                    "skip=UieVUtjedSrM&" + 
                    "text=djjaKPC&" + 
                    "class=_EM_60461_XYZ_&" + 
                    "textSearchRequest=2kCHaLaZlamJlfv")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ocds/organization/supplier/all
    */
    @Test(timeout = 60000)
    public void test_596_getOnSupplierAllWithQueryParamReturnsEmptyList() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_user1)
                .get(baseUrlOfSut + "/api/ocds/organization/supplier/all?EMextraParam123=_EM_17797_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/organization/buyer/all
    */
    @Test(timeout = 60000)
    public void test_597_postOnAllReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/organization/buyer/all?" + 
                    "password=iWTW2ySzSi&" + 
                    "pageNumber=588&" + 
                    "pageSize=312&" + 
                    "text=IKqHQbWmnwVxOq6P&" + 
                    "textSearchRequest=wHf1QjGSX0QyN_&" + 
                    "username=7eofCHVyM3Hg")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/organization/supplier/all
    */
    @Test(timeout = 60000)
    public void test_598_postOnAllReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/organization/supplier/all?" + 
                    "text=RHJQ&" + 
                    "class=jxknS9UJ0Qwp&" + 
                    "textSearchRequest=tQf1B9F9biD_NX&" + 
                    "username=f")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/organization/supplier/all
    */
    @Test(timeout = 60000)
    public void test_599_postOnAllReturns200() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/ocds/organization/supplier/all?class=_EM_59615_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/organization/supplier/all
    */
    @Test(timeout = 60000)
    public void test_600_postOnAllReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/organization/supplier/all?" + 
                    "password=s2BnS3&" + 
                    "skip=Jh3kHd5mRf6X&" + 
                    "class=PMqS3&" + 
                    "username=TG6PgJfWti0")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/organization/supplier/all
    */
    @Test(timeout = 60000)
    public void test_601_postOnAllReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/organization/supplier/all?skip=_EM_67465_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/organization/buyer/all
    */
    @Test(timeout = 60000)
    public void test_602_postOnAllReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/organization/buyer/all?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/organization/supplier/all
    */
    @Test(timeout = 60000)
    public void test_603_postOnAllReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/organization/supplier/all?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/organization/buyer/all
    */
    @Test(timeout = 60000)
    public void test_604_postOnBuyerAllReturns200() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/ocds/organization/buyer/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/organization/buyer/all
    */
    @Test(timeout = 60000)
    public void test_605_postOnAllReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_10584_XYZ_")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/organization/buyer/all?" + 
                    "password=703wkWGnIV&" + 
                    "skip=_EM_28305_XYZ_&" + 
                    "text=_EM_28306_XYZ_&" + 
                    "textSearchRequest=pSQsYa_BMWZZ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/organization/buyer/all
    */
    @Test(timeout = 60000)
    public void test_606_postOnAllReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_10584_XYZ_")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/organization/buyer/all?" + 
                    "EMextraParam123=_EM_10583_XYZ_&" + 
                    "skip=tlIkJhV&" + 
                    "text=FIwTss&" + 
                    "class=CFS7hhyv0aZTILGj&" + 
                    "textSearchRequest=9Zg&" + 
                    "username=DnQLa")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/organization/procuringEntity/all
    */
    @Test(timeout = 60000)
    public void test_607_postOnAllReturns200() throws Exception {
        
        final Map<String,String> cookies_user1 = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=user1&password=password")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_user1)
                .post(baseUrlOfSut + "/api/ocds/organization/procuringEntity/all?" + 
                    "skip=WKYmJaRsGQu1L2W&" + 
                    "text=xbmoI&" + 
                    "class=bx8IcZf&" + 
                    "username=_EM_53395_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/organization/procuringEntity/all
    */
    @Test(timeout = 60000)
    public void test_608_postOnAllReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/organization/procuringEntity/all?EMextraParam123=_EM_10587_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/organization/procuringEntity/all
    */
    @Test(timeout = 60000)
    public void test_609_postOnAllReturns200() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/api/ocds/organization/procuringEntity/all?EMextraParam123=_EM_1618_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/organization/buyer/all
    */
    @Test(timeout = 60000)
    public void test_610_postOnAllReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/organization/buyer/all?EMextraParam123=_EM_10583_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/ocds/organization/procuringEntity/all
    */
    @Test(timeout = 60000)
    public void test_611_postOnAllReturns200() throws Exception {
        
        final Map<String,String> cookies_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=admin")
            .post(baseUrlOfSut + "/login")
            .then().extract().cookies();
            
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ADMIN)
                .post(baseUrlOfSut + "/api/ocds/organization/procuringEntity/all?" + 
                    "password=_EM_83604_XYZ_&" + 
                    "class=_EM_83606_XYZ_&" + 
                    "textSearchRequest=_EM_47877_XYZ_&" + 
                    "username=_EM_47878_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }


}
