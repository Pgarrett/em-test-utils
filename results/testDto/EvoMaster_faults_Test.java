/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  dto.*;
import  java.util.ArrayList;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-09-17T22:56:40.922-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 5 tests
 * <br>
*  Covered targets: 32
 * <br>
*  Used time: 0h 1m 9s
 * <br>
*  Needed budget for current results: 50%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static String baseUrlOfSut = "http://localhost:5000";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    /**
    * Calls:
    * (200) POST:/boolean
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_0_postOnBooleanReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .contentType("application/json")
                .body(" true ")
                .post(baseUrlOfSut + "/boolean")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'", equalTo(true))
                .body("'message'", containsString("Received boolean"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/integer-no-format
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_1_postOnInteger_no_formatReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .contentType("application/json")
                .body(" 986 ")
                .post(baseUrlOfSut + "/integer-no-format")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'", numberMatches(986.0))
                .body("'message'", containsString("Received integer"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/integer
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   42
    */
    @Test(timeout = 60000)
    public void test_2_postOnIntegerReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .contentType("application/json")
                .body(" 42 ")
                .post(baseUrlOfSut + "/integer")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'", numberMatches(42.0))
                .body("'message'", containsString("Received integer"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/number
    * Found 1 potential fault of type-code 101
    * Using 1 example:
    *   1234.56
    */
    @Test(timeout = 60000)
    public void test_3_postOnNumberReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.unexpected. No response body is expected but one was found.
        given().accept("*/*")
                .contentType("application/json")
                .body(" 1234.56 ")
                .post(baseUrlOfSut + "/number")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'", numberMatches(1234.56))
                .body("'message'", containsString("Received number"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/array-of-string
    * Found 1 potential fault of type-code 101
    */
    @Test(timeout = 60000)
    public void test_4_postOnArray_of_stringReturnsMismatchResponseWithSchema() throws Exception {
        
        // Fault101. Received A Response From API With A Structure/Data That Is Not Matching Its Schema. Type: validation.response.body.schema.type. [Path '/data/0'] Instance type (string) does not match any allowed primitive type (allowed: ["object"])
        List<String> list_String_1 = new ArrayList<String>();
        list_String_1.add("6vZI6J79r4ZO0wt2");
        
        given().accept("application/json")
                .contentType("application/json")
                .body(list_String_1)
                .post(baseUrlOfSut + "/array-of-string")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.size()", equalTo(1))
                .body("'data'", hasItems("6vZI6J79r4ZO0wt2"))
                .body("'message'", containsString("Received array of strings"));
    }


}
